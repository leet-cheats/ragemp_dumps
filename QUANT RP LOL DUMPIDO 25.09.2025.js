{let a = function scriptEntryPoint(mp) {
let dropBlip = null
let blinkInterval = null

class Activity {
    constructor() {
        // this.Label = null
        this.Obj = null
        this.Container = null
        this.Container_DoorL = null
        this.Container_DoorR = null
        // this.Shape = null
        this.Parachute = null
        // this.TimeToOpen = 1
    }

    getRandomInteger(min, max) {
        let rand = min - 0.5 + Math.random() * (max - min + 1)
        rand = Math.round(rand);
        return rand;
    }

    /*getTimeFromSecs(secs) {
        let minutes = Math.trunc(secs / 60);
        let seconds = secs % 60;
        return (minutes < 10 ? "0" + minutes : minutes) + ':' + (seconds < 10 ? "0" + seconds : seconds);
    }*/

    stopAirDrop() {
        if (blinkInterval != null) {
            clearInterval(blinkInterval)
            blinkInterval = null
        }

        if (dropBlip != null) {
            if (isEntityExists(dropBlip)) dropBlip.destroy()
            dropBlip = null
        }

        if (isEntityExists(this.Container)) this.Container.destroy()
        if (isEntityExists(this.Container_DoorL)) this.Container_DoorL.destroy()
        if (isEntityExists(this.Container_DoorR)) this.Container_DoorR.destroy()
        if (isEntityExists(this.Parachute)) this.Parachute.destroy()
        if (isEntityExists(this.Label)) this.Label.destroy()
    }

    async startAirDrop(dropPosition, startedTime, doorState) {
        try {
            this.setDropBlipBlink()

            let angle = this.getRandomInteger(0, 360)

            let start = this.GetPlaneStartPosition(dropPosition, angle)
            let finish = this.GetPlaneFinishPosition(dropPosition, angle)

            this.Obj = mp.objects.new(mp.game.joaat("an225"), new mp.Vector3(start.x, start.y, start.z + 250))

            this.Container = mp.objects.new(mp.game.joaat("prop_container_03a"), new mp.Vector3(start.x, start.y, start.z + 1000), {
                rotation: new mp.Vector3(0, 0, 180)
            })

            this.Parachute = mp.objects.new(mp.game.joaat("prop_v_parachute"), new mp.Vector3(start.x, start.y, start.z + 1001))

            this.Destinantion = finish

            this.Obj.rotation = new mp.Vector3(0, 0, angle)

            let distanceX = Math.abs(this.Destinantion.x - this.Obj.position.x)
            let distanceY = Math.abs(this.Destinantion.y - this.Obj.position.y)

            let stepX = distanceX / 4000
            let stepY = distanceY / 4000

            let ctStepZ = 250.0 / 2000.0

            let i = 0
            let dropping = false

            while (i < 4000) {
                let x = this.Obj.position.x
                let y = this.Obj.position.y
                let z = this.Obj.position.z

                if (this.Destinantion.x > this.Obj.position.x) x += stepX
                else x -= stepX

                if (this.Destinantion.y > this.Obj.position.y) y += stepY
                else y -= stepY

                this.Obj.position = new mp.Vector3(x, y, z)

                if (!dropping && i == 2000) {
                    dropping = true
                    this.Container.position = new mp.Vector3(dropPosition.x, dropPosition.y, dropPosition.z + 250)
                    this.Parachute.position = new mp.Vector3(dropPosition.x, dropPosition.y, dropPosition.z + 257.5)
                }

                if (dropping) {
                    let ctZ = this.Container.position.z
                    let ctX = this.Container.position.x
                    let ctY = this.Container.position.y

                    ctZ -= ctStepZ

                    this.Container.position = new mp.Vector3(ctX, ctY, ctZ)
                    this.Parachute.position = new mp.Vector3(ctX, ctY, ctZ + 7.5)
                }

                if (startedTime && (startedTime == "finish" || startedTime >= i)) await mp.game.waitAsync(0)
                else await sleep(25)

                i++
            }

            if (isEntityExists(this.Container)) this.Container.destroy()
            if (isEntityExists(this.Obj)) this.Obj.destroy()

            this.CreateContainer(dropPosition)

            this.Parachute.position = new mp.Vector3(dropPosition.x, dropPosition.y, dropPosition.z + 7.5)

            mp.game.fire.addExplosion(dropPosition.x, dropPosition.y, dropPosition.z + 6, 22, 0, true, false, 1)

            setTimeout(() => isEntityExists(this.Parachute) ? this.Parachute.destroy() : null, 52 * 1000)

            if (doorState) this.openContainerDoors()
        } catch (err) {
            chatDebug(`AirDrop: ${err}`)
        }
    }

    CreateContainer(dropPosition) {
        this.Container = mp.objects.new(mp.game.joaat("prop_container_03_ld"), dropPosition, {
            rotation: new mp.Vector3(0, 0, 180)
        })

        this.Container_DoorL = mp.objects.new(mp.game.joaat("prop_cntrdoor_ld_l"), new mp.Vector3(dropPosition.x + 1.3, dropPosition.y + 3.40, dropPosition.z + 1.4), {
            rotation: new mp.Vector3(0, 0, 180)
        })

        this.Container_DoorR = mp.objects.new(mp.game.joaat("prop_cntrdoor_ld_r"), new mp.Vector3(dropPosition.x + -1.3, dropPosition.y + 3.40, dropPosition.z + 1.4), {
            rotation: new mp.Vector3(0, 0, -180)
        })
    }

    GetPlaneFinishPosition(position, Z) {
        let offset = 5000.0
        let longVeh = 2.5

        let rotation = Z
        let vehlong = (longVeh / 2.5) - offset

        let q = position.x
        let w = position.y
        let angle = Math.PI * rotation / 180.0

        q += (vehlong * -Math.sin(-angle))
        w += (vehlong * -Math.cos(-angle))

        return new mp.Vector3(q, w, position.z)
    }


    GetPlaneStartPosition(position, Z) {
        let offset = 5000.0
        let longVeh = 2.5

        let rotation = Z
        let vehlong = (longVeh / 2.5) + offset

        let q = position.x
        let w = position.y
        let angle = Math.PI * rotation / 180.0

        q += (vehlong * -Math.sin(-angle))
        w += (vehlong * -Math.cos(-angle))

        return new mp.Vector3(q, w, position.z)
    }

    setDropBlipBlink() {
        if (dropBlip) {
            blinkInterval = setInterval(() => {
                if (!dropBlip || !isEntityExists(dropBlip)) return clearInterval(blinkInterval)

                if (dropBlip.getAlpha() == 120) dropBlip.setAlpha(0)
                else dropBlip.setAlpha(120)
            }, 500)
        }
    }

    showDropblip(x, y, z) {
        dropBlip = mp.blips.new(9, new mp.Vector3(x, y, z), {
            scale: 1,
            color: 1,
            alpha: 120,
            shortRange: false,
            radius: 250,
        })
    }

    openContainerDoors() {
        if (this.openContainerDoorsTimer) return
        // if (isEntityExists(this.Shape)) this.Shape.destroy()

        let i = 0
        this.openContainerDoorsTimer = setInterval(() => {
            i++
            if (i >= 60) {
                clearInterval(this.openContainerDoorsTimer)
                delete this.openContainerDoorsTimer
                return 
            }
            if (!isEntityExists(this.Container_DoorL) || !isEntityExists(this.Container_DoorR)) {
                clearInterval(this.openContainerDoorsTimer)
                delete this.openContainerDoorsTimer
                return this.stopAirDrop()
            }

            this.Container_DoorL.rotation = new mp.Vector3(this.Container_DoorL.rotation.x, this.Container_DoorL.rotation.y, this.Container_DoorL.rotation.z - 2)
            this.Container_DoorR.rotation = new mp.Vector3(this.Container_DoorR.rotation.x, this.Container_DoorR.rotation.y, this.Container_DoorR.rotation.z - -2)
        }, 1)
    }
}

const params = new Activity

mp.events.add('openContainerDoors', () => params.openContainerDoors())

mp.events.add('startAirDrop', (dropPosition, startedTime, doorState) => params.startAirDrop(dropPosition, startedTime, doorState))

mp.events.add('stopAirDrop', () => params.stopAirDrop())

mp.events.add('showDropblip', (x, y, z) => params.showDropblip(x, y, z))
}; a; }
{let a = function scriptEntryPoint(mp) {
let userScore

function getStat(statistics) {
    statistics.sort((a, b) => b.score - a.score);
    statistics = statistics.slice(0, 3);
    let data = []
    for (let i = 0; i < 3; i++) {
        data.push({ text: [`${i + 1}`, `${statistics[i] ? statistics[i].tag : "Відсутнє"}`, `${statistics[i] ? statistics[i].score : ""}`], color: 'black' })
    }
    return data
}

mp.events.add("updateTimerBarsGraffiti", (data, score) => {
    if (data) {
        data = getStat(data)
        data.push({ text: ['', 'Рахунок', `${score}`], color: 'green' })
    }
    if (mp.activeRating == "graffiti" || (userScore !== score)) {
        browserMenu.call(`hudControl`, `setRatingData`, data ? data : false);
        mp.activeRating = "graffiti"
    }
    userScore = score
})

mp.events.add("updateGraffitiTimerBarsTimer", (time) => {
    browserMenu.call(`hudControl`, `setRatingDataTimer`, time);
});

}; a; }
{let a = function scriptEntryPoint(mp) {
let userScore

function getStat(statistics) {
    statistics.sort((a, b) => b.score - a.score);
    statistics = statistics.slice(0, 3);
    let data = []
    for (let i = 0; i < 3; i++) {
        data.push({ text: [`${i + 1}`, `${statistics[i] ? statistics[i].tag : "Відсутнє"}`, `${statistics[i] ? statistics[i].score : ""}`], color: 'black' })
    }
    return data
}

mp.events.add("updateTimerBarsFamiliesCapture", (data, score) => {
    if (data) {
        data = getStat(data)
        data.push({ text: ['', 'Вбивства', `${score}`], color: 'green' })
    }
    if (mp.activeRating == "familiesCapture" || (userScore !== score)) {
        browserMenu.call(`hudControl`, `setRatingData`, data ? data : false);
        mp.activeRating = "familiesCapture"
    }
    userScore = score
})

mp.events.add("updateFamiliesCaptureTimerBarsTimer", (time) => {
    browserMenu.call(`hudControl`, `setRatingDataTimer`, time);
});

}; a; }
{let a = function scriptEntryPoint(mp) {
const instructionButtonsDrawler = require("gamemode/scripts/helpers/instructionButtonsDrawler.js");

const CONTROLS = {
    "dig": {
        label: "PROSP_DIG",
        control: 38,
        input: "INPUT_ATTACK"
    },
    "dig_hint": {
        label: "PROSP_DIG_HINT",
        control: 24,
        input: "INPUT_ATTACK"
    },
    "stop": {
        label: "PROSP_STOP",
        control: 75,
        input: "INPUT_VEH_EXIT"
    },
    "audio_on": {
        label: "PROSP_AUDIOON",
        control: 140,
        input: "INPUT_MELEE_ATTACK_LIGHT"
    },
    "audio_off": {
        label: "PROSP_AUDIOOFF",
        control: 140,
        input: "INPUT_MELEE_ATTACK_LIGHT"
    },
}

let positions

mp.events.add("setProspectingPositions", (data) => {
    positions = data
})

mp.events.add("removeProspecting", (idx) => {
    if (positions) positions[idx] = null
})

mp.events.add("updateProspecting", (idx, position) => {
    if (positions) positions[idx] = position
})

mp.events.add("useProspecting", (data) => {
    if (data) instructionButtonsDrawler.init(), packetSended = false
    else {
        instructionButtonsDrawler.dispose()
        canDig = null
    }
})

let frametime = 0
let circleScale = 0.0
let circleR = 150, circleG = 255, circleB = 150, circleA = 255
let _circleR = 150, _circleG = 255, _circleB = 150
let circleScaleMultiplier = 1.5
let renderCircle = false

function getClosestTarget(closepos) {
    let closest, index, closestdist

    positions.forEach((pos, idx) => {
        if (!pos) return

        let dist = mp.game.gameplay.getDistanceBetweenCoords(pos.x, pos.y, pos.z, closepos.x, closepos.y, closepos.z, false)

        if (!closest || closestdist > dist) {
            closestdist = dist
            index = idx
            closest = pos
        }
    })

    return [closest || new mp.Vector3(0.0, 0.0, 0.0), closestdist, index]
}


let scannerState = "none"
let scannerFrametime = 0.0
let scannerScale = 0.0
let scannerAudio = true
let canDig = null
let packetSended = false

mp.events.add("render", () => {
    if (mp.players.local.vehicle || packetSended) return 
    if (mp.players.local.variable_attachedObject == 'w_am_digiscanner_01') {
        if (!instructionButtonsDrawler.scaleform) return chatDebug("Error #2")
        if (!instructionButtonsDrawler.scaleform.handle) return chatDebug("Error #3")
        if (!positions) return mp.events.callRemote("useProspecting"), packetSended = true
        if (!mp.game.graphics.hasScaleformMovieLoaded(instructionButtonsDrawler.scaleform.handle)) return chatDebug("Error #6")

        if (!mp.players.local.isPlayingAnim("mini@golfai", "wood_idle_a", 3)) {
            mp.events.callRemote("useProspecting")
            rpc.callBrowser(browserMenu, "nError", `Втрачено контроль над металошукачем!`)
            packetSended = true
            return
        }
        
        let forward = mp.players.local.getForwardVector()
        let pos = mp.players.local.position.add(new mp.Vector3(forward.x * 0.7, forward.y * 0.7, -0.90))
        let [target, dist, index] = getClosestTarget(pos)

        if (target) {
            if (dist < 0.70) {
                if (!canDig) {
                    canDig = true

                    const mainInstructionButtons = [
                        { control: CONTROLS["stop"]["control"], labelText: "Вийти" },
                        { control: CONTROLS["audio_on"]["control"], labelText: "Вкл/Вим. звук" },
                        { control: CONTROLS["dig"]["control"], labelText: "Копати" },
                    ];

                    instructionButtonsDrawler.setButtons(...mainInstructionButtons);
                    instructionButtonsDrawler.setActive(true);
                }

                if (canDig && mp.game.controls.isDisabledControlJustPressed(0, CONTROLS["dig"]["control"])) {
                    mp.events.callRemote("digProspecting", index)
                }
            }
            else {
                if (canDig || canDig === null) {
                    const mainInstructionButtons = [
                        { control: CONTROLS["stop"]["control"], labelText: "Вийти" },
                        { control: CONTROLS["audio_on"]["control"], labelText: "Вкл/Вим. звук" },
                    ];

                    instructionButtonsDrawler.setButtons(...mainInstructionButtons);
                    instructionButtonsDrawler.setActive(true);

                    canDig = false
                }
            }

            if (dist < 0.70) {
                circleScale = 0.0
                scannerScale = 0.0
                scannerState = "ultra"
            } else if (dist < 1.0) {
                scannerFrametime = 0.35
                scannerScale = 4.50
                scannerState = "fast"
            } else if (dist < 2.0) {
                scannerFrametime = 0.4
                scannerScale = 3.75
                scannerState = "fast"
            } else if (dist < 3.0) {
                scannerFrametime = 0.425
                scannerScale = 3.00
                scannerState = "fast"
            } else if (dist < 5.0) {
                scannerFrametime = 0.45
                scannerScale = 2.50
                scannerState = "fast"
            } else if (dist < 7.0) {
                scannerFrametime = 0.5
                scannerScale = 1.75
                scannerState = "fast"
            } else if (dist < 9.0) {
                scannerFrametime = 0.75
                scannerScale = 1.25
                scannerState = "medium"
            } else if (dist < 12.0) {
                scannerFrametime = 1.0
                scannerScale = 1.00
                scannerState = "medium"
            } else if (dist < 15.0) {
                scannerFrametime = 1.25
                scannerScale = 0.875
                scannerState = "medium"
            } else if (dist < 20.0) {
                scannerFrametime = 1.5
                scannerScale = 0.75
                scannerState = "slow"
            } else if (dist < 40.0) {
                scannerFrametime = 2.0
                scannerScale = 0.5
                scannerState = "slow"
            } else {
                circleScale = 0.0
                scannerScale = 0.0
                scannerState = "none"
            }
        }
        else {
            circleScale = 0.0
            scannerScale = 0.0
            scannerState = "none"
        }

        if (mp.game.controls.isDisabledControlJustPressed(0, CONTROLS["stop"]["control"])) {
            mp.events.callRemote("useProspecting")
            packetSended = true
        }

        if (mp.game.controls.isDisabledControlJustPressed(0, CONTROLS["audio_on"]["control"])) {
            mp.game.audio.playSoundFrontend(-1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", false)
            scannerAudio = !scannerAudio
        }

        if (scannerState == "none") {
            renderCircle = false
            circleR = 150, circleG = 255, circleB = 150
            _circleR = 150, _circleG = 255, _circleB = 150
        } else if (scannerState == "slow") {
            renderCircle = true
            circleScale = circleScale + scannerScale
            circleR = 150, circleG = 255, circleB = 150
            if (frametime > scannerFrametime) {
                frametime = 0.0
            }
            // circleSize = (circleScale % 100) / 100
            // circleA = math.floor(255 - ((circleScale % 100) / 100) * 255)
            // mp.game.graphics.drawMarker(1, pos.x, pos.y, pos.z, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, circleSize, circleSize, 0.1, circleR, circleG, circleB, circleA)
        } else if (scannerState == "medium") {
            renderCircle = true
            circleScale = circleScale + scannerScale
            circleR = 255, circleG = 255, circleB = 150
            if (frametime > scannerFrametime) {
                frametime = 0.0
            }
            // circleSize = (circleScale % 100) / 100
            // circleA = math.floor(255 - ((circleScale % 100) / 100) * 255)
            // mp.game.graphics.drawMarker(1, pos.x, pos.y, pos.z, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, circleSize, circleSize, 0.1, circleR, circleG, circleB, circleA)
        } else if (scannerState == "fast") {
            renderCircle = true
            circleScale = circleScale + scannerScale
            circleR = 255, circleG = 150, circleB = 150
            if (frametime > scannerFrametime) {
                frametime = 0.0
            }
        } else if (scannerState == "ultra") {
            renderCircle = false
            circleScale = circleScale + scannerScale
            circleR = 255, circleG = 100, circleB = 100
            if (frametime > 0.125) {
                frametime = 0.0
                if (scannerAudio) mp.game.audio.playSoundFrontend(-1, "ATM_WINDOW", "HUD_FRONTEND_DEFAULT_SOUNDSET", false)
                // mp.game.audio.playSoundFrontend(-1, "TIMER_STOP", "HUD_MINI_GAME_SOUNDSET", false)
                if (scannerAudio) mp.game.audio.playSoundFrontend(-1, "BOATS_PLANES_HELIS_BOOM", "MP_LOBBY_SOUNDS", false)
            }
            // Draw the triple "found it" marker
            circleA = 150
            circleSize = 1.20 * circleScaleMultiplier
            mp.game.graphics.drawMarker(1, pos.x, pos.y, pos.z, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, circleSize, circleSize, 0.2, circleR, circleG, circleB, circleA, false, true, 2, true, null, null, false)
            mp.game.graphics.drawMarker(6, pos.x, pos.y, pos.z, 0.0, 0.0, 0.0, 270.0, 0.0, 0.0, circleSize, 0.1, circleSize, circleR, circleG, circleB, circleA, false, true, 2, true, null, null, false)
            circleA = 200
            circleSize = 0.70 * circleScaleMultiplier
            mp.game.graphics.drawMarker(1, pos.x, pos.y, pos.z, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, circleSize, circleSize, 0.2, circleR, circleG, circleB, circleA, false, true, 2, true, null, null, false)
            mp.game.graphics.drawMarker(6, pos.x, pos.y, pos.z, 0.0, 0.0, 0.0, 270.0, 0.0, 0.0, circleSize, 0.1, circleSize, circleR, circleG, circleB, circleA, false, true, 2, true, null, null, false)
            circleA = 255
            circleSize = 0.20 * circleScaleMultiplier
            mp.game.graphics.drawMarker(1, pos.x, pos.y, pos.z, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, circleSize, circleSize, 0.2, circleR, circleG, circleB, circleA, false, true, 2, true, null, null, false)
            mp.game.graphics.drawMarker(6, pos.x, pos.y, pos.z, 0.0, 0.0, 0.0, 270.0, 0.0, 0.0, circleSize, 0.1, circleSize, circleR, circleG, circleB, circleA, false, true, 2, true, null, null, false)
        }

        if (renderCircle) {
            if (circleScale > 100) {
                while (circleScale > 100) {
                    circleScale = circleScale - 100
                }
                _circleR = circleR, _circleG = circleG, _circleB = circleB
                // mp.game.audio.playSoundFrontend(-1, "BOATS_PLANES_HELIS_BOOM", "MP_LOBBY_SOUNDS", false)
                if (scannerAudio) mp.game.audio.playSoundFrontend(-1, "ATM_WINDOW", "HUD_FRONTEND_DEFAULT_SOUNDSET", false)
            }
            circleSize = ((circleScale % 100) / 100) * circleScaleMultiplier
            circleA = Math.floor(255 - ((circleScale % 100) / 100) * 155)
            mp.game.graphics.drawMarker(1, pos.x, pos.y, pos.z, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, circleSize, circleSize, 0.2, _circleR, _circleG, _circleB, circleA, false, true, 2, true, null, null, false)
            mp.game.graphics.drawMarker(6, pos.x, pos.y, pos.z, 0.0, 0.0, 0.0, 270.0, 0.0, 0.0, circleSize, 0.1, circleSize, _circleR, _circleG, _circleB, circleA, false, true, 2, true, null, null, false)
        }

        frametime = frametime + mp.game.invoke("0xFC8202EFC642E6F2")
    }
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("addJudgmentNightExplosion", (x, y, z) => {
    mp.game.fire.addExplosion(x, y, z, 2, 20, false, false, 0);
    mp.game.audio.playSoundFromCoord(-1, "Jet_Explosions", x, y, z, "exile_1", false, 0, false);
})
}; a; }
{let a = function scriptEntryPoint(mp) {
let createdNames = []

mp.events.add("joinEasterCarrot", (data) => {
    if (data) {
        data.forEach((position, idx) => {
            mp.events.call("createDynamicObjectsByParams", { model: "prop_veg_carrot_b", position: new mp.Vector3(position.x, position.y, position.z - 0.3), uniqName: `easterCarrot${idx}`, dimension: 3000 + mp.players.local.remoteId })
            mp.events.call("createDynamicColshapesByParams", { uniqName: `easterCarrot${idx}`, position: position, dimension: 3000 + mp.players.local.remoteId, scale: 1, params: { data: { enterColshape: true }, catchEvent: "easterCarrot.take", catchEventParams: { idx: idx } } })
            createdNames.push(`easterCarrot${idx}`)
        })
        mp.events.call("createDynamicMarkersByParams", { uniqName: `easterCarrot`, position: new mp.Vector3(1915.82, 4835.26, 45.07), id: 28, scale: 100, dimension: 3000 + mp.players.local.remoteId })
    }
    else {
        createdNames.forEach((name) => {
            mp.events.call("removeDynamicObjectsByUniqName", name)
            mp.events.call("removeDynamicColshapesByUniqName", name)
        })
        mp.events.call("removeDynamicMarkersByUniqName", `easterCarrot`)
        createdNames = []
    }
})
}; a; }
{let a = function scriptEntryPoint(mp) {
let currentAimingPed = null
let callRemoteTimeout = Date.now()
let recruitingDealerStarted = null

mp.events.add("setRecruitingDealer", async (params) => {
    if (!params) return stopRobbery()
    if (!currentAimingPed) return

    recruitingDealerStarted = Date.now()
    currentAimingPed.clearTasksImmediately()

    if (await mp.game.streaming.loadAnimDict("missminuteman_1ig_2")) currentAimingPed.taskPlayAnim("missminuteman_1ig_2", 'handsup_base', 8, 0, -1, 49, 0, false, false, false)
})

function stopRobbery() {
    if (currentAimingPed && recruitingDealerStarted) currentAimingPed.clearTasksImmediately()
    currentAimingPed = null
    recruitingDealerStarted = null
}

const progress = 50
const FRAME_WIDTH = 0.08
const FRAME_HEIGHT = 0.012
const INNER_PADDING = 0.002
const DURATION = 60000

function render() {
    if (currentAimingPed) {
        if (!mp.game.player.getEntityIsFreeAimingAt() || mp.game.player.getEntityIsFreeAimingAt() != currentAimingPed.handle || vdist(currentAimingPed.position, mp.players.local.position) > 4) {
            mp.events.callRemote("playerStopRecruitingDealer")
            stopRobbery()
        }

        if (recruitingDealerStarted) {
            const elapsed = Date.now() - recruitingDealerStarted
            const progress = Math.min(elapsed / DURATION, 1)
            const screenPos = mp.game.graphics.world3dToScreen2d(currentAimingPed.position.x, currentAimingPed.position.y, currentAimingPed.position.z + 1)

            if (screenPos) {
                mp.game.graphics.drawRect(
                    screenPos.x,
                    screenPos.y,
                    FRAME_WIDTH,
                    FRAME_HEIGHT,
                    0, 0, 0, 255
                )

                const innerWidth = FRAME_WIDTH - INNER_PADDING * 2
                const innerHeight = FRAME_HEIGHT - INNER_PADDING * 2
                const fillWidth = progress * innerWidth

                mp.game.graphics.drawRect(
                    screenPos.x - innerWidth / 2 + fillWidth / 2,
                    screenPos.y,
                    fillWidth,
                    innerHeight,
                    255, 255, 255, 255
                )
            }
        }
    }

    if (mp.bindBlocker() || !mp.game.player.getEntityIsFreeAimingAt()) return
    let entity = mp.game.player.getEntityIsFreeAimingAt()
    let ped = undefined
    mp.peds.forEach(p => {
        if (p.handle == entity) {
            ped = p
        }
    })
    if (ped && ped.getVariable("familyDealersId") && !currentAimingPed) {
        if (vdist(ped.position, mp.players.local.position) > 4) return
        if (Date.now() - callRemoteTimeout > 4 * 1000) {
            callRemoteTimeout = Date.now()
            currentAimingPed = ped
            mp.events.callRemote("playerStartRecruitingDealer", currentAimingPed.getVariable("familyDealersId"))
        }
    }
}

mp.events.add("startFamilyDealers", (data) => {
    if (data) mp.events.add("render", render)
    else mp.events.remove("render", render)
})

mp.events.add("startWarsData", (data) => {
    if (data) browserMenu.call(`wars`, `set`, data)
    else browserMenu.call(`wars`, `set`, null)
})

mp.events.add("setWarsActive", (bool) => {
    browserMenu.call(`wars`, `setActive`, bool)
})

function dirGenerator(theHeading) {
    if (typeof (theHeading) !== "undefined") {
        theHeading = theHeading / 180 * Math.PI + .5 * Math.PI;
        let dirX = -1.5 * Math.cos(theHeading);
        let dirY = -1.5 * Math.sin(theHeading);
        return [dirX, dirY];
    } else {
        return [0, 0];
    }
}

let loadPoints = null
let currentPosition = false
const scale = [4, 6.5, 1.5]

function renderLoadPoints() {
    if (!mp.players.local.vehicle) {
        if (currentPosition) currentPosition = false
        return
    }

    loadPoints?.forEach((pos) => {
        if (vdist(pos.position, mp.players.local.position) < 15) {
            let dist = vdist(pos.position, mp.players.local.vehicle.position)
            let rotv = mp.players.local.vehicle.getHeading()
            let rotz = pos.heading - rotv

            if (dist < scale[0]) {
                pos.color = [255, 0, 0, 125]

                if (rotz > -5 && rotz < 5) {
                    pos.color = [4, 36, 217, 125]

                    if (dist < 1.50 && mp.players.local.vehicle.getSpeed() < 1) {
                        pos.color = [0, 255, 0, 125]
                        if (currentPosition != pos) {
                            mp.events.call("promptSecondary.show", "Натисни <span>E</span> для взаємодії")
                            currentPosition = pos
                        }
                    } else if (currentPosition == pos) {
                        currentPosition = false
                        // mp.events.callRemote("leaveFamilyDealersLoadPoints")
                        mp.events.call("promptSecondary.hide")
                    }
                } else if (currentPosition == pos) {
                    currentPosition = false
                    // mp.events.callRemote("leaveFamilyDealersLoadPoints")
                    mp.events.call("promptSecondary.hide")
                }
            }
            else {
                pos.color = [255, 165, 0, 125]
                if (currentPosition == pos) {
                    currentPosition = false
                    // mp.events.callRemote("leaveFamilyDealersLoadPoints")
                    mp.events.call("promptSecondary.hide")
                }
            }

            for (let i = 0; i < 4; i++) {
                pos.drawColor[i] += .03 * (pos.color[i] - pos.drawColor[i]);
            }

            mp.game.graphics.drawMarker(
                43,
                pos.position.x, pos.position.y, pos.position.z - 0.8,
                0, 0, 0,
                0, 0, pos.heading,
                scale[0], scale[1], scale[2],
                parseInt(pos.drawColor[0]), parseInt(pos.drawColor[1]), parseInt(pos.drawColor[2]), parseInt(pos.drawColor[3]),
                false, false, 2,
                false, null, null, false,
            )

            mp.game.graphics.drawMarker(
                22,
                pos.position.x, pos.position.y, pos.position.z + 0.1,
                pos.dir[0], pos.dir[1], 0,
                270, 0, 0,
                1, 1, 1,
                parseInt(pos.drawColor[0]), parseInt(pos.drawColor[1]), parseInt(pos.drawColor[2]), parseInt(pos.drawColor[3]),
                false, false, 2,
                false, null, null, false,
            )
        } else if (currentPosition == pos) {
            currentPosition = false
            // mp.events.callRemote("leaveFamilyDealersLoadPoints")
            mp.events.call("promptSecondary.hide")
        }
    })
}

function normalizeHeading(heading) {
    return (heading + 360) % 360;
}

mp.events.add("setFamilyDealersLoadPoints", (data) => {
    loadPoints?.forEach((item, idx) => {
        mp.events.call("removeDynamicBlipsByUniqName", `familyDealersLoadPoint${idx}`)
    })

    if (data) {
        data.forEach(item => {
            item.heading = normalizeHeading(item.heading)
            item.dir = dirGenerator(item.heading)
            item.color = [255, 165, 0, 125]
            item.drawColor = [0, 0, 0, 0]
        })

        if (loadPoints) loadPoints = data
        else {
            loadPoints = data
            mp.events.add("render", renderLoadPoints)
        }

        loadPoints?.forEach((item, idx) => {
            mp.events.call("createDynamicBlipsByParams", { shortRange: true, uniqName: `familyDealersLoadPoint${idx}`, scale: 1, color: 24, id: 479, position: item.position, name: "Мiсце завантаження", dimension: 0 })
        })
    }
    else {
        loadPoints = null
        mp.events.remove("render", renderLoadPoints)
    }
})

mp.keys.bindEx(0x45, false, () => {
    if (!currentPosition) return
    mp.events.callRemote("loadFamilyDealersLoadPoint", currentPosition.id)
}, "Клавіша дії");
}; a; }
{let a = function scriptEntryPoint(mp) {
 
let currentClassIndex = 0
let currentItemIndex = 0 
let currentItemVariation = 0
mp.isSelectionClothes = false
mp.events.add("client::selectionClothes", (bool) => {
    mp.isSelectionClothes = bool
    mp.events.call("setFreezePosition", bool)
})
function nameClassToComponentId(index){
    let types = [{ name: "Hats", type: "prop", id: 0},
                 { name: "Head", type: "component", id: 0 },
                 { name: "Glasses", type: "prop", id: 1 },
                 { name: "Beard", type: "component", id: 1 },
                 { name: "Ear accessories", type: "prop", id: 2 },
                 { name: "Hair", type: "component", id: 2 }, 
                 { name: "Torso", type: "component", id: 3 }, 
                 { name: "Legs", type: "component", id: 4 }, 
                 { name: "Hands", type: "component", id: 5 }, 
                 { name: "Watches", type: "prop", id: 6 }, 
                 { name: "Foot", type: "component", id: 6 }, 
                 { name: "Bracelets", type: "prop", id: 7 }, 
                 { name: "Eyes", type: "component", id: 8 }, 
                 { name: "Accessories like parachute", type: "component", id: 9 }, 
                 { name: "Masks", type: "component", id: 10 }, 
                 { name: "Auxiliary parts for torso", type: "component", id: 11 }]   
    return types[index]
}
mp.events.add("render", () => {
    if(mp.isSelectionClothes){
        mp.game.graphics.drawText(`Тип: ${nameClassToComponentId(currentClassIndex).name} (${nameClassToComponentId(currentClassIndex).type}) (${nameClassToComponentId(currentClassIndex).id}) \nID: ${currentItemIndex}\n Вариация: ${currentItemVariation}`, [0.5, 0.005], { 
            font: 7, 
            color: [255, 255, 255, 185], 
            scale: [0.8, 0.8], 
            outline: true,
            centre: true
        }); 
        if (nameClassToComponentId(currentClassIndex).type == "prop") mp.players.local.setPropIndex(nameClassToComponentId(currentClassIndex).id, currentItemIndex, currentItemVariation, true);
        else mp.players.local.setComponentVariation(nameClassToComponentId(currentClassIndex).id, currentItemIndex, currentItemVariation, 1);
    }
})

mp.keys.bindEx(107, false, () => {
    if(mp.isSelectionClothes){ 
        currentItemVariation += 1
    }
})

mp.keys.bindEx(109, false, () => {
    if(mp.isSelectionClothes){ 
        if(currentItemVariation - 1 < 0) return
        currentItemVariation -= 1
    }
})

mp.keys.bindEx(37, false, () => { //left 
    if(mp.isSelectionClothes){
        if(currentItemIndex - 1 < 0) return
        currentItemIndex -= 1
        currentItemVariation = 0
    }
});

mp.keys.bindEx(39, false, () => { //right 
    if(mp.isSelectionClothes){
        currentItemIndex += 1
        currentItemVariation = 0
    }
});

mp.keys.bindEx(38, false, () => { //up 
    if(mp.isSelectionClothes){
        if(currentClassIndex + 1 > 15 ) return
            currentClassIndex += 1
            currentItemIndex = 0
            currentItemVariation = 0
            mp.events.callRemote("server::loadPlayerClothes")
    }
});

mp.keys.bindEx(40, false, () => { //down 
    if(mp.isSelectionClothes){
        if(currentClassIndex - 1 < 0) return
            currentClassIndex -= 1
            currentItemIndex = 0  
            currentItemVariation = 0
            mp.events.callRemote("server::loadPlayerClothes")
    }
});
}; a; }
{let a = function scriptEntryPoint(mp) {

const _SET_NOTIFICATION_COLOR_NEXT = "0x39BBF623FC803EAC";
const _SET_NOTIFICATION_BACKGROUND_COLOR = "0x92F0DA1E27DB96DC";
const maxStringLength = 50;

mp.events.add("BN_Show", (message, flashing = false, textColor = -1, bgColor = -1, flashColor = [255, 255, 255, 200]) => {
    if (textColor > -1) mp.game.invoke(_SET_NOTIFICATION_COLOR_NEXT, textColor);
    if (bgColor > -1) mp.game.invoke(_SET_NOTIFICATION_BACKGROUND_COLOR, bgColor);
    if (flashing) mp.game.ui.setNotificationFlashColor(flashColor[0], flashColor[1], flashColor[2], flashColor[3]);

    mp.game.ui.setNotificationTextEntry("CELL_EMAIL_BCON");
    for (let i = 0, msgLen = message.length; i < msgLen; i += maxStringLength) mp.game.ui.addTextComponentSubstringPlayerName(message.substr(i, Math.min(maxStringLength, message.length - i)));
    mp.game.ui.drawNotification(flashing, true);
});

mp.events.add("BN_ShowWithPicture", (title, sender, message, notifPic, icon = 0, flashing = false, textColor = -1, bgColor = -1, flashColor = [255, 255, 255, 200]) => {
    if (textColor > -1) mp.game.invoke(_SET_NOTIFICATION_COLOR_NEXT, textColor);
    chatDebug(`BN_ShowWithPicture: ${message}`)
    if (bgColor > -1) mp.game.invoke(_SET_NOTIFICATION_BACKGROUND_COLOR, bgColor);
    if (flashing) mp.game.ui.setNotificationFlashColor(flashColor[0], flashColor[1], flashColor[2], flashColor[3]);

    mp.game.ui.setNotificationTextEntry("CELL_EMAIL_BCON"); 
    for (let i = 0, msgLen = message.length; i < msgLen; i += maxStringLength) mp.game.ui.addTextComponentSubstringPlayerName(message.substr(i, Math.min(maxStringLength, message.length - i)));
    mp.game.ui.setNotificationMessage(notifPic, notifPic, flashing, icon, title, sender);
    mp.game.ui.drawNotification(false, true);
});

mp.events.add("BN_ShowWithPictureCustom", (title, sender, message, notifPic, icon) => {
    browserMenu.call(`notifications-show`, title, sender, message, notifPic, icon)
});

mp.events.add("BN_ShowWithPictureCustomState", (title, icon) => {
    browserMenu.call(`notifications-state-show`, title, icon)
    mp.game.audio.playSoundFrontend(-1, "CLICK_BACK", "WEB_NAVIGATION_SOUNDS_PHONE", true);
});

mp.game.ui.notifications = {
    show: (message, flashing = false, textColor = -1, bgColor = -1, flashColor = [255, 255, 255, 200]) => mp.events.call("BN_Show", message, flashing, textColor, bgColor, flashColor),
    showWithPicture: (title, sender, message, notifPic, icon = 0, flashing = false, textColor = -1, bgColor = -1, flashColor = [77, 77, 77, 200]) => mp.events.call("BN_ShowWithPicture", title, sender, message, notifPic, icon, flashing, textColor, bgColor, flashColor)
};
}; a; }
{let a = function scriptEntryPoint(mp) {

const listMarkers = [
    { pos: new mp.Vector3(-943.544, -2121.722, 8.889) },
    { pos: new mp.Vector3(-955.382, -2143.921, 8.412) },
    { pos: new mp.Vector3(-930.531, -2185.589, 8.490) },
    { pos: new mp.Vector3(-835.676, -2281.269, 8.014) },
    { pos: new mp.Vector3(-750.886, -2365.476, 14.421) },
    { pos: new mp.Vector3(-695.587, -2367.607, 14.279) },
    { pos: new mp.Vector3(-551.940, -2202.720, 5.554) },
    { pos: new mp.Vector3(-467.727, -2155.401, 9.317) },
    { pos: new mp.Vector3(-311.272, -2161.865, 9.841) },
    { pos: new mp.Vector3(-162.446, -2182.976, 9.849) },
    { pos: new mp.Vector3(-16.486, -2130.063, 9.861) },
    { pos: new mp.Vector3(0.204, -2012.514, 11.273) },
    { pos: new mp.Vector3(-161.639, -1911.548, 24.641) },
    { pos: new mp.Vector3(-271.500, -1826.119, 27.286) },
    { pos: new mp.Vector3(-422.185, -1841.180, 19.604) },
    { pos: new mp.Vector3(-590.633, -1891.824, 28.711) },
    { pos: new mp.Vector3(-729.373, -1814.671, 27.284) },
    { pos: new mp.Vector3(-706.981, -1757.543, 31.298) },
    { pos: new mp.Vector3(-555.386, -1708.957, 37.040) },
    { pos: new mp.Vector3(-403.289, -1562.625, 37.818) },
    { pos: new mp.Vector3(-372.123, -1460.337, 29.210) },
    { pos: new mp.Vector3(-302.475, -1431.387, 30.923) },
    { pos: new mp.Vector3(-272.315, -1332.297, 30.904) },
    { pos: new mp.Vector3(-269.615, -1163.882, 22.656) },
    { pos: new mp.Vector3(-204.947, -940.987, 28.914) },
    { pos: new mp.Vector3(-219.487, -869.772, 29.449) },
    { pos: new mp.Vector3(-401.716, -832.994, 31.119) },
    { pos: new mp.Vector3(-607.672, -829.667, 25.137) },
    { pos: new mp.Vector3(-833.911, -828.811, 18.991) },
    { pos: new mp.Vector3(-856.813, -762.193, 21.458) },
    { pos: new mp.Vector3(-882.184, -655.351, 27.524) },
    { pos: new mp.Vector3(-1061.743, -746.929, 18.839) },
    { pos: new mp.Vector3(-969.175, -836.238, 15.290) },
    { pos: new mp.Vector3(-834.355, -1003.983, 13.097) },
    { pos: new mp.Vector3(-680.216, -1263.917, 10.141) },
    { pos: new mp.Vector3(-682.477, -1469.047, 10.004) },
    { pos: new mp.Vector3(-839.274, -1693.538, 18.126) },
    { pos: new mp.Vector3(-1012.220, -1869.923, 15.658) },
    { pos: new mp.Vector3(-999.646, -2117.440, 11.028) },
    { pos: new mp.Vector3(-936.845, -2134.080, 8.790) },
    { pos: new mp.Vector3(-948.568, -2104.954, 8.876) },
    { pos: new mp.Vector3(-889.206, -2042.151, 8.875) }
]
const listBoatMarkers = [
    { pos: new mp.Vector3(-794.0482788085938, -1434.5751953125, 0.2999381721019745) },
    { pos: new mp.Vector3(-874.9679565429688, -1564.5408935546875, 0.2986869812011719) },
    { pos: new mp.Vector3(-1105.946044921875, -1798.96435546875, 0.33956313133239746) },
    { pos: new mp.Vector3(-1295.6737060546875, -1980.897705078125, 0.6761718392372131) },
    { pos: new mp.Vector3(-1417.18896484375, -1804.186767578125, 0.11542913317680359) },
    { pos: new mp.Vector3(-1646.0888671875, -1573.8824462890625, 0.8714172840118408) },
    { pos: new mp.Vector3(-1899.6077880859375, -1237.2979736328125, 0.004886984825134277) },
    { pos: new mp.Vector3(-2008.1864013671875, -1008.187744140625, 0.39322876930236816) },
    { pos: new mp.Vector3(-2149.287109375, -950.1168212890625, 0.217410147190094) },
    { pos: new mp.Vector3(-2156.9267578125, -1107.428466796875, 0.7545172572135925) },
    { pos: new mp.Vector3(-1937.90087890625, -1338.5950927734375, 1.3233270645141602) },
    { pos: new mp.Vector3(-1657.3829345703125, -1631.6534423828125, 1.1491161584854126) },
    { pos: new mp.Vector3(-1403.4986572265625, -1922.333984375, 0.03677636384963989) },
    { pos: new mp.Vector3(-1295.686279296875, -1981.789794921875, 0.7215899229049683) },
    { pos: new mp.Vector3(-1118.441650390625, -1816.876220703125, 0.8597352504730225) },
    { pos: new mp.Vector3(-819.7277221679688, -1475.9808349609375, 0.31947481632232666) },
    { pos: new mp.Vector3(-712.2990112304688, -1339.4747314453125, 0.2984626591205597) }
];
const listBikeMarkers = [
    { pos: new mp.Vector3(-944.125, -2120.540, 8.877) },
    { pos: new mp.Vector3(-957.407, -2146.030, 8.339) },
    { pos: new mp.Vector3(-1015.369, -2094.706, 13.075) },
    { pos: new mp.Vector3(-1051.802, -1914.911, 12.641) },
    { pos: new mp.Vector3(-967.957, -1834.263, 19.333) },
    { pos: new mp.Vector3(-826.776, -1689.200, 17.740) },
    { pos: new mp.Vector3(-754.824, -1601.087, 13.979) },
    { pos: new mp.Vector3(-700.673, -1506.057, 11.566) },
    { pos: new mp.Vector3(-668.778, -1475.868, 10.036) },
    { pos: new mp.Vector3(-697.076, -1567.727, 17.237) },
    { pos: new mp.Vector3(-766.713, -1683.023, 28.383) },
    { pos: new mp.Vector3(-752.854, -1758.718, 28.876) },
    { pos: new mp.Vector3(-600.944, -1732.601, 37.057) },
    { pos: new mp.Vector3(-461.928, -1637.621, 38.747) },
    { pos: new mp.Vector3(-394.617, -1448.739, 38.301) },
    { pos: new mp.Vector3(-393.744, -1168.361, 36.702) },
    { pos: new mp.Vector3(-393.273, -983.072, 36.667) },
    { pos: new mp.Vector3(-392.947, -786.388, 36.821) },
    { pos: new mp.Vector3(-393.454, -693.155, 36.741) },
    { pos: new mp.Vector3(-425.309, -496.427, 33.037) },
    { pos: new mp.Vector3(-654.944, -489.259, 24.852) },
    { pos: new mp.Vector3(-868.483, -505.840, 22.146) },
    { pos: new mp.Vector3(-1022.357, -559.064, 17.854) },
    { pos: new mp.Vector3(-1170.712, -665.832, 22.503) },
    { pos: new mp.Vector3(-1065.601, -785.632, 18.928) },
    { pos: new mp.Vector3(-875.061, -931.383, 15.351) },
    { pos: new mp.Vector3(-797.950, -1069.170, 11.306) },
    { pos: new mp.Vector3(-711.063, -1214.962, 10.159) },
    { pos: new mp.Vector3(-670.367, -1457.012, 9.818) },
    { pos: new mp.Vector3(-758.282, -1596.205, 13.976) },
    { pos: new mp.Vector3(-870.709, -1725.777, 18.611) },
    { pos: new mp.Vector3(-1001.787, -1860.146, 16.859) },
    { pos: new mp.Vector3(-1068.521, -2046.981, 12.619) },
    { pos: new mp.Vector3(-942.429, -2124.176, 8.910) },
    { pos: new mp.Vector3(-890.531, -2044.607, 8.876) }
];

const listAirMarkers = [
    { pos: new mp.Vector3(1589.03173828125, 3218.617431640625, 45.756004333496094) },
    { pos: new mp.Vector3(1456.78076171875, 3189.0830078125, 56.688194274902344) },
    { pos: new mp.Vector3(1235.7667236328125, 3124.337646484375, 78.04359436035156) },
    { pos: new mp.Vector3(1081.2940673828125, 3089.23974609375, 142.62393188476562) },
    { pos: new mp.Vector3(618.3347778320312, 3034.426025390625, 280.3493957519531) },
    { pos: new mp.Vector3(-186.3468780517578, 2553.95703125, 340.2699890136719) },
    { pos: new mp.Vector3(-649.1537475585938, 2639.986572265625, 288.1523742675781) },
    { pos: new mp.Vector3(-1015.1077880859375, 2779.6875, 276.4263610839844) },
    { pos: new mp.Vector3(-1370.2630615234375, 2916.891845703125, 264.0753784179687) },
    { pos: new mp.Vector3(-1622.9671630859375, 3061.500244140625, 303.9798889160156) },
    { pos: new mp.Vector3(-1981.135009765625, 3252.109130859375, 346.7240905761719) },
    { pos: new mp.Vector3(-2425.015869140625, 3241.8291015625, 389.6986083984375) },
    { pos: new mp.Vector3(-2633.212158203125, 3116.107666015625, 417.43524169921875) },
    { pos: new mp.Vector3(-2643.444580078125, 2474.072998046875, 363.6962585449219) },
    { pos: new mp.Vector3(-2562.7724609375, 2053.3056640625, 398.9029541015625) },
    { pos: new mp.Vector3(-2474.335205078125, 1656.78955078125, 437.83966064453125) },
    { pos: new mp.Vector3(-2381.392578125, 1338.309326171875, 386.464630126953) },
    { pos: new mp.Vector3(-2280.3466796875, 1084.9765625, 335.5674133300781) },
    { pos: new mp.Vector3(-2090.64501953125, 915.4607543945312, 344.27874755859375) },
    { pos: new mp.Vector3(-1829.139404296875, 750.1353759765625, 366.71588134765625) },
    { pos: new mp.Vector3(-1602.89892578125, 793.5034790039062, 394.13189697265625) },
    { pos: new mp.Vector3(-1373.4833984375, 1030.66943359375, 430.8487243652344) },
    { pos: new mp.Vector3(-1216.8094482421875, 1407.2347412109375, 432.9371032714844) },
    { pos: new mp.Vector3(-941.81201171875, 1673.75830078125, 429.75372314453125) },
    { pos: new mp.Vector3(-680.442626953125, 1905.443603515625, 345.9539184570312) },
    { pos: new mp.Vector3(-466.30303955078125, 2094.107666015625, 275.84793090820) },
    { pos: new mp.Vector3(-221.9684600830078, 2335.6357421875, 208.2102661132812) },
    { pos: new mp.Vector3(-6.220048904418945, 2555.828369140625, 174.292480468) },
    { pos: new mp.Vector3(337.67999267578125, 2778.350341796875, 153.062942504882) },
    { pos: new mp.Vector3(715.0810546875, 2883.260498046875, 143.74436950683) },
    { pos: new mp.Vector3(1071.5615234375, 3006.86767578125, 86.955505371093) },
    { pos: new mp.Vector3(1129.0714111328125, 3025.00146484375, 59.3600273) },
    { pos: new mp.Vector3(1223.9024658203125, 3050.683837890625, 50.0222625732) },
    { pos: new mp.Vector3(1313.800537109375, 3074.89453125, 45.3394927978515) },
    { pos: new mp.Vector3(1435.8828125, 3111.58154296875, 45.534133911) }
]
let checkpoints = []
let currentCheckpoint = 0
let currentType = undefined 
let airLastCheckpoint = undefined 

// mp.events.add("client::enableDrivingSchoolTrafic", (enable) => {
//    if (enable) {
//         mp.game.streaming.setPedPopulationBudget(1);
//         mp.game.streaming.setVehiclePopulationBudget(1);
//    }
//    else {
// 		mp.game.invoke("0xA56F01F3765B93A0", 0, 0, 0, 99999999999, true, false, false, false);
// 		mp.game.streaming.setPedPopulationBudget(0);
// 		mp.game.streaming.setVehiclePopulationBudget(0);
//    }
// })
 
mp.events.add("client::setPathCoordinatesDrivingSchool", (type, customDim) => {
    currentType = type
    if(type == 1){
        for(let i = 0; i < listMarkers.length; i++){
            listMarkers[i].pos.z = listMarkers[i].pos.z - 1.25
            let destination, checkpoint
            checkpoint = mp.checkpoints.new(i + 1 >= listMarkers.length ? 4 : 1, listMarkers[i].pos, 8, {
                color: [255, 165, 0, 100],
                visible: false,
                dimension: i == 0 ? 0 : customDim
            });

            if(i + 1 >= listMarkers.length){
                destination = listMarkers[i].pos
                checkpoint.destination = new mp.Vector3(destination)
            }
            else{
                destination = listMarkers[i+1].pos
                checkpoint.direction = destination        
            }

            checkpoint.owner = "autoschool"
            checkpoints.push(checkpoint)
        }
        checkpoints[0].visible = true
        mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[0].position.x, checkpoints[0].position.y, checkpoints[0].position.z));
    }
    else if(type == 2){
        for(let i = 0; i < listBoatMarkers.length; i++){
            listBoatMarkers[i].pos.z = listBoatMarkers[i].pos.z - 1.25
            let destination, checkpoint
            checkpoint = mp.checkpoints.new(i + 1 >= listBoatMarkers.length ? 4 : 1, listBoatMarkers[i].pos, 8, {
                color: [255, 165, 0, 100],
                visible: false,
                dimension: 0
            });

            if(i + 1 >= listBoatMarkers.length){
                destination = listBoatMarkers[i].pos
                checkpoint.destination = new mp.Vector3(destination)
            }
            else{
                destination = listBoatMarkers[i+1].pos
                checkpoint.direction = destination        
            }

            checkpoint.owner = "autoschool"
            checkpoints.push(checkpoint)
        }
        checkpoints[0].visible = true
        mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[0].position.x, checkpoints[0].position.y, checkpoints[0].position.z));
    }
    else if(type == 3){
        for(let i = 0; i < listBikeMarkers.length; i++){
            listBikeMarkers[i].pos.z = listBikeMarkers[i].pos.z - 1.25
            let destination, checkpoint
            checkpoint = mp.checkpoints.new(i + 1 >= listBikeMarkers.length ? 4 : 1, listBikeMarkers[i].pos, 8, {
                color: [255, 165, 0, 100],
                visible: false,
                dimension: i == 0 ? 0 : customDim
            });

            if(i + 1 >= listBikeMarkers.length){
                destination = listBikeMarkers[i].pos
                checkpoint.destination = new mp.Vector3(destination)
            }
            else{
                destination = listBikeMarkers[i+1].pos
                checkpoint.direction = destination        
            }

            checkpoint.owner = "autoschool"
            checkpoints.push(checkpoint)
        }
        checkpoints[0].visible = true
        mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[0].position.x, checkpoints[0].position.y, checkpoints[0].position.z));
    }
    else if(type == 4){
        for(let i = 0; i < listAirMarkers.length; i++){
            listAirMarkers[i].pos.z += 1.25  
            let destination, checkpoint
            checkpoint = mp.markers.new(i + 1 >= listAirMarkers.length ? 5 : 6, listAirMarkers[i].pos, 12, {
                color: [255, 165, 0, 100],
                visible: false,
                dimension: mp.clientStorage["sqlId"]
            }); 
            if(i + 1 >= listAirMarkers.length){
                airLastCheckpoint = mp.markers.new(6, listAirMarkers[i].pos, 12, {
                    color: [255, 165, 0, 100],
                    visible: false,
                    dimension: mp.clientStorage["sqlId"]
                });

                destination = listAirMarkers[i].pos
                checkpoint.destination = new mp.Vector3(destination)
            }
            else{
                destination = listAirMarkers[i+1].pos
                checkpoint.direction = destination        
            } 
            checkpoint.owner = "autoschool"
            let colshape = mp.colshapes.newSphere(listAirMarkers[i].pos.x,listAirMarkers[i].pos.y,listAirMarkers[i].pos.z, 15, mp.clientStorage["sqlId"])
            colshape.marker = checkpoint
            checkpoint.colshape = colshape
            checkpoints.push(checkpoint)
        }
        checkpoints[0].visible = true
        mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[0].position.x, checkpoints[0].position.y, checkpoints[0].position.z));
		mp.events.add("render", renderLine);
    }
})

function renderLine() {
	var veh = mp.players.local.vehicle
	if (veh) {
		mp.game.graphics.drawLine(veh.position.x, veh.position.y, veh.position.z, checkpoints[currentCheckpoint].position.x, checkpoints[currentCheckpoint].position.y, checkpoints[currentCheckpoint].position.z, 255, 165, 0, 100);
	}
}

mp.events.add("client::deleteCheckpointsExamDrivingSchool", () => { 
    for (let key in checkpoints) {
        if(mp.checkpoints.exists(checkpoints[key]) || mp.markers.exists(checkpoints[key])){
            if (mp.colshapes.exists(checkpoints[key].colshape)) {
                checkpoints[key].colshape.destroy()
            } 
            checkpoints[key].destroy();
        }
    }
    if (mp.markers.exists(airLastCheckpoint)) {
        airLastCheckpoint.destroy() 
        airLastCheckpoint = undefined
    }
	mp.events.remove("render", renderLine);
    checkpoints = []
	currentCheckpoint = 0
})
mp.events.add("playerEnterColshape", (colshape) => { 
    if(colshape.marker && colshape.marker.owner && colshape.marker.visible && colshape.marker.owner == "autoschool" && mp.players.local.vehicle){
        colshape.marker.visible = false;  
        currentCheckpoint = currentCheckpoint + 1 == checkpoints.length ? currentCheckpoint : currentCheckpoint + 1
        checkpoints[currentCheckpoint].visible = currentCheckpoint == checkpoints.length ? false : true
        if (currentCheckpoint == checkpoints.length - 1) {
            if (mp.markers.exists(airLastCheckpoint)) {
                airLastCheckpoint.visible = true
            }
        } 
        mp.events.call("resetNavigationMarker")
        if(colshape.marker.destination){
            mp.events.callRemote("server::drivingSchool.getLicense", currentType)
            mp.game.audio.playSoundFrontend(-1, "FIRST_PLACE", "HUD_MINI_GAME_SOUNDSET", true);
        }
        else {
            mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[currentCheckpoint].position.x, checkpoints[currentCheckpoint].position.y, checkpoints[currentCheckpoint].position.z));
            mp.game.audio.playSoundFrontend(-1, "CHECKPOINT_NORMAL", "HUD_MINI_GAME_SOUNDSET", true);
        }
    }
})
mp.events.add("playerEnterCheckpoint", (checkpoint) => {
    if(checkpoint.owner == "autoschool" && mp.players.local.vehicle){
        try{
            checkpoint.visible = false;
            currentCheckpoint = currentCheckpoint + 1 == checkpoints.length ? currentCheckpoint : currentCheckpoint + 1
            checkpoints[currentCheckpoint].visible = currentCheckpoint == checkpoints.length ? false : true
            mp.events.call("resetNavigationMarker") 
            if(checkpoint.destination){
                mp.events.callRemote("server::drivingSchool.getLicense", currentType)
                mp.game.audio.playSoundFrontend(-1, "FIRST_PLACE", "HUD_MINI_GAME_SOUNDSET", true);
            }
            else{
				if (currentCheckpoint === 1 && (currentType == 1 || currentType == 3)) {
					mp.events.callRemote("server::drivingSchool.addPlayerToDimension")
				}
                mp.game.audio.playSoundFrontend(-1, "CHECKPOINT_NORMAL", "HUD_MINI_GAME_SOUNDSET", true);
                mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[currentCheckpoint].position.x, checkpoints[currentCheckpoint].position.y, checkpoints[currentCheckpoint].position.z));
            } 
        }
        catch(e){}
    }
});
}; a; }
{let a = function scriptEntryPoint(mp) {
class Gangzones {
    constructor () {
        this.gangzones = [] 
    }

    getGangzoneByBiz (biz) {
        let result = undefined
        for (let key in this.gangzones) { 
            if (this.gangzones[key] && this.gangzones[key].biz == biz) {
                result = this.gangzones[key]
            }
        }  
        return result
    }
    
}
const gangzones = new Gangzones
mp.events.add("client::addGangzone", (data) => {
    gangzones.gangzones.push(data) 
    gangzones.gangzones.forEach((gangzone) => {
        if (gangzone.blip) { 
            return
        }
        gangzone.blip = mp.game.ui.addBlipForRadius(gangzone.x, gangzone.y, gangzone.z, gangzone.r);
        mp.game.invoke("0xDF735600A4696DAF", gangzone.blip, 5); // SET_BLIP_SPRITE
        mp.game.invoke("0x03D7FB09E75D6B7E", gangzone.blip, gangzone.color || 0); // SET_BLIP_COLOUR
        mp.game.invoke("0x45FF974EEE1C8734", gangzone.blip, 200); // SET_BLIP_ALPHA
        mp.game.invoke("0xF87683CDF73C3F6E", gangzone.blip, false);
    })
})

mp.events.add("client::setColorGangzone", (biz, color) => {
    let gangzone = gangzones.getGangzoneByBiz(biz)
    if (!gangzone || !gangzone.blip) return
    if (gangzone.capturingInterval) clearInterval(gangzone.capturingInterval), gangzone.capturingInterval = null
    mp.game.invoke("0x03D7FB09E75D6B7E", gangzone.blip, color || 0)
}) 

mp.events.add("client::removeGangzone", (biz) => {
    let gangzone = gangzones.getGangzoneByBiz(biz)
    if (!gangzone || !gangzone.blip) return
    mp.game.invoke("0x45FF974EEE1C8734", gangzone.blip, 0); 
    gangzones.gangzones.splice(gangzones.gangzones.indexOf(gangzone), 1) 
})

mp.events.add("client::captureGangzone", (biz, color1, color2) => {
    try {
        let gangzone = gangzones.getGangzoneByBiz(biz)
        if (!gangzone || !gangzone.blip) return
        if (gangzone.capturingInterval) clearInterval(gangzone.capturingInterval), gangzone.capturingInterval = null
        chatDebug(`Началось моргание зоны у бизнеса ${biz} с ${color1} на ${color2}`)
        gangzone.capturingInterval = setInterval(() => {
            if (!gangzone) {
                chatDebug(`Гангзона не найдена!`)
                clearInterval(gangzone.capturingInterval)
                gangzone.capturingInterval = null
                return
            }
            if (mp.game.invoke("0xDF729E8D20CF7327", gangzone.blip) == color1) mp.game.invoke("0x03D7FB09E75D6B7E", gangzone.blip, color2)
            else mp.game.invoke("0x03D7FB09E75D6B7E", gangzone.blip, color1)
        }, 500)
    } catch (err) {
        chatDebug(`capture gangzone error: ${err}`)
    }
}) 

mp.events.add("client::addGangzoneMarker", (biz) => {
    try {
        let gangzone = gangzones.getGangzoneByBiz(biz)
        if (!gangzone || !gangzone.blip) return

        if (gangzone.marker && isEntityExists(gangzone.marker)) gangzone.marker.destroy()
        gangzone.marker = mp.markers.new(28, new mp.Vector3(gangzone.x, gangzone.y, gangzone.z - 1.0), gangzone.r * 1.5, {
            visible: true,
            color: [255, 165, 0, 100],
            rotation: 180,
            dimension: -1
        });
    } catch (err) {
        chatDebug(`capture gangzone error: ${err}`)
    }
}) 

mp.events.add("client::removeGangzoneMarker", (biz) => {
    let gangzone = gangzones.getGangzoneByBiz(biz)
    if (!gangzone || !gangzone.marker) return

    if (isEntityExists(gangzone.marker)) gangzone.marker.destroy()
}) 
 
mp.events.add("client::displayCaptureInterface", (data) => {
    if (!data) data = null
    browserMenu.call(`captureInfoAPI`, `setDisplay`, data);
})
mp.events.add("client::setKillsCaptureInterface", (data) => { 
    browserMenu.call(`captureInfoAPI`, `setKills`, data);
}) 
}; a; }
{let a = function scriptEntryPoint(mp) {
class Captures {
    constructor () {
        this.captures = [] 
    }

    getGangzoneById (id) {
        let result = undefined
        for (let key in this.captures) { 
            if (this.captures[key] && this.captures[key].id == id) {
                result = this.captures[key]
            }
        }  
        return result
    }
    
}
const captures = new Captures
mp.events.add("client::addCapture", (data) => {
    captures.captures.push(data) 
    captures.captures.forEach((gangzone) => {
        if (gangzone.blip) { 
            return
        }
        gangzone.blip = mp.game.ui.addBlipForRadius(gangzone.x, gangzone.y, gangzone.z, gangzone.r);
        mp.game.invoke("0xDF735600A4696DAF", gangzone.blip, 5); // SET_BLIP_SPRITE
        mp.game.invoke("0x03D7FB09E75D6B7E", gangzone.blip, gangzone.color || 0); // SET_BLIP_COLOUR
        mp.game.invoke("0x45FF974EEE1C8734", gangzone.blip, 85); // SET_BLIP_ALPHA
        mp.game.invoke("0xF87683CDF73C3F6E", gangzone.blip, gangzone.rot);
    })
})


mp.events.add("client::setColorCapture", (id, color) => {
    let gangzone = captures.getGangzoneById(id)
    if (!gangzone || !gangzone.blip) return
    if (gangzone.capturingInterval) clearInterval(gangzone.capturingInterval), gangzone.capturingInterval = null
    if (gangzone.marker && isEntityExists(gangzone.marker)) gangzone.marker.destroy()
    mp.game.invoke("0x03D7FB09E75D6B7E", gangzone.blip, color || 0)
}) 

mp.events.add("client::removeCapture", (id) => {
    let gangzone = captures.getGangzoneById(id)
    if (!gangzone || !gangzone.blip) return
    mp.game.invoke("0x45FF974EEE1C8734", gangzone.blip, 0); 
    captures.captures.splice(captures.captures.indexOf(gangzone), 1) 
})

mp.events.add("client::captureCapture", (id, color1, color2, markercolor) => {
    try {
        let gangzone = captures.getGangzoneById(id)
        if (!gangzone || !gangzone.blip) return
        if (gangzone.capturingInterval) clearInterval(gangzone.capturingInterval), gangzone.capturingInterval = null
        chatDebug(`Началось моргание зоны у капта ${id} с ${color1} на ${color2}`)
        gangzone.capturingInterval = setInterval(() => {
            if (!gangzone) {
                chatDebug(`Гангзона не найдена!`)
                clearInterval(gangzone.capturingInterval)
                gangzone.capturingInterval = null
                return
            }
            if (mp.game.invoke("0xDF729E8D20CF7327", gangzone.blip) == color1) mp.game.invoke("0x03D7FB09E75D6B7E", gangzone.blip, color2)
            else mp.game.invoke("0x03D7FB09E75D6B7E", gangzone.blip, color1)
        }, 500)
    } catch (err) {
        chatDebug(`capture gangzone error: ${err}`)
    }
}) 

let marker

mp.events.add("client::addCaptureMarker", (x, y, z, r, color) => {
    try {
        if (marker && isEntityExists(marker)) marker.destroy()
        marker = mp.markers.new(28, new mp.Vector3(x, y, z - 1.0), r, {
            visible: true,
            color: color || [255, 165, 0, 100],
            rotation: 180,
            dimension: -1
        });
    } catch (err) {
        chatDebug(`capture gangzone error: ${err}`)
    }
})

mp.events.add("client::removeCaptureMarker", () => {
    if (marker && isEntityExists(marker)) marker.destroy()
}) 

mp.captureStats = { dmg: 0, shots: 0, targetShots: 0, started: false }

mp.events.add("startSaveCaptureStats", () => {
    mp.captureStats = { dmg: 0, shots: 0, targetShots: 0, started: true }
})

mp.events.add("stopSaveCaptureStats", () => {
    mp.captureStats.started = false
})

mp.events.add('playerWeaponShot', (targetPosition, targetEntity) => {
    if (mp.captureStats?.started) {
        mp.captureStats.shots += 1
        if (!targetEntity || targetEntity.type != "player") return
        mp.captureStats.targetShots += 1
    }
})

rpc.register("getCaptureStats", () => {
    if (!mp.captureStats) return null

    mp.captureStats.started = false

    return { dmg: mp.captureStats.dmg, shots: mp.captureStats.shots, targetShots: mp.captureStats.targetShots }
})
}; a; }
{let a = function scriptEntryPoint(mp) {
const localPlayer = mp.players.local;  
const { weaponData } = require("gamemode/scripts/weapons/weapon_data.js");
let taskEnterVehicleDate = null
let sendNotifyDate = null

function getLawCar(vehicle) {
    if (!vehicle || vehicle == undefined) return

    const lawCars = [
        "polcharger", "poldurango", "poltrx", "ngcharger", "ngdurango", "ngtrx", "m1114",
        "fibcharger", "fibdurango", "gurkha", "govnavi", "govcont", "riot", "barracks", "m977",
        "sherf150", "sherexp22"
    ]
    let result = false

    for (let key in lawCars) {
        if (result) continue
        if (vehicle == mp.game.joaat(lawCars[key])) result = true
    }

    return result
}

mp.attachInfo = {
    "prop_box_ammo04a": {
        offset: {
            x: 0.2,
            y: -0.3,
            z: 0.1,
            rX: -45,
            rY: 20,
            rZ: 120
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_box_ammo03a": {
        offset: {
            x: 0.25,
            y: -0.15,
            z: 0.15,
            rX: -45,
            rY: 20,
            rZ: 130
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_box_ammo06a": {
        offset: {
            x: 0.15,
            y: -0.25,
            z: 0,
            rX: -45,
            rY: 20,
            rZ: 130
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "ex_office_swag_pills4": {
        offset: {
            x: 0.2,
            y: -0.3,
            z: 0.1,
            rX: -45,
            rY: 20,
            rZ: 120
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "hei_prop_drug_statue_box_big": {
        offset: {
            x: 0.1,
            y: -0.15,
            z: 0.35,
            rX: -45.0,
            rY: 12.5,
            rZ: 120.0 
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "bkr_prop_fakeid_boxpassport_01a": {
        offset: {
            x: 0.2,
            y: -0.2,
            z: 0.1,
            rX: -45.0,
            rY: 12.5,
            rZ: 120.0 
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "bkr_prop_coke_doll_bigbox": {
        offset: {
            x: 0.25,
            y: -0.15,
            z: 0.20,
            rX: -45.0,
            rY: 12.5,
            rZ: 120.0 
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "hei_prop_heist_wooden_box": {
        offset: {
            x: 0.0,
            y: -0.3,
            z: 0.3,
            rX: -45.0,
            rY: 12.5,
            rZ: 120.0 
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "imp_prop_impexp_boxwood_01": {
        offset: {
            x: 0.4,
            y: -0.1,
            z: 0.3,
            rX: -45.0,
            rY: 12.5,
            rZ: 120.0 
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_bucket_01a": {
        offset: {
            x: 0.2,
            y: -0.37,
            z: 0.2,
            rX: -85.0,
            rY: 0,
            rZ: 20.0
        },
        bone: 44,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_feed_sack_01": {
        offset: {
            x: 0.0,
            y: -0.3,
            z: 0.075,
            rX: -45.0,
            rY: 20.0,
            rZ: 120.0
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_pizza_box_02": {
        //   offset: {x: 0.0, y: -0.3, z: 0.1, rX: -45.0, rY: 10.0, rZ: 120.0},
        offset: {
            x: 0.0,
            y: -0.3,
            z: 0.0,
            rX: -45.0,
            rY: 0.0,
            rZ: 100.0
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "p_car_keys_01": {
        offset: {
            x: 0.09,
            y: 0.03,
            z: -0.02,
            rX: -76,
            rY: 13,
            rZ: 28
        },
        boneIdx: 57005,
        anim: {
            dict: "anim@mp_player_intmenu@key_fob@",
            name: "fob_click",
            speed: 8,
            speedOut: 8,
            flag: 48
        }
    },
    // take_object 0 hei_prop_heist_binbag
    "hei_prop_heist_binbag": {
        offset: {
            x: 0,
            y: 0,
            z: -0.05,
            rX: -60.0,
            rY: -60.0,
            rZ: 0
        },
        bone: 73,
        anim: {
            dict: "anim@move_m@trash",
            name: "pickup",
            speed: 8,
            flag: 49
        }
    },
    "v_ind_cs_box02": {
        offset: {
            x: 0.15,
            y: -0.22,
            z: 0.35,
            rX: -45.0,
            rY: 12.5,
            rZ: 120.0 
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "ch_prop_ch_crate_01a": {
        offset: {
            x: 0.30,
            y: -0.113,
            z: 0.25,
            rX: -45.0,
            rY: 12.5,
            rZ: 120.0 
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "hei_prop_carrier_crate_01a": {
        offset: {
            x: 0.30,
            y: -0.113,
            z: 0.25,
            rX: -45.0,
            rY: 12.5,
            rZ: 120.0 
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_ball_box": {
        offset: {
            x: 0.165,
            y: -0.1,
            z: 0.64,
            rX: -45.0,
            rY: 12.5,
            rZ: 120.0
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_horo_box_01": {
        offset: {
            x: 0.25,
            y: -0.163,
            z: 0.158,
            rX: 45.0,
            rY: -10.0,
            rZ: -65.0
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_cardbordbox_05a": {
        offset: {
            x: 0.39,
            y: -0.113,
            z: 0.305,
            rX: 45.0,
            rY: -10.0,
            rZ: -65.0
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_cardbordbox_03a": {
        offset: {
            x: 0.4,
            y: -0.1,
            z: 0.315,
            rX: 45.0,
            rY: -10.0,
            rZ: -65.0
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_cardbordbox_02a": {
        offset: {
            x: 0.2,
            y: -0.2,
            z: 0.1,
            rX: 45.0,
            rY: -10.0,
            rZ: -65.0
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_printer_01": {
        offset: {
            x: 0.2,
            y: -0.2,
            z: 0.1,
            rX: 45.0,
            rY: -10.0,
            rZ: -65.0
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_veg_crop_03_pump": {
        offset: {
            x: 0.2,
            y: -0.3,
            z: 0.1,
            rX: -45,
            rY: 20,
            rZ: 120
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_veg_crop_03_cab": {
        offset: {
            x: 0.2,
            y: -0.3,
            z: 0.1,
            rX: -45,
            rY: 20,
            rZ: 120
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_weed_02": {
        offset: {
            x: 0.2,
            y: -0.3,
            z: 0.1,
            rX: -45,
            rY: 20,
            rZ: 120
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_cs_trowel": {
        offset: {
            x: 0.01,
            y: 0.03,
            z: 0,
            rX: -119,
            rY: 10,
            rZ: 90
        },
        bone: 77,
        anim: {
            dict: "amb@world_human_gardener_plant@female@base",
            name: "base_female",
            speed: 8,
            flag: 1
        }
    }, 
    "prop_ld_flow_bottle": {
        offset: {
            x: 0.1400,
            y: 0.000,
            z: 0.0400,
            rX: -116.000,
            rY: -2.000,
            rZ: -5.000
        },
        bone: 42,
        playFixed: true
    }, 
    "ng_proc_cigarette01a":{
        offset: {
            x: 0.045,
            y: -0.035,
            z: -0.009,
            rX: 0,
            rY: 180,
            rZ: 50
        },
        bone: 48,
        playFixed: true
    },
    "ng_proc_cigar01a": {
        offset: {
            x: 0.045,
            y: -0.015,
            z: -0.019,
            rX: 0,
            rY: 0,
            rZ: 50
        },
        bone: 48,
        playFixed: true 
    },
    "prop_bottle_cognac": {
        offset: {
            x: 0.0900,
            y: -0.1800,
            z: 0.1150,
            rX: -110.000,
            rY: 13.000,
            rZ: 0.000
        },
        bone: 42,
        playFixed: true
    },
    "prop_choc_ego":{
        offset: {
            x: 0,
            y: 0,
            z: 0,
            rX: 0,
            rY: 0,
            rZ: 0
        },
        bone: 61,
        playFixed: true
    }, 
    "prop_tequila_bottle": {
        offset: {
            x: 0.1000,
            y: -0.1950,
            z: 0.1150,
            rX: -108.0000,
            rY: 9.000,
            rZ: 0
        },
        bone: 42,
        playFixed: true
    },
    "prop_ecola_can": {
        offset: {
            x: 0.13,
            y: 0.025,
            z: 0.03,
            rX: 120.0,
            rY: -25.0,
            rZ: -190
        },
        bone: 42,
        playFixed: true
    },
    "prop_easter_basket_a": {
        offset: {
            x: 0.4,
            y: 0,
            z: 0,
            rX: -20,
            rY: -90,
            rZ: 0
        },
        bone: 42,
    },
    "prop_cs_burger_01": {
        offset: {
            x: 0.1514,
            y: 0.0389,
            z: 0.0497,
            rX: 160.2057,
            rY: 77.8283,
            rZ: -35.5425
        },
        bone: 42, 
        playFixed: true 
    },
    "prop_food_agg_a": {
        offset: {
            x: 0.15,
            y: 0.02,
            z: 0.02,
            rX: -90,
            rY: 0,
            rZ: 0
        },
        bone: 42, 
        playFixed: true 
    },
    "prop_food_easter_cake_a": {
        offset: {
            x: 0.16,
            y: 0,
            z: 0,
            rX: -90,
            rY: 0,
            rZ: 0
        },
        bone: 42, 
        playFixed: true 
    },
    "prop_cs_pills": {
        offset: {
            x: 0.14,
            y: 0.04,
            z: 0.005,
            rX: -110,
            rY: 0,
            rZ: -4
        },
        bone: 42, 
        playFixed: true 
    },
    "q_prop_bandage_01": {
        offset: {
            x: 0.14,
            y: 0.04,
            z: 0.005,
            rX: -110,
            rY: 0,
            rZ: -4
        },
        bone: 42, 
        playFixed: true 
    },
    "prop_ld_health_pack": {
        offset: {
            x: 0.14,
            y: 0.04,
            z: 0.005,
            rX: -110,
            rY: 0,
            rZ: -4
        },
        bone: 42,
        playFixed: true
    },
    "prop_bong_01": {
        offset: {
            x: 0.25,
            y: 0,
            z: -0.03,
            rX: -40,
            rY: -70,
            rZ: 15
        },
        bone: 71, 
        ptfx: {
			dict: "scr_safehouse",
            name: "scr_sh_bong_smoke"
		}
    },
    "prop_cs_hotdog_01": {
        offset: {
            x: 0.25,
            y: 0.01,
            z: 0.05,
            rX: 150,
            rY: -50,
            rZ: 0
        },
        bone: 65, 
        playFixed: true  
    },
    "prop_food_chips": {
        offset: {
            x: 0.25,
            y: -0.01,
            z: 0,
            rX: -20,
            rY: -50,
            rZ: -100
        },
        bone: 65, 
        playFixed: true  
    },
    "prop_beer_bottle": {
        offset: {
            x: 0.1300,
            y: -0.0600,
            z: 0.0600,
            rX: 70.000,
            rY: -185.000,
            rZ: 0.000
        },
        bone: 42, 
        playFixed: true  
    },
    "prop_cs_beer_bot_01": {
        offset: {
            x: 0.11,
            y: -0.03,
            z: 0.04,
            rX: 70.000,
            rY: -195.000,
            rZ: -7.000
        },
        bone: 42,
        playFixed: true
    },
    "ng_proc_binbag_01a": {
        offset: {
            x: 0.35,
            y: 0.1,
            z: -0.1,
            rX: 40,
            rY: 90,
            rZ: 180
        },
        bone: 77      
    },
    "ng_proc_binbag_02a": {
        offset: {
            x: 0.43,
            y: -0.05,
            z: -0.04,
            rX: 45,
            rY: 90,
            rZ: 180
        },
        bone: 77      
    },
    "prop_binbag2_atb": {
        offset: {
            x: 0.35,
            y: 0.1,
            z: -0.1,
            rX: 40,
            rY: 90,
            rZ: 180
        },
        bone: 77      
    },
    "prop_binbag2_epic": {
        offset: {
            x: 0.35,
            y: 0.1,
            z: -0.1,
            rX: 40,
            rY: 90,
            rZ: 180
        },
        bone: 77      
    },
    "prop_binbag2_silpo": {
        offset: {
            x: 0.35,
            y: 0.1,
            z: -0.1,
            rX: 40,
            rY: 90,
            rZ: 180
        },
        bone: 77      
    },
    "prop_binbag2_tavriav": {
        offset: {
            x: 0.35,
            y: 0.1,
            z: -0.1,
            rX: 40,
            rY: 90,
            rZ: 180
        },
        bone: 77      
    },
    "prop_binbag_atb": {
        offset: {
            x: 0.43,
            y: -0.05,
            z: -0.04,
            rX: 45,
            rY: 90,
            rZ: 180
        },
        bone: 77      
    },
    "prop_binbag_epic": {
        offset: {
            x: 0.43,
            y: -0.05,
            z: -0.04,
            rX: 45,
            rY: 90,
            rZ: 180
        },
        bone: 77      
    },
    "prop_binbag_silpo": {
        offset: {
            x: 0.43,
            y: -0.05,
            z: -0.04,
            rX: 45,
            rY: 90,
            rZ: 180
        },
        bone: 77      
    },
    "prop_binbag_tavria": {
        offset: {
            x: 0.43,
            y: -0.05,
            z: -0.04,
            rX: 45,
            rY: 90,
            rZ: 180
        },
        bone: 77      
    },
    "prop_amb_phone": {
        offset: {
            x: 0.0,
            y: 0.0,
            z: 0.0,
            rX: 0.0,
            rY: 0.0,
            rZ: 0.0
        },
        bone: 90,
    },
    "prop_fishing_rod_01": {
        offset: {
            x: 0.08,
            y: 0.05,
            z: 0,
            rX: -140,
            rY: 0,
            rZ: 0
        },
        bone: 61      
    },
    "prop_tool_pickaxe": {
        offset: {
            x: 0.08,
            y: 0.05,
            z: 0,
            rX: -140,
            rY: 0,
            rZ: 0
        },
        bone: 61,
        anim: {
            dict: "melee@large_wpn@streamed_core",
            name: "ground_attack_on_spot",
            speed: 8,
            flag: 1
        }    
    },
    "prop_mp3_dock": {
        offset: {
            x: 0.05,
            y: -0.25,
            z: 0,
            rX: 0,
            rY: -10,
            rZ: -70
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },  
    "prop_iron_01": {
        offset: {
            x: 0.05,
            y: -0.25,
            z: 0,
            rX: 0,
            rY: -80,
            rZ: -70
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },  
    "prop_acc_guitar_01": {
        offset: {
            x: 0.05,
            y: -0.25,
            z: 0,
            rX: 0,
            rY: -80,
            rZ: -70
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },  
    "prop_kettle_01": {
        offset: {
            x: 0.05,
            y: -0.15,
            z: 0,
            rX: 0,
            rY: -90,
            rZ: 110
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },   

    "prop_tv_flat_michael": { 
        offset: {
            x: -0.23,
            y: -0.32,
            z: 0.37,
            rX: 50,
            rY: -10,
            rZ: -65
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    }, 

    "prop_boombox_01": { 
        offset: {
            x: 0,
            y: -0.235,
            z: 0.24,
            rX: 45,
            rY: -10,
            rZ: -65
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    }, 

    "prop_laptop_01a": { 
        offset: {
            x: 0,
            y: -0.235,
            z: 0.05,
            rX: 45,
            rY: -10,
            rZ: -65
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    }, 
    
    "prop_toaster_02": { 
        offset: {
            x: 0.1,
            y: -0.242,
            z: -0.018,
            rX: 45,
            rY: -10,
            rZ: -65
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    }, 



    "prop_tv_03": {
        offset: {
            x: -0.05,
            y: -0.25,
            z: 0.275,
            rX: 45,
            rY: -10,
            rZ: -65
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        } 
    },


    "prop_tv_flat_03": {
        offset: {
            x: 0.05,
            y: -0.255,
            z: 0.07,
            rX: 45,
            rY: -10,
            rZ: -65
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        } 
    },
    "prop_tv_flat_03b": {  
        offset: {
            x: -0.01,
            y: -0.237,
            z: 0.23,
            rX: 45,
            rY: -10,
            rZ: -65
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_tv_flat_01_screen": {  
        offset: {
            x: -0.1,
            y: -0.33,
            z: 0.25,
            rX: 50,
            rY: -10,
            rZ: -65
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_tv_flat_01": {  
        offset: {
            x: -0.1,
            y: -0.33,
            z: 0.25,
            rX: 50,
            rY: -10,
            rZ: -65
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_tapeplayer_01": {
        offset: {
            x: 0.1,
            y: -0.2,
            z: 0.1,
            rX: 20,
            rY: 0,
            rZ: -70
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },
    "prop_micro_01": {
        offset: {
            x: 0.1,
            y: -0.23,
            z: 0.075,
            rX: 30,
            rY: 0,
            rZ: -70
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    }, 
    "prop_coffee_mac_02": {
        offset: {
            x: 0.12,
            y: -0.22,
            z: 0.15,
            rX: 32,
            rY: 85,
            rZ: -70
        },
        bone: 48,
        anim: {
            dict: "anim@heists@box_carry@",
            name: "idle",
            speed: 8,
            flag: 49
        }
    },  
	"prop_cs_spray_can": {
        offset: {
            x: 0.03,
            y: -0.07,
            z: -0.1,
            rX: -30,
            rY: 0,
            rZ: 0
        },
        bone: 73,
		anim: { // anim@amb@business@weed@weed_inspecting_lo_med_hi@ weed_spraybottle_crouch_spraying_02_inspector - на коленях
            dict: "anim@amb@business@weed@weed_inspecting_lo_med_hi@",
            name: "weed_spraybottle_stand_spraying_01_inspector",
            speed: 8,
            flag: 1
        },
		ptfx: {
			dict: "scr_playerlamgraff",
            name: "scr_lamgraff_paint_spray" //exp_grd_bzgas_smoke
		}
    },  
    "p_ing_microphonel_01": {
        offset: {
            x: 0.13055836,
            y: 0.07557731,
            z: -0.0057103653,
            rX: -83.314026,
            rY: 7.7800093,
            rZ: -24.884037
        },
        bone: 71,
		anim: { // anim@amb@business@weed@weed_inspecting_lo_med_hi@ weed_spraybottle_crouch_spraying_02_inspector - на коленях
            dict: "anim@heists@humane_labs@finale@keycards",
            name: "ped_b_enter_loop",
            speed: 8,
            flag: 49
        }
    },
    "prop_v_cam_01": {
        offset: {
            x: -0.01,
            y: -0.25,
            z: 0.01,
            rX: 0,
            rY: 0,
            rZ: 101
        },
        bone: 90,
		anim: { // anim@amb@business@weed@weed_inspecting_lo_med_hi@ weed_spraybottle_crouch_spraying_02_inspector - на коленях
            dict: "amb@world_human_mobile_film_shocking@female@base",
            name: "base",
            speed: 8,
            flag: 49
        }
    },
    "p_amb_brolly_01": {
        offset: {
            x: 0.09479946,
            y: 0.013351775,
            z: -0.020646578,
            rX: -76.90267,
            rY: 5.92244,
            rZ: -32.74062
        },
        bone: 71,
		anim: { // anim@amb@business@weed@weed_inspecting_lo_med_hi@ weed_spraybottle_crouch_spraying_02_inspector - на коленях
            dict: "anim@heists@humane_labs@finale@keycards",
            name: "ped_b_enter_loop",
            speed: 8,
            flag: 49
        }
    },
    "quant_flag10": {
        offset: {
            x: 0.08,
            y: -0.13,
            z: 0.07,
            rX: 252,
            rY: 10,
            rZ: 3
        },
        bone: 42,
		anim: {
            dict: "rcmnigel1d",
            name: "base_club_shoulder",
            speed: 8,
            flag: 49
        }
    },
    "prop_clippers_01": {
        offset: {
            x: 0.02,
            y: -0.03,
            z: 0,
            rX: 70,
            rY: 0,
            rZ: 0
        },
        bone: 52,
		anim: {
            dict: "quant_anim_14",
            name: "shave",
            speed: 8,
            flag: 0
        }
    },
    "prop_acc_guitar_01": {
        offset: {
            x: -0.1,
            y: 0.31,
            z: 0.1,
            rX: 10,
            rY: -20,
            rZ: 150
        },
        bone: 38,
		anim: { // anim@amb@business@weed@weed_inspecting_lo_med_hi@ weed_spraybottle_crouch_spraying_02_inspector - на коленях
            dict: "amb@world_human_musician@guitar@male@base",
            name: "base",
            speed: 8,
            flag: 49
        }
    },
    "prop_single_rose": {
        offset: {
            x: 0.13055836,
            y: 0.07557731,
            z: -0.0057103653,
            rX: -83.314026,
            rY: 7.7800093,
            rZ: -24.884037
        },
        bone: 71,
		anim: { // anim@amb@business@weed@weed_inspecting_lo_med_hi@ weed_spraybottle_crouch_spraying_02_inspector - на коленях
            dict: "anim@heists@humane_labs@finale@keycards",
            name: "ped_b_enter_loop",
            speed: 8,
            flag: 49
        }
    },
    "w_am_digiscanner_01": {
        offset: {
            x: 0.15,
            y: 0.1,
            z: 0.0,
            rX: 270.0,
            rY: 90.0,
            rZ: 80.0
        },
        boneIdx: 18905,
        anim: {
            dict: "mini@golfai",
            name: "wood_idle_a",
            speed: 8,
            flag: 49
        }
    },
    "ba_prop_battle_vape_01": {
        offset: {
            x: 0.119,
            y: 0,
            z: 0.03,
            rX: -180,
            rY: 90,
            rZ: -20
        },
        boneIdx: 18905,
		anim: {
            dict: "anim@heists@humane_labs@finale@keycards",
            name: "ped_a_enter_loop",
            speed: 8,
            flag: 2 + 16 + 32
        }
    },
    "w_am_jerrycan": {
        offset: {
            x: 0.36,
            y: 0,
            z: 0,
            rX: 59.7,
            rY: -95.04,
            rZ: 0
        },
        bone: 42,
    },
};  

mp.events.add("displayRadar", (bool) => {
    mp.game.ui.displayRadarCustom(bool);
})

mp.events.add("fadeOut", (duration) => {
    mp.game.cam.doScreenFadeOut(duration); 
})

mp.events.add("fadeIn", (duration) => {
    mp.game.cam.doScreenFadeIn(duration); 
}) 

mp.events.add("fadeOutBrowser", (duration) => {
    browserMenu.call(`fade`, true, duration)
})
mp.events.add("fadeInBrowser", (duration) => {
    browserMenu.call(`fade`, false, duration)
}) 

mp.events.add("forceStreamingUpdate", () => {
    mp.game.streaming.forceStreamingUpdate()
    mp.players.forEachInStreamRange((player) => { 
        player.forceStreamingUpdate()
    })
});

function rotateRect(angle, ox, oy, x, y, w, h) {
    const xAx = Math.cos(angle);  // x axis x
    const xAy = Math.sin(angle);  // x axis y
    x -= ox;  // move rectangle onto origin
    y -= oy;
    return [[ // return array holding the resulting points
        x * xAx - y * xAy + ox,   // Get the top left rotated position
        x * xAy + y * xAx + oy,   // and move it back to the origin
    ], [
        (x + w) * xAx - y * xAy + ox,   // Get the top right rotated position
        (x + w) * xAy + y * xAx + oy,
    ], [
        (x + w) * xAx - (y + h) * xAy + ox,   // Get the bottom right rotated position
        (x + w) * xAy + (y + h) * xAx + oy,
    ], [
        x * xAx - (y + h) * xAy + ox,   // Get the bottom left rotated position
        x * xAy + (y + h) * xAx + oy,
    ]
    ];
}

function vehicleLayout(vehicle) {
    const sizeofVehicle = mp.game.gameplay.getModelDimensions(vehicle.model);
    const vehicleRotation = vehicle.getRotation(2);
    const Xwidth = (0 - sizeofVehicle.min.x) + (sizeofVehicle.max.x);
    const Ywidth = (0 - sizeofVehicle.min.y) + (sizeofVehicle.max.y);
    const degree = (vehicleRotation.z + 180) * Math.PI / 180;

    const newDegrees = rotateRect(degree, vehicle.position.x, vehicle.position.y, vehicle.position.x - sizeofVehicle.max.x, vehicle.position.y - sizeofVehicle.max.y, Xwidth, Ywidth);

    const frontX = newDegrees[0][0] + ((newDegrees[1][0] - newDegrees[0][0]) / 2);
    const frontY = newDegrees[0][1] + ((newDegrees[1][1] - newDegrees[0][1]) / 2);

    const bottomX = newDegrees[2][0] + ((newDegrees[3][0] - newDegrees[2][0]) / 2);
    const bottomY = newDegrees[2][1] + ((newDegrees[3][1] - newDegrees[2][1]) / 2);

    return {
        front: { x: frontX, y: frontY },
        back: { x: bottomX, y: bottomY },
        center: { x: vehicle.position.x, y: vehicle.position.y },
        size: {
            lengthX: Xwidth,
            lengthY: Ywidth,
            min: { x: sizeofVehicle.min.x, y: sizeofVehicle.min.y },
            max: { x: sizeofVehicle.max.x, y: sizeofVehicle.max.y },
            z: sizeofVehicle.min.z
        }
    };

}

function showVehicleMenu(entity) {
    if (isEntityExists(entity)) {
        let attachedObject = mp.players.local.variable_attachedObject;
        //if(mp.game.vehicle.isThisModelAPlane(entity.model)) return
        //const vehicleSize = vehicleLayout(entity);
        //const distanceFront = Math.round(mp.game.system.vdist2(vehicleSize.front.x, vehicleSize.front.y, entity.position.z,
            //mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z) / 3);
        let owner = entity.variable_owner
        let family = entity.getVariable("family") ? entity.getVariable("family") : null
        let weight = entity.getVariable("weight") ? entity.getVariable("weight") : null
        let familyData = entity.variable_familyData && entity.variable_familyData.weight ? Object.keys(entity.variable_familyData.weight).length : null
        //let canSetNumberplate = distanceFront <= 0.5
        mp.events.call("interactionMenu.showVehicleMenu", entity, {
            action: 'showAll',
            owner,
            family,
            weight,
            familyData,
            isAttachedObject: !!attachedObject,
            isCar: mp.game.vehicle.isThisModelACar(entity.model) || mp.game.vehicle.isThisModelAHeli(entity.model) || mp.game.vehicle.isThisModelABoat(entity.model),
            hasHood: entity.variable_hood,
            isElectro: entity.variable_electric,
            hasStorage: entity.model === mp.game.joaat("m977") || entity.model === mp.game.joaat("mule3"),
            canUnlock: entity.model === mp.game.joaat("m977"),
            isLaw: getLawCar(entity.model),
            canPushVehicle: [0, 1, 2, 3, 4, 5, 6, 7].includes(entity.getClass()),
            canRemoveNumberplate: entity.variable_numberPlate,
            isTrunkOpened: entity.variable_boot
        });
    }
}

mp.events.add("interactionMenu.openVehicleMenu", () => {
    let entity = mp.interactionEntity
    if (!entity) return
    if (!entity.type == "vehicle") return
    showVehicleMenu(entity)
}) 

mp.events.add("authCharacter.success", () => { 
    try {  
        mp.game.vehicle.setExperimentalAttachmentSyncEnabled(true)
        mp.game.stats.statSetInt(mp.game.joaat("SP0_SHOOTING_ABILITY"), 10000, false);
        mp.game.ui.setMinimapVisible(false);
        mp.game.ui.displayRadarCustom(true);
        mp.game.invoke('0x476AE72C1D19D1A8', mp.players.local.handle, false); //SET_PED_DROPS_WEAPONS_WHEN_DEAD 
        mp.events.call("disableSound")

        setCursor(false); 
        // ALT
        mp.keys.bindEx(18, false, () => {
            setCursor(!mp.gui.cursor.visible);
        }, "Показати курсор");

        mp.keys.bindEx(0x42, true, () => { // кнопка 'B'
            if (mp.bindBlocker() || !mp.players.local.vehicle) return;
            mp.events.call("vehicleEngineHandler");
        }, "Двигун", 1);

        mp.keys.bindEx(0x71, false, () => { // кнопка 'F2'
            if (mp.bindBlocker()) return;
            let animation = mp.players.local.variable_SyncedAnimation;
            if (animation && mp.players.local.getVariable("cuffedBy") == null && mp.players.local.getVariable("boundedBy") == null) {
                if (animation.dict === "cellphone@" && animation.name === "cellphone_cellphone_outro") return;
                if (animation) mp.events.callRemote("animation.set", animation.dict, animation.name);
            }
        }, "Зупинити анімацію")

        let cuffTimeout = null
        mp.keys.bindEx(0x58, false, function () { // X key
            if (mp.bindBlocker() || mp.players.local.vehicle || mp.interactionEntity) return;
            if (cuffTimeout && Date.now() - cuffTimeout < 2000) return
            let entity = mp.players.local.raycasting.entity
            let faction = mp.players.local.getVariable("faction")
            if (faction != 1 && faction != 2 && faction != 4 && faction != 15 && faction != 17) return
            let attachedObject = mp.players.local.variable_attachedObject;
            if (isEntityExists(entity) && !attachedObject) {
                if (entity.type == "player") {
                    mp.events.callRemote(`startHandcuff`, entity.remoteId, true);
                    cuffTimeout = Date.now()
                }
            }
        }, "Кайданки", 2)
        mp.keys.bindEx(0x5A, false, function () { // Z key
            if (mp.bindBlocker() || mp.players.local.vehicle || mp.interactionEntity) return;
            if (cuffTimeout && Date.now() - cuffTimeout < 2000) return
            let entity = mp.players.local.raycasting.entity
            let faction = mp.players.local.getVariable("faction")
            if (faction != 1 && faction != 2 && faction != 4 && faction != 15 && faction != 17) return
            let attachedObject = mp.players.local.variable_attachedObject;
            if (isEntityExists(entity) && !attachedObject) {
                if (entity.type == "player") {
                    mp.events.callRemote(`startFollow`, entity.remoteId, true);
                    cuffTimeout = Date.now()
                }
            }
        }, "Вести за собою", 2)


        let renderInteractionMenu = undefined 
        /*let itemPickupTimeout = null
        mp.keys.bindEx(69, true, async ()   => {
            if (mp.bindBlocker() || mp.players.local.vehicle || mp.interactionEntity || mp.players.local.isFreeze) return;  
            let itemObj, minDist = 9999;
            mp.objects.forEach((obj) => { 
                let dist = mp.game.system.vdist(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, obj.position.x, obj.position.y, obj.position.z);
                if (dist < mp.clientStorage.maxPickUpItemDist && obj.getVariable("inventoryItemSqlId")) {
                    if (dist < minDist) {
                        minDist = dist;
                        itemObj = obj;
                    }
                }
            });
            if (itemObj && !mp.players.local.variable_attachedObject) {
                if (itemPickupTimeout && Date.now() - itemPickupTimeout < 2000) return
                mp.events.callRemote("item.pickUp", itemObj.remoteId);
                itemPickupTimeout = Date.now()
                return;
            }
        }, "Клавіша дії"); */

        mp.keys.bindEx(69, true, async () => { // кнопка 'E' 
            if (mp.bindBlocker() || mp.players.local.vehicle || mp.interactionEntity || mp.players.local.isFreeze) return;  
            let startDate = Date.now() 
            if (renderInteractionMenu) {
                renderInteractionMenu.destroy()
                renderInteractionMenu = undefined
            }
            let customKey = mp.clientStorage["binds"].find(val => val.name == "Клавіша дії")
            renderInteractionMenu = new mp.Event("render", () => {
                if (Date.now() - startDate > 1 * 200 ) {
                    startDate = 0
                    if (renderInteractionMenu) {
                        renderInteractionMenu.destroy()
                        renderInteractionMenu = undefined
                    }
                    if (!mp.keys.isDown(customKey ? customKey.key : 69) || mp.keys.isDown(customKey ? customKey.key : 69) == false) return 
                    let entity = mp.players.local.raycasting.entity  
                    let attachedObject = mp.players.local.variable_attachedObject;
                    if (isEntityExists(entity)) {  
                        if (entity.type == "player" && !attachedObject) {
                            mp.events.call("interactionMenu.showPlayerMenu", entity, {
                                hasCuffs: entity.getVariable("cuffedBy") != null,
                                followTo: entity.getVariable("followTo") != null,
                                hasBag: entity.getVariable("bagBy") != null,
                                hasFamiliar: entity.getVariable("sqlId") && mp.familiars.params.includes(entity.getVariable("sqlId")) ? true : false
                            });
                        } else if (entity.type == "vehicle") {
                            showVehicleMenu(entity)
                        } else if (entity.type == "object") {
                            const type = entity.model === mp.game.joaat("prop_hookah_02") ? "hookah" : entity.model === mp.game.joaat("q_props_barbecue_grill") ? "barbecue" : null
                            if (!type) return
                            mp.events.callRemote(`showObjectMenu`, entity.remoteId, type);
                        }
                    }  
                }
            })  
            
        }, "Клавіша дії"); 
        mp.keys.bindEx(0x47, true, () => { // кнопка 'G' 
            try {
                if (mp.bindBlocker() || mp.interactionEntity) return;
                let startDate = Date.now() 
                if (renderInteractionMenu) {
                    renderInteractionMenu.destroy()
                    renderInteractionMenu = undefined
                }
                let customKey = mp.clientStorage["binds"].find(val => val.name == "Взаємодія з ТЗ (за кермом)")
                renderInteractionMenu = new mp.Event("render", () => {
                    if (Date.now() - startDate > 1 * 200 ) {
                        startDate = 0
                        if (renderInteractionMenu) {
                            renderInteractionMenu.destroy()
                            renderInteractionMenu = undefined
                        }
                        if (!mp.keys.isDown(customKey ? customKey.key : 71) || mp.keys.isDown(customKey ? customKey.key : 71) == false) return 
                        let entity = mp.players.local;  
                        if (mp.players.local.vehicle) {
                            if (mp.players.local.vehicle.getPedInSeat(-1) == localPlayer.handle) {  
                                entity = mp.players.local.vehicle
                                //if(mp.game.vehicle.isThisModelABoat(entity.model) && mp.game.vehicle.isThisModelAPlane(entity.model) && mp.game.vehicle.isThisModelAHeli(entity.model)) return
                                mp.events.call("interactionMenu.showVehicleMenu", mp.players.local.vehicle, {
                                    action: 'showEnter',
                                    isCar: mp.game.vehicle.isThisModelACar(entity.model),
                                    isLaw: getLawCar(entity.model),
                                    subwoofer: entity.getVariable("subwoofer") != null,
                                    subwooferOn: entity.getVariable("subwoofer") && entity.variable_soundObject && entity.variable_soundObject.maxVehicleSpeedCheck,
                                    isHideInTrunk: !!entity.getVariable("hiddenPlayer"),
                                    isTrunk: entity.getBoneIndexByName("boot") !== -1
                                }); 
                            }
                        }
                    }
                })
            } catch (err) {
                chatDebug(err)
            }
        }, "Взаємодія з ТЗ (за кермом)", 1); 
        mp.keys.bindEx(0x09, true, () => { // кнопка 'TAB'   
            try {
                if (mp.bindBlocker() || mp.interactionEntity) return;
                let startDate = Date.now() 
                if (renderInteractionMenu) {
                    renderInteractionMenu.destroy()
                    renderInteractionMenu = undefined
                }
                let customKey = mp.clientStorage["binds"].find(val => val.name == "Меню гравця пішки")
                renderInteractionMenu = new mp.Event("render", () => {
                    if (Date.now() - startDate > 1 * 200 ) {
                        startDate = 0
                        if (renderInteractionMenu) {
                            renderInteractionMenu.destroy()
                            renderInteractionMenu = undefined
                        }
                        if (!mp.keys.isDown(customKey ? customKey.key : 9) || mp.keys.isDown(customKey ? customKey.key : 9) == false) return 
                        let entity = mp.players.local;  
                        if (mp.players.local.vehicle) return;
                        if (mp.players.local.remoteId == entity.remoteId) {
                            mp.events.call("interactionMenu.showPlayerMenu", entity, {
                                action: "showLocal",
                                hasCarry: mp.players.local.getVariable("carry") != null,
                                isHideInTrunkSelf: mp.isHideInTrunk?.self,
                                hasTakeHand: mp.players.local.getVariable("takeHandTo") != null,
                            });
                            return;
                        }
                    }
                })
            } catch (err) {
                chatDebug(err)
            }
        }, "Меню гравця пішки"); 
        require("gamemode/scripts/voice.js");
        var currentWeaponData = {}
        var lastHudData = {} 
        
        mp.events.add("weapon.ForseUpdate", () => {
            currentWeaponData = {}
        });
        
        var isSwitchEnabled = false
        let isSwitchUnlocked = false

        mp.events.add('playerWeaponShot', (targetPosition, targetEntity) => {
            var weaponHash = localPlayer.currentWeapon();
            var generalAmmo = localPlayer.getAmmoWeapon(weaponHash);
            if (weaponHash && generalAmmo == 0) mp.events.callRemote(`item.weapon.setzero`);
        });

        mp.events.add("render", () => {
            if (!isSwitchEnabled && !isSwitchUnlocked) mp.game.invoke('0x0AFC4AF510774B47')
        })

        mp.events.add('setSwitchUnlocked', (state) => {
            isSwitchUnlocked = state
        });

        let currentArmour = mp.players.local.getArmour();
        
        mp.events.add("render", () => {
            var weaponHash = localPlayer.currentWeapon();
            var generalAmmo = localPlayer.getAmmoWeapon(weaponHash);
            var maxClip
            var ammoClip
            var ammoMagazineDisplay 

            // if (localPlayer.vehicle && localPlayer.vehicle.getPedInSeat(-1) == localPlayer.handle) mp.game.player.disableFiring(true)

            if (currentArmour !== mp.players.local.getArmour()) {
                if (mp.players.local.getArmour() < currentArmour && mp.players.local.getArmour() === 0) browserMenu.call(`inventoryAPI`, `removeArmour`)
                currentArmour =  mp.players.local.getArmour();
            }
            
            if (mp.currentWeaponHash && mp.players.local.vehicle && localPlayer.weapon !== mp.currentWeaponHash && !isSwitchEnabled) {
                isSwitchEnabled = true
            }
            else if (mp.currentWeaponHash && localPlayer.weapon === mp.currentWeaponHash && isSwitchEnabled) {
                isSwitchEnabled = false
            }
            else if ((!mp.currentWeaponHash || !mp.players.local.vehicle) && isSwitchEnabled) {
                isSwitchEnabled = false
            }

            if (weaponData[localPlayer.weapon] && localPlayer.weapon != 2725352035) { // Вывод патронов через maxClip
                maxClip = weaponData[localPlayer.weapon].DefaultClipSize 	

                if (!currentWeaponData.weaponHash || currentWeaponData.weaponHash !== weaponHash) { 
                    currentWeaponData.weaponHash = weaponHash;
                    var freeAmmoMagazine = parseInt(generalAmmo / maxClip) * maxClip
                    currentWeaponData.freeAmmo = generalAmmo - freeAmmoMagazine;
                }
                
                var ammoFree = generalAmmo - currentWeaponData.freeAmmo 
                var ammoInMagazine = parseInt((generalAmmo - currentWeaponData.freeAmmo) / maxClip) * maxClip
                ammoMagazineDisplay = ammoInMagazine + currentWeaponData.freeAmmo
                ammoClip = ammoFree - ammoInMagazine
                
                if (generalAmmo <= currentWeaponData.freeAmmo) {
                    ammoClip = generalAmmo
                    ammoMagazineDisplay = 0
                }
                else if (generalAmmo >= currentWeaponData.freeAmmo && ammoClip == 0) {
                    ammoClip = maxClip
                    ammoMagazineDisplay -= maxClip
                }
                
                
                if (mp.players.local.isReloading() && !currentWeaponData.reloading) { //Начали перезарядку
                    currentWeaponData.reloading = true
                }
                else if (!mp.players.local.isReloading() && currentWeaponData.reloading) { //Перезарядились
                    mp.events.callRemote(`playerWeaponReload`, generalAmmo);
                    currentWeaponData = {}
                } 
            }	
            else {
                currentWeaponData = {}
            }
            
            var data = { ammo: ammoMagazineDisplay, weaponHash: localPlayer.weapon, ammoInClip: ammoClip};
            if (lastHudData.ammo !== data.ammo || lastHudData.weaponHash !== data.weaponHash || lastHudData.ammoInClip !== data.ammoInClip) {
                browserMenu.call(`hudControl`, `changeOptions`, `setDataWeapon`, data)
                browserMenu.call(`inventoryAPI`, `updateAmmo`, 'update', mp.currentWeaponSqlId, data.weaponHash == "126349499" ? generalAmmo : ammoClip, maxClip)
                lastHudData = data
            } 
            if (mp.players.local.getVariable("followTo") != null) {
                let follower = mp.players.atRemoteId(mp.players.local.getVariable("followTo"))
                if (follower) {
                    let pos = follower.position;
                    let localPos = mp.players.local.position;
                    let dist = mp.game.system.vdist(pos.x, pos.y, pos.z, localPos.x, localPos.y, localPos.z);
                    if (dist > 40 && (!sendNotifyDate || Date.now() - sendNotifyDate > 1000)) {  
                        sendNotifyDate = Date.now()
                        return mp.events.callRemote("setFollowToPlayer", null)
                    }
                    if (follower.vehicle) { 
                        let vehicle = mp.vehicles.atHandle(follower.vehicle)
                        if (vehicle && vehicle.variable_owner > 1 && vehicle.variable_owner <= 100) {
                            if(follower.vehicle.isAnySeatEmpty() && (!taskEnterVehicleDate || Date.now() - taskEnterVehicleDate > 3500))
                            {   
                                taskEnterVehicleDate = Date.now()
                                if (follower.vehicle.isSeatFree(2)) {
                                    mp.players.local.taskEnterVehicle(follower.vehicle.handle, 1500, 2, 2, 1, 0);
                                }
                                else if (follower.vehicle.isSeatFree(1)) {
                                    mp.players.local.taskEnterVehicle(follower.vehicle.handle, 1500, 1, 2, 1, 0);
                                }
                                else if (follower.vehicle.isSeatFree(0)) {
                                    mp.players.local.taskEnterVehicle(follower.vehicle.handle, 1500, 0, 2, 1, 0);
                                }
                            } 
                        }
                    }
                    else {
                        if(mp.players.local.vehicle)
                        {
                            mp.players.local.taskLeaveVehicle(mp.players.local.vehicle.handle, 0);
                        }
                        else {
                            
                        }

                        // else { 
                        //     let speed = 4;
                        //     if (dist < 10) speed = 2;
                        //     if (dist < 5) speed = 1;
                        //     if (dist > 1) {
                        //         mp.players.local.taskGoStraightToCoord(
                        //             pos.x,
                        //             pos.y + 0.8,
                        //             pos.z,
                        //             speed, // speed
                        //             3000, // timeout
                        //             follower.getHeading(), // heading
                        //             0.5 // slide (?)
                        //         ); 
                        //     }
                        // }
                    }
                }
            }

            
        })
        requestAnimDicts();

    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\CharacterEvents.js authCharacter.success: ${err}`)
    }
});

class FollowPlayer {
    constructor(remoteId, followRemoteId) {
        this.remoteId = remoteId
        this.followRemoteId = followRemoteId
    }
}

class FollowManager {
    constructor() {
        this.followPlayers = []

        this.dict = 'anim@move_m@prisoner_cuffed'
        this.dict2 = 'anim@move_m@trash'
        this.dict3 = 'amb@world_human_drinking@coffee@female@base'

        mp.events.add("playerQuit", (entity) => {
            var value = entity.getVariable("followTo");

            if (value != undefined) {
                var follow = this.getFollow(entity.remoteId);

                if (follow) this.removeFollow(entity.remoteId);
            }
        })

        mp.events.addDataHandler("followTo", (entity, value) => {
            if (entity.type != "player") return

            if (value != undefined) {
                var follow = this.getFollow(value)

                if (!follow) this.addFollow(entity.remoteId, value)
            }
            else {
                var follow = this.getFollow(entity.remoteId)

                if (follow) this.removeFollow(entity.remoteId)
            }
        });

        mp.events.add("entityStreamIn", (entity) => {
            try {
                if (entity.type != "player") return

                var value = entity.getVariable("followTo");

                if (value != undefined) {
                    var follow = this.getFollow(value);

                    if (!follow) this.addFollow(entity.remoteId, value);
                }
            }
            catch (err) {
                mp.events.callRemote("log", `Error client gamemode\scripts\Follow.js entityStreamIn: ${err}`)
            }
        });

        mp.events.add("entityStreamOut", (entity, value) => {
            try {
                if (entity.type != "player") return

                var value = entity.getVariable("followTo");

                if (value != undefined) {
                    var follow = this.getFollow(entity.remoteId);

                    if (follow) this.removeFollow(entity.remoteId);
                }
            } catch (err) {
                mp.events.callRemote("log", `Error entityStreamOut: ${err}`)
            }
        });

        setInterval(() => {
            this.followPlayers.forEach((element) => {
                var player = mp.players.atRemoteId(element.remoteId)
                var follower = mp.players.atRemoteId(element.followRemoteId)

                if (isEntityExists(player) && isEntityExists(follower)) {
                    if (!player.isAttachedTo(follower.handle)) {
                        player.attachTo(follower.handle, 11816, 0.38, 0.4, 0.0, 0.0, 0.0, 0.0, false, false, true, true, 2, true)
                    }

                    if (follower.isWalking()) {
                        if (!player.isPlayingAnim(this.dict, 'walk', 3)) {
                            player.playAnim(this.dict, 'walk', 8.0, -8, -1, 1, 0.0, false, false, false)
                        }
                    }
                    else if (follower.isRunning() || follower.isSprinting()) {
                        if (!player.isPlayingAnim(this.dict2, 'run', 3)) {
                            player.playAnim(this.dict2, 'run', 8.0, -8, -1, 1, 0.0, false, false, false)
                        }
                    }
                    else {
                        player.stopAnimTask(this.dict, 'walk', -8.0)
                        player.stopAnimTask(this.dict2, 'run', -8.0)
                    }

                    if (!follower.isPlayingAnim(this.dict3, 'base', 3)) {
                        follower.playAnim(this.dict3, 'base', 8.0, 8.0, -1, 50, 0, false, false, false)
                    }
                }
            });
        }, 500);
    }

    addFollow(remoteId, followRemoteId) {
        this.followPlayers.push(new FollowPlayer(remoteId, followRemoteId));
    }

    getFollow(remoteId) {
        var found = this.followPlayers.find((element => element.remoteId == remoteId));

        if (found) return found;
        else return undefined;
    }

    removeFollow(remoteId) {
        var found = this.followPlayers.find(element => element.remoteId == remoteId);

        if (found) {
            var follow = mp.players.atRemoteId(found.remoteId);
            var player = mp.players.atRemoteId(found.followRemoteId);

            if (follow) {
                follow.detach(true, false);

                follow.stopAnimTask(this.dict, 'walk', -8.0)
                follow.stopAnimTask(this.dict2, 'run', -8.0)
            }

            if (player) {
                player.stopAnimTask(this.dict3, 'base', -8.0)
            }
        }

        var findIndex = this.followPlayers.findIndex(element => element.remoteId == remoteId);

        if (findIndex != -1) this.followPlayers.splice(findIndex, 1);
    }
}

new FollowManager

async function requestAnimDicts() {
    var anims = ["anim@heists@box_carry@", "amb@world_human_bum_slumped@male@laying_on_left_side@base",
        "amb@world_human_gardener_plant@female@base", "combat@damage@writhe", "move_crawl", "anim@move_m@prisoner_cuffed", "anim@move_m@trash", "amb@world_human_drinking@coffee@female@base"];

    for (var i = 0; i < anims.length; i++)
        mp.game.streaming.loadAnimDict(anims[i])
}

mp.events.add('removeArmour', () => {
    browserMenu.call(`inventoryAPI`, `removeArmour`)
});

mp.attachedObjects = {};
var vehAttachedObjects = {};
mp.takeObject = async (entity, value) => {
    if (isEntityExists(entity)) {
        var info = mp.attachInfo[value];
        if (!info) return mp.attachInfo[value];
        var pos = entity.position;
        var a = info.anim;
        var d = info.ptfx;
        if (value !== "prop_amb_phone" && value !== "p_car_keys_01" && value !== "ba_prop_battle_vape_01" && !info.playFixed) entity.clearTasksImmediately();
        
        if (a) {
            if (await mp.game.streaming.loadAnimDict(a.dict))
                entity.taskPlayAnim(a.dict, a.name, a.speed, a.speedOut ? a.speedOut : 0, -1, a.flag, 0, false, false, false);
        }
        if (mp.attachedObjects[entity.remoteId]) {
            mp.attachedObjects[entity.remoteId].destroy();
            delete mp.attachedObjects[entity.remoteId];
        }

        /*mp.attachedObjects[entity.remoteId] = mp.objects.new(mp.game.joaat(value), value == "p_car_keys_01" ? new mp.Vector3(pos.x, pos.y, pos.z - 10) : pos, {
            rotation: new mp.Vector3(0, 0, 30),
            dimension: -1
        });*/ 

        mp.attachedObjects[entity.remoteId] = mp.objects.new(mp.game.joaat(value), new mp.Vector3(pos.x, pos.y, pos.z - 10), {
            rotation: new mp.Vector3(0, 0, 30),
            dimension: -1
        }); 

        let target = await waitEntity(mp.attachedObjects[entity.remoteId]) 
        if (target && entity && entity.handle) {
            mp.attachedObjects[entity.remoteId].modelName = value
            var o = info.offset;
            mp.attachedObjects[entity.remoteId].attachTo(entity.handle, info.boneIdx ? entity.getBoneIndex(info.boneIdx) : info.bone, o.x, o.y, o.z, o.rX, o.rY, o.rZ, false, false, false, false, 2, true);
            if (d) {
                if (await mp.game.streaming.loadNamedPtfxAsset(d.dict))
                {
                    mp.game.graphics.setPtfxAssetNextCall(d.dict)
                    entity.__glowPtfxHandle = mp.game.graphics.startParticleFxLoopedOnEntityBone(d.name, entity.handle, 0.1, 0.0, -0.15, 0.0, 0.0, 90.0, info.bone, 1.0, false, false, false)
                    mp.game.graphics.setParticleFxLoopedColour(entity.__glowPtfxHandle, 255, 0, 0, false)
                }
            }
        }
    }
};
mp.putObject = (entity, value) => {
    if (isEntityExists(entity) && mp.attachedObjects[entity.remoteId] && isEntityExists(mp.attachedObjects[entity.remoteId])) {
        if (mp.attachedObjects[entity.remoteId]) {
            mp.attachedObjects[entity.remoteId].detach(true, true);
            mp.attachedObjects[entity.remoteId].destroy();
            delete mp.attachedObjects[entity.remoteId];
        }
        
        if (entity.__glowPtfxHandle) {
            mp.game.graphics.removeParticleFx(entity.__glowPtfxHandle, false);
            delete entity.__glowPtfxHandle;
        }
    }

    // if (modelName !== "prop_amb_phone" && modelName !== "prop_fishing_rod_01") entity.clearTasksImmediately();
};


mp.events.add("setRadiusVariable", (entity, name, value) => {
	if (name === "attachedObject") {
		if (entity.type == "player") {
            if (!value) mp.putObject(entity, value);
            else mp.takeObject(entity, value);
        }
	}
})

mp.events.add("testAttach", async (model, bone, x, y, z, rX, rY, rZ) => {
    if (mp.attachedObjects[mp.players.local.remoteId]) mp.attachedObjects[mp.players.local.remoteId].destroy();
    mp.attachedObjects[mp.players.local.remoteId] = mp.objects.new(mp.game.joaat(model), mp.players.local.position, {
        rotation: new mp.Vector3(0, 0, 30),
        dimension: -1
    });
    let target = await waitEntity(mp.attachedObjects[mp.players.local.remoteId]) 
    if (target && mp.players.local && mp.players.local.handle) {
        mp.attachedObjects[mp.players.local.remoteId].attachTo(mp.players.local.handle, bone, x, y, z, rX, rY, rZ, false, false, false, false, 2, true);
    }
});

mp.events.add("testAttachOff", () => {
    if (mp.attachedObjects[mp.players.local.remoteId]) mp.attachedObjects[mp.players.local.remoteId].destroy(), delete mp.attachedObjects[mp.players.local.remoteId];
});

mp.events.add("testVehAttach", async (model, bone, x, y, z, rX, rY, rZ, number) => {
    if (!number) number = 0;
    var veh = mp.players.local.vehicle;
    if (!mp.vehicles.exists(veh)) return;
    if (!vehAttachedObjects[veh.remoteId]) vehAttachedObjects[veh.remoteId] = {};
    if (vehAttachedObjects[veh.remoteId][number]) vehAttachedObjects[veh.remoteId][number].destroy();
    vehAttachedObjects[veh.remoteId][number] = mp.objects.new(mp.game.joaat(model), veh.position, {
        rotation: new mp.Vector3(0, 0, 30),
        dimension: -1
    });
    let target = await waitEntity(vehAttachedObjects[veh.remoteId][number]) 
    if (target && veh && veh.handle) {
        vehAttachedObjects[veh.remoteId][number].attachTo(veh.handle, bone, x, y, z, rX, rY, rZ, false, false, false, false, 2, true);
    }
});

mp.events.add("testVehAttachOff", (number) => {
    var veh = mp.players.local.vehicle;
    if (!mp.vehicles.exists(veh)) return;
    if (vehAttachedObjects[veh.remoteId] && vehAttachedObjects[veh.remoteId][number]) vehAttachedObjects[veh.remoteId][number].destroy();
});

let jobCloakroomMarker = undefined
const jobMarkers = {
    14: {marker: 36, color: [255, 165, 0, 100]}
}
mp.events.add("setJobCloakroom", (unique, show, pos) => {
    if (show) {
        jobCloakroomMarker = mp.markers.new(jobMarkers[unique] && jobMarkers[unique].marker ? jobMarkers[unique].marker : 31, pos, 0.8, {
            visible: true,
            color: jobMarkers[unique] && jobMarkers[unique].color ? jobMarkers[unique].color : [255, 165, 0, 100],
            rotation: 180
        });
        jobCloakroomMarker.unique = unique
    } else {
        if (jobCloakroomMarker) {
            jobCloakroomMarker.destroy();
            jobCloakroomMarker = undefined
        }
    }
})

let vehiclePickupPointData = []
mp.events.add("setVehiclePointData", (data, destroy) => {
    if (typeof data == "string") data = JSON.parse(data)
    if (destroy) {
        for (let key in vehiclePickupPointData) {
            if (vehiclePickupPointData[key].sqlId == data.sqlId) {
                if (vehiclePickupPointData[key].blip) {
                    mp.events.call("removeDynamicBlipsByUniqName", "vehiclePointData")
                }
                if (vehiclePickupPointData[key].marker && mp.markers.exists(vehiclePickupPointData[key].marker)) vehiclePickupPointData[key].marker.destroy()
                vehiclePickupPointData.splice(0, key)
            }
        }
        return
    }
    let params = {}
    let position = new mp.Vector3(data.posX, data.posY, data.posZ)
    if (data.blip) {
        params.blip = true 
        mp.events.call("createDynamicBlipsByParams", { id: data.blip, position, scale: 1, color: data.blipColor, name: "Пункт видачi ТЗ", uniqName: "vehiclePointData", shortRange: true })
    }
    if (data.marker) {
        params.marker = mp.markers.new(data.marker, position, 1, { 
            color: [255, 165, 0, 100] 
        });
    }
    params.sqlId = data.sqlId
    vehiclePickupPointData.push(params)
}) 
}; a; }
{let a = function scriptEntryPoint(mp) {

function playFocusSound() {
    mp.game.audio.playSoundFrontend(-1, "NAV_UP_DOWN", "HUD_FRONTEND_DEFAULT_SOUNDSET", true);
}

function playBackSound() {
    mp.game.audio.playSoundFrontend(-1, "CANCEL", "HUD_FRONTEND_DEFAULT_SOUNDSET", true);
}

function playSelectSound() {
    mp.game.audio.playSoundFrontend(-1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", true);
}

let historySurfingSelectMenu = []
 

mp.events.add("selectMenu.show", (menuName, selectedIndex = 0, values = null) => { 
    if (values) values = JSON.stringify(values); 
    browserMenu.call(`selectMenuAPI`, `show`, menuName, selectedIndex, values)
    historySurfingSelectMenu.push({ menuName, selectedIndex, values })
});

mp.events.add("selectMenu.hide", () => {
    historySurfingSelectMenu = []
    browserMenu.call(`selectMenuAPI`, `hide`)
});

mp.events.add("selectMenu.toggleTempHidden", (hide) => {
    browserMenu.call(`selectMenuAPI`, `tempHide`, hide)
});

mp.events.add("selectMenu.setSpecialItems", (menuName, items, alt) => { 
    if(alt){
        browserMenu.call(`selectMenuAPI`, `setSpecialItems`, menuName, items, true)
        return
    }
    browserMenu.call(`selectMenuAPI`, `setSpecialItems`, menuName, items)
});

mp.events.add("selectMenu.setHeader", (menuName, header) => {
    browserMenu.call(`selectMenuAPI`, `setHeader`, menuName, header)
});

mp.events.add("selectMenu.setItemName", (menuName, index, newName, updateCurrent) => {
    browserMenu.call(`selectMenuAPI`, `setItemName`, menuName, index, newName, updateCurrent)
});

mp.events.add("selectMenu.setItemPrice", (menuName, index, newName, updateCurrent) => {
    browserMenu.call(`selectMenuAPI`, `setItemPrice`, menuName, index, newName, updateCurrent)
});

var menuHandlers = {    
    "police_service": {
        "Відновлення речей": () => {
            mp.events.call("selectMenu.show", "police_service_recovery");
        },
        "Ліцензія на таксі": () => {
            mp.events.callRemote("getTaxiLic");
        },
        "Здати зброю": () => {
            mp.events.callRemote("getSeizedWeapons");
        },
    },
    "police_service_recovery": { 
        "Ключі від транспорту": () => {
            mp.events.callRemote("startPoliceRecoveryCarKeys");
        } 
    },

    "diamond_seller": {
        "Купити фішки": () => {
            mp.events.call("modal.show", "diamond_seller_buy") 
        },
        "Продати фішки": () => {
            mp.events.call("modal.show", "diamond_seller_sell") 
        }
    },

    "safe_family_interaction": {
        "Відкрити сейф": () => {
            mp.events.callRemote("interactionShowFamilySafe")
        },
        "Зняти грошi": () => {
            mp.events.callRemote("withdrawFromFamilySafe")
        },
        "Покласти грошi": () => {
            mp.events.callRemote("addToFamilySafe")
        },
    },

    "safe_interaction": {
        "Відкрити сейф": () => {
            mp.events.callRemote("interactionShowSafe")
        },
        "Зняти грошi": () => {
            mp.events.callRemote("startWithdrawFromSafe")
        },
        "Покласти грошi": () => {
            mp.events.callRemote("startAddToSafe")
        },
        "Здати заборонене": () => {
            mp.events.callRemote("getBannedItemsGov")
        },
        "Замовити постачання матеріалів": () => {
            mp.events.call(`selectMenu.hide`);
            mp.events.call("modal.show", "default_action", JSON.stringify({ minValue: 25000, maxValue: 100000, text: `Вартість – 5$ за одиницю<br>Мінімум: 25.000 од.<br>Максимум: 100.000 од.`, title: "Замовлення матеріалів", method: "orderFactionDelivery", itemId: 229 })); 
        },
        "Замовити постачання аптечок": () => {
            mp.events.call(`selectMenu.hide`);
            mp.events.call("modal.show", "default_action", JSON.stringify({ minValue: 50, maxValue: 200, text: `Вартість – 1.000$ за одиницю<br>Мінімум: 50 од.<br>Максимум: 200 од.`, title: "Замовлення аптечок", method: "orderFactionDelivery", itemId: 24 })); 
        },
        "Взяти заборонене": () => {
            mp.events.call("selectMenu.show", "safe_interaction_choice");
        },
        "Переробити амуніцію": () => {
            mp.events.callRemote("recycleFactionAmmunition")
        },
    },

    "safe_interaction_choice": {
        "Взяти матеріали": () => {
            mp.events.callRemote("takeBannedItemsGov", 1)
        },
        "Взяти наркотики": () => {
            mp.events.callRemote("takeBannedItemsGov", 0)
        },
    },
    
};
for (var key in menuHandlers) {
    menuHandlers[key]["Закрити"] = () => {
        mp.events.call(`selectMenu.hide`);
    }
}
let index_menu = ["biz_6_items"]


mp.events.add("selectMenu.itemSelected", (menuName, itemName, itemValue, itemIndex, itemId, features) => {
    playSelectSound();
    if (menuName == "biz_menu") {
        if (itemName == "Панель управління") mp.events.callRemote("playerOnBusinessPanel")
        else if (itemName == "Купити бізнес") mp.events.callRemote("playerOnBuyBusiness"); 
        else mp.events.callRemote("playerSelectBusinessItem", features)
        return
    }
    // todo: переписать с систему покупки, код старый вводит в заблуждение
    if (menuHandlers[menuName] !== undefined) {
        if (menuHandlers[menuName][itemId] !== undefined && menuName !== 'biz_6_items') {
        menuHandlers[menuName][itemId](itemValue, itemIndex);
        } else if (menuHandlers[menuName][itemName] || menuHandlers[menuName][itemIndex]) {
        if (index_menu.includes(menuName))
            menuHandlers[menuName][itemIndex](itemValue, itemIndex);
        else
            menuHandlers[menuName][itemName](itemValue, itemIndex);
        }
    }
    if (menuName == "police_service_recovery_keys"){
        mp.events.callRemote("PoliceRecoveryCarKeys", features);
    } 
    if (menuName == "taxi_lic_cars"){
        mp.events.callRemote("policeSetTaxiLic", features);
    } 
    if (menuName == "trashcans_sell") {
        mp.events.callRemote("trashcans.sell", itemIndex);
    }
    if (menuName == "faction_clothes_ranks") {
        mp.events.callRemote("customFactionClothesRank", features);
    }
    if (menuName == "faction_clothes_clothes") {
        features = JSON.parse(features)
        features.name = "робочу уніформу"
        mp.events.call("choiceMenu.show", "faction_storage", features)
    }
})
mp.events.add("selectMenu.itemValueChanged", (menuName, itemName, itemValue, itemIndex, valueIndex) => {
    //debug(`itemValueChanged: ${menuName} ${itemName} ${itemValue}`);
    var menuHandlers = {};

    if (menuHandlers[menuName] && menuHandlers[menuName][itemName])
        menuHandlers[menuName][itemName](itemValue); 
    //menuHandlers[menuName][itemName][itemValue]();
});

mp.events.add("selectMenu.itemFocusChanged", (menuName, itemName, itemValue, itemIndex, valueIndex, features) => {
    playFocusSound();
    var menuHandlers = { };
    if (menuHandlers[menuName] && menuHandlers[menuName][itemName]) menuHandlers[menuName][itemName](itemValue, itemIndex);

    if (menuName == "faction_clothes_clothes") mp.events.callRemote("changeFactionClothesPreview", features);
});
mp.events.add("selectMenu.backspacePressed", (menuName, itemName, itemValue, itemIndex) => {
    playBackSound();
    if (menuName == "duel") mp.events.call("setBlockControl", false)
    if (menuName == "faction_clothes_clothes") mp.events.callRemote("server::loadPlayerClothes");

    let data = historySurfingSelectMenu[historySurfingSelectMenu.length - 2]
    if (data) { 
        historySurfingSelectMenu.splice(historySurfingSelectMenu.length - 2, historySurfingSelectMenu.length)  
        mp.events.call("selectMenu.show", data.menuName, data.selectedIndex, data.values)
    } else {
        mp.events.call('selectMenu.hide')
    }
});

mp.events.add("setSelectMenuActive", (enable) => {
    mp.selectMenuActive = enable;
});




}; a; }
{let a = function scriptEntryPoint(mp) {
mp.modalActive = false
mp.events.add("client::setModalActive", (bool) => { mp.modalActive = bool })
mp.events.add("modal.show", (modalName, values = null) => { 
    let data = {
        name: modalName,
        data: values
    } 
    browserMenu.call("modalAPI", 'setData', data)
    mp.game.audio.playSoundFrontend(-1, "Short_Transition_In", "PLAYER_SWITCH_CUSTOM_SOUNDSET", true);
    //mp.events.callRemote("log", `${JSON.stringify(data)}`)
}); 
mp.events.add("modal.hide", () => {
    browserMenu.call("modalAPI", 'setData', null)
});

}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("prompt.show", (text, info = "!", header = "Підказка", renderTime = 10000) => {
    let data = { header: header, text: text, info: info, renderTime: renderTime, render: true}
    browserMenu.call(`hudControl`, `changeOptions`, `promptHandler`, data)
});
mp.events.add("prompt.hide", () => {
    let data = { header: null, text: null, info: null, renderTime: null, render: false}
    browserMenu.call(`hudControl`, `changeOptions`, `promptHandler`, data)
});

mp.events.add("promptSecondary.show", (text, time = 5000) => {
    let data = { render: true, text: text, time}
    browserMenu.call(`hudControl`, `changeOptions`, `promptSecondaryHandler`, data)
})

mp.events.add("promptSecondary.hide", () => { 
    let data = { render: false, text: null}
    browserMenu.call(`hudControl`, `changeOptions`, `promptSecondaryHandler`, data)
})

mp.events.add("promptThird.show", (data) => {
    browserMenu.call(`hudControl`, `changeOptions`, `promptThirdHandler`, data)
})

mp.events.add("promptThird.hide", () => { 
    browserMenu.call(`hudControl`, `changeOptions`, `promptThirdHandler`, false)
})

mp.events.add("promptFourth.show", (data) => {
    browserMenu.call(`hudControl`, `changeOptions`, `promptFourthHandler`, data)
})

mp.events.add("promptFourth.hide", () => { 
    browserMenu.call(`hudControl`, `changeOptions`, `promptFourthHandler`, false)
})



}; a; }
{let a = function scriptEntryPoint(mp) {


mp.choiceMenuActive = false
mp.events.add("choiceMenu.show", (name, values) => {  
    mp.choiceMenuActive = true
    if (typeof values == 'object') values = JSON.stringify(values)
    browserMenu.call("choiceMenu", 'show', name, values)
});

mp.events.add("choiceMenu.hide", () => {
    mp.choiceMenuActive = false
    browserMenu.call("choiceMenu", 'hide')
});

mp.events.add("employmentWorkMenu::setData", (data) => { 
    mp.choiceMenuActive = Object.keys(data).length > 0  
    browserMenu.call("employmentWorkMenuAPI", 'setData', data)
})

mp.events.add("client::hideWorkMenu", () => { 
    browserMenu.call("employmentWorkMenuAPI", 'closeWindow')
}) 
}; a; }
{let a = function scriptEntryPoint(mp) {

//mp.movingcam = mp.cameras.new('default', null, null, 45.0);


       

const Natives = {
    SWITCH_OUT_PLAYER: '0xAAB3200ED59016BC',
    SWITCH_IN_PLAYER: '0xD8295AF639FD9CB8',
    IS_PLAYER_SWITCH_IN_PROGRESS: '0xD9D2CFFF49FAB35F'
}; 
 
async function moveCamWithinAir(moveTo, switchType) {   
    if(mp.cameras.exists(mp.movingcam)) {
        mp.movingcam.setActive(false);
        mp.movingcam.destroy()
    } 
    switch (moveTo) {
        case 'up': 
            mp.game.invoke(Natives.SWITCH_OUT_PLAYER, mp.players.local.handle, 0, parseInt(switchType));
            mp.events.call("setFreeze", true)
            break;
        case 'down': 
            mp.game.invoke(Natives.SWITCH_IN_PLAYER, mp.players.local.handle); 
            mp.game.cam.renderScriptCams(false, true, 0, true, false);  
            let i = 0
            while (mp.game.invoke(Natives.IS_PLAYER_SWITCH_IN_PROGRESS)) {
                i++
                if (i >= 15) break
                await mp.game.waitAsync(0)
            }
            await sleep(3000)
            mp.events.callRemote("successfulSpawnCharacter")
            break;

        default:
            break;
    }
} 

mp.events.add("renderScriptCamsToPlayer", () => {
    mp.game.cam.renderScriptCams(false, true, 0, true, false); 

})

rpc.register("isMovingWithinAir", () => mp.game.invoke(Natives.IS_PLAYER_SWITCH_IN_PROGRESS))

mp.events.add("moveCamWithinAir", moveCamWithinAir)


let cameraFocusedOnPed = undefined
mp.events.add("focusOnPed", (position, heading) => {  
    let rotation = new mp.Vector3(0, 0, heading - 165) 
    let direction = new mp.Vector3(3.3 * Math.sin(-185 - rotation.z * Math.PI / 180), 3.3 * Math.cos(-185 - rotation.z * Math.PI / 180), 0);
    position = new mp.Vector3(position.x + direction.x * 0.3, position.y + direction.y * 0.3, position.z + 0.6) 
    
    if (!cameraFocusedOnPed)  cameraFocusedOnPed = mp.cameras.new('default', position, rotation, 50);   
    cameraFocusedOnPed.setActive(true);
    mp.game.cam.renderScriptCams(true, true, 500, true, false);  
})

mp.events.add("stopFocusOnPed", () => {
    if (!cameraFocusedOnPed) return
    cameraFocusedOnPed.setActive(false); 
    cameraFocusedOnPed.destroy()
    cameraFocusedOnPed = undefined
    mp.game.cam.renderScriptCams(false, true, 0, false, false);
})

mp.events.add("focusOnPlayer", (position, heading) => {
    let pos = position || mp.players.local.position
    var endRot = new mp.Vector3(-20, 0, heading - 180 || mp.players.local.getHeading() - 180);
    var direction = new mp.Vector3(3.3 * Math.sin(135 - endRot.z * Math.PI / 180), 3.3 * Math.cos(135 - endRot.z * Math.PI / 180), 0);
    var endPos = pos;   
    endPos.x += direction.x * 0.6;
    endPos.y += direction.y * 0.8; 
    endPos.z += 1
    if(!(mp.movingcam.camType == "focusOnPlayer" || mp.movingcam.camType == "focusOnHead" || mp.movingcam.camType == "focusOnBody" || mp.movingcam.camType == "focusOnLegs" || mp.movingcam.camType == "focusOnFeets")){
        if(mp.cameras.exists(mp.movingcam)){
            mp.movingcam.destroy()
            mp.movingcam = undefined
        }
        mp.movingcam = mp.cameras.new('default', pos, endRot, 45.0);
    }
    /*if (mp.movingcam.camType == "focusOnPlayer"){
        mp.movingcam.destroy()
        mp.movingcam = undefined
        mp.movingcam = mp.cameras.new('default', pos, endRot, 45.0); 
    } 
    */
    if (!mp.movingcam) mp.movingcam = mp.cameras.new('default', pos, endRot, 45.0); 
    var startPos = mp.movingcam.getCoord();
    var startRot = mp.game.cam.getGameplayCamRot(0);

    if (mp.movingcam.camType == "focusOnPlayer") return;
    mp.CameraMoveTo(startPos, endPos, startRot, endRot, 5, 45);
    mp.movingcam.camType = "focusOnPlayer";
});
mp.events.add("focusOnHead", (position, heading, mask) => {
    let pos = position || mp.players.local.position
    var endRot = new mp.Vector3(-20, 0, heading - 180 || mp.players.local.getHeading() - 180);
    var direction = new mp.Vector3(3.3 * Math.sin(135 - endRot.z * Math.PI / 180), 3.3 * Math.cos(135 - endRot.z * Math.PI / 180), 0);
    var endPos = pos
    endPos.x += direction.x * 0.3;
    endPos.y += direction.y * 0.4;
    endPos.z += 1;
    if (!mp.cameras.exists(mp.movingcam) || mask) {
        mp.movingcam = mp.cameras.new('default', pos, endRot, 45.0);
    }
    var startPos = mp.movingcam.getCoord();
    var startRot = mp.game.cam.getGameplayCamRot(0);  
    mp.movingcam.setFov(45);
    mp.movingcam.setActive(true);
    mp.game.cam.renderScriptCams(true, true, 1000, true, false);

    if (mp.movingcam.camType == "focusOnHead") return;
    mp.CameraMoveTo(startPos, endPos, startRot, endRot, 5, 45);
    mp.movingcam.camType = "focusOnHead";
});
mp.events.add("focusOnBody", (position, heading) => {
    let pos = position || mp.players.local.position
    var endRot = new mp.Vector3(-20, 0, heading - 180 || mp.players.local.getHeading() - 180);
    var direction = new mp.Vector3(3.3 * Math.sin(135 - endRot.z * Math.PI / 180), 3.3 * Math.cos(135 - endRot.z * Math.PI / 180), 0);
    var endPos = pos; 
    endPos.x += direction.x * 0.4;
    endPos.y += direction.y * 0.5;
    endPos.z += 0.7;
    if (!mp.movingcam) mp.movingcam = mp.cameras.new('default', pos, endRot, 45.0);
    var startPos = mp.movingcam.getCoord();
    var startRot = mp.game.cam.getGameplayCamRot(0);

    if (mp.movingcam.camType == "focusOnBody") return;
    mp.CameraMoveTo(startPos, endPos, startRot, endRot, 5, 45);
    mp.movingcam.camType = "focusOnBody";
});
mp.events.add("focusOnLegs", (position, heading) => {
    let pos = position || mp.players.local.position
    var endRot = new mp.Vector3(-20, 0, heading - 180 || mp.players.local.getHeading() - 180);
    var direction = new mp.Vector3(3.3 * Math.sin(135 - endRot.z * Math.PI / 180), 3.3 * Math.cos(135 - endRot.z * Math.PI / 180), 0);
    var endPos = pos;
    endPos.x += direction.x * 0.5;
    endPos.y += direction.y * 0.6;
    endPos.z += 0;

    if (!mp.movingcam) mp.movingcam = mp.cameras.new('default', pos, endRot, 45.0);
    var startPos = mp.movingcam.getCoord();
    var startRot = mp.game.cam.getGameplayCamRot(0);

    if (mp.movingcam.camType == "focusOnLegs") return;
    mp.CameraMoveTo(startPos, endPos, startRot, endRot, 5, 45);
    mp.movingcam.camType = "focusOnLegs";
});
mp.events.add("focusOnFeets", (position, heading) => {
    let pos = position || mp.players.local.position
    var endRot = new mp.Vector3(-20, 0, heading - 180 || mp.players.local.getHeading() - 180);
    var direction = new mp.Vector3(3.3 * Math.sin(135 - endRot.z * Math.PI / 180), 3.3 * Math.cos(135 - endRot.z * Math.PI / 180), 0);
    var endPos = pos;
    endPos.x += direction.x * 0.5;
    endPos.y += direction.y * 0.6;
    endPos.z += -0.2;

    if (!mp.movingcam) mp.movingcam = mp.cameras.new('default', pos, endRot, 45.0);
    var startPos = mp.movingcam.getCoord();
    var startRot = mp.game.cam.getGameplayCamRot(0);

    if (mp.movingcam.camType == "focusOnFeets") return;
    mp.CameraMoveTo(startPos, endPos, startRot, endRot, 5, 45);
    mp.movingcam.camType = "focusOnFeets";
});

mp.events.add("finishMoveCam", () => {
    finishMoveCam();
});

mp.events.add("finishMoveCamWithRender", async () => {
    mp.game.cam.renderScriptCams(false, true, 1000, false, true);
    await sleep(1000);
    finishMoveCam();
});
 
 
mp.CameraMoveTo = (startPos, endPos, startRot, endRot, speed, angle) => {
    camPathHandler(-1, startPos, endPos, startRot, endRot, speed, angle);
}

function moveCamToPoint() {
    var pos = mp.movingcam.getCoord();
    var rot = mp.game.cam.getGameplayCamRot(0);
    mp.movingcam.setCoord(pos.x += mp.movingcam.dx, pos.y += mp.movingcam.dy, pos.z += mp.movingcam.dz);
    mp.movingcam.setRot(rot.x + mp.movingcam.rx, rot.y + mp.movingcam.ry, rot.z + mp.movingcam.rz, 2);

    if (Math.abs(mp.movingcam.endX - pos.x) < Math.abs(mp.movingcam.dx) || Math.abs(mp.movingcam.endY - pos.y) < Math.abs(mp.movingcam.dy) || Math.abs(mp.movingcam.endZ - pos.z) < Math.abs(mp.movingcam.dz)) {
        if (!mp.movingcam.isCutScene) {
            mp.movingcam.startmove = false;
            return;
        }

        if (mp.indexPathForMoveCam == mp.amountPointsForMoveCam - 1) {
            finishMoveCam();
        } else {
            mp.indexPathForMoveCam++;
            camPathHandler(mp.indexPathForMoveCam);
        }
    }
}

mp.events.add("render", (playersWithText, menu2) => {
    if (mp.movingcam)
        if (mp.movingcam.startmove)
            moveCamToPoint();
});
 

function camPathHandler(index, startPos, endPos, startRot, endRot, speed, angle) { 
    if (!angle) angle = 90;
    if (!mp.movingcam) mp.movingcam = mp.cameras.new('default', startPos, startRot, angle); 
    mp.movingcam.setFov(angle);
    mp.movingcam.setActive(true);
    mp.game.cam.renderScriptCams(true, true, 1000, true, false);

    var dx = endPos.x - startPos.x;
    var dy = endPos.y - startPos.y;
    var dz = endPos.z - startPos.z;

    var length = Math.sqrt(dx * dx + dy * dy + dz * dz);

    mp.movingcam.dx = (dx / length) * (speed / 100);
    mp.movingcam.dy = (dy / length) * (speed / 100);
    mp.movingcam.dz = (dz / length) * (speed / 100);

    var amountFrame = Math.round(dx / mp.movingcam.dx);
    if (amountFrame == null || isNaN(amountFrame)) amountFrame = 1;

    mp.movingcam.startmove = true;
    mp.movingcam.rx = (endRot.x - startRot.x) / amountFrame;
    mp.movingcam.ry = (endRot.y - startRot.y) / amountFrame;
    mp.movingcam.rz = (endRot.z - startRot.z) / amountFrame; 

    mp.movingcam.endX = endPos.x;
    mp.movingcam.endY = endPos.y;
    mp.movingcam.endZ = endPos.z;

}

function finishMoveCam() {
    if (!mp.movingcam) return;
    mp.movingcam.setActive(false); 
    mp.game.cam.renderScriptCams(false, false, 0, false, false); 
    delete mp.movingcam.camType; 
} 
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.nametags.enabled = false;

const width = 0.025;
const height = 0.004;
const border = 0.001;

let isActive = true;
let isActiveNickname = true; 
let resolution;
let widthText = 0.0;
let iconsWidth = 0.0;
let scale = 0.35;
 
mp.events.add("nametags::show", (state) => {
    isActive = state;
}); 

mp.events.add("authCharacter.success", () => {
    try {
        mp.events.add('render', (nametags) => {
            try {
                if (mp.settings.nick) return;
                if (!Array.isArray(nametags) || !isActive) {
                    return;
                }
            
                nametags.forEach(nametag => {
                    let [player, x, y, distance] = nametag;
                    if (player.id != mp.players.local.id && player.dimension == mp.players.local.dimension && player.getAlpha() != 0 && mp.players.local.hasClearLosTo(player.handle, 17)) {
                        let username
                        if ((mp.familiars.isFamiliar(player.getVariable("sqlId")) && !player.variable_hasMask) || (mp.clientStorage["faction"] && player.getVariable("faction") === mp.clientStorage["faction"]) || (mp.clientStorage["family"] && player.getVariable("family") === mp.clientStorage["family"]) || (mp.clientStorage["marriageTo"] && mp.clientStorage["marriageTo"] === player.getVariable("sqlId"))) {
                            username = player.getVariable("Nickname") ? `${player.getVariable("Nickname")} (${player.getVariable("sqlId")})` : `${player.name ? player.name.replaceAll('_',' ') : ""} (${player.remoteId})`;  
                        }
                        else {
                            username = player.getVariable("Nickname") ? `${player.isMale() ? 'Незнайомець' : 'Незнайомка'} (${player.remoteId})` : `${player.isMale() ? 'Незнайомець' : 'Незнайомка'} (${player.remoteId})`;  
                        }
                        
                        if (!player.variable_invisible) drawMpGamerTag(player, username, x, y, distance);
                    }
                });
            } 
            catch (err) {
                chatDebug(err)
            }
        });
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\Nametags.js authCharacter.success: ${err}`)
    }
})

function drawMpGamerTag(player, name, x, y, dist) {

    var distance = vdist(mp.players.local.position, player.position);
    if (distance > 20.0) return;
    let message
    if (typeof player.getVariable("chatMessage") == "string") {
        message = player.getVariable("chatMessage")
        message = message.replace(/і|є|ї|І|Є|Ї/g, match => 
            'iеiIЕI'[ 'ієїІЄЇ'.indexOf(match) ]
        );
    }
    y += 0.05 - (distance * 0.0005);
 
    resolution = mp.game.graphics.getScreenActiveResolution(0, 0);
    // y -= scale * (0.0005 * (resolution.y / 1080));
    if (player.getVariable("sqlId") && !player.getVariable("isAfk")) gamertag_DrawText(x, y - 0.020, `#${player.getVariable("sqlId")}`, 180, [255, 255, 255]);
    else gamertag_DrawText(x, y - 0.020, `#${player.getVariable("sqlId")} [AFK]`, 180, [255, 255, 255]);
    if (typeof player.getVariable("chatMessage") == "string") gamertag_DrawText(x, y - 0.040, message, 180);
    if (!isTargetPlayer(player)) {
        drawGamerNameAndIcons(player, name, x, y, distance, 210, false);
    } else {
        drawGamerNameAndIcons(player, name, x, y, distance, 255, true);
    }
}
function getVoiceSprite(isVoiceActive, distance) {
    if (!isVoiceActive) return "leaderboard_audio_inactive";
    if (distance < 5) return "leaderboard_audio_3";
    if (distance < 12) return "leaderboard_audio_2";
    return "leaderboard_audio_1";
}

function getVoiceSpriteColor(name) {
    if (name == "leaderboard_audio_mute") return [255, 255, 255, 180];
    if (name == "leaderboard_audio_1") return [255, 255, 255, 200];
    if (name == "leaderboard_audio_2") return [255, 255, 255, 220];
    if (name == "leaderboard_audio_3") return [255, 255, 255, 255];
    return [255, 255, 255, 255];
}

function getNicknameColor(player) {
    let admin = player.getVariable("admin");
    if (typeof player.getVariable("NicknameColor") == "string") {
        let color = JSON.parse(player.getVariable("NicknameColor"))
        if (Array.isArray(color)) return color;
    }
    if (mp.clientStorage["marriageTo"] && mp.clientStorage["marriageTo"] === player.getVariable("sqlId")) return [227, 95, 192];
    if (player.getVariable("faction") == mp.players.local.getVariable("faction") && player.getVariable("factionTag")) return [102, 255, 0];
    if (player.getVariable("faction") && mp.clientStorage["allianceFactions"] && mp.clientStorage["allianceFactions"].includes(player.getVariable("faction"))) return [52, 115, 10];
    if (!admin) return [255, 255, 255];
    if (admin >= 1 && admin < 5) return [0, 128, 128];
    if (admin == 5) return [0, 255, 255];
    if (admin >= 6 && admin <= 8) return [255, 0, 78];
    if (admin == 9) return [255, 0, 0];
    return [0, 0, 0];
}

function isTargetPlayer(player) {
    return (
        mp.game.player.isFreeAimingAtEntity(player.handle) ||
        mp.game.player.isTargettingEntity(player.handle)
    );
}

function drawGamerNameAndIcons(player, name, x, y, distance, alpha, healthammobar) { 

    widthText = gamertag_GetWidthText(name);

    var voiceSprite = getVoiceSprite(player.isVoiceActive, distance);
    var voiceSpriteColor = getVoiceSpriteColor(voiceSprite);

    if (!player.getVariable("voiceMute")) gamertag_AddNameIcon("mpleaderboard", voiceSprite, voiceSpriteColor, false, x + 0.008, y + 0.0125);
    else gamertag_AddNameIcon("mpleaderboard", "leaderboard_audio_mute", [255, 255, 255, 255], false, x + 0.008, y + 0.0125);
    //if (player.getVariable("factionRank") == 7) gamertag_AddNameIcon("commonmenutu", "custom_mission", [255, 255, 255, 255], false, x + 0.008, y - 0.010);
    if (player.getVariable("knockDown")) gamertag_AddNameIcon("mpinventory", "deathmatch", [178, 34, 34, 255], false, x - 0.013, y - 0.050, 0.73)
    if (player.variable_godmode) gamertag_AddNameIcon("commonmenutu", "survival", [79, 207, 0, 255], false, x - 0.022, y - 0.050, 0.73)

    var sumWidth = iconsWidth + widthText;
    var color = getNicknameColor(player);

    gamertag_DrawText(x + (widthText / 2) - (sumWidth / 2), y, name, 180, color);

    if (healthammobar) {
        var health = player.getHealth() / 100;
        var armour = player.getArmour() / 100;


        if (!armour) { 
            mp.game.graphics.drawRect(x, y + 0.042, width + border * 2, height + border * 2, 0, 0, 0, 200); // бордер
            mp.game.graphics.drawRect(x, y + 0.042, width, height, 150, 150, 150, 255); // фон
            mp.game.graphics.drawRect(x - width / 2 * (1 - health), y + 0.042, width * health, height, 255, 255, 255, 200); // заливка
        } else { 
            mp.game.graphics.drawRect(x, y + 0.042, width + border * 2, height + border * 2, 0, 0, 0, 200); // бордер
            mp.game.graphics.drawRect(x, y + 0.042, width, height, 150, 150, 150, 255); // фон
            mp.game.graphics.drawRect(x - width / 2 * (1 - health), y + 0.042, width * health, height, 255, 255, 255, 200); // заливка 
 
            mp.game.graphics.drawRect(x, y + 0.03, width + border * 2, height + border * 2, 0, 0, 0, 200); // бордер армор
            mp.game.graphics.drawRect(x, y + 0.03, width, height, 41, 66, 78, 255); // фон армор
            mp.game.graphics.drawRect(x - width / 2 * (1 - armour), y + 0.03, width * armour, height, 48, 108, 135, 200); // заливка армор
        }
    }
}

function gamertag_AddNameIcon(dict, name, color, onlytarget, x, y, scaleMultiplier = 0.9) {
    //onlytarget soon
    mp.game.graphics.requestStreamedTextureDict(dict, true);
    var textureResolution = mp.game.graphics.getTextureResolution(dict, name);

    var scalex = (scaleMultiplier * textureResolution.x) / resolution.x;
    var scaley = (scaleMultiplier * textureResolution.y) / resolution.y;

    iconsWidth = ((scalex / 2) + 0.005) * 1;
    var sumWidth = widthText + iconsWidth;

    mp.game.graphics.drawSprite(dict, name, x + widthText - (sumWidth / 2), y, scalex, scaley, 0, color[0], color[1], color[2], color[3]);
}

function gamertag_GetWidthText(text) {
    mp.game.ui.setTextEntryForWidth("STRING");
    mp.game.ui.addTextComponentSubstringPlayerName(text);
    mp.game.ui.setTextFont(4);
    mp.game.ui.setTextScale(scale, scale);
    return mp.game.ui.getTextScreenWidth(true);
}

function gamertag_DrawText(x, y, text, alpha = 255, color = [255, 255, 255]) {
    mp.game.ui.setTextFont(4);
    mp.game.ui.setTextScale(scale, scale);
    mp.game.ui.setTextColour(color[0], color[1], color[2], alpha);
    mp.game.ui.setTextJustification(0);
    mp.game.invoke("0x2513DFB0FB8400FE");
    mp.game.ui.setTextEntry("STRING");
    mp.game.ui.addTextComponentSubstringPlayerName(text);
    mp.game.ui.drawText(x, y);
}
}; a; }
{let a = function scriptEntryPoint(mp) {
const localPlayer = mp.players.local; 

mp.keys.bindEx(100, false, () => { //left 
    if (mp.bindBlocker()) return;
    var veh = mp.players.local.vehicle; 
    if (!mp.vehicles.exists(veh)) return; 
    var leftSignal = veh.variable_leftSignal;
    var rightSignal = veh.variable_rightSignal;
    var isDriver = veh.getPedInSeat(-1) == localPlayer.handle; 
    if ((!leftSignal || !rightSignal) && isDriver) {
        mp.events.callRemote(`setLeftSignal`, !leftSignal);
    }
}, "Лівий поворотник", 1);

mp.keys.bindEx(102, false, () => { //right
    if (mp.bindBlocker()) return;
    var veh = mp.players.local.vehicle;
    if (!mp.vehicles.exists(veh)) return;
    var leftSignal = veh.variable_leftSignal;
    var rightSignal = veh.variable_rightSignal;
    var isDriver = veh.getPedInSeat(-1) == localPlayer.handle; 
    if ((!leftSignal || !rightSignal) && isDriver) {
        mp.events.callRemote(`setRightSignal`, !rightSignal);
    }
}, "Правий поворотник", 1);

mp.keys.bindEx(101, false, () => { //emergency
    if (mp.bindBlocker()) return;
    var veh = mp.players.local.vehicle;
    if (!mp.vehicles.exists(veh)) return;
    var leftSignal = veh.variable_leftSignal;
    var rightSignal = veh.variable_rightSignal;
    var isDriver = veh.getPedInSeat(-1) == localPlayer.handle;
    if (!isDriver) return;

    if (leftSignal && rightSignal) {
        mp.events.callRemote(`setEmergencySignal`, false);
    } else {
        mp.events.callRemote(`setEmergencySignal`, true);
    }
}, "Аварійка", 1);


mp.keys.bindEx(89, false, () => { // Y (sirens sound)
    if (mp.bindBlocker()) return;
    var veh = mp.players.local.vehicle;
    if (!mp.vehicles.exists(veh)) return;
    var isDriver = veh.getPedInSeat(-1) == localPlayer.handle;
    if (!isDriver || veh.getClass() != 18) return;

    var sirenSound = (veh.hasVariable("sirenSound")) ? veh.variable_sirenSound : false;

    mp.events.callRemote(`setSirenSound`);
}, "Сирена");

}; a; }
{let a = function scriptEntryPoint(mp) {

mp.playersOnlineActive = false
mp.maxOnline = 0

mp.events.add('playerJoin', () => {
    browserMenu.call(`hudControl`, `changeOptions`, `setOnline`, mp.players.length)
    if (mp.players.length > mp.maxOnline) {
        mp.maxOnline = mp.players.length
        browserMenu.call(`onlinePlayersAPI`, 'setMaxOnline', mp.maxOnline)
    }
})

mp.events.add("playerQuit", () => {
    browserMenu.call(`hudControl`, `changeOptions`, `setOnline`, mp.players.length - 1)
})

mp.events.add("authCharacter.success", () => {
    browserMenu.call(`hudControl`, `changeOptions`, `setOnline`, mp.players.length)
    if (mp.players.length > mp.maxOnline) {
        mp.maxOnline = mp.players.length
        browserMenu.call(`onlinePlayersAPI`, 'setMaxOnline', mp.maxOnline)
    }
})

mp.events.add("playersOnline.setMaxOnline", (amount) => {
    if (amount > mp.maxOnline) {
        mp.maxOnline = amount
        browserMenu.call(`onlinePlayersAPI`, 'setMaxOnline', mp.maxOnline)
    }
})

mp.events.add("playersOnline.setProperty", (sqlId, property, value) => {
    if (mp.playersOnlineActive) browserMenu.call(`onlinePlayersAPI`, 'setProperty', { sqlId, property, value })
})

function getData() {
    let players = []

    mp.players.forEach((rec) => {
        if (mp.familiars.isFamiliar(rec.getVariable("sqlId"))) {
            players.push({
                id: rec.remoteId,
                name: rec.name,
                score: rec.getVariable("level"),
                tag: rec.getVariable("factionTag"),
                sqlId: rec.getVariable("sqlId"),
            })
        }

        if (rec == mp.players.local) {
            players.push({
                id: rec.remoteId,
                name: rec.name,
                score: rec.getVariable("level"),
                tag: rec.getVariable("factionTag"),
                sqlId: rec.getVariable("sqlId"),
            })
        }
    })

    browserMenu.call(`onlinePlayersAPI`, 'show', players)
}

mp.events.add("authCharacter.success", () => {
    try {
        mp.keys.bindEx(0x72, true, () => {
            if (mp.bindBlocker({online: mp.playersOnlineActive, noknock: true, gungamecheck: true})) return;

            if (mp.playersOnlineActive) {
                mp.playersOnlineActive = false
                setCursor(false)
                browserMenu.call(`onlinePlayersAPI`, 'show', false)
            }
            else {
                mp.playersOnlineActive = true
                setCursor(true)
                getData()
            }
            
        }, "Гравці онлайн", 3) 
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\OnlinePlayers.js authCharacter.success: ${err}`)
    }
}) 

mp.events.add("playersOnline.forceClose", () => {
    if (mp.playersOnlineActive) {
        mp.playersOnlineActive = !mp.playersOnlineActive
        browserMenu.call(`onlinePlayersAPI`, 'show', mp.playersOnlineActive)
    }
})

mp.events.add("playersOnline.refresh", () => {
    if (mp.playersOnlineActive) getData()
})


}; a; }
{let a = function scriptEntryPoint(mp) {
let hour
let minute
let second


let weather
let nextWeather
let staticWeather = false
let progress = 0

let staticTime = false

mp.events.add("setWeather", (w1, w2, curProgress, forceClean = false) => {
    if (w2) {
        weather = mp.game.gameplay.getHashKey(w1)
        nextWeather = mp.game.gameplay.getHashKey(w2)
        progress = curProgress
        staticWeather = false
        switch (w2) {
            case "THUNDER":
                mp.game.gameplay.setWindSpeed(12.0);
                break
            case "EXTRASUNNY":
                mp.game.gameplay.setWindSpeed(1.0);
                break
            case "CLEAR":
                mp.game.gameplay.setWindSpeed(1.0);
                break
            case "CLOUDS":
                mp.game.gameplay.setWindSpeed(5.0);
                break
            case "SMOG":
                mp.game.gameplay.setWindSpeed(1.0);
                break
            case "FOGGY":
                mp.game.gameplay.setWindSpeed(5.0);
                break
            case "OVERCAST":
                mp.game.gameplay.setWindSpeed(2.0);
                break
            default:
                mp.game.gameplay.setWindSpeed(0.0);
                break
        }

        if (forceClean) {
            mp.game.gameplay.clearWeatherTypePersist();
            mp.game.gameplay.clearWeatherTypeOvertimePersist(0);    
            mp.game.gameplay.clearOverrideWeather();
    }
    }
    else {
        weather = w1
        staticWeather = true
    }
})

const serverToGameTime = [
    { gameHour: 0, gameMinute: 0 },   // 00:00 - 01:00
    { gameHour: 1, gameMinute: 0 },   // 01:00 - 02:00
    { gameHour: 2, gameMinute: 0 },   // 02:00 - 03:00
    { gameHour: 3, gameMinute: 0 },   // 03:00 - 04:00
    { gameHour: 4, gameMinute: 0 },   // 04:00 - 05:00
    { gameHour: 5, gameMinute: 0 },   // 05:00 - 06:00
    { gameHour: 6, gameMinute: 0 },   // 06:00 - 07:00
    { gameHour: 7, gameMinute: 0 },   // 07:00 - 08:00
    { gameHour: 8, gameMinute: 0 },   // 08:00 - 09:00
    { gameHour: 9, gameMinute: 0 },   // 09:00 - 10:00
    { gameHour: 10, gameMinute: 0 },  // 10:00 - 11:00
    { gameHour: 11, gameMinute: 0 },  // 11:00 - 12:00
    { gameHour: 12, gameMinute: 0 },  // 12:00 - 13:00
    { gameHour: 13, gameMinute: 0 },  // 13:00 - 14:00
    { gameHour: 14, gameMinute: 0 },  // 14:00 - 15:00
    { gameHour: 15, gameMinute: 0 },  // 15:00 - 16:00
    { gameHour: 16, gameMinute: 0 },  // 16:00 - 17:00
    { gameHour: 17, gameMinute: 0 },  // 17:00 - 18:00
    { gameHour: 18, gameMinute: 0 }, // 18:00 - 19:00
    { gameHour: 19, gameMinute: 0 },  // 19:00 - 20:00
    { gameHour: 20, gameMinute: 0 }, // 20:00 - 21:00
    { gameHour: 21, gameMinute: 0 },  // 21:00 - 22:00
    { gameHour: 22, gameMinute: 0 }, // 22:00 - 23:00
    { gameHour: 23, gameMinute: 0 }   // 23:00 - 00:00
];

function getGameTime(serverHour, serverMinute, serverSecond = 0) {
    if (serverHour < 0 || serverHour > 23 || serverMinute < 0 || serverMinute > 59 || serverSecond < 0 || serverSecond > 59) {
        return chatDebug(`getGameTime error ${serverHour} ${serverMinute} ${serverSecond}`);
    }
    if (serverHour === 23) {
        return { gameHours: serverHour, gameMinutes: serverMinute, gameSecond: serverSecond };
    }

    let index = serverHour;
    let gameHour = serverToGameTime[index].gameHour;
    let gameMinute = serverToGameTime[index].gameMinute;

    const nextIndex = (index + 1) % 24;
    const nextGameHour = serverToGameTime[nextIndex].gameHour;
    const nextGameMinute = serverToGameTime[nextIndex].gameMinute;

    const totalMinutesInHour = 60;
    const totalSecondsInMinute = 60;

    const totalCurrentGameMinutes = gameHour * totalMinutesInHour + gameMinute;
    const totalNextGameMinutes = nextGameHour * totalMinutesInHour + nextGameMinute;

    const totalServerMinutes = serverMinute + serverSecond / totalSecondsInMinute;

    const addedGameMinutes = (totalServerMinutes / totalMinutesInHour) * (totalNextGameMinutes - totalCurrentGameMinutes);

    gameMinute += Math.floor(addedGameMinutes);
    gameHour += Math.floor(gameMinute / totalMinutesInHour);
    gameMinute = gameMinute % totalMinutesInHour;

    // Calculating game seconds
    const fractionalGameMinutes = addedGameMinutes % 1;
    let gameSecond = Math.floor(fractionalGameMinutes * totalSecondsInMinute);

    if (gameSecond >= totalSecondsInMinute) {
        gameSecond = 0;
        gameMinute += 1;
    }

    if (gameMinute >= totalMinutesInHour) {
        gameMinute = 0;
        gameHour += 1;
    }

    if (gameHour >= 24) {
        gameHour = gameHour % 24;
    }

    return { gameHours: gameHour, gameMinutes: gameMinute, gameSecond: gameSecond };
}


mp.events.add("setTime", (hours, minutes, seconds, freezeTime) => {
    try {
        hour = hours || 0
        minute = minutes || 0
        second = seconds || 0
        if (freezeTime) {
            staticTime = true
            mp.game.time.setClockTime(hour, minute, second);
        }
        else {
            staticTime = false
            let gameTime = getGameTime(hour, minute, second);
            if (gameTime) mp.game.time.setClockTime(gameTime.gameHours, gameTime.gameMinutes, gameTime.gameSecond);
        }
    } catch (err) {
        chatDebug(`Error: ${err}`)
        mp.events.callRemote("log", `Error client setTime ${err}`)
    }
})

setInterval(() => {
    if (staticWeather) {
        if (weather) {
            mp.game.gameplay.setWeatherTypeNow(weather)
            mp.game.gameplay.setWeatherTypeOverTime(weather, 0);
            mp.game.gameplay.setWeatherTypePersist(weather);
            mp.game.gameplay.setWeatherTypeNowPersist(weather);
            mp.game.gameplay.setOverrideWeather(weather);
        }
    }
    else {
        if (weather && nextWeather) {
            progress += 500
            let progressTransition = (progress / (3600000 / 100)) / 100
            if (progressTransition > 1) progressTransition = 1
            mp.game.gameplay.setWeatherTypeTransition(weather, nextWeather, progressTransition)
        }  
    }

    if (hour === undefined || minute === undefined) return
    if (minute >= 60) return

    if (staticTime) {
        mp.game.time.setClockTime(hour, minute, 0)
    }
    else {
        second += 0.5

        if (second >= 60) {
            second = 0
            minute++
        }

        let gameTime = getGameTime(hour, minute, parseInt(second));
        if (gameTime) mp.game.time.setClockTime(gameTime.gameHours, gameTime.gameMinutes, gameTime.gameSecond);
    }
}, 500);
}; a; }
{let a = function scriptEntryPoint(mp) {
//Fingerpointing
class Pointing {
	constructor() {
		this.active = false;
		this.interval = null;
		this.lastSent = 0;
		this.gameplayCam = mp.cameras.new("gameplay");
		this.lastSync = 0;
		this.load();
	}
	async load() {
		await mp.game.streaming.loadAnimDict("anim@mp_point")
	}
	start() {
		try {
			if (this.active || mp.players.local.isFreeze || mp.players.local.isBlockControl || mp.players.local.getVariable("cuffedBy") != null || mp.players.local.getVariable("boundedBy") != null) return
			this.active = true;

			if (!mp.game.streaming.hasAnimDictLoaded("anim@mp_point")) this.load();
			mp.game.invoke("0x0725a4ccfded9a70", mp.players.local.handle, 0, 1, 1, 1);
			mp.players.local.setConfigFlag(36, true)
			mp.players.local.taskMoveNetwork("task_mp_pointing", 0.5, false, "anim@mp_point", 24);
			mp.game.streaming.removeAnimDict("anim@mp_point");

			this.interval = setInterval(this.process.bind(this), 0);
		} catch (err) {
			mp.events.callRemote("log", `forefinger: ${err}`)
		}
	}
	stop() {
		if (this.active) {
			clearInterval(this.interval);
			this.interval = null;

			this.active = false;

			mp.game.invoke("0xd01015c7316ae176", mp.players.local.handle, "Stop");

			if (!mp.players.local.isInAnyVehicle(true)) {
				mp.game.invoke("0x0725a4ccfded9a70", mp.players.local.handle, 1, 1, 1, 1);
			}
			mp.players.local.setConfigFlag(36, false);
			mp.players.local.clearTasks();
		}
	}
	getRelativePitch() {
		let camRot = this.gameplayCam.getRot(2);
		return camRot.x - mp.players.local.getPitch();
	}
	process() {
		try {
			if (this.active) {
				mp.game.invoke("0x921ce12c489c4c41", mp.players.local.handle);

				let camPitch = this.getRelativePitch();

				if (camPitch < -70.0) {
					camPitch = -70.0;
				} else if (camPitch > 42.0) {
					camPitch = 42.0;
				}
				camPitch = (camPitch + 70.0) / 112.0;

				if (camPitch === 1) camPitch = 0.99;

				let camHeading = mp.game.cam.getGameplayCamRelativeHeading();

				let cosCamHeading = mp.game.system.cos(camHeading);
				let sinCamHeading = mp.game.system.sin(camHeading);

				if (camHeading < -180.0) {
					camHeading = -180.0;
				} else if (camHeading > 180.0) {
					camHeading = 180.0;
				}
				camHeading = (camHeading + 180.0) / 360.0;

				let coords = mp.players.local.getOffsetFromGivenWorldCoords((cosCamHeading * -0.2) - (sinCamHeading * (0.4 * camHeading + 0.3)), (sinCamHeading * -0.2) + (cosCamHeading * (0.4 * camHeading + 0.3)), 0.6);
				let blocked = (typeof mp.raycasting.testPointToPoint([coords.x, coords.y, coords.z - 0.2], [coords.x, coords.y, coords.z + 0.2], mp.players.local.handle, 7) !== 'undefined');

				mp.game.invoke('0xd5bb4025ae449a4e', mp.players.local.handle, "Pitch", camPitch)
				mp.game.invoke('0xd5bb4025ae449a4e', mp.players.local.handle, "Heading", camHeading * -1.0 + 1.0)
				mp.game.invoke('0xb0a6cfd2c69c1088', mp.players.local.handle, "isBlocked", blocked)
				mp.game.invoke('0xb0a6cfd2c69c1088', mp.players.local.handle, "isFirstPerson", mp.game.invoke('0xee778f8c7e1142e2', mp.game.invoke('0x19cafa3c87f7c2ff')) == 4)

				if ((Date.now() - this.lastSent) > 50) {
					this.lastSent = Date.now();
					mp.events.callRemoteUnreliable("fpsync.update", camPitch, camHeading);
				}
			}
		} catch (err) {
			mp.events.callRemote("log", `forefinger: ${err}`)
		}
	}
}

const pointing = new Pointing

mp.events.add("fpsync.update", (id, camPitch, camHeading) => {
	try {
		let netPlayer = getPlayerByRemoteId(parseInt(id));
		if (netPlayer != null) {
			if (netPlayer != mp.players.local && mp.players.exists(netPlayer)) {
				netPlayer.lastReceivedPointing = Date.now();

				if (!netPlayer.pointingInterval) {
					netPlayer.pointingInterval = setInterval((function () {
						if ((Date.now() - netPlayer.lastReceivedPointing) > 1000) {
							clearInterval(netPlayer.pointingInterval);

							netPlayer.lastReceivedPointing = undefined;
							netPlayer.pointingInterval = undefined;

							mp.game.invoke("0xd01015c7316ae176", netPlayer.handle, "Stop");


							if (!netPlayer.isInAnyVehicle(true)) {
								mp.game.invoke("0x0725a4ccfded9a70", netPlayer.handle, 1, 1, 1, 1);
							}
							netPlayer.setConfigFlag(36, false);

						}
					}).bind(netPlayer), 500);

					if (!mp.game.streaming.hasAnimDictLoaded("anim@mp_point")) pointing.load();

					mp.game.invoke("0x0725a4ccfded9a70", netPlayer.handle, 0, 1, 1, 1);
					netPlayer.setConfigFlag(36, true)
					netPlayer.taskMoveNetwork("task_mp_pointing", 0.5, false, "anim@mp_point", 24);
					mp.game.streaming.removeAnimDict("anim@mp_point");
				}

				mp.game.invoke('0xd5bb4025ae449a4e', netPlayer.handle, "Pitch", camPitch)
				mp.game.invoke('0xd5bb4025ae449a4e', netPlayer.handle, "Heading", camHeading * -1.0 + 1.0)
				mp.game.invoke('0xb0a6cfd2c69c1088', netPlayer.handle, "isBlocked", 0);
				mp.game.invoke('0xb0a6cfd2c69c1088', netPlayer.handle, "isFirstPerson", 0);
			}
		}
	} catch (err) {
		mp.events.callRemote("log", `forefinger: ${err}`)
	}
});

mp.keys.bindEx(0x42, true, () => {
	if (mp.bindBlocker() || mp.players.local.vehicle || mp.currentWeaponSqlId || mp.attachedObjects[mp.players.local.remoteId] || mp.players.local.variable_SyncedAnimation != null) return;
	pointing.start();
}, "Показати пальцем", 2);

mp.keys.bindEx(0x42, false, () => {
	pointing.stop();
}, "Показати пальцем", 2);

function getPlayerByRemoteId(remoteId) {
	let pla = mp.players.atRemoteId(remoteId);
	if (pla == undefined || pla == null) {
		return null;
	}
	return pla;
}

}; a; }
{let a = function scriptEntryPoint(mp) {
﻿/*
    Author : https://rage.mp/profile/32455-flashrex/
*/

var sounds = [
    { id: 0, soundName: "10s", soundSetName: "MP_MISSION_COUNTDOWN_SOUNDSET" },
    { id: 1, soundName: "1st_Person_Transition", soundSetName: "PLAYER_SWITCH_CUSTOM_SOUNDSET" },
    { id: 2, soundName: "3_2_1", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 3, soundName: "3_2_1_NON_RACE", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 4, soundName: "5_SEC_WARNING", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 5, soundName: "5_Second_Timer", soundSetName: "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS" },
    { id: 6, soundName: "5s", soundSetName: "MP_MISSION_COUNTDOWN_SOUNDSET" },
    { id: 7, soundName: "5s_To_Event_Start_Countdown", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 8, soundName: "Airhorn", soundSetName: "DLC_TG_Running_Back_Sounds" },
    { id: 9, soundName: "Apt_Style_Purchase", soundSetName: "DLC_APT_Apartment_SoundSet" },
    { id: 10, soundName: "ARM_3_CAR_GLASS_CRASH", soundSetName: "0" },
    { id: 11, soundName: "ARM_3_PISTOL_COCK", soundSetName: "0" },
    { id: 12, soundName: "ARM_WRESTLING_WHOOSH_MASTER", soundSetName: "0" },
    { id: 13, soundName: "Arming_Countdown", soundSetName: "GTAO_Speed_Convoy_Soundset" },
    { id: 14, soundName: "ASSASSINATIONS_HOTEL_TIMER_COUNTDOWN", soundSetName: "ASSASSINATION_MULTI" },
    { id: 15, soundName: "ATM_WINDOW", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 16, soundName: "BACK", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 17, soundName: "BACK", soundSetName: "HUD_FREEMODE_SOUNDSET" },
    { id: 18, soundName: "BACK", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 20, soundName: "BACK", soundSetName: "HUD_FRONTEND_MP_SOUNDSET" },
    { id: 21, soundName: "BACK", soundSetName: "HUD_FRONTEND_TATTOO_SHOP_SOUNDSET" },
    { id: 22, soundName: "BACK", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 23, soundName: "Banshee2_Upgrade", soundSetName: "JA16_Super_Mod_Garage_Sounds" },
    { id: 24, soundName: "BASE_JUMP_PASSED", soundSetName: "HUD_AWARDS" },
    { id: 25, soundName: "Beast_Checkpoint", soundSetName: "APT_BvS_Soundset" },
    { id: 26, soundName: "Beast_Checkpoint_NPC", soundSetName: "APT_BvS_Soundset" },
    { id: 27, soundName: "Bed", soundSetName: "WastedSounds" },
    { id: 28, soundName: "Beep_Green", soundSetName: "DLC_HEIST_HACKING_SNAKE_SOUNDS" },
    { id: 29, soundName: "Beep_Red", soundSetName: "DLC_HEIST_HACKING_SNAKE_SOUNDS" },
    { id: 30, soundName: "Blade_Appear", soundSetName: "APT_BvS_Soundset" },
    { id: 31, soundName: "BOATS_PLANES_HELIS_BOOM", soundSetName: "MP_LOBBY_SOUNDS" },
    { id: 32, soundName: "Bomb_Disarmed", soundSetName: "GTAO_Speed_Convoy_Soundset" },
    { id: 33, soundName: "Boss_Blipped", soundSetName: "GTAO_Magnate_Hunt_Boss_SoundSet" },
    { id: 34, soundName: "Boss_Message_Orange", soundSetName: "GTAO_Boss_Goons_FM_Soundset" },
    { id: 35, soundName: "Breaker_01", soundSetName: "DLC_HALLOWEEN_FVJ_Sounds" },
    { id: 36, soundName: "Breaker_02", soundSetName: "DLC_HALLOWEEN_FVJ_Sounds" },
    { id: 37, soundName: "BULL_SHARK_TESTOSTERONE_END_MASTER", soundSetName: "" },
    { id: 38, soundName: "BULL_SHARK_TESTOSTERONE_START_MASTER", soundSetName: "" },
    { id: 39, soundName: "Bus_Schedule_Pickup", soundSetName: "DLC_PRISON_BREAK_HEIST_SOUNDS" },
    { id: 40, soundName: "CABLE_SNAPS", soundSetName: "CONSTRUCTION_ACCIDENT_1_SOUNDS" },
    { id: 41, soundName: "CAM_PAN_DARTS", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 42, soundName: "Camera_Shoot", soundSetName: "Phone_Soundset_Franklin" },
    { id: 43, soundName: "CANCEL", soundSetName: "HUD_FREEMODE_SOUNDSET" },
    { id: 44, soundName: "CANCEL", soundSetName: "HUD_FRONTEND_CLOTHESSHOP_SOUNDSET" },
    { id: 45, soundName: "CANCEL", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 46, soundName: "CANCEL", soundSetName: "HUD_LIQUOR_STORE_SOUNDSET" },
    { id: 47, soundName: "CANCEL", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 48, soundName: "CAR_BIKE_WHOOSH", soundSetName: "MP_LOBBY_SOUNDS" },
    { id: 49, soundName: "CHALLENGE_UNLOCKED", soundSetName: "HUD_AWARDS" },
    { id: 50, soundName: "CHARACTER_SELECT", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 51, soundName: "CHECKPOINT_AHEAD", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 52, soundName: "Checkpoint_Beast_Hit", soundSetName: "FM_Events_Sasquatch_Sounds" },
    { id: 53, soundName: "CHECKPOINT_BEHIND", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 54, soundName: "Checkpoint_Cash_Hit", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 55, soundName: "Checkpoint_Hit", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 56, soundName: "CHECKPOINT_MISSED", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 57, soundName: "CHECKPOINT_NORMAL", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 58, soundName: "CHECKPOINT_PERFECT", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 59, soundName: "Checkpoint_Teammate", soundSetName: "GTAO_Shepherd_Sounds" },
    { id: 60, soundName: "CHECKPOINT_UNDER_THE_BRIDGE", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 61, soundName: "Cheers", soundSetName: "DLC_TG_Running_Back_Sounds" },
    { id: 62, soundName: "Click", soundSetName: "DLC_HEIST_HACKING_SNAKE_SOUNDS" },
    { id: 63, soundName: "CLICK_BACK", soundSetName: "WEB_NAVIGATION_SOUNDS_PHONE" },
    { id: 64, soundName: "Click_Fail", soundSetName: "WEB_NAVIGATION_SOUNDS_PHONE" },
    { id: 65, soundName: "Click_Special", soundSetName: "WEB_NAVIGATION_SOUNDS_PHONE" },
    { id: 66, soundName: "CLOSE_WINDOW", soundSetName: "LESTER1A_SOUNDS" },
    { id: 67, soundName: "CLOSED", soundSetName: "DLC_APT_YACHT_DOOR_SOUNDS" },
    { id: 68, soundName: "CLOSED", soundSetName: "MP_PROPERTIES_ELEVATOR_DOORS" },
    { id: 69, soundName: "COMPUTERS_MOUSE_CLICK", soundSetName: "0" },
    { id: 70, soundName: "CONFIRM_BEEP", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 71, soundName: "CONTINUE", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 72, soundName: "Continue_Accepted", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" },
    { id: 73, soundName: "Continue_Appears", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" },
    { id: 74, soundName: "Crash", soundSetName: "DLC_HEIST_HACKING_SNAKE_SOUNDS" },
    { id: 75, soundName: "Criminal_Damage_High_Value", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 76, soundName: "Criminal_Damage_Kill_Player", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 77, soundName: "Criminal_Damage_Low_Value", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 78, soundName: "CUTSCENE_DIALOGUE_OVERRIDE_SOUND_01", soundSetName: "0" },
    { id: 79, soundName: "CUTSCENE_DIALOGUE_OVERRIDE_SOUND_02", soundSetName: "0" },
    { id: 80, soundName: "Cycle_Item", soundSetName: "DLC_Dmod_Prop_Editor_Sounds" },
    { id: 81, soundName: "DELETE", soundSetName: "HUD_DEATHMATCH_SOUNDSET" },
    { id: 82, soundName: "Delete_Placed_Prop", soundSetName: "DLC_Dmod_Prop_Editor_Sounds" },
    { id: 83, soundName: "Deliver_Pick_Up", soundSetName: "HUD_FRONTEND_MP_COLLECTABLE_SOUNDS" },
    { id: 84, soundName: "DiggerRevOneShot", soundSetName: "BulldozerDefault" },
    { id: 85, soundName: "Door_Open", soundSetName: "DOCKS_HEIST_FINALE_2B_SOUNDS" },
    { id: 86, soundName: "Drill_Pin_Break", soundSetName: "DLC_HEIST_FLEECA_SOUNDSET" },
    { id: 87, soundName: "Dropped", soundSetName: "HUD_FRONTEND_MP_COLLECTABLE_SOUNDS" },
    { id: 88, soundName: "DRUG_TRAFFIC_AIR_BOMB_DROP_ERROR_MASTER", soundSetName: "0" },
    { id: 89, soundName: "DRUG_TRAFFIC_AIR_SCREAMS", soundSetName: "0" },
    { id: 90, soundName: "EDIT", soundSetName: "HUD_DEATHMATCH_SOUNDSET" },
    { id: 91, soundName: "End_Squelch", soundSetName: "CB_RADIO_SFX" },
    { id: 92, soundName: "Enemy_Capture_Start", soundSetName: "GTAO_Magnate_Yacht_Attack_Soundset" },
    { id: 93, soundName: "Enemy_Deliver", soundSetName: "HUD_FRONTEND_MP_COLLECTABLE_SOUNDS" },
    { id: 94, soundName: "Enemy_Pick_Up", soundSetName: "HUD_FRONTEND_MP_COLLECTABLE_SOUNDS" },
    { id: 95, soundName: "Enter_1st", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 96, soundName: "Enter_1st", soundSetName: "GTAO_Magnate_Boss_Modes_Soundset" },
    { id: 97, soundName: "Enter_Area", soundSetName: "DLC_Lowrider_Relay_Race_Sounds" },
    { id: 98, soundName: "Enter_Capture_Zone", soundSetName: "DLC_Apartments_Drop_Zone_Sounds" },
    { id: 99, soundName: "ERROR", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 100, soundName: "ERROR", soundSetName: "HUD_FRONTEND_CLOTHESSHOP_SOUNDSET" },
    { id: 101, soundName: "ERROR", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 102, soundName: "ERROR", soundSetName: "HUD_FRONTEND_TATTOO_SHOP_SOUNDSET" },
    { id: 103, soundName: "ERROR", soundSetName: "HUD_LIQUOR_STORE_SOUNDSET" },
    { id: 104, soundName: "Event_Message_Purple", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 105, soundName: "Event_Start_Text", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 106, soundName: "EXILE_3_TRAIN_BRAKE_PULL_MASTER", soundSetName: "0" },
    { id: 107, soundName: "EXILE_3_TRAIN_BRAKE_RELEASE_MASTER", soundSetName: "0" },
    { id: 108, soundName: "EXIT", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 109, soundName: "Exit_Capture_Zone", soundSetName: "DLC_Apartments_Drop_Zone_Sounds" },
    { id: 110, soundName: "Failure", soundSetName: "DLC_HEIST_HACKING_SNAKE_SOUNDS" },
    { id: 111, soundName: "Falling_Crates", soundSetName: "EXILE1" },
    { id: 112, soundName: "FAMILY_1_CAR_BREAKDOWN", soundSetName: "FAMILY1_BOAT" },
    { id: 113, soundName: "FAMILY_1_CAR_BREAKDOWN_ADDITIONAL", soundSetName: "FAMILY1_BOAT" },
    { id: 114, soundName: "Faster_Bar_Full", soundSetName: "RESPAWN_ONLINE_SOUNDSET" },
    { id: 115, soundName: "Faster_Click", soundSetName: "RESPAWN_ONLINE_SOUNDSET" },
    { id: 116, soundName: "FestiveGift", soundSetName: "Feed_Message_Sounds" },
    { id: 117, soundName: "FIRST_PLACE", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 118, soundName: "FLIGHT_SCHOOL_LESSON_PASSED", soundSetName: "HUD_AWARDS" },
    { id: 119, soundName: "FLYING_STREAM_END_INSTANT", soundSetName: "FAMILY_5_SOUNDS" },
    { id: 120, soundName: "FocusIn", soundSetName: "HintCamSounds" },
    { id: 121, soundName: "FocusOut", soundSetName: "HintCamSounds" },
    { id: 122, soundName: "Friend_Deliver", soundSetName: "HUD_FRONTEND_MP_COLLECTABLE_SOUNDS" },
    { id: 123, soundName: "Friend_Pick_Up", soundSetName: "HUD_FRONTEND_MP_COLLECTABLE_SOUNDS" },
    { id: 124, soundName: "Friend_Pick_Up", soundSetName: "HUD_FRONTEND_MP_COLLECTABLE_SOUNDS" },
    { id: 125, soundName: "Frontend_Beast_Fade_Screen", soundSetName: "FM_Events_Sasquatch_Sounds" },
    { id: 126, soundName: "Frontend_Beast_Freeze_Screen", soundSetName: "FM_Events_Sasquatch_Sounds" },
    { id: 127, soundName: "Frontend_Beast_Text_Hit", soundSetName: "FM_Events_Sasquatch_Sounds" },
    { id: 128, soundName: "Frontend_Beast_Transform_Back", soundSetName: "FM_Events_Sasquatch_Sounds" },
    { id: 129, soundName: "GO", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 130, soundName: "GO_NONE_RACE", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 131, soundName: "Goal", soundSetName: "DLC_HEIST_HACKING_SNAKE_SOUNDS" },
    { id: 132, soundName: "GOLF_BIRDIE", soundSetName: "HUD_AWARDS" },
    { id: 133, soundName: "GOLF_EAGLE", soundSetName: "HUD_AWARDS" },
    { id: 134, soundName: "GOLF_HUD_HOLE_IN_ONE_MASTER", soundSetName: "0" },
    { id: 135, soundName: "GOLF_HUD_SCORECARD_MASTER", soundSetName: "0" },
    { id: 136, soundName: "GOLF_NEW_RECORD", soundSetName: "HUD_AWARDS" },
    { id: 137, soundName: "Goon_Paid_Small", soundSetName: "GTAO_Boss_Goons_FM_Soundset" },
    { id: 138, soundName: "Grab_Parachute", soundSetName: "BASEJUMPS_SOUNDS" },
    { id: 139, soundName: "Hack_Failed", soundSetName: "DLC_HEIST_BIOLAB_PREP_HACKING_SOUNDS" },
    { id: 140, soundName: "Hack_Success", soundSetName: "DLC_HEIST_BIOLAB_PREP_HACKING_SOUNDS" },
    { id: 141, soundName: "HACKING_CLICK", soundSetName: "0" },
    { id: 142, soundName: "HACKING_CLICK_BAD", soundSetName: "0" },
    { id: 143, soundName: "HACKING_CLICK_GOOD", soundSetName: "0" },
    { id: 144, soundName: "HACKING_FAILURE", soundSetName: "0" },
    { id: 145, soundName: "HACKING_MOVE_CURSOR", soundSetName: "0" },
    { id: 146, soundName: "HACKING_SUCCESS", soundSetName: "0" },
    { id: 147, soundName: "Hang_Up", soundSetName: "Phone_SoundSet_Michael" },
    { id: 148, soundName: "HIGHLIGHT", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 149, soundName: "Highlight_Accept", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" },
    { id: 150, soundName: "Highlight_Cancel", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" },
    { id: 151, soundName: "Highlight_Error", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" },
    { id: 152, soundName: "Highlight_Move", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" },
    { id: 153, soundName: "HIGHLIGHT_NAV_UP_DOWN", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 154, soundName: "Hit", soundSetName: "RESPAWN_ONLINE_SOUNDSET" },
    { id: 155, soundName: "Hit", soundSetName: "RESPAWN_SOUNDSET" },
    { id: 156, soundName: "Hit_1", soundSetName: "LONG_PLAYER_SWITCH_SOUNDS" },
    { id: 157, soundName: "Hit_In", soundSetName: "PLAYER_SWITCH_CUSTOM_SOUNDSET" },
    { id: 158, soundName: "Hit_Out", soundSetName: "PLAYER_SWITCH_CUSTOM_SOUNDSET" },
    { id: 159, soundName: "HOORAY", soundSetName: "BARRY_02_SOUNDSET" },
    { id: 160, soundName: "HORDE_COOL_DOWN_TIMER", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 161, soundName: "HUD_FREEMODE_CANCEL_MASTER", soundSetName: "0" },
    { id: 162, soundName: "Kill_List_Counter", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 163, soundName: "LAMAR1_PARTYGIRLS_master", soundSetName: "0" },
    { id: 164, soundName: "LEADER_BOARD", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 165, soundName: "LEADERBOARD", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 166, soundName: "Lester_Laugh_Phone", soundSetName: "DLC_HEIST_HACKING_SNAKE_SOUNDS" },
    { id: 167, soundName: "Lights_On", soundSetName: "GTAO_MUGSHOT_ROOM_SOUNDS" },
    { id: 168, soundName: "LIMIT", soundSetName: "DLC_APT_YACHT_DOOR_SOUNDS" },
    { id: 169, soundName: "LIMIT", soundSetName: "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS" },
    { id: 170, soundName: "LIMIT", soundSetName: "GTAO_APT_DOOR_DOWNSTAIRS_WOOD_SOUNDS" },
    { id: 171, soundName: "Load_Scene", soundSetName: "DLC_Dmod_Prop_Editor_Sounds" },
    { id: 172, soundName: "LOCAL_PLYR_CASH_COUNTER_COMPLETE", soundSetName: "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS" },
    { id: 173, soundName: "LOCAL_PLYR_CASH_COUNTER_COMPLETE", soundSetName: "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS" },
    { id: 174, soundName: "LOOSE_MATCH", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 175, soundName: "Lose_1st", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 176, soundName: "Lose_1st", soundSetName: "GTAO_Magnate_Boss_Modes_Soundset" },
    { id: 177, soundName: "LOSER", soundSetName: "HUD_AWARDS" },
    { id: 178, soundName: "Lowrider_Upgrade", soundSetName: "Lowrider_Super_Mod_Garage_Sounds" },
    { id: 179, soundName: "Map_Roll_Down", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" },
    { id: 180, soundName: "Map_Roll_Up", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" },
    { id: 181, soundName: "MARKER_ERASE", soundSetName: "HEIST_BULLETIN_BOARD_SOUNDSET" },
    { id: 182, soundName: "MARTIN1_DISTANT_TRAIN_HORNS_MASTER", soundSetName: "0" },
    { id: 183, soundName: "MEDAL_BRONZE", soundSetName: "HUD_AWARDS" },
    { id: 184, soundName: "MEDAL_GOLD", soundSetName: "HUD_AWARDS" },
    { id: 185, soundName: "MEDAL_SILVER", soundSetName: "HUD_AWARDS" },
    { id: 186, soundName: "MEDAL_UP", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 187, soundName: "Menu_Accept", soundSetName: "Phone_SoundSet_Default" },
    { id: 188, soundName: "MICHAEL_LONG_SCREAM", soundSetName: "FAMILY_5_SOUNDS" },
    { id: 189, soundName: "MICHAEL_SOFA_REMOTE_CLICK_VOLUME_MASTER", soundSetName: "0" },
    { id: 190, soundName: "MICHAEL_SOFA_TV_CHANGE_CHANNEL_MASTER", soundSetName: "0" },
    { id: 191, soundName: "MICHAEL_SOFA_TV_ON_MASTER", soundSetName: "0" },
    { id: 192, soundName: "Mission_Pass_Notify", soundSetName: "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS" },
    { id: 193, soundName: "MP_5_SECOND_TIMER", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 194, soundName: "MP_AWARD", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 195, soundName: "MP_Flash", soundSetName: "WastedSounds" },
    { id: 196, soundName: "MP_IDLE_KICK", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 197, soundName: "MP_IDLE_TIMER", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 198, soundName: "MP_Impact", soundSetName: "WastedSounds" },
    { id: 199, soundName: "MP_RANK_UP", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 200, soundName: "MP_WAVE_COMPLETE", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 201, soundName: "NAV", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 202, soundName: "Nav_Arrow_Ahead", soundSetName: "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS" },
    { id: 203, soundName: "Nav_Arrow_Behind", soundSetName: "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS" },
    { id: 204, soundName: "Nav_Arrow_Left", soundSetName: "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS" },
    { id: 205, soundName: "Nav_Arrow_Right", soundSetName: "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS" },
    { id: 206, soundName: "NAV_LEFT_RIGHT", soundSetName: "HUD_FREEMODE_SOUNDSET" },
    { id: 207, soundName: "NAV_LEFT_RIGHT", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 208, soundName: "NAV_LEFT_RIGHT", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 209, soundName: "NAV_UP_DOWN", soundSetName: "HUD_FREEMODE_SOUNDSET" },
    { id: 210, soundName: "NAV_UP_DOWN", soundSetName: "HUD_FRONTEND_CLOTHESSHOP_SOUNDSET" },
    { id: 211, soundName: "NAV_UP_DOWN", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 212, soundName: "NAV_UP_DOWN", soundSetName: "HUD_FRONTEND_TATTOO_SHOP_SOUNDSET" },
    { id: 213, soundName: "NAV_UP_DOWN", soundSetName: "HUD_LIQUOR_STORE_SOUNDSET" },
    { id: 214, soundName: "NAV_UP_DOWN", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 215, soundName: "Near_Miss_Counter_Reset", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 216, soundName: "NET_RACE_START_EVENT_MASTER", soundSetName: "0" },
    { id: 217, soundName: "NO", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 218, soundName: "Object_Collect_Player", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 219, soundName: "Object_Collect_Remote", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 220, soundName: "Object_Dropped_Remote", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 221, soundName: "Off_High", soundSetName: "MP_RADIO_SFX" },
    { id: 222, soundName: "OK", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 223, soundName: "ON", soundSetName: "NOIR_FILTER_SOUNDS" },
    { id: 224, soundName: "On_Call_Player_Join", soundSetName: "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS" },
    { id: 225, soundName: "Oneshot_Final", soundSetName: "MP_MISSION_COUNTDOWN_SOUNDSET" },
    { id: 226, soundName: "OOB_Cancel", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 227, soundName: "OOB_Start", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 228, soundName: "OPEN_WINDOW", soundSetName: "LESTER1A_SOUNDS" },
    { id: 229, soundName: "OPENED", soundSetName: "MP_PROPERTIES_ELEVATOR_DOORS" },
    { id: 230, soundName: "OTHER_TEXT", soundSetName: "HUD_AWARDS" },
    { id: 231, soundName: "Out_Of_Area", soundSetName: "DLC_Lowrider_Relay_Race_Sounds" },
    { id: 232, soundName: "Out_Of_Bounds_Timer", soundSetName: "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS" },
    { id: 233, soundName: "Paper_Shuffle", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" },
    { id: 234, soundName: "Parcel_Vehicle_Lost", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 235, soundName: "Payment_Non_Player", soundSetName: "DLC_HEISTS_GENERIC_SOUNDS" },
    { id: 236, soundName: "Payment_Player", soundSetName: "DLC_HEISTS_GENERIC_SOUNDS" },
    { id: 237, soundName: "Pen_Tick", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" },
    { id: 238, soundName: "PERSON_SCROLL", soundSetName: "HEIST_BULLETIN_BOARD_SOUNDSET" },
    { id: 239, soundName: "PERSON_SELECT", soundSetName: "HEIST_BULLETIN_BOARD_SOUNDSET" },
    { id: 240, soundName: "Phone_Generic_Key_02", soundSetName: "HUD_MINIGAME_SOUNDSET" },
    { id: 241, soundName: "Phone_Generic_Key_03", soundSetName: "HUD_MINIGAME_SOUNDSET" },
    { id: 242, soundName: "PICK_UP", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 243, soundName: "PICK_UP_WEAPON", soundSetName: "HUD_FRONTEND_CUSTOM_SOUNDSET" },
    { id: 244, soundName: "PICK_UP_SOUND", soundSetName: "HUD_FRONTEND_CUSTOM_SOUNDSET" },
    { id: 245, soundName: "PICKUP_WEAPON_SMOKEGRENADE", soundSetName: "HUD_FRONTEND_WEAPONS_PICKUPS_SOUNDSET" },
    { id: 246, soundName: "Pin_Bad", soundSetName: "DLC_HEIST_BIOLAB_PREP_HACKING_SOUNDS" },
    { id: 247, soundName: "PIN_BUTTON", soundSetName: "ATM_SOUNDS" },
    { id: 248, soundName: "Pin_Centred", soundSetName: "DLC_HEIST_BIOLAB_PREP_HACKING_SOUNDS" },
    { id: 249, soundName: "Pin_Good", soundSetName: "DLC_HEIST_BIOLAB_PREP_HACKING_SOUNDS" },
    { id: 250, soundName: "PIPES_LAND", soundSetName: "CONSTRUCTION_ACCIDENT_1_SOUNDS" },
    { id: 251, soundName: "Place_Prop_Fail", soundSetName: "DLC_Dmod_Prop_Editor_Sounds" },
    { id: 252, soundName: "Place_Prop_Success", soundSetName: "DLC_Dmod_Prop_Editor_Sounds" },
    { id: 253, soundName: "Player_Collect", soundSetName: "DLC_PILOT_MP_HUD_SOUNDS" },
    { id: 254, soundName: "Player_Enter_Line", soundSetName: "GTAO_FM_Cross_The_Line_Soundset" },
    { id: 255, soundName: "Player_Exit_Line", soundSetName: "GTAO_FM_Cross_The_Line_Soundset" },
    { id: 256, soundName: "Power_Down", soundSetName: "DLC_HEIST_HACKING_SNAKE_SOUNDS" },
    { id: 257, soundName: "Pre_Screen_Stinger", soundSetName: "DLC_HEISTS_FAILED_SCREEN_SOUNDS" },
    { id: 258, soundName: "Pre_Screen_Stinger", soundSetName: "DLC_HEISTS_FINALE_SCREEN_SOUNDS" },
    { id: 259, soundName: "Pre_Screen_Stinger", soundSetName: "DLC_HEISTS_PREP_SCREEN_SOUNDS" },
    { id: 260, soundName: "PROPERTY_PURCHASE", soundSetName: "HUD_AWARDS" },
    { id: 261, soundName: "PROPERTY_PURCHASE_MEDIUM", soundSetName: "HUD_PROPERTY_SOUNDSET" },
    { id: 262, soundName: "PS2A_DISTANT_TRAIN_HORNS_MASTER", soundSetName: "0" },
    { id: 263, soundName: "PS2A_MONEY_LOST", soundSetName: "PALETO_SCORE_2A_BANK_SS" },
    { id: 264, soundName: "PURCHASE", soundSetName: "HUD_FRONTEND_TATTOO_SHOP_SOUNDSET" },
    { id: 265, soundName: "PURCHASE", soundSetName: "HUD_LIQUOR_STORE_SOUNDSET" },
    { id: 266, soundName: "PUSH", soundSetName: "DLC_APT_YACHT_DOOR_SOUNDS" },
    { id: 267, soundName: "PUSH", soundSetName: "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS" },
    { id: 268, soundName: "PUSH", soundSetName: "GTAO_APT_DOOR_DOWNSTAIRS_WOOD_SOUNDS" },
    { id: 269, soundName: "Put_Away", soundSetName: "Phone_SoundSet_Michael" },
    { id: 270, soundName: "QUIT", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 271, soundName: "QUIT_WHOOSH", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 272, soundName: "RACE_PLACED", soundSetName: "HUD_AWARDS" },
    { id: 273, soundName: "Radar_Beast_Blip", soundSetName: "FM_Events_Sasquatch_Sounds" },
    { id: 274, soundName: "RAMP_DOWN", soundSetName: "TRUCK_RAMP_DOWN" },
    { id: 275, soundName: "RAMP_UP", soundSetName: "TRUCK_RAMP_DOWN" },
    { id: 276, soundName: "RAMPAGE_KILLED_COUNTER_MASTER", soundSetName: "0" },
    { id: 277, soundName: "RAMPAGE_KILLED_HEAD_SHOT_MASTER", soundSetName: "0" },
    { id: 278, soundName: "RAMPAGE_PASSED_MASTER", soundSetName: "0" },
    { id: 279, soundName: "RAMPAGE_ROAR_MASTER", soundSetName: "0" },
    { id: 280, soundName: "RANK_UP", soundSetName: "HUD_AWARDS" },
    { id: 281, soundName: "REMOTE_PLYR_CASH_COUNTER_COMPLETE", soundSetName: "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS" },
    { id: 282, soundName: "REMOTE_PLYR_CASH_COUNTER_INCREASE", soundSetName: "DLC_HEISTS_GENERAL_FRONTEND_SOUNDS" },
    { id: 283, soundName: "Remote_Sniper_Rifle_Fire", soundSetName: "0" },
    { id: 284, soundName: "Reset_Prop_Position", soundSetName: "DLC_Dmod_Prop_Editor_Sounds" },
    { id: 285, soundName: "RESTART", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 286, soundName: "RETRY", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 287, soundName: "Retune_High", soundSetName: "MP_RADIO_SFX" },
    { id: 288, soundName: "ROBBERY_MONEY_TOTAL", soundSetName: "HUD_FRONTEND_CUSTOM_SOUNDSET" },
    { id: 289, soundName: "ROPE_CUT", soundSetName: "ROPE_CUT_SOUNDSET" },
    { id: 290, soundName: "ROUND_ENDING_STINGER_CUSTOM", soundSetName: "CELEBRATION_SOUNDSET" },
    { id: 291, soundName: "Save_Scene", soundSetName: "DLC_Dmod_Prop_Editor_Sounds" },
    { id: 292, soundName: "SCOPE_UI_MASTER", soundSetName: "0" },
    { id: 293, soundName: "SCREEN_FLASH", soundSetName: "CELEBRATION_SOUNDSET" },
    { id: 294, soundName: "ScreenFlash", soundSetName: "MissionFailedSounds" },
    { id: 295, soundName: "ScreenFlash", soundSetName: "WastedSounds" },
    { id: 296, soundName: "SCREEN_SWIPE", soundSetName: "CELEBRATION_SWIPE" },
    { id: 297, soundName: "SELECT", soundSetName: "HUD_FREEMODE_SOUNDSET" },
    { id: 298, soundName: "SELECT", soundSetName: "HUD_FRONTEND_CLOTHESSHOP_SOUNDSET" },
    { id: 299, soundName: "SELECT", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 300, soundName: "SELECT", soundSetName: "HUD_FRONTEND_MP_SOUNDSET" },
    { id: 301, soundName: "SELECT", soundSetName: "HUD_FRONTEND_TATTOO_SHOP_SOUNDSET" },
    { id: 302, soundName: "SELECT", soundSetName: "HUD_LIQUOR_STORE_SOUNDSET" },
    { id: 303, soundName: "SELECT", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 304, soundName: "Select_Placed_Prop", soundSetName: "DLC_Dmod_Prop_Editor_Sounds" },
    { id: 305, soundName: "Shard_Disappear", soundSetName: "GTAO_Boss_Goons_FM_Shard_Sounds" },
    { id: 306, soundName: "Shard_Disappear", soundSetName: "GTAO_FM_Events_Soundset" },
    { id: 307, soundName: "SHOOTING_RANGE_ROUND_OVER", soundSetName: "HUD_AWARDS" },
    { id: 308, soundName: "Short_Transition_In", soundSetName: "PLAYER_SWITCH_CUSTOM_SOUNDSET" },
    { id: 309, soundName: "Short_Transition_Out", soundSetName: "PLAYER_SWITCH_CUSTOM_SOUNDSET" },
    { id: 310, soundName: "SKIP", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 311, soundName: "Start", soundSetName: "DLC_HEIST_HACKING_SNAKE_SOUNDS" },
    { id: 312, soundName: "Start_Squelch", soundSetName: "CB_RADIO_SFX" },
    { id: 313, soundName: "STUN_COLLECT", soundSetName: "MINUTE_MAN_01_SOUNDSET" },
    { id: 314, soundName: "Success", soundSetName: "DLC_HEIST_HACKING_SNAKE_SOUNDS" },
    { id: 315, soundName: "SultanRS_Upgrade", soundSetName: "JA16_Super_Mod_Garage_Sounds" },
    { id: 316, soundName: "Swap_Sides", soundSetName: "DLC_HALLOWEEN_FVJ_Sounds" },
    { id: 317, soundName: "SWING_SHUT", soundSetName: "GTAO_APT_DOOR_DOWNSTAIRS_GLASS_SOUNDS" },
    { id: 318, soundName: "SWING_SHUT", soundSetName: "GTAO_APT_DOOR_DOWNSTAIRS_WOOD_SOUNDS" },
    { id: 319, soundName: "Tattooing_Oneshot", soundSetName: "TATTOOIST_SOUNDS" },
    { id: 320, soundName: "Tattooing_Oneshot_Remove", soundSetName: "TATTOOIST_SOUNDS" },
    { id: 321, soundName: "Team_Capture_Start", soundSetName: "GTAO_Magnate_Yacht_Attack_Soundset" },
    { id: 322, soundName: "TENNIS_MATCH_POINT", soundSetName: "HUD_AWARDS" },
    { id: 323, soundName: "TENNIS_MATCH_WON", soundSetName: "HUD_AWARDS" },
    { id: 324, soundName: "TextHit", soundSetName: "WastedSounds" },
    { id: 325, soundName: "Thermal_Off", soundSetName: "CAR_STEAL_2_SOUNDSET" },
    { id: 326, soundName: "Thermal_On", soundSetName: "CAR_STEAL_2_SOUNDSET" },
    { id: 327, soundName: "THERMAL_VISION_GOGGLES_OFF_MASTER", soundSetName: "0" },
    { id: 328, soundName: "THERMAL_VISION_GOGGLES_OFF_MASTER", soundSetName: "0" },
    { id: 329, soundName: "THERMAL_VISION_GOGGLES_ON_MASTER", soundSetName: "0" },
    { id: 330, soundName: "TIME_LAPSE_MASTER", soundSetName: "0" },
    { id: 331, soundName: "TIMER", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 332, soundName: "Timer_10s", soundSetName: "DLC_HALLOWEEN_FVJ_Sounds" },
    { id: 333, soundName: "TIMER_STOP", soundSetName: "HUD_MINI_GAME_SOUNDSET" },
    { id: 334, soundName: "TOGGLE_ON", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 335, soundName: "TOGGLE_ON", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 336, soundName: "Traffic_Control_Fail", soundSetName: "BIG_SCORE_3A_SOUNDS" },
    { id: 337, soundName: "Traffic_Control_Fail_Blank", soundSetName: "BIG_SCORE_3A_SOUNDS" },
    { id: 338, soundName: "Traffic_Control_Light_Switch_Back", soundSetName: "BIG_SCORE_3A_SOUNDS" },
    { id: 339, soundName: "TRAFFIC_CONTROL_MOVE_CROSSHAIR", soundSetName: "BIG_SCORE_3A_SOUNDS" },
    { id: 340, soundName: "Turn", soundSetName: "DLC_HEIST_HACKING_SNAKE_SOUNDS" },
    { id: 341, soundName: "UNDER_THE_BRIDGE", soundSetName: "HUD_AWARDS" },
    { id: 342, soundName: "UNDER_WATER_COME_UP", soundSetName: "0" },
    { id: 343, soundName: "UNDO", soundSetName: "HEIST_BULLETIN_BOARD_SOUNDSET" },
    { id: 344, soundName: "WAYPOINT_SET", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 345, soundName: "WEAKEN", soundSetName: "CONSTRUCTION_ACCIDENT_1_SOUNDS" },
    { id: 346, soundName: "WEAPON_AMMO_PURCHASE", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 347, soundName: "WEAPON_ATTACHMENT_EQUIP", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 348, soundName: "WEAPON_ATTACHMENT_UNEQUIP", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 349, soundName: "WEAPON_PURCHASE", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 350, soundName: "WEAPON_SELECT_ARMOR", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 351, soundName: "WEAPON_SELECT_BATON", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 352, soundName: "WEAPON_SELECT_FUEL_CAN", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 353, soundName: "WEAPON_SELECT_GRENADE_LAUNCHER", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 354, soundName: "WEAPON_SELECT_HANDGUN", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 355, soundName: "WEAPON_SELECT_KNIFE", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 356, soundName: "WEAPON_SELECT_OTHER", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 357, soundName: "WEAPON_SELECT_PARACHUTE", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 358, soundName: "WEAPON_SELECT_RIFLE", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 359, soundName: "WEAPON_SELECT_RPG_LAUNCHER", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 360, soundName: "WEAPON_SELECT_SHOTGUN", soundSetName: "HUD_AMMO_SHOP_SOUNDSET" },
    { id: 361, soundName: "Whistle", soundSetName: "DLC_TG_Running_Back_Sounds" },
    { id: 362, soundName: "Whoosh_1s_L_to_R", soundSetName: "MP_LOBBY_SOUNDS" },
    { id: 363, soundName: "Whoosh_1s_R_to_L", soundSetName: "MP_LOBBY_SOUNDS" },
    { id: 364, soundName: "Win", soundSetName: "HUD_AWARDS" },
    { id: 365, soundName: "WOODEN_DOOR_CLOSED_AT", soundSetName: "0" },
    { id: 366, soundName: "WOODEN_DOOR_CLOSING_AT", soundSetName: "0" },
    { id: 367, soundName: "WOODEN_DOOR_OPEN_HANDLE_AT", soundSetName: "0" },
    { id: 368, soundName: "WOODEN_DOOR_OPEN_NO_HANDLE_AT", soundSetName: "0" },
    { id: 369, soundName: "YES", soundSetName: "HUD_FRONTEND_DEFAULT_SOUNDSET" },
    { id: 370, soundName: "Zone_Enemy_Capture", soundSetName: "DLC_Apartments_Drop_Zone_Sounds" },
    { id: 371, soundName: "Zone_Neutral", soundSetName: "DLC_Apartments_Drop_Zone_Sounds" },
    { id: 372, soundName: "Zone_Team_Capture", soundSetName: "DLC_Apartments_Drop_Zone_Sounds" },
    { id: 373, soundName: "Zoom_In", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" },
    { id: 374, soundName: "Zoom_Left", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" },
    { id: 375, soundName: "Zoom_Out", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" },
    { id: 376, soundName: "Zoom_Right", soundSetName: "DLC_HEIST_PLANNING_BOARD_SOUNDS" }
];

var index = 0;
var PlaySound = false;

var text = "";

mp.events.add('playerCommand', (command) => {
    let args = command.split(/[ ]+/);
    let commandName = args.splice(0, 1)[0];

    if (commandName === "sound" || commandName === "s") {
        PlaySound = !PlaySound;
        mp.game.graphics.notify(PlaySound ? 'Soundviewer: ~g~activated' : 'Soundviewer: ~r~deactivated');
    }
});


//Left Arrow
mp.keys.bindEx(0x25, true, function () {
    if (!PlaySound) return;
    if (index - 1 >= 0) index--;
    else index = sounds.length - 1;
    playSound();
});

//Right Arrow
mp.keys.bindEx(0x27, true, function () {
    if (!PlaySound) return;
    if (index + 1 <= sounds.length) index++;
    else index = 0;
    playSound();
});

function playSound() {
    sounds.forEach((sound) => {
        if (sound.id === index) {
            mp.game.audio.playSoundFrontend(-1, sound.soundName, sound.soundSetName, true);
            text = 'Id: ~b~'+index +' ~w~SoundName: ~b~' + sound.soundName + ' ~w~SoundSetName: ~b~' + sound.soundSetName;
        }
    });
}

mp.events.add('render', () => {
    if (PlaySound) {
        mp.game.graphics.drawText(text, [0.5, 0.9], {
            font: 0,
            color: [255, 255, 255, 185],
            scale: [0.4, 0.4],
            outline: true
        });
    }
});
}; a; }
{let a = function scriptEntryPoint(mp) {
function processCar(entity) {
    const vehicle = mp.vehicles.atRemoteId(entity.remoteId)
    if (isEntityExists(vehicle)) {
		if (!entity.maxSpeed) entity.maxSpeed = (mp.game.vehicle.getVehicleModelMaxSpeed(vehicle.model) * 3.6).toFixed(0)
		entity.angle = vehicle.getMod(11) + 1
		entity.suspension = vehicle.getMod(15) + 1
		entity.brakes = vehicle.getMod(12) + 1
		entity.transmission = vehicle.getMod(13) + 1
    }
}

mp.events.add("trade.hide", () => {
    browserMenu.call(`inventoryAPI`, `show`, false, 'trade')
});

mp.events.add("trade.accept", () => {
    browserMenu.call(`inventoryAPI`, `accept`)
});

mp.events.add("trade.cancel", () => {
    browserMenu.call(`inventoryAPI`, `cancel`)
});

mp.events.add("trade.acceptTrader", () => {
    browserMenu.call(`inventoryAPI`, `acceptTrader`)
});

mp.events.add("trade.cancelTrader", () => {
    browserMenu.call(`inventoryAPI`, `cancelTrader`)
});

mp.events.add("trade.setTraderValue", (val) => {
    browserMenu.call(`inventoryAPI`, `setTraderValue`, val)
});

mp.events.add("trade.addProperty", (data) => {
    if (data && data.type == "transport") processCar(data)
    browserMenu.call(`inventoryAPI`, `addProperty`, data)
});

mp.events.add("trade.addPropertyTrader", (data) => {
    if (data && data.type == "transport") processCar(data)
    browserMenu.call(`inventoryAPI`, `addPropertyTrader`, data)
});
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.game.object.doorControl(631614199, 461.8065, -994.4086, 25.06443, true, 0.0, 0.0, 0.0);
mp.game.object.doorControl(631614199, 461.8065, -997.6583, 25.06443, true, 0.0, 0.0, 0.0);
mp.game.object.doorControl(631614199, 461.8065, -1001.302, 25.06443, true, 0.0, 0.0, 0.0);
mp.game.object.doorControl(631614199, 461.8065, -994.4086, 25.06443, true, 0.0, 0.0, 0.0);
mp.game.object.doorControl(-1765048490, 1855.685, 3683.93, 34.59282, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(-1501157055, -444.4985, 6017.06, 31.86633, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(-1501157055, -442.66, 6015.222, 31.86633, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(-1116041313, 127.9552, -1298.503, 29.41962, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(-1517873911, 106.3793, -742.6982, 46.51962, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(-90456267, 105.7607, -746.646, 46.18266, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(-1922281023, -715.6154, -157.2561, 37.67493, false, 0.0, 0.0, 0.01);
mp.game.object.doorControl(-1922281023, -716.6755, -155.42, 37.67493, false, 0.0, 0.0, 0.01);
mp.game.object.doorControl(993120320, -561.2866, 293.5044, 87.77851, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(993120320, -565.1712, 276.6259, 83.28626, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(-2051651622, -31.72353, -1101.847, 26.57225, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(1417577297, -37.33113, -1108.873, 26.7198, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(2059227086, -39.13366, -1108.218, 26.7198, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(1417577297, -60.54582, -1094.749, 26.88872, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(2059227086, -59.89302, -1092.952, 26.88362, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(-2051651622, -33.80989, -1107.579, 26.57225, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(-2051651622, -31.72353, -1101.847, 26.57225, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(1417577297, -37.33113, -1108.873, 26.7198, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(2059227086, -39.13366, -1108.218, 26.7198, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(1417577297, -60.54582, -1094.749, 26.88872, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(2059227086, -59.89302, -1092.952, 26.88362, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(-2051651622, -33.80989, -1107.579, 26.57225, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(-2051651622, -31.72353, -1101.847, 26.57225, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(-1844444717, -29.86917, -148.1571, 57.22648, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(mp.game.joaat("v_ilev_bank4door02"), -111.0, 6464.0, 32.0, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(mp.game.joaat("v_ilev_bank4door01"), -111.0, 6462.0, 32.0, false, 0.0, 0.0, 0.0);
mp.game.object.doorControl(520341586, -14.86892, -1441.182, 31.19323, true, 0.0, 0.0, 0.01);

}; a; }
{let a = function scriptEntryPoint(mp) {


const weaponIds = [
  -1357824103, 324506233, 738733437, -100946242, 584646201,
  -1074790547, -494615257, -270015777, 317205821, 600439132,
  1223143800, -1786099057, -853065399, -1955384325, -102323637,
  -2000187721, 28811031, 2132975508, -1654528753, -1600701090,
  -2084633992, 2144741730, 171789620, 1593441988, 125959754,
  1649403952, 148160082, -2067956739, -1834847097, -275439685,
  -38085395, -10959621, 1936677264, -1833087301, 910830060, 539292904,
  -842959696, -544306709, 101631238, 2138347493, 1233104067,
  1198879012, -499989876, 1141786504, -1813897027, -1568386805,
  0x4dd2dc56, 1627465347, 1317494643, -800287667, -102973651,
  -771403250, 984333226, 205991906, 341774354, -868994466, 1672152130,
  -1716189206, -656458692, -581044007, -619010992, -598887786,
  -952879014, -1660422300, 324215364, 1119849093, -1121678507,
  615608432, -1466123874, 1737195953, 375527679, 883325847,
  -1169823560, 453432689, -1716589765, -1810795771, -1420407917,
  487013001, 1834241177, 133987706, 856002082, -1045183535,
  -1312131151, -1553120962, 2017895192, 736523883, -37975472,
  100416529, 126349499, -1076751822, -1063057011, 741814745,
  1752584910, 911657153, -538741184, -1569615261, -1090665087,
  137902532, 419712736, -1075685676, 1703483498, -774507221,
  -947031628, 1853742572, 94989220
];

const localPlayer = mp.players.local;
//localPlayer.getWeaponTypeInSlot = (weaponSlot) => mp.game.invoke('0xBBDDEBFD9564D52C', localPlayer.handle, weaponSlot);
localPlayer.getAmmoWeapon = (weaponhash) => mp.game.invoke('0x015A522136D7F951', localPlayer.handle, weaponhash);
localPlayer.removeWeapon = (weaponhash) => mp.game.invoke('0x4899CB088EDF59B8', localPlayer.handle, weaponhash);
localPlayer.setWeaponAmmo = (weaponhash, ammo) => mp.game.invoke('0x14E56BC5B5DB6A19', localPlayer.handle, weaponhash, ammo);
localPlayer.currentWeapon = () => mp.game.invoke('0x0A6DB4965674D243', localPlayer.handle);
localPlayer.getAmmoType = () => mp.game.invoke(`0xa38dcffcea8962fa`, localPlayer.handle, localPlayer.weapon); 
localPlayer.getWeaponSlot = (weaponhash) => mp.game.invoke('0x4215460B9B8B7FA0', weaponhash);
//localPlayer.getWeaponType = () => mp.game.invoke(`0xF46CDC33180FDA94`, localPlayer.handle, localPlayer.weapon); 
//let ammoType = mp.game.invoke(`0xa38dcffcea8962fa`, mp.players.local.handle, player.weapon);  
//localPlayer.giveWeaponComponent = (weaponhash, component) => mp.game.invoke('0xAD084726D7F23594', localPlayer.handle, weaponhash, component);
//localPlayer.getWeaponAmmoinClip = (weaponhash) => mp.game.invoke('0x583BE370B1EC6EB4', weaponhash);
localPlayer.getAmmoWeapons = () => {
	const weapons = {};
	weaponIds.forEach(weaponId => {
		var ammo = localPlayer.getAmmoWeapon(weaponId)
		if (ammo != 0)
			weapons[(weaponId >>> 0)] = { ammo: ammo };
	});
	return weapons;
};

mp.events.add("getAmmoWeapon", (weaponhash) => {
    var localPlayer = mp.players.local;
    var weaponHash = localPlayer.currentWeapon();
    var ammo = localPlayer.getAmmoWeapon(weaponHash);
    //debug(`ammo: ${ammo}`)
});

mp.events.add("getWeaponTypeInSlot", (weaponSlot) => {
    var val = mp.players.local.getWeaponTypeInSlot(weaponSlot);
    //debug(`type: ${val}`);
});

mp.events.add("getAmmoWeapon", (weaponhash) => {
    var val = mp.players.local.getAmmoWeapon(weaponhash);
    //debug(`ammo ${val}`);

});
mp.events.add("removeWeapon", (weaponhash) => {
    mp.players.local.removeWeapon(weaponhash);
});

mp.events.add("setWeaponAmmo", (weaponhash, ammo) => {
    //debug(`client setWeaponAmmo: ${weaponhash} ${ammo}`);
    var val = mp.players.local.setWeaponAmmo(weaponhash, ammo);
});

mp.events.add("addWeaponAmmo", (weaponhash, add) => {
    var ammo = mp.players.local.getAmmoWeapon(weaponhash);
    mp.players.local.setWeaponAmmo(weaponhash, ammo + add);
});

mp.events.add("weapon.throw", (itemSqlId, weaponHash) => {
    var ammo = mp.players.local.getAmmoWeapon(weaponHash);
    mp.events.callRemote(`weapon.throw`, itemSqlId, ammo);
    //debug(`client: weapon.throw hash: ${weaponHash}`);
});

mp.currentWeaponSqlId = false
mp.currentWeaponHash = false
mp.currentWeaponStrength = false

mp.events.add("weapon.setCurrent", (id, hash, strength) => {
	mp.currentWeaponSqlId = id
	mp.currentWeaponHash = hash
    mp.currentWeaponStrength = strength
})

mp.events.add("playerWeaponShot", () => {
	if (mp.currentWeaponHash && mp.currentWeaponStrength) {
        mp.currentWeaponStrength--
        browserMenu.call(`inventoryAPI`, `updateWeaponStrength`, mp.currentWeaponSqlId, mp.currentWeaponStrength)
        if (!mp.currentWeaponStrength) mp.events.callRemote(`removeServerWeapon`);
    }
})

rpc.register("getAmmoWeapons", () => localPlayer.getAmmoWeapons());

rpc.register("getAmmoWeapon", () => {
	var localPlayer = mp.players.local;
    var weaponHash = localPlayer.currentWeapon();
    var ammo = localPlayer.getAmmoWeapon(weaponHash);
	
	return {weaponHash: weaponHash, ammo: ammo, strength: mp.currentWeaponStrength}
});

rpc.register("getWeaponHash", () => {
    var localPlayer = mp.players.local;
    return { hash: localPlayer.currentWeapon(), hash2: localPlayer.weapon }
});
 

}; a; }
{let a = function scriptEntryPoint(mp) {

mp.events.addDataHandler("text", (entity, value) => {
    if (entity.type != 'object') return
    SyncObject (entity)
})

mp.events.addDataHandler("marker", (entity, params) => {
    if (entity.type != 'object') return
    SyncObject (entity)
}) 

mp.events.addDataHandler("nocollision", (entity, params) => {
    if (entity.type != 'object') return
    SyncObject (entity)
}) 

mp.events.addDataHandler("particle", (entity, particle) => {
    if (entity.type != 'object') return
    if (particle) {
        mp.game.graphics.useParticleFxAsset("core");
        entity.__glowPtfxHandle = mp.game.graphics.startParticleFxLoopedOnEntity(particle, entity.handle, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.5, false, false, false);
    }
    else if (entity.__glowPtfxHandle) {
        mp.game.graphics.removeParticleFx(entity.__glowPtfxHandle, false)
        delete entity.__glowPtfxHandle
    }
})

mp.events.addDataHandler("streamingRange", (entity, value) => {
    if (entity.type != 'object') return
    entity.streamingRange = value
})

mp.events.add("playerReady", () => {
    try {
        mp.objects.forEach((obj) => {
            obj.notifyStreaming = true;
            SyncObject(obj)
        })
        mp.objects.forEach((obj) => {
            if (obj.hasVariable("streamingRange")) {
                obj.streamingRange = obj.getVariable("streamingRange")
            }
        })
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\Sync\SyncObjects.js authCharacter.success: ${err}`)
    }
})

async function SyncObject (entity) {
    if (!entity || !entity.handle) return
	try {
        let nocollision = entity.getVariable("nocollision")
        let text = entity.getVariable("text")
        let marker = entity.getVariable("marker")  
        let particle = entity.getVariable("particle")  
        if (text) setText(entity, text)
        if (marker) setMarker(entity, marker) 
        if (nocollision) entity.setCollision(false, false)
        if (particle) {
            mp.game.graphics.useParticleFxAsset("core");
            entity.__glowPtfxHandle = mp.game.graphics.startParticleFxLoopedOnEntity(particle, entity.handle, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.5, false, false, false);
        }
        else if (entity.__glowPtfxHandle) {
            mp.game.graphics.removeParticleFx(entity.__glowPtfxHandle, false)
            delete entity.__glowPtfxHandle
        }
    }
    catch (err) {
        chatDebug(`error: ${err}`)
    }
}

mp.events.add("entityStreamIn", (entity) => {
    if (entity.type != 'object') return 
    SyncObject (entity)
})

function enableStreaming(item) {
    let entity = item.type == "dummy" ? mp.dummies.atRemoteId(item.id) : mp[`${item.type}s`].atRemoteId(item.id)
    if (!isEntityExists(entity)) return

    entity.notifyStreaming = true
}

mp.events.add("client::object:enableStreaming", (data) => {
    if (Array.isArray(data)) {
        data.forEach((item) => enableStreaming(item))
    }
    else {
        enableStreaming(data)
    }
})

function setMarker (entity, params) {  
    if (entity.renderMarker) {
        entity.renderMarker.destroy()
        entity.renderMarker = undefined
    }
    if (!params) return
    entity.renderMarker = new mp.Event("render", () => {
        try { 
            if (!isEntityExists(entity)) {  
                if (entity.renderMarker) {
                    entity.renderMarker.destroy()
                    entity.renderMarker = undefined
                }
            }
            let distance = Math.abs(Math.sqrt(Math.pow((entity.position.x - mp.players.local.position.x), 2) + Math.pow((entity.position.y - mp.players.local.position.y), 2) + Math.pow((entity.position.z - mp.players.local.position.z), 2)));
            if (distance <= 30) {
                mp.game.graphics.drawMarker(params.id || 0,
                    entity.position.x, entity.position.y, entity.position.z + 2,
                    0, 0, 0,
                    0, 0, 0,
                    params.scale || 1, params.scale || 1, params.scale || 1,
                    params.color[0], params.color[1], params.color[2], params.color[3],
                    params.sliding || false, true, 2,
                    params.rotate || false, null, null, false
                ); 
            }
        }
        catch (e) { 
            if (entity.renderMarker) {
                entity.renderMarker.destroy()
                entity.renderMarker = undefined
            } 
        }
    })
}

function setText (entity, value) {
    if (entity.renderText) {
        entity.renderText.destroy()
        entity.renderText = undefined
    }
    if (!value) return
    entity.renderText = new mp.Event("render", () => {
        try {
            if (!isEntityExists(entity)) { 
                if (entity.renderText) {
                    entity.renderText.destroy()
                    entity.renderText = undefined
                }
            }
            if(mp.players.local.dimension != entity.dimension) return
            let distance = Math.abs(Math.sqrt(Math.pow((entity.position.x - mp.players.local.position.x), 2) + Math.pow((entity.position.y - mp.players.local.position.y), 2) + Math.pow((entity.position.z - mp.players.local.position.z), 2)));
            if (distance <= 20) {
                mp.game.graphics.drawText(value, [entity.position.x, entity.position.y, entity.position.z + 0.5], {
                    font: 0,
                    color: [255, 255, 255, 255],
                    scale: [0.3, 0.3],
                    outline: true,
                    centre: true
                })
            }
        } 
        catch (e) { 
            if (entity.renderText) {
                entity.renderText.destroy()
                entity.renderText = undefined
            } 
        }
    })
}

exports = {
    setText,
    setMarker
}

const _SET_OBJECT_TEXTURE_VARIATION = "0x971DA0055324D033";
const dataKey = "__textureVariation";

mp.events.add("entityStreamIn", (entity) => {
    try {
        if (entity.type === "object" && entity.hasVariable(dataKey)) {
            chatDebug("entityStreamIn SyncObjects")
            mp.game.invoke(_SET_OBJECT_TEXTURE_VARIATION, entity.handle, entity.getVariable(dataKey) || 0);
        }
    }
    catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\Sync\SyncObjects.js entityStreamIn: ${err}`)
    }
});

mp.events.addDataHandler(dataKey, (entity, value) => {
    if (entity.type === "object") {
        entity.notifyStreaming = true;
        mp.game.invoke(_SET_OBJECT_TEXTURE_VARIATION, entity.handle, value || 0);
    }
});

mp.events.add("authCharacter.success", () => {
    try {
        mp.objects.forEach((prop) => {
            if (prop.hasVariable(dataKey)) {
                prop.notifyStreaming = true;

                if (prop.handle) {
                    mp.game.invoke(_SET_OBJECT_TEXTURE_VARIATION, prop.handle, prop.getVariable(dataKey) || 0);
                }
            }
        });
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\Sync\SyncObjects.js authCharacter.success: ${err}`)
    }
})

}; a; }
{let a = function scriptEntryPoint(mp) {
const ScreenCoords = {
    // base coords
    baseX: 0.918,
    baseY: 0.984,

    // title (left text) coords
    titleOffsetX: 0.012,
    titleOffsetY: -0.009,

    // value (right text) coords
    valueOffsetX: 0.0785,
    valueOffsetY: -0.0165,

    // progress bar coords
    pbarOffsetX: 0.047,
    pbarOffsetY: 0.0015
};

const Sizes = {
    // bar dimensions
    timerBarWidth: 0.165,
    timerBarHeight: 0.035,
    timerBarMargin: 0.038,

    // progress bar dimensions
    pbarWidth: 0.0616,
    pbarHeight: 0.0105
};

const Natives = {
    SET_TEXT_DROP_SHADOW: "0x1CA3E9EAC9D93E5E",
    SET_TEXT_OUTLINE: "0x2513DFB0FB8400FE"
};

const HUDComponents = {
    AreaName: 7,
    StreetName: 9
};

const activeTimerBars = [];
const ui = mp.game.ui;

const drawText = (text, position, options) => {
    options = { ...{ align: 1, font: 4, scale: 0.3, outline: true, shadow: true, color: [255, 255, 255, 255] }, ...options };

    const font = options.font;
    const scale = options.scale;
    const outline = options.outline;
    const shadow = options.shadow;
    const color = options.color;
    const wordWrap = options.wordWrap;
    const align = options.align;

    ui.setTextEntry("CELL_EMAIL_BCON");
    for (let i = 0; i < text.length; i += 99)
    {
        const subStringText = text.substr(i, Math.min(99, text.length - i));
        ui.addTextComponentSubstringPlayerName(subStringText);
    }

    ui.setTextFont(font);
    ui.setTextScale(scale, scale);
    ui.setTextColour(color[0], color[1], color[2], color[3]);

    if (shadow) {
        mp.game.invoke(Natives.SET_TEXT_DROP_SHADOW);
    }

    if (outline) {
        mp.game.invoke(Natives.SET_TEXT_OUTLINE);
    }

    switch (align) {
        case 1: {
            ui.setTextCentre(true);
            break;
        }

        case 2: {
            ui.setTextRightJustify(true);
            ui.setTextWrap(0.0, position[0] || 0);
            break;
        }
    }

    ui.drawText(position[0] || 0, position[1] || 0);
};

// timerbar class
class TimerBar {
    constructor(title, useProgressBar = false) {
        this.title = title;
        this.useProgressBar = useProgressBar;
        this.text = "";
        this._pbarValue = 0.0;
        this._textColor = [240, 240, 240, 255];
        this._pbarBgColor = [155, 155, 155, 255];
        this._pbarFgColor = [255, 255, 255, 255];
        this.usePlayerStyle = false;

        this._visible = true;
        activeTimerBars.push(this);
    }

    async requestScaleform() {
        if (!mp.game.graphics.hasStreamedTextureDictLoaded("timerbars")) {
            mp.game.graphics.requestStreamedTextureDict("timerbars", true);
            while (!mp.game.graphics.hasStreamedTextureDictLoaded("timerbars")) await mp.game.waitAsync(0);
        }
    }

    get progress() {
        return this._pbarValue;
    }

    set progress(value) {
        this._pbarValue = value <= 0.0 ? 0.0 : value >= 1.0 ? 1.0 : value;
    }

    get visible() {
        return this._visible;
    }

    set visible(value) {
        let idx = activeTimerBars.indexOf(this);
        if (value) {
            if (idx != -1) return;
            activeTimerBars.push(this);
        } else {
            if (idx == -1) return;
            activeTimerBars.splice(idx, 1);
        }

        this._visible = value;
    }

    get textColor() {
        return this._textColor;
    }

    set textColor(value) {
        if (Array.isArray(value)) {
            this._textColor = value;
        } else {
            let result = ui.getHudColour(value, 0, 0, 0, 0);
            this._textColor = [result.r, result.g, result.b, result.a];
        }
    }

    get pbarBgColor() {
        return this._pbarBgColor;
    }

    set pbarBgColor(value) {
        if (Array.isArray(value)) {
            this._pbarBgColor = value;
        } else {
            let result = ui.getHudColour(value, 0, 0, 0, 0);
            this._pbarBgColor = [result.r, result.g, result.b, result.a];
        }
    }

    get pbarFgColor() {
        return this._pbarFgColor;
    }

    set pbarFgColor(value) {
        if (Array.isArray(value)) {
            this._pbarFgColor = value;
        } else {
            let result = mp.game.ui.getHudColour(value, 0, 0, 0, 0);
            this._pbarFgColor = [result.r, result.g, result.b, result.a];
        }
    }
}

// draw timerbars
mp.events.add("render", () => {
    let safeZone = mp.game.graphics.getSafeZoneSize();
    let safeZoneX = (1.0 - safeZone) * 0.5;
    let safeZoneY = (1.0 - safeZone) * 0.5;
    let max = activeTimerBars.length;

    if (max > 0) {
        ui.hideHudComponentThisFrame(HUDComponents.AreaName);
        ui.hideHudComponentThisFrame(HUDComponents.StreetName);
    }

    for (let i = 0; i < max; i++) {
        let drawY = (ScreenCoords.baseY - safeZoneY) - (i * Sizes.timerBarMargin);

        // draw bg
        mp.game.graphics.drawSprite("timerbars", "all_black_bg", ScreenCoords.baseX - safeZoneX, drawY, Sizes.timerBarWidth, Sizes.timerBarHeight, 0.0, 255, 255, 255, 160);

        // draw title
        drawText(activeTimerBars[i].title, [(ScreenCoords.baseX - safeZoneX) + ScreenCoords.titleOffsetX, drawY + ScreenCoords.titleOffsetY - (activeTimerBars[i].usePlayerStyle ? 0.00625 : 0.0)], {
            font: activeTimerBars[i].usePlayerStyle ? 4 : 0,
            color: activeTimerBars[i]._textColor,
            scale: activeTimerBars[i].usePlayerStyle ? 0.465 : 0.3,
            outline: false,
            align: 2,
            shadow: activeTimerBars[i].usePlayerStyle
        });

        if (activeTimerBars[i].useProgressBar) {
            let pbarX = (ScreenCoords.baseX - safeZoneX) + ScreenCoords.pbarOffsetX;
            let pbarY = drawY + ScreenCoords.pbarOffsetY;
            let width = Sizes.pbarWidth * activeTimerBars[i]._pbarValue;

            // draw background
            mp.game.graphics.drawRect(pbarX, pbarY, Sizes.pbarWidth, Sizes.pbarHeight, activeTimerBars[i]._pbarBgColor[0], activeTimerBars[i]._pbarBgColor[1], activeTimerBars[i]._pbarBgColor[2], activeTimerBars[i]._pbarBgColor[3]);

            // draw foreground
            mp.game.graphics.drawRect((pbarX - Sizes.pbarWidth / 2) + width / 2, pbarY, width, Sizes.pbarHeight, activeTimerBars[i]._pbarFgColor[0], activeTimerBars[i]._pbarFgColor[1], activeTimerBars[i]._pbarFgColor[2], activeTimerBars[i]._pbarFgColor[3]);
        } else {
            // draw text
            drawText(activeTimerBars[i].text, [(ScreenCoords.baseX - safeZoneX) + ScreenCoords.valueOffsetX, drawY + ScreenCoords.valueOffsetY], {
                font: 0,
                color: activeTimerBars[i]._textColor,
                scale: 0.425,
                outline: false,
                align: 2,
                shadow: false
            });
        }
    }
});

exports = {
    TimerBar
}
}; a; }
{let a = function scriptEntryPoint(mp) {
require("aesjs")

function storageDecryption(key) {
    if (!mp?.storage?.data?.account?.password) return null

    if (mp.storage.data.account.encryption === undefined) {
        mp.storage.data.account.encryption = 0;
        mp.storage.flush();
    }

    if (mp.storage.data.account.encryption == 0) {
        /* Migrate from encryption v0 (no encryption) to encryption v1 */
        let text = mp.storage.data.account.password;
        let textBytes = aesjs.utils.utf8.toBytes(text);
        let aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));
        let encryptedBytes = aesCtr.encrypt(textBytes);
        let encryptedHex = aesjs.utils.hex.fromBytes(encryptedBytes);

        mp.storage.data.account.password = encryptedHex;
        mp.storage.data.account.encryption = 1;
        mp.storage.flush();
    }

    if (mp.storage.data.account.encryption == 1) {
        /* Decrypt password */
        let encryptedHex = mp.storage.data.account.password;
        let encryptedBytes = aesjs.utils.hex.toBytes(encryptedHex);
        let aesCtr = new aesjs.ModeOfOperation.ctr(key, new aesjs.Counter(5));
        let decryptedBytes = aesCtr.decrypt(encryptedBytes);
        let password = aesjs.utils.utf8.fromBytes(decryptedBytes);
        
        return password
    }

    return null
}

let storageKey = null

mp.events.add("setAuthorizationMenu", (params, key) => {
    if (!params) params = null
    else {
        if (typeof params == "string") params = JSON.parse(params)
        if (key) storageKey = key
        if (params.stage == "authorization" && (key || storageKey)) {
            const password = storageDecryption(key || storageKey)

            Object.assign(params, { login: mp.storage.data.account && mp.storage.data.account.login ? mp.storage.data.account.login : "", password: password ? password : "", sound: mp.storage.data.sound }) 
        }
    }
    browserMenu.call(`authorizationAPI`, `setData`, params ? params : null);
})

mp.events.add("setErrorAuthorizationMenu", (field) => { 
    browserMenu.call(`authorizationAPI`, `setError`, field);
})


mp.events.add("setSelectorCharactersMenu", (params) => {
    if (!params) params = null
    else { 
        if (typeof params == "string") params = JSON.parse(params)
        if (params) {
            for (let key in params) {
                if (params[key] && params[key].reasons) {
                    if (params[key].reasons.fdm && params[key].reasons.fdm.reason) params[key].reasons.fdm.reason = stringHelper.escapeHtml(params[key].reasons.fdm.reason)
                    if (params[key].reasons.warn && params[key].reasons.warn.reason) params[key].reasons.warn.reason = stringHelper.escapeHtml(params[key].reasons.warn.reason)
                    if (params[key].reasons.mute && params[key].reasons.mute.reason) params[key].reasons.mute.reason = stringHelper.escapeHtml(params[key].reasons.mute.reason)
                    if (params[key].reasons.vmute && params[key].reasons.vmute.reason) params[key].reasons.vmute.reason = stringHelper.escapeHtml(params[key].reasons.vmute.reason)
                }
            }
        }
    }
    browserMenu.call(`selectorCharactersAPI`, `setData`, params ? params : null);
})

mp.events.add("updateSelectorCharactersSlots", () => {
    browserMenu.call(`selectorCharactersAPI`, `getSlots`);
})

mp.events.add('choiceSpawn', (slot, faction, house, family) => {  
    browserMenu.call(`choiceSpawnAPI`, `setData`, {slot, faction, house, family});
});

mp.events.add("setSwitchChecked", (bool, login, password, key) => {
    if (bool) {
        mp.storage.data.account = {
            login: login,
            password: password,
            encryption: 0
        };

        storageDecryption(key)
    } else {
        delete mp.storage.data.account;
        mp.storage.flush();
    }
}) 

mp.events.add("setSwitchCheckedSound", (bool) => {
    if (bool) {
        mp.storage.data.sound = true
    }
    else {
        delete mp.storage.data.sound
    }
    mp.storage.flush();
}) 

mp.events.add("enableSoundAuthorization", (track, volume) => {
    if (mp.storage.data.sound) volume = 0
    mp.events.call("enableSound", track, volume, true)
}) 
}; a; }
{let a = function scriptEntryPoint(mp) {
/*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
(function(root) {
    "use strict";

    function checkInt(value) {
        return (parseInt(value) === value);
    }

    function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) { return false; }

        for (var i = 0; i < arrayish.length; i++) {
            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                return false;
            }
        }

        return true;
    }

    function coerceArray(arg, copy) {

        // ArrayBuffer view
        if (arg.buffer && arg.name === 'Uint8Array') {

            if (copy) {
                if (arg.slice) {
                    arg = arg.slice();
                } else {
                    arg = Array.prototype.slice.call(arg);
                }
            }

            return arg;
        }

        // It's an array; check it is a valid representation of a byte
        if (Array.isArray(arg)) {
            if (!checkInts(arg)) {
                throw new Error('Array contains invalid value: ' + arg);
            }

            return new Uint8Array(arg);
        }

        // Something else, but behaves like an array (maybe a Buffer? Arguments?)
        if (checkInt(arg.length) && checkInts(arg)) {
            return new Uint8Array(arg);
        }

        throw new Error('unsupported array-like object');
    }

    function createArray(length) {
        return new Uint8Array(length);
    }

    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
            if (sourceArray.slice) {
                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
            } else {
                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
            }
        }
        targetArray.set(sourceArray, targetStart);
    }



    var convertUtf8 = (function() {
        function toBytes(text) {
            var result = [], i = 0;
            text = encodeURI(text);
            while (i < text.length) {
                var c = text.charCodeAt(i++);

                // if it is a % sign, encode the following 2 bytes as a hex value
                if (c === 37) {
                    result.push(parseInt(text.substr(i, 2), 16))
                    i += 2;

                // otherwise, just the actual byte
                } else {
                    result.push(c)
                }
            }

            return coerceArray(result);
        }

        function fromBytes(bytes) {
            var result = [], i = 0;

            while (i < bytes.length) {
                var c = bytes[i];

                if (c < 128) {
                    result.push(String.fromCharCode(c));
                    i++;
                } else if (c > 191 && c < 224) {
                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                    i += 2;
                } else {
                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                    i += 3;
                }
            }

            return result.join('');
        }

        return {
            toBytes: toBytes,
            fromBytes: fromBytes,
        }
    })();

    var convertHex = (function() {
        function toBytes(text) {
            var result = [];
            for (var i = 0; i < text.length; i += 2) {
                result.push(parseInt(text.substr(i, 2), 16));
            }

            return result;
        }

        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
        var Hex = '0123456789abcdef';

        function fromBytes(bytes) {
                var result = [];
                for (var i = 0; i < bytes.length; i++) {
                    var v = bytes[i];
                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                }
                return result.join('');
        }

        return {
            toBytes: toBytes,
            fromBytes: fromBytes,
        }
    })();


    // Number of rounds by keysize
    var numberOfRounds = {16: 10, 24: 12, 32: 14}

    // Round constant words
    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

    // S-box and Inverse S-box (S is for Substitution)
    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

    // Transformations for encryption
    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

    // Transformations for decryption
    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

    // Transformations for decryption key expansion
    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

    function convertToInt32(bytes) {
        var result = [];
        for (var i = 0; i < bytes.length; i += 4) {
            result.push(
                (bytes[i    ] << 24) |
                (bytes[i + 1] << 16) |
                (bytes[i + 2] <<  8) |
                 bytes[i + 3]
            );
        }
        return result;
    }

    var AES = function(key) {
        if (!(this instanceof AES)) {
            throw Error('AES must be instanitated with `new`');
        }

        Object.defineProperty(this, 'key', {
            value: coerceArray(key, true)
        });

        this._prepare();
    }


    AES.prototype._prepare = function() {

        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
        }

        // encryption round keys
        this._Ke = [];

        // decryption round keys
        this._Kd = [];

        for (var i = 0; i <= rounds; i++) {
            this._Ke.push([0, 0, 0, 0]);
            this._Kd.push([0, 0, 0, 0]);
        }

        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;

        // convert the key into ints
        var tk = convertToInt32(this.key);

        // copy values into round key arrays
        var index;
        for (var i = 0; i < KC; i++) {
            index = i >> 2;
            this._Ke[index][i % 4] = tk[i];
            this._Kd[rounds - index][i % 4] = tk[i];
        }

        // key expansion (fips-197 section 5.2)
        var rconpointer = 0;
        var t = KC, tt;
        while (t < roundKeyCount) {
            tt = tk[KC - 1];
            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                      (S[(tt >>  8) & 0xFF] << 16) ^
                      (S[ tt        & 0xFF] <<  8) ^
                       S[(tt >> 24) & 0xFF]        ^
                      (rcon[rconpointer] << 24));
            rconpointer += 1;

            // key expansion (for non-256 bit)
            if (KC != 8) {
                for (var i = 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }

            // key expansion for 256-bit keys is "slightly different" (fips-197)
            } else {
                for (var i = 1; i < (KC / 2); i++) {
                    tk[i] ^= tk[i - 1];
                }
                tt = tk[(KC / 2) - 1];

                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                              (S[(tt >>  8) & 0xFF] <<  8) ^
                              (S[(tt >> 16) & 0xFF] << 16) ^
                              (S[(tt >> 24) & 0xFF] << 24));

                for (var i = (KC / 2) + 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }
            }

            // copy values into round key arrays
            var i = 0, r, c;
            while (i < KC && t < roundKeyCount) {
                r = t >> 2;
                c = t % 4;
                this._Ke[r][c] = tk[i];
                this._Kd[rounds - r][c] = tk[i++];
                t++;
            }
        }

        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
        for (var r = 1; r < rounds; r++) {
            for (var c = 0; c < 4; c++) {
                tt = this._Kd[r][c];
                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                                  U2[(tt >> 16) & 0xFF] ^
                                  U3[(tt >>  8) & 0xFF] ^
                                  U4[ tt        & 0xFF]);
            }
        }
    }

    AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
            throw new Error('invalid plaintext size (must be 16 bytes)');
        }

        var rounds = this._Ke.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(plaintext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Ke[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                        T4[ t[(i + 3) % 4]        & 0xff] ^
                        this._Ke[r][i]);
            }
            t = a.slice();
        }

        // the last round is special
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Ke[rounds][i];
            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
        }

        return result;
    }

    AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
            throw new Error('invalid ciphertext size (must be 16 bytes)');
        }

        var rounds = this._Kd.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(ciphertext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Kd[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                        T8[ t[(i + 1) % 4]        & 0xff] ^
                        this._Kd[r][i]);
            }
            t = a.slice();
        }

        // the last round is special
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Kd[rounds][i];
            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
        }

        return result;
    }


    /**
     *  Mode Of Operation - Electonic Codebook (ECB)
     */
    var ModeOfOperationECB = function(key) {
        if (!(this instanceof ModeOfOperationECB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Electronic Code Block";
        this.name = "ecb";

        this._aes = new AES(key);
    }

    ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);

        if ((plaintext.length % 16) !== 0) {
            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
        }

        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);

        for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);
            block = this._aes.encrypt(block);
            copyArray(block, ciphertext, i);
        }

        return ciphertext;
    }

    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);

        if ((ciphertext.length % 16) !== 0) {
            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
        }

        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);

        for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);
            copyArray(block, plaintext, i);
        }

        return plaintext;
    }


    /**
     *  Mode Of Operation - Cipher Block Chaining (CBC)
     */
    var ModeOfOperationCBC = function(key, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Cipher Block Chaining";
        this.name = "cbc";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 bytes)');
        }

        this._lastCipherblock = coerceArray(iv, true);

        this._aes = new AES(key);
    }

    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);

        if ((plaintext.length % 16) !== 0) {
            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
        }

        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);

        for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);

            for (var j = 0; j < 16; j++) {
                block[j] ^= this._lastCipherblock[j];
            }

            this._lastCipherblock = this._aes.encrypt(block);
            copyArray(this._lastCipherblock, ciphertext, i);
        }

        return ciphertext;
    }

    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);

        if ((ciphertext.length % 16) !== 0) {
            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
        }

        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);

        for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);

            for (var j = 0; j < 16; j++) {
                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
            }

            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
        }

        return plaintext;
    }


    /**
     *  Mode Of Operation - Cipher Feedback (CFB)
     */
    var ModeOfOperationCFB = function(key, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Cipher Feedback";
        this.name = "cfb";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 size)');
        }

        if (!segmentSize) { segmentSize = 1; }

        this.segmentSize = segmentSize;

        this._shiftRegister = coerceArray(iv, true);

        this._aes = new AES(key);
    }

    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if ((plaintext.length % this.segmentSize) != 0) {
            throw new Error('invalid plaintext size (must be segmentSize bytes)');
        }

        var encrypted = coerceArray(plaintext, true);

        var xorSegment;
        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);
            for (var j = 0; j < this.segmentSize; j++) {
                encrypted[i + j] ^= xorSegment[j];
            }

            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return encrypted;
    }

    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if ((ciphertext.length % this.segmentSize) != 0) {
            throw new Error('invalid ciphertext size (must be segmentSize bytes)');
        }

        var plaintext = coerceArray(ciphertext, true);

        var xorSegment;
        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);

            for (var j = 0; j < this.segmentSize; j++) {
                plaintext[i + j] ^= xorSegment[j];
            }

            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return plaintext;
    }

    /**
     *  Mode Of Operation - Output Feedback (OFB)
     */
    var ModeOfOperationOFB = function(key, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Output Feedback";
        this.name = "ofb";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 bytes)');
        }

        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;

        this._aes = new AES(key);
    }

    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._lastPrecipherIndex === 16) {
                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                this._lastPrecipherIndex = 0;
            }
            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }

        return encrypted;
    }

    // Decryption is symetric
    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


    /**
     *  Counter object for CTR common mode of operation
     */
    var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
            throw Error('Counter must be instanitated with `new`');
        }

        // We allow 0, but anything false-ish uses the default 1
        if (initialValue !== 0 && !initialValue) { initialValue = 1; }

        if (typeof(initialValue) === 'number') {
            this._counter = createArray(16);
            this.setValue(initialValue);

        } else {
            this.setBytes(initialValue);
        }
    }

    Counter.prototype.setValue = function(value) {
        if (typeof(value) !== 'number' || parseInt(value) != value) {
            throw new Error('invalid counter value (must be an integer)');
        }

        // We cannot safely handle numbers beyond the safe range for integers
        if (value > Number.MAX_SAFE_INTEGER) {
            throw new Error('integer value out of safe range');
        }

        for (var index = 15; index >= 0; --index) {
            this._counter[index] = value % 256;
            value = parseInt(value / 256);
        }
    }

    Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);

        if (bytes.length != 16) {
            throw new Error('invalid counter bytes size (must be 16 bytes)');
        }

        this._counter = bytes;
    };

    Counter.prototype.increment = function() {
        for (var i = 15; i >= 0; i--) {
            if (this._counter[i] === 255) {
                this._counter[i] = 0;
            } else {
                this._counter[i]++;
                break;
            }
        }
    }


    /**
     *  Mode Of Operation - Counter (CTR)
     */
    var ModeOfOperationCTR = function(key, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Counter";
        this.name = "ctr";

        if (!(counter instanceof Counter)) {
            counter = new Counter(counter)
        }

        this._counter = counter;

        this._remainingCounter = null;
        this._remainingCounterIndex = 16;

        this._aes = new AES(key);
    }

    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._remainingCounterIndex === 16) {
                this._remainingCounter = this._aes.encrypt(this._counter._counter);
                this._remainingCounterIndex = 0;
                this._counter.increment();
            }
            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }

        return encrypted;
    }

    // Decryption is symetric
    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


    ///////////////////////
    // Padding

    // See:https://tools.ietf.org/html/rfc2315
    function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - (data.length % 16);
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for (var i = data.length; i < result.length; i++) {
            result[i] = padder;
        }
        return result;
    }

    function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

        var padder = data[data.length - 1];
        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

        var length = data.length - padder;
        for (var i = 0; i < padder; i++) {
            if (data[length + i] !== padder) {
                throw new Error('PKCS#7 invalid padding byte');
            }
        }

        var result = createArray(length);
        copyArray(data, result, 0, 0, length);
        return result;
    }

    ///////////////////////
    // Exporting


    // The block cipher
    var aesjs = {
        AES: AES,
        Counter: Counter,

        ModeOfOperation: {
            ecb: ModeOfOperationECB,
            cbc: ModeOfOperationCBC,
            cfb: ModeOfOperationCFB,
            ofb: ModeOfOperationOFB,
            ctr: ModeOfOperationCTR
        },

        utils: {
            hex: convertHex,
            utf8: convertUtf8
        },

        padding: {
            pkcs7: {
                pad: pkcs7pad,
                strip: pkcs7strip
            }
        },

        _arrayTest: {
            coerceArray: coerceArray,
            createArray: createArray,
            copyArray: copyArray,
        }
    };

    global.aesjs = aesjs;
})(this);
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.isOpenActivityResult = false
mp.events.add("client::setActivityResult", (data) => {
    if(mp.bindBlocker()) return
    browserMenu.call(`activitiesAPI`, `setData`, data)
    mp.isOpenActivityResult = true
}) 
mp.events.add("client::hideActivityResult", () => { 
    browserMenu.call(`activitiesAPI`, `setData`, null)
    mp.isOpenActivityResult = false
}) 

mp.events.add("showHalloween", (data) => {
    if (data) mp.interfaceActive = "halloween"
    else mp.interfaceActive = false
    browserMenu.call(`halloween`, `set`, data)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.isDialogBoxesActive = false
mp.events.add("showDialogBoxes", (params) => {
    if (!params) {
        params = null
        mp.events.call("stopFocusOnPed")
        mp.isDialogBoxesActive = false
        mp.players.local.setAlpha(255)
    }
    else { 
        mp.isDialogBoxesActive = true
        mp.players.local.setAlpha(0)
    }
    browserMenu.call(`dialogBoxesAPI`, `setData`, params)
})  
mp.events.add("pushSpeechDialogBoxes", (params) => { 
    browserMenu.call(`dialogBoxesAPI`, `pushSpeech`, params)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.players.local.raycasting = { 
    entity: undefined,
    camera: undefined, 
    object: undefined
} 
const raycastDurationWithinFindNewTarget = 3000 // СКОЛЬКО БУДЕТ РЕЙКАСТ ВИСЕТЬ НА ТАРГЕТЕ, ЕСЛИ НЕТ НОВОГО ТАРГЕТА (В МС)
const ignoredVehicles = ["tanker", "tanker2", "trailers", "trailers2",  "trailers4", "rcbandito"]
const whiteListObjects = [mp.game.joaat("prop_hookah_02"), mp.game.joaat("q_props_barbecue_grill")]

mp.customRaycastingObjects = []

mp.events.add("entityStreamIn", (entity) => {
    if (entity.type != 'object') return
    if (!whiteListObjects.includes(entity.model)) return

    mp.customRaycastingObjects.push(entity)
})

mp.events.add("entityStreamOut", (entity) => {
    if (entity.type != 'object') return
    if (!whiteListObjects.includes(entity.model)) return

    mp.customRaycastingObjects.splice(mp.customRaycastingObjects.indexOf(entity), 1)
})

function pointingAtRadius (distance, radius = 0.2) {
    try {
        const camera = mp.cameras.new("gameplay");
        let position = camera.getCoord();
        let direction = camera.getDirection();
        let farAway = new mp.Vector3((direction.x * distance) + (position.x), (direction.y * distance) + (position.y), (direction.z * distance) + (position.z));
        return mp.raycasting.testCapsule(position, farAway, radius, mp.players.local);
    }
    catch (e) {
    }
    return undefined;
};

mp.events.add("playerEnterVehicle", () => {
    createEntityRaycast(false, false)
})
setInterval(() => { 
    try {  
        if(mp.bindBlocker()) return createEntityRaycast(false, false)
        if(mp.players.local.raycasting.camera == undefined){ 
            mp.players.local.raycasting.camera = mp.cameras.new("gameplay"); 
        }  
        const distance = 2.5;
        const position = mp.players.local.getBoneCoords(12844, 0.5, 0, 0);
        const direction = mp.players.local.raycasting.camera.getDirection();
        const farAway = new mp.Vector3((direction.x * distance) + (position.x), (direction.y * distance) + (position.y), (direction.z * distance) + (position.z));
        const raycast = mp.raycasting.testPointToPoint(position, farAway, [1, 16]); 
        // switch (mp.game.invoke("0x8D4D46230B2C353A")) {
        //     case 4:
        //         raycast = pointingAtRadius(3); 
        //         break;
        //     case 1:
        //         raycast = pointingAtRadius(6.8); 
        //         break;
        //     case 2:
        //         raycast = pointingAtRadius(9); 
        //         break;
        //     default:
        //         raycast = pointingAtRadius(5); 
        //         break;
        // }   
        if(raycast != undefined && raycast.entity != undefined) { 
            createEntityRaycast(raycast, true) 
        }
        else { 
            if (mp.customRaycastingObjects.length) {
                let obj = mp.customRaycastingObjects.find(obj => mp.objects.exists(obj) && vdist(obj.position, farAway) < distance)
                if (obj) return createEntityRaycast({ entity: obj }, true)
            }

            if (mp.players.local.raycasting.entity) { 
                if (Date.now() - mp.players.local.raycasting.lastUpdate > raycastDurationWithinFindNewTarget) {
                    createEntityRaycast(false, false) 
                }
            }
            else createEntityRaycast(false, false) 
        }


    } catch (err) {
        chatDebug(err)
    }
}, 200)

mp.events.add("render", () => { 
    try {
        if (mp.players.local.raycasting.object && (mp.vehicles.exists(mp.players.local.raycasting.object.entity) || mp.players.exists(mp.players.local.raycasting.object.entity) || mp.objects.exists(mp.players.local.raycasting.object.entity))) {
            drawRaycast (mp.players.local.raycasting.object)
        }
    } catch (err) {
        chatDebug(`render raycasting err ${err}`)
    }
})
mp.events.add("playerEnterVehicle", (vehicle) => {
    vehicle.setInvincible(false);
    createEntityRaycast(null, false)
})
mp.events.add("playerCustomStartEnterVehicle", () => {
    createEntityRaycast(null, false)
})
function drawRaycast (object) {
    try {
        mp.game.graphics.drawText("E", [object.entity.position.x, object.entity.position.y, object.entity.position.z + 0.2], { 
            font: 0, 
            color: [255, 255, 255, 255], 
            scale: [0.4, 0.4], 
            outline: true,
            centre: true
        }); 
        if(object.entity.type == 'player'){ 
            mp.game.graphics.drawMarker(27,
                object.entity.position.x, object.entity.position.y, object.entity.position.z - 0.9,
                0, 0, 0,
                0, 0, 0,
                1.5, 1.5, 1.5,
                255, 165, 0, 255,
                false, true, 2,
                true, null, null, false
            ); 
        }
    } catch (err) {
        chatDebug(`drawraycast ${err}`)
    }
}

function createEntityRaycast(object, bool){
    try {
        if(!bool) {
            if(mp.players.local.raycasting.object) { 
                mp.players.local.raycasting.entity = undefined  
                mp.players.local.raycasting.object = undefined   
            } 
            return  
        }
        if(object == undefined || object.entity == undefined || object.entity.type == undefined) return 
        if(object.entity == mp.players.local || object.entity.variable_invisible || object.entity.getVariable("luckyWheelPrizeVehicle") || mp.players.local.getVariable("cuffedBy") != null || mp.players.local.getVariable("boundedBy") != null || mp.clientStorage["disableInteraction"] || mp.isHideInTrunk) return
        if(mp.players.local.raycasting.entity && mp.players.local.raycasting.entity != object.entity){ 
            mp.players.local.raycasting.entity = undefined 
            mp.players.local.raycasting.object = undefined   
        }    
        if(object.entity.type != 'vehicle' && object.entity.type != 'player' && object.entity.type != 'ped' && object.entity.type != 'object') return 
        if(mp.players.local.vehicle && mp.players.local.vehicle) return
        if(object.entity.type == 'vehicle' && mp.game.vehicle.isThisModelABicycle(object.entity.model) || isVehicleModelIgnored(object.entity.model)  ||  mp.players.local.getVehicleIsUsing() || !object.entity.model) return
        if(object.entity.type == 'object' && !whiteListObjects.includes(object.entity.model)) return
        if(mp.players.local.raycasting.entity == undefined){ 
            mp.players.local.raycasting.entity = object.entity  
            mp.players.local.raycasting.object = object   
            mp.players.local.raycasting.lastUpdate = Date.now()
        }  
    } catch (err) {
        chatDebug(err)
    }
}

function isVehicleModelIgnored(veh){
    for (let i = 0; i < ignoredVehicles.length; i++) {
        if (veh == mp.game.joaat(ignoredVehicles[i])) return true
    }
    return false
}

}; a; }
{let a = function scriptEntryPoint(mp) {
const localPlayer = mp.players.local
const driverSeat = 0
const controls = mp.game.controls; 
mp.game.controls.useDefaultVehicleEntering = false;

mp.keys.bindEx(0x47, true, () => {
	try {
		if (mp.players.local.vehicle && !mp.bindBlocker({noknock: true})) {
			if (localPlayer.getVariable("knockDown")) {
				localPlayer.taskLeaveVehicle(mp.players.local.vehicle.handle, 16);
				mp.events.callRemote("knockDownResetAnim") 
			}
			return
		}

		let vehicle = getClosestVehicle()  
		if (!vehicle || vehicle.getSpeed() > 5 || mp.bindBlocker({noknock: true}) || localPlayer.getIsTaskActive(160) || localPlayer.getIsTaskActive(2) || !controls.canSeatAtVehicle) return
		if (mp.game.vehicle.isThisModelABike(vehicle.model)) {
			if (vehicle.isSeatFree(0)) {
				if (localPlayer.getVariable("knockDown")) {
					if (vehicle.getPedInSeat(-1)) {
						localPlayer.clearTasksImmediately();
						localPlayer.taskEnterVehicle(vehicle.handle, 5000, 0, 2, 16, 0);
					}
					return
				}	
				mp.players.local.taskEnterVehicle(vehicle.handle, 5000, 0, 2.0, 1, 0);
			}
			return;
		}



		const seatRear 				= vehicle.getBoneIndexByName('seat_r');
		const seatFrontPassenger 	= vehicle.getBoneIndexByName('seat_pside_f');
		const seatRearDriver 		= vehicle.getBoneIndexByName('seat_dside_r');
		const seatRearDriver1 		= vehicle.getBoneIndexByName('seat_dside_r1');
		const seatRearDriver2 		= vehicle.getBoneIndexByName('seat_dside_r2');
		const seatRearDriver3 		= vehicle.getBoneIndexByName('seat_dside_r3');
		const seatRearDriver4 		= vehicle.getBoneIndexByName('seat_dside_r4');
		const seatRearDriver5 		= vehicle.getBoneIndexByName('seat_dside_r5');
		const seatRearDriver6 		= vehicle.getBoneIndexByName('seat_dside_r6');
		const seatRearDriver7 		= vehicle.getBoneIndexByName('seat_dside_r7');
		const seatRearPassenger 	= vehicle.getBoneIndexByName('seat_pside_r');
		const seatRearPassenger1 	= vehicle.getBoneIndexByName('seat_pside_r1');
		const seatRearPassenger2 	= vehicle.getBoneIndexByName('seat_pside_r2');
		const seatRearPassenger3 	= vehicle.getBoneIndexByName('seat_pside_r3');
		const seatRearPassenger4 	= vehicle.getBoneIndexByName('seat_pside_r4');
		const seatRearPassenger5 	= vehicle.getBoneIndexByName('seat_pside_r5');
		const seatRearPassenger6 	= vehicle.getBoneIndexByName('seat_pside_r6');
		const seatRearPassenger7 	= vehicle.getBoneIndexByName('seat_pside_r7');	

		const seatRearPosition 				= seatRear === -1 ? null : vehicle.getWorldPositionOfBone(seatRear);
		const seatFrontPassengerPosition 	= seatFrontPassenger === -1 ? null : vehicle.getWorldPositionOfBone(seatFrontPassenger);
		const seatRearDriverPosition 		= seatRearDriver === -1 ? null : vehicle.getWorldPositionOfBone(seatRearDriver);
		const seatRearDriver1Position 		= seatRearDriver1 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearDriver1);
		const seatRearDriver2Position 		= seatRearDriver2 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearDriver2);
		const seatRearDriver3Position 		= seatRearDriver3 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearDriver3);
		const seatRearDriver4Position 		= seatRearDriver4 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearDriver4);
		const seatRearDriver5Position 		= seatRearDriver5 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearDriver5);
		const seatRearDriver6Position 		= seatRearDriver6 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearDriver6);
		const seatRearDriver7Position 		= seatRearDriver7 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearDriver7);
		const seatRearPassengerPosition 	= seatRearPassenger === -1 ? null : vehicle.getWorldPositionOfBone(seatRearPassenger);
		const seatRearPassenger1Position 	= seatRearPassenger1 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearPassenger1);
		const seatRearPassenger2Position 	= seatRearPassenger2 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearPassenger2);
		const seatRearPassenger3Position 	= seatRearPassenger3 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearPassenger3);
		const seatRearPassenger4Position 	= seatRearPassenger4 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearPassenger4);
		const seatRearPassenger5Position 	= seatRearPassenger5 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearPassenger5);
		const seatRearPassenger6Position 	= seatRearPassenger6 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearPassenger6);
		const seatRearPassenger7Position 	= seatRearPassenger7 === -1 ? null : vehicle.getWorldPositionOfBone(seatRearPassenger7);	

		let closestFreeSeatNumber 	= -1;
		let seatIndex 				= -1;
		let closestSeatDistance 	= Number.MAX_SAFE_INTEGER;
		let calculatedDistance 		= null;


		calculatedDistance = seatRearPosition === null ? null : vdist(localPlayer.position, seatRearPosition);
		seatIndex = seatRear === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}

		calculatedDistance = seatFrontPassengerPosition === null ? null : vdist(localPlayer.position, seatFrontPassengerPosition);
		seatIndex = seatFrontPassenger === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}

		calculatedDistance = seatRearDriverPosition === null ? null : vdist(localPlayer.position, seatRearDriverPosition);
		seatIndex = seatRearDriver === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}

		calculatedDistance = seatRearPassengerPosition === null ? null : vdist(localPlayer.position, seatRearPassengerPosition);
		seatIndex = seatRearPassenger === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}

		calculatedDistance = seatRearDriver1Position === null ? null : vdist(localPlayer.position, seatRearDriver1Position);
		seatIndex = seatRearDriver1 === -1 ? seatIndex : seatIndex + 1; // 3
		//if (!vehicle.isSeatFree(seatIndex - 2)) {
			if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
				closestSeatDistance = calculatedDistance;
				closestFreeSeatNumber = seatIndex;
			}
		//}

		calculatedDistance = seatRearPassenger1Position === null ? null : vdist(localPlayer.position, seatRearPassenger1Position);
		seatIndex = seatRearPassenger1 === -1 ? seatIndex : seatIndex + 1; // 4
		//if (!vehicle.isSeatFree(seatIndex - 2)) {
			if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
				closestSeatDistance = calculatedDistance;
				closestFreeSeatNumber = seatIndex;
			}
		//}

		calculatedDistance = seatRearDriver2Position === null ? null : vdist(localPlayer.position, seatRearDriver2Position);
		seatIndex = seatRearDriver2 === -1 ? seatIndex : seatIndex + 1; // 5
		//if (!vehicle.isSeatFree(seatIndex - 4)) {
			if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
				closestSeatDistance = calculatedDistance;
				closestFreeSeatNumber = seatIndex;
			}
		//}

		calculatedDistance = seatRearPassenger2Position === null ? null : vdist(localPlayer.position, seatRearPassenger2Position);
		seatIndex = seatRearPassenger2 === -1 ? seatIndex : seatIndex + 1; // 6
		//if (!vehicle.isSeatFree(seatIndex - 4)) {
			if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
				closestSeatDistance = calculatedDistance;
				closestFreeSeatNumber = seatIndex;
			}
		//}

		calculatedDistance = seatRearDriver3Position === null ? null : vdist(localPlayer.position, seatRearDriver3Position);
		seatIndex = seatRearDriver3 === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}

		calculatedDistance = seatRearPassenger3Position === null ? null : vdist(localPlayer.position, seatRearPassenger3Position);
		seatIndex = seatRearPassenger3 === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}

		calculatedDistance = seatRearDriver4Position === null ? null : vdist(localPlayer.position, seatRearDriver4Position);
		seatIndex = seatRearDriver4 === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}

		calculatedDistance = seatRearPassenger4Position === null ? null : vdist(localPlayer.position, seatRearPassenger4Position);
		seatIndex = seatRearPassenger4 === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}

		calculatedDistance = seatRearDriver5Position === null ? null : vdist(localPlayer.position, seatRearDriver5Position);
		seatIndex = seatRearDriver5 === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}

		calculatedDistance = seatRearPassenger5Position === null ? null : vdist(localPlayer.position, seatRearPassenger5Position);
		seatIndex = seatRearPassenger5 === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}

		calculatedDistance = seatRearDriver6Position === null ? null : vdist(localPlayer.position, seatRearDriver6Position);
		seatIndex = seatRearDriver6 === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}

		calculatedDistance = seatRearPassenger6Position === null ? null : vdist(localPlayer.position, seatRearPassenger6Position);
		seatIndex = seatRearPassenger6 === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}

		calculatedDistance = seatRearDriver7Position === null ? null : vdist(localPlayer.position, seatRearDriver7Position);
		seatIndex = seatRearDriver7 === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}

		calculatedDistance = seatRearPassenger7Position === null ? null : vdist(localPlayer.position, seatRearPassenger7Position);
		seatIndex = seatRearPassenger7 === -1 ? seatIndex : seatIndex + 1;
		if (calculatedDistance !== null && vehicle.isSeatFree(seatIndex) && calculatedDistance < closestSeatDistance) {
			closestSeatDistance = calculatedDistance;
			closestFreeSeatNumber = seatIndex;
		}
		if (closestFreeSeatNumber === -1) {
			return; 
		}
 
		if (localPlayer.getVariable("knockDown")) {
			if (vehicle.getPedInSeat(-1)) {
				localPlayer.clearTasksImmediately();
				localPlayer.taskEnterVehicle(vehicle.handle, 5000, closestFreeSeatNumber, 2, 16, 0);
				mp.events.callRemote("playerCustomStartEnterVehicle", vehicle, closestFreeSeatNumber + 1 + driverSeat)
				mp.events.call("playerCustomStartEnterVehicle", vehicle, closestFreeSeatNumber + 1 + driverSeat)
			}
		}
		else {
			localPlayer.taskEnterVehicle(vehicle.handle, 5000, closestFreeSeatNumber, 2, 1, 0); 
			mp.events.callRemote("playerCustomStartEnterVehicle", vehicle, closestFreeSeatNumber + 1 + driverSeat)
			mp.events.call("playerCustomStartEnterVehicle", vehicle, closestFreeSeatNumber + 1 + driverSeat)
		}

	} catch (err) {
		chatDebug(`err: ${err}`)
	}
}, "Сісти на пасажирське", 1)

let startEnterBikeTimeout = null
mp.events.add('render', () => {
	if (localPlayer) {
		controls.disableControlAction(0, 23, true); 
		
		if (!controls.canSeatAtVehicle) return

		if(controls.isDisabledControlJustPressed(0, 23) && !localPlayer.getVariable("knockDown") && !mp.bindBlocker() && !localPlayer.getIsTaskActive(160) && !localPlayer.getIsTaskActive(2)) { 	
			let vehicle = getClosestVehicle()   
			if(vehicle && vehicle.getSpeed() < 5)
			{
				if (vehicle.isSeatFree(-1)) {
					mp.events.callRemote("playerCustomStartEnterVehicle", vehicle, driverSeat)
					mp.events.call("playerCustomStartEnterVehicle", vehicle, driverSeat)
					if (mp.game.vehicle.isThisModelABike(vehicle.model)) {
						if (startEnterBikeTimeout) {
							clearTimeout(startEnterBikeTimeout)
							startEnterBikeTimeout = null
						}
						startEnterBikeTimeout = setTimeout(() => {
							localPlayer.taskEnterVehicle(vehicle.handle, 5000, -1, 2, 1, 0);
							startEnterBikeTimeout = null
						}, 100)
					} else {
						localPlayer.taskEnterVehicle(vehicle.handle, 5000, -1, 2, 1, 0);
					}
				} 
			}
		}
	
		if (localPlayer.getIsTaskActive(160) && (controls.isControlJustPressed(0, 32) || controls.isControlJustPressed(0, 33) || controls.isControlJustPressed(0, 34) || controls.isControlJustPressed(0, 35))) {
			localPlayer.clearTasks()
		} 

		//if (localPlayer.getIsTaskActive(2)) {
		//}
	}
});
}; a; }
{let a = function scriptEntryPoint(mp) {
let targets = [
	[817.58141113281,-2171.3816894531,29.667030334473,1.4801919460297],
	[819.58141113281,-2171.3816894531,29.667030334473,1.4801919460297],
	[821.58141113281,-2171.3816894531,29.667030334473,1.4801919460297],
    [823.58141113281,-2171.3816894531,29.667030334473,1.4801919460297],
    [825.58141113281,-2171.3816894531,29.667030334473,1.4801919460297],
    [817.57416699219,-2191.6252441406,29.66703414917,1.9731273651123],
    [819.57416699219,-2191.6252441406,29.66703414917,1.9731273651123],
	[821.57416699219,-2191.6252441406,29.66703414917,1.9731273651123],
	[823.57416699219,-2191.6252441406,29.66703414917,1.9731273651123],
	[825.57416699219,-2191.6252441406,29.66703414917,1.9731273651123],
	[826.5860134667969,-2180.5102539063,29.667032241821,357.02941894531],
	[824.5860134667969,-2180.5102539063,29.667032241821,357.02941894531],
	[822.5860134667969,-2180.5102539063,29.667032241821,357.02941894531],
	[820.5860134667969,-2180.5102539063,29.667032241821,357.02941894531],
	[818.5760134667969,-2180.5102539063,29.667032241821,357.02941894531],
	[816.590134667969,-2180.5102539063,29.667032241821,357.02941894531],
];



let target = null;
let points = 0
let interval = null; 
let index = 0
let createdEntityTimestamp = null
let isStarted = false

mp.events.add("startShootingRange", () => { 
    createEntity()
    isStarted = true
    interval = setInterval(() => {
        if (!createdEntityTimestamp || Date.now() - createdEntityTimestamp > 5 * 1000) {
            createEntity()
        }
    }, 5000)
})

function createEntity () {
    if(mp.objects.exists(target)){
        target.destroy();
        target = null
    } 
    index = Math.floor(Math.random() * 11)
    target = mp.objects.new(mp.game.joaat("prop_range_target_01"), new mp.Vector3(targets[index][0],targets[index][1],targets[index][2]+1),
    {
        rotation: new mp.Vector3(0,0,2.3),
        alpha: 255,
        dimension: mp.players.local.dimension
    });
    createdEntityTimestamp = Date.now()
}

mp.events.add("stopShootingRange", () => {
    if (interval) clearInterval(interval)
    interval = null
    points = 0
    isStarted = false
    if (mp.objects.exists(target)) {
        target.destroy()
        target = null
    }
    createdEntityTimestamp = null
})
  

mp.events.add("render", () =>{
    if (isStarted){
        mp.game.graphics.drawText(`Очок: ${points}/300`, [0.5, 0.800], { 
            font: 7, 
            color: [255, 255, 255, 185], 
            scale: [1.2, 1.2], 
            outline: true
        });
        if(target.hasBeenDamagedBy(mp.players.local.handle, true)){
            if(mp.game.gameplay.hasBulletImpactedInBox(targets[index][0]+0.06, targets[index][1]+0.12, targets[index][2]+0.46, targets[index][0]-0.06, targets[index][1], targets[index][2]+0.6, true, true)){
                points = points + 5;
            }
            else if(mp.game.gameplay.hasBulletImpactedInBox(targets[index][0]+0.11, targets[index][1]+0.12, targets[index][2]+0.41, targets[index][0]-0.11, targets[index][1], targets[index][2]+0.69, true, true)){
                points = points + 4;
            }
            else if(mp.game.gameplay.hasBulletImpactedInBox(targets[index][0]+0.16, targets[index][1]+0.12, targets[index][2]+0.33, targets[index][0]-0.16, targets[index][1], targets[index][2]+0.76, true, true)){
                points = points + 3;
            } else if(mp.game.gameplay.hasBulletImpactedInBox(targets[index][0]+0.21, targets[index][1]+0.12, targets[index][2]+0.25, targets[index][0]-0.21, targets[index][1], targets[index][2]+0.85, true, true)){
                points = points + 2;
            } else {
                points = points + 1;
            }
            target.destroy();
            target = null; 
            createEntity()
            if (points >= 300) {
                mp.events.call("stopShootingRange")
                mp.events.callRemote("successfulShootingRange")
            }  
        }
    } 
});

}; a; }
{let a = function scriptEntryPoint(mp) {
class Phone {
    constructor () {
        mp.isPhoneActive = false   
        this.anim = false
    } 
    setPhoneStatus (status, call = false, number = false) {
        browserMenu.call("quantPhoneAPI", 'setPhoneStatus', status, call, number)
        let animation = mp.players.local.variable_SyncedAnimation;
        let attachedObject = mp.players.local.variable_attachedObject;
        if (!mp.isPhoneActive && status && !mp.players.local.vehicle && !animation && !attachedObject) {
            mp.events.callRemote("server::playPhoneAnim", 'in');
            this.anim = true
        }
        else if (mp.isPhoneActive && !status && this.anim) {
            mp.events.callRemote("server::playPhoneAnim", 'out');
            this.anim = false
        }
        if (!status && mp.players.local.isBlockControl) mp.players.local.isBlockControl = false
        mp.gui.cursor.show(false, status)
        mp.isPhoneActive = status
    } 
}


const phone = new Phone
mp.events.add('render', () => { 
    if(mp.isPhoneActive && mp.gui.cursor.visible){ 
        mp.game.controls.disableControlAction(16, 200, true);
        mp.game.controls.disableControlAction(14, 200, true);
        mp.game.controls.disableControlAction(15, 200, true);
        mp.game.controls.disableControlAction(0, 200, true);
        mp.game.controls.disableControlAction(0, 1, true);
        mp.game.controls.disableControlAction(0, 2, true);
    }
});
mp.events.add("authCharacter.success", () => {
    try {
        mp.keys.bindEx(0x26, true, () => {
            if (mp.bindBlocker({phone: mp.isPhoneActive, flycheck: true, antiflood: !mp.isPhoneActive ? 1000 : false}) || (!mp.isPhoneActive && mp.players.local.variable_attachedObject) || mp.players.local.getVariable("escorting")) return;
            phone.setPhoneStatus(!mp.isPhoneActive) 
        }, "Телефон")  
    } catch (err) {
        mp.events.callRemote("log", `Error client authCharacter.success: ${err}`)
    }
})
mp.events.add("client::setPhoneStatus", (bool, call = false, number = false) => {
    phone.setPhoneStatus(bool, call, number) 
})
mp.events.add("client::phoneForceClose", (bool) => {
    if (mp.isPhoneActive) phone.setPhoneStatus(false) 
})
mp.events.addDataHandler("phoneContacts", (entity, value) => {
    if(entity == mp.players.local){
        browserMenu.call("quantPhoneAPI", 'initPhoneContacts', value)
    }
})



mp.events.addDataHandler("phoneCalls", (entity, value) => {
    if(entity == mp.players.local){
        browserMenu.call("quantPhoneAPI", 'initPhoneCalls', value)
    }
})


mp.events.add("client::phoneSurfingTo", (path, data, title) => { 
    browserMenu.call("quantPhoneAPI", 'surfingTo', path, data, title)
})

mp.events.add("client::phoneGetCall", (phonedata) => {
    let data = {
        call: false,
        phone: phonedata
    }
    browserMenu.call("quantPhoneAPI", 'setCalling', data.call, data.phone)
})

mp.events.add("client::phoneSendCall", (phonedata) => {
    let data = {
        call: true,
        phone: phonedata
    }
    browserMenu.call("quantPhoneAPI", 'setCalling', data.call, data.phone)
    if (!mp.isPhoneActive) {
        phone.setPhoneStatus(true) 
    }
})


mp.events.add("client::startCall", () => {
    browserMenu.call("quantPhoneAPI", 'startCall')
})

mp.events.add("client::phoneCallStop", (closePhone) => {
    browserMenu.call("quantPhoneAPI", 'stopCall', closePhone)
})

mp.events.add("client::phoneSetFamilyImg", (img) => {
    if (img) browserMenu.call("quantPhoneAPI", 'setFamilyImg', img)
    else browserMenu.call("quantPhoneAPI", 'setFamilyImg', false)
})


}; a; }
{let a = function scriptEntryPoint(mp) {
mp.tabletPrimaryActive = false

const TABLET_PRIMARY_UNIQUE_CONTENT_BY_NAME = {
    "Водій автобуса": { 
        on: (data) => { 
            data.values = data.values.map((value) => { 
                value.first = value.name
                value.second = `${value.points}`
                value.third = `${value.price}$`
                return value
            })     
            return data
        }
    },
    "Таксист": {
        on: (data) => {  
            data.values = data.values.map((value) => {
                value.first = value.name
                value.second = getStreetName(value.pos.position ? value.pos.position : value.pos) 
                value.third = `${parseInt(calcDist(mp.players.local.position, value.pos.position ? value.pos.position : value.pos))} м.` 
                value.feature = value.hasOwnProperty("acceptedBy") ? value.acceptedBy : false
                return value
            })    
            return data
        }
    },
    "Далекобiйник": {
        on: (data) => {
            data.values = data.values.map((value) => {
                value.first = value.name 
                value.second = getStreetName(value.deliveryPlace)
                value.third = `${parseInt(calcDist(value.trailerBase, value.deliveryPlace))} м.`
                value.fourth = `${parseInt(calcDist(mp.players.local.position, value.trailerBase))} м.`
                value.fifth = `${value.price}$`
                value.feature = value.executor
                return value
            })     
            return data
        }
    },
    "Механік": {
        on: (data) => { 
            data.values = data.values.filter((value) => !value.acceptedBy).map((value) => {
                value.first = value.name
                value.second = getStreetName(value.pos)
                value.third = `${parseInt(calcDist(mp.players.local.position, value.pos))} м.` 
                return value
            })     
            return data
        }
    },
    "Евакуаторник": {
        on: (data) => { 
            data.values = data.values.map((value) => { 
                value.first = value.mechanic ? `Викликає ${value.mechanic}, ` + getStreetName(value.spawnPoint.position) : getStreetName(value.spawnPoint.position) 
                value.second = `${parseInt(calcDist(mp.players.local.position, value.spawnPoint.position))} м.`
                value.third = value.mechanic ? `За домовою` : `${value.price}$`
                value.feature = value.executor
                return value
            })     
            return data
        }
    },
    "Кур’єр": {
        on: (data) => {
            data.values = data.values.map((value) => { 
                value.first = value.customerInfo ? value.customerInfo.name : "Оператор"
                value.second = getStreetName(value.deliveryPlace)
                value.third = `${value.houseId}` 
                value.fourth = `${parseInt(calcDist(mp.players.local.position, value.deliveryPlace))} м.` 
                value.fifth = `${value.price}$`
                value.feature = value.executor
                return value
            })  
            return data
        }
    },
    "Розвізник продуктів": {
        on: (data) => {
            data.values = data.values.map((value) => {
                value.first = value.name || "Оператор"
                value.second = getStreetName(value.deliveryPlace)
                value.third = `${parseInt(calcDist(mp.players.local.position, value.deliveryPlace))} м.` 
                value.fourth = `${value.price}$`
                value.feature = value.executor
                return value
            }) 
            return data
        }
    },
    "Адвокат": {
        on: (data) => {  
            data.values = data.values.map((value) => {
                value.first = value.name
                value.second = `${parseInt(calcDist(mp.players.local.position, value.pos))} м.` 
                value.third = `${value.price}$`
                value.feature = value.acceptedBy
                return value
            })  
            return data
        }
    },
    "Найманий вбивця": { 
        on: (data) => { 
            data.values = data.values.filter((value) => value.canBeVisible == true).map((value) => { 
                value.first = value.customerName
                value.second = value.goalName
                value.third = `${value.cost}$`
                value.fourth = value.text ? value.text : "Не указано"
                value.feature = value.executor
                return value 
            }) 
            return data
        }
    },
    "Пожежник": {
        on: (data) => { 
            data.values = data.values.map((value) => {
                value.first = value.name
                value.second = `${parseInt(calcDist(mp.players.local.position, value.deliveryPlace))} м.`
                value.third = getStreetName(value.deliveryPlace)
                value.fourth = `${value.price}$`
                value.feature = value.executor
                return value
            })     
            return data
        }
    },
    "Акванавт": {
        on: (data) => { 
            data.values = data.values.map((value) => {
                value.first = value.name
                value.second = `${parseInt(calcDist(mp.players.local.position, value.spawnPoint))} м.`
                value.third = `${value.price}$`
                value.feature = value.executor
                return value
            })     
            return data
        }
    },
    "Електрик": {
        on: (data) => {
            data.values = data.values.map((value) => {
                value.first = value.name || "Оператор"
                value.second = getStreetName(value.deliveryPlace)
                value.third = `${parseInt(calcDist(mp.players.local.position, value.deliveryPlace))} м.` 
                value.fourth = `${value.price}$`
                value.feature = value.executor
                return value
            }) 
            return data
        }
    },
}

mp.events.add("client::setTabletPrimaryActive", (bool) => { mp.tabletPrimaryActive = bool }) 

mp.events.add("client::updateTablePrimary", () => {
    if (mp.tabletPrimaryActive) {
        mp.events.callRemote("server::activateTabletPrimary")
    }
})
mp.events.add("client::TabletPrimarySetData", (data) => { 
    if (!data) data = null
    else {
        data = TABLET_PRIMARY_UNIQUE_CONTENT_BY_NAME[data.name].on(data)
    }
    
    browserMenu.call("tabletPrimaryAPI", 'setData', data)
})

mp.events.add("authCharacter.success", () => {
    try {
        mp.keys.bindEx(0x4A, false, () => {
            if (mp.bindBlocker({tabletPrimary: mp.tabletPrimaryActive})) return;
            if (mp.tabletPrimaryActive) mp.events.call("client::TabletPrimarySetData", null)
            else mp.events.callRemote("server::activateTabletPrimary")
        }, "Робочий планшет") 
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\TabletPrimary.js authCharacter.success: ${err}`)
    }
}) 
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.isBrowserPrimaryActive = false
mp.events.add("client::showBrowser", (bool, site) => {
    mp.isBrowserPrimaryActive = bool
    browserMenu.call(`browserAPI`, `show`, bool);
    if (site) {
        browserMenu.call(`browserAPI`, `setSite`, site.toString(), true);
    }
})

let donateBrowserMenu = null
let escTimeout = null

function escBrowser() {
    if(escTimeout) {
        clearTimeout(escTimeout)
        escTimeout = null
    }
    escTimeout = setTimeout(() => {
        mp.events.call("client::showDonateBrowser", null)
        escTimeout = null
    }, 200)
}

mp.isBrowserDonateActive = null
mp.events.add("client::showDonateBrowser", (bool) => {
    if (bool) {
        donateBrowserMenu = mp.browsers.new('https://quant5.com.ua/donate-ingame')
        mp.events.add('browserDomReady', (browser) => { 
            if (browser == donateBrowserMenu) { 
                mp.events.call("setCursorVisibleInRender", true)
                mp.events.call('setBlockControl', true)
                mp.events.call("displayRadar", false)  
                mp.events.call("displayChat", false) 
                mp.events.call("hudControl.enable", false)
                mp.events.call("setKillListActive", false)
                mp.keys.bindEx(0x1B, true, escBrowser)
                mp.isBrowserDonateActive = true
            }
        })
    }
    else {
        mp.events.call("setCursorVisibleInRender", false)
        mp.events.call('setBlockControl', false)
        mp.events.call("displayRadar", true)  
        mp.events.call("displayChat", true) 
        mp.events.call("hudControl.enable", true)
        mp.events.call("setKillListActive", true)
        mp.keys.unbind(0x1B, true, escBrowser)
        mp.isBrowserDonateActive = false
        donateBrowserMenu.destroy()
        donateBrowserMenu = null
    }
})

}; a; }
{let a = function scriptEntryPoint(mp) {
mp.isKillListActive = false

mp.events.add('killList::push', (data) => {
    browserMenu.call(`killListAPI`, `push`, data)
})

mp.events.add("authCharacter.success", () => { 
    try {
        browserMenu.call(`killListAPI`, `setActive`, mp.isKillListActive)
        mp.keys.bindEx(0x78, true, () => {
            if (mp.settings.hidekills) return;
            mp.events.call("setKillListActive", !mp.isKillListActive)
            mp.isKillListActive ? mp.game.audio.playSoundFrontend(-1, "Boss_Message_Orange", "GTAO_Boss_Goons_FM_Soundset", true) : mp.game.audio.playSoundFrontend(-1, "ERROR", "HUD_FRONTEND_DEFAULT_SOUNDSET", true)
        }, "Кілстат", 3);
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\KillList.js authCharacter.success: ${err}`)
    }
})

mp.events.add("setKillListActive", (bool, first) => {
    if ((mp.settings.hidekills || !mp.settings.hasOwnProperty("hidekills")) && mp.isKillListActive) bool = false
    else if ((mp.settings.hidekills || !mp.settings.hasOwnProperty("hidekills")) && !mp.isKillListActive) return

    mp.isKillListActive = bool
    browserMenu.call(`killListAPI`, `setActive`, mp.isKillListActive)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
let callRemoteTimeout = Date.now()
let startBizRobberyTimeout = null

let bizParams = {
    sqlId: undefined,
    position :undefined, 
    ped: undefined
}
 

let robberyTimeout = null

mp.events.add("setBizRobbery", async (params) => {
    if (!params) return stopRobbery()

    bizParams = params 
    mp.peds.forEach(p => {
        if (p.params && p.params.biz == params.sqlId) { 
            bizParams.ped = p 
        }
    })
    if (!bizParams.ped) return rpc.callBrowser(browserMenu, "nError", `Пед не знайдено!`)
    bizParams.ped.clearTasksImmediately()

    if (await mp.game.streaming.loadAnimDict("mp_take_money_mg"))
        bizParams.ped.taskPlayAnim("mp_take_money_mg", 'stand_cash_in_bag_loop', 8, 0, -1, 49, 0, false, false, false);

    startBizRobberyTimeout = Date.now() 
})

function stopRobbery () { 
    if (bizParams.ped) bizParams.ped.clearTasksImmediately()
    bizParams.sqlId = undefined
    bizParams.position = undefined
    bizParams.ped = undefined
    startBizRobberyTimeout = null
}

mp.events.add("render", () => {
    if (bizParams.sqlId) {  
        if (!mp.game.player.getEntityIsFreeAimingAt() || mp.game.player.getEntityIsFreeAimingAt() != bizParams.ped.handle || vdist(bizParams.ped.position, mp.players.local.position) > 4) {
            mp.events.callRemote("playerBizRobberySuccessfully") 
            stopRobbery()
        }
        if (startBizRobberyTimeout && Date.now() - startBizRobberyTimeout > 60 * 1000) {
            mp.events.callRemote("playerBizRobberySuccessfully")
            stopRobbery()
        }
    }

    
    if(mp.bindBlocker() || !mp.game.player.getEntityIsFreeAimingAt() || mp.players.local.currentWeapon() == -1951375401 || mp.game.weapon.getWeapontypeGroup(mp.players.local.currentWeapon()) == 2685387236 || mp.game.weapon.getWeapontypeGroup(mp.players.local.currentWeapon()) == 1548507267) return
    let entity = mp.game.player.getEntityIsFreeAimingAt()
    let ped = undefined
    mp.peds.forEach(p => {
        if (p.handle == entity) { 
            ped = p 
        }
    })
    if (ped && ped.params && ped.params.biz && !bizParams.sqlId) { 
        if (vdist(ped.position, mp.players.local.position) > 4) return
        if (Date.now() - callRemoteTimeout > 4 * 1000) {
            callRemoteTimeout = Date.now()
            if (robberyTimeout) {
                clearTimeout(robberyTimeout)
                robberyTimeout = null
            }
            robberyTimeout = setTimeout(() => { 
                if (mp.game.player.getEntityIsFreeAimingAt() != entity) {
                    clearTimeout(robberyTimeout)
                    robberyTimeout = null
                    return
                }
                mp.events.callRemote("playerStartBizRobbery", ped.params.biz)
                robberyTimeout = null
            }, 2500)
        }  
    }

})
}; a; }
{let a = function scriptEntryPoint(mp) {
const peds = []
mp.events.add("peds.create", (list) => {
    // debug(`peds.create: ${JSON.stringify(list)}`)
	for (let key in list) {
        let ped = mp.peds.new(list[key].hash, list[key].position, list[key].heading, list[key].dimension);
        ped.sqlId = list[key].sqlId;
		ped.sex = list[key].sex;
		ped.position = list[key].position;
		ped.params = list[key].params;
		if (ped.sex <= 1) {
			let speechShape = mp.colshapes.newSphere(list[key].position.x, list[key].position.y, list[key].position.z, 5.0, list[key].dimension)
			speechShape.speechPed = ped
			let actionShape = mp.colshapes.newSphere(list[key].position.x, list[key].position.y, list[key].position.z, 5.0, list[key].dimension)
			actionShape.actionPed = ped
		}
		if (ped.params && ped.params.disableSeat) {
			let actionShape = mp.colshapes.newSphere(list[key].position.x, list[key].position.y, list[key].position.z, 2.0, list[key].dimension)
			actionShape.disableSeatColshape = true
		}
		peds.push(ped)
	} 
});

let ped_random_action = ["WORLD_HUMAN_GUARD_STAND", "WORLD_HUMAN_CLIPBOARD", "WORLD_HUMAN_GUARD_PATROL", "WORLD_HUMAN_STAND_IMPATIENT", "WORLD_HUMAN_HANG_OUT_STREET"];


function getRandomInt(min, max) {
    return min + Math.floor(Math.random() * (max - min + 1));
}

mp.events.add('entityStreamIn', async (entity) => {
	try {
		if (entity.type != 'ped') return
		if (entity.params && entity.params.animation) {
			chatDebug("entityStreamIn PedsEvents")
			let value = entity.params.animation
			entity.clearTasksImmediately()

			if (await mp.game.streaming.loadAnimDict(value.dict))
				entity.taskPlayAnim(value.dict, value.name, value.speed || 1, 0, -1, value.flag || 1, 0, false, false, false)
		}
		else if (entity.params && entity.params.scenario) {
			chatDebug("entityStreamIn PedsEvents")
			let value = entity.params.scenario
			entity.clearTasksImmediately()
			
			entity.taskStartScenarioInPlace(value, 0, true)
		}
	}
	catch (err) {
		mp.events.callRemote("log", `Error client gamemode\scripts\peds_events.js entityStreamIn: ${err}`)
	}
})

var speechesEnter = {
	[1]: [
		["GENERIC_HI", "S_M_M_GENERICCHEAPWORKER_01_LATINO_MINI_04"],
		["GENERIC_HI", "S_M_M_GENERICSECURITY_01_BLACK_MINI_03"],
		["GENERIC_HI", "MICHAEL_NORMAL"],
		["GREET_ACROSS_STREET", "S_M_Y_GENERICCHEAPWORKER_01_BLACK_MINI_02"],
		["GREET_ACROSS_STREET", "S_M_Y_GENERICWORKER_01_BLACK_MINI_01"],
		["GREET_ACROSS_STREET", "S_M_Y_GENERICWORKER_01_LATINO_MINI_02"],
		["GREET_ACROSS_STREET", "S_M_Y_GENERICWORKER_01_WHITE_MINI_02"],
	],
	[0]: [
		["GREET_ACROSS_STREET", "A_F_M_BEACH_01_WHITE_FULL_01"],
		["GENERIC_HI", "A_F_M_BEACH_01_WHITE_MINI_01"],
		["GENERIC_HI", "A_F_M_DOWNTOWN_01_BLACK_FULL_01"],
		["GREET_ACROSS_STREET", "A_F_M_EASTSA_01_LATINO_FULL_01"],
		["GENERIC_HI", "A_F_M_KTOWN_01_KOREAN_FULL_01"],
		["GENERIC_HI", "A_F_Y_TOURIST_01_LATINO_FULL_01"],
		["GREET_ACROSS_STREET", "A_F_Y_VINEWOOD_02_WHITE_FULL_01"],
		["GREET_ACROSS_STREET", "A_F_M_BODYBUILD_01_WHITE_FULL_01"],
		["GREET_ACROSS_STREET", "A_F_M_SALTON_01_WHITE_FULL_01"],
	],
}

var speechesExit = {
	[1]: [
		["GOODBYE_ACROSS_STREET", "S_M_M_GENERICCHEAPWORKER_01_LATINO_MINI_04"],
		["GENERIC_BYE", "S_M_M_GENERICSECURITY_01_BLACK_MINI_03"],
		["GENERIC_BYE", "MICHAEL_NORMAL"],
		["GOODBYE_ACROSS_STREET", "S_M_Y_GENERICCHEAPWORKER_01_BLACK_MINI_02"],
		["GOODBYE_ACROSS_STREET", "S_M_Y_GENERICWORKER_01_BLACK_MINI_01"],
		["GOODBYE_ACROSS_STREET", "S_M_Y_GENERICWORKER_01_LATINO_MINI_02"],
		["GOODBYE_ACROSS_STREET", "S_M_Y_GENERICWORKER_01_WHITE_MINI_02"],
		
	],
	[0]: [
		["GOODBYE_ACROSS_STREET", "A_F_M_BEACH_01_WHITE_FULL_01"],
		["GOODBYE_ACROSS_STREET", "A_F_M_BEACH_01_WHITE_MINI_01"],
		["GOODBYE_ACROSS_STREET", "A_F_M_DOWNTOWN_01_BLACK_FULL_01"],
		["GOODBYE_ACROSS_STREET", "A_F_M_EASTSA_01_LATINO_FULL_01"],
		["GENERIC_BYE", "A_F_M_KTOWN_01_KOREAN_FULL_01"],
		["GENERIC_HI", "A_F_Y_TOURIST_01_LATINO_FULL_01"],
		["GOODBYE_ACROSS_STREET", "A_F_Y_VINEWOOD_02_WHITE_FULL_01"],
		["GOODBYE_ACROSS_STREET", "A_F_M_BODYBUILD_01_WHITE_FULL_01"],
		["GOODBYE_ACROSS_STREET", "A_F_M_SALTON_01_WHITE_FULL_01"],
	],
}

var currentBuySpeach = false

mp.events.add('playerExitColshape', (shape) => {
	if (mp.peds.exists(shape.speechPed)) {
		if (currentBuySpeach) {
			mp.game.audio.playAmbientSpeechWithVoice(shape.speechPed.handle, currentBuySpeach[0], currentBuySpeach[1], "SPEECH_PARAMS_FORCE", false);
			currentBuySpeach = false
		}
	}
});	



mp.events.add('playerEnterColshape', (shape) => {
	if (mp.peds.exists(shape.speechPed)) {
		var randomNum = getRandomInt(0, speechesEnter[shape.speechPed.sex].length-1)
		var randomSpeech = speechesEnter[shape.speechPed.sex][randomNum]
		currentBuySpeach = speechesExit[shape.speechPed.sex][randomNum]
		mp.game.audio.playAmbientSpeechWithVoice(shape.speechPed.handle, randomSpeech[0], randomSpeech[1], "SPEECH_PARAMS_FORCE", false);
	}
	if (mp.peds.exists(shape.actionPed) && (shape.params && !shape.params.animation && !shape.params.scenario)) {
		shape.actionPed.taskStartScenarioInPlace(ped_random_action[getRandomInt(0, ped_random_action.length-1)], 0, true);
		shape.actionPed.taskLookAt(mp.players.local.handle, -1, 2048, 3);
	}
});	


mp.events.add("peds.delete", (pedSqlId) => {
    // debug(`peds.delete: ${pedSqlId}`)
    var ped = getPedBySqlId(pedSqlId);
    if (ped) ped.destroy();
});

function getPedBySqlId(sqlId) {
    if (!sqlId) return null;
    var result;
    mp.peds.forEach((ped) => {
        if (ped.sqlId == sqlId) {
            result = ped;
            return;
        }
    });
    return result;
}


}; a; }
{let a = function scriptEntryPoint(mp) {

function setMood(player, mood) {
    if (!mood) {
        player.clearFacialIdleAnimOverride();
    } else {
        mp.game.invoke("0xFFC24B988B938B38", player.handle, mood, 0);
    }
}

mp.events.add("entityStreamIn", (entity) => {
    try {
        if (entity.type === "player") {
            chatDebug("entityStreamIn Emotions")
            setMood(entity, entity.getVariable("emotion"));
        }
    }
    catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\Emotions.js entityStreamIn: ${err}`)
    }
});

mp.events.addDataHandler("emotion", (entity, value) => {
    if (entity.type === "player") setMood(entity, value);
});

}; a; }
{let a = function scriptEntryPoint(mp) {
 
async function setWalkingStyle(player, style) {
    if (!style) {
        player.resetMovementClipset(0.0);
    } else {
        if (!mp.game.streaming.hasClipSetLoaded(style)) {
            mp.game.streaming.requestClipSet(style);
            while(!mp.game.streaming.hasClipSetLoaded(style)) 
                await mp.game.waitAsync(100);
        }

        player.setMovementClipset(style, 0.0);
    }
}

mp.events.add("entityStreamIn", (entity) => {
    try {
        if (entity.type == "player") {
            chatDebug("entityStreamIn Walking")
            setWalkingStyle(entity, entity.getVariable("walking"));
        }
    }
    catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\Walking.js entityStreamIn: ${err}`)
    }
});

mp.events.addDataHandler("walking", (entity, value) => {
    if (entity.type === "player") setWalkingStyle(entity, value);
});

}; a; }
{let a = function scriptEntryPoint(mp) {
const configRaceActivity = [{ 
    checkpoint_positions: [
        { pos: new mp.Vector3(-2193.498779296875, -345.71124267578125, 13.023457527160645) },
        { pos: new mp.Vector3(-2520.509033203125, -192.0824432373047, 18.962034225463867) },
        { pos: new mp.Vector3(-2761.700439453125, 22.000896453857422, 15.065628051757812) },
        { pos: new mp.Vector3(-3021.403564453125, 172.11717224121094, 15.556571006774902) },
        { pos: new mp.Vector3(-2993.322021484375, 598.9545288085938, 19.236083984375) },
        { pos: new mp.Vector3(-3147.71728515625, 977.0283813476562, 15.50943374633789) },
        { pos: new mp.Vector3(-3097.731201171875, 1183.9039306640625, 20.151012420654297) },
        { pos: new mp.Vector3(-2966.913330078125, 1327.4552001953125, 38.992637634277344) },
        { pos: new mp.Vector3(-2804.237548828125, 1305.52490234375, 71.71917724609375) },
        { pos: new mp.Vector3(-2713.520263671875, 1480.7164306640625, 102.5228042602539) },
        { pos: new mp.Vector3(-2640.781005859375, 1560.9788818359375, 120.86328125) },
        { pos: new mp.Vector3(-2595.546875, 1656.7801513671875, 139.56695556640625) },
        { pos: new mp.Vector3(-2469.3623046875, 1786.086181640625, 159.11915588378906) },
        { pos: new mp.Vector3(-2491.18310546875, 1948.7342529296875, 172.34597778320312) },
        { pos: new mp.Vector3(-2252.982421875, 1896.8787841796875, 185.3552093505859) },
        { pos: new mp.Vector3(-2042.4951171875, 2002.4730224609375, 189.82675170898438) },
        { pos: new mp.Vector3(-1979.9326171875, 1907.734619140625, 185.23426818847656) },
        { pos: new mp.Vector3(-1907.898681640625, 1770.873291015625, 171.03797912597656) },
        { pos: new mp.Vector3(-1801.8470458984375, 1892.08056640625, 147.72824096679688) },
        { pos: new mp.Vector3(-1834.05078125, 2033.90576171875, 132.97686767578125) },
        { pos: new mp.Vector3(-1687.57177734375, 2131.6767578125, 106.14111328125) },
        { pos: new mp.Vector3(-1692.626220703125, 2233.872802734375, 83.81952667236328) },
        { pos: new mp.Vector3(-1877.7017822265625, 2306.391357421875, 62.86641311645508) },
        { pos: new mp.Vector3(-2075.628173828125, 2282.07373046875, 39.47553634643555) },
        { pos: new mp.Vector3(-2196.655517578125, 2304.81103515625, 32.79298400878906) },
        { pos: new mp.Vector3(-2379.658203125, 2261.6044921875, 32.48867416381836) },
        { pos: new mp.Vector3(-2530.376708984375, 2342.797119140625, 32.49452209472656) }]
},
{ 
    checkpoint_positions: [
        { pos: new mp.Vector3(2.4455957412719727, 3244.1337890625, 42.97080612182617) },
        { pos: new mp.Vector3(-95.8582534790039, 3183.079345703125, 37.06370162963867) },
        { pos: new mp.Vector3(-346.4256591796875, 3074.3349609375, 32.96955490112305) },
        { pos: new mp.Vector3(-572.2376098632812, 3016.316650390625, 25.063949584960938) },
        { pos: new mp.Vector3(-765.0745849609375, 2922.046875, 24.928518295288086) },
        { pos: new mp.Vector3(-995.4862060546875, 2895.981201171875, 11.991310119628906) },
        { pos: new mp.Vector3(-1203.4068603515625, 2799.07373046875, 14.307476997375488) },
        { pos: new mp.Vector3(-1466.44775390625, 2684.14501953125, 3.2343544960021973) },
        { pos: new mp.Vector3(-1597.1240234375, 2730.391845703125, 5.128777027130127) },
        { pos: new mp.Vector3(-1721.45068359375, 2750.241943359375, 5.012030601501465) },
        { pos: new mp.Vector3(-1886.2034912109375, 2689.061767578125, 3.4674689769744873) },
        { pos: new mp.Vector3(-2096.694580078125, 2706.439697265625, 3.1159110069274902) },
        { pos: new mp.Vector3(-2266.887939453125, 2840.899658203125, 2.6576411724090576) },
        { pos: new mp.Vector3(-2532.72900390625, 2852.44970703125, 2.643953561782837) },
        { pos: new mp.Vector3(-2658.306640625, 2987.83544921875, 8.51624870300293) },
        { pos: new mp.Vector3(-2877.455322265625, 3174.546142578125, 10.40241813659668) },
        { pos: new mp.Vector3(-2966.64013671875, 3499.3017578125, 8.427014350891113) },
        { pos: new mp.Vector3(-2747.50390625, 3492.14404296875, 10.645502090454102) },
        { pos: new mp.Vector3(-2575.6953125, 3501.84814453125, 12.079705238342285) },
        { pos: new mp.Vector3(-2506.649169921875, 3666.318359375, 12.701129913330078) },
        { pos: new mp.Vector3(-2461.206298828125, 3734.921630859375, 16.123455047607422) },
        { pos: new mp.Vector3(-2385.109619140625, 3932.896240234375, 24.168712615966797) },
        { pos: new mp.Vector3(-2306.018798828125, 4154.6201171875, 37.97903823852539) }, 
        { pos: new mp.Vector3(-2249.08837890625, 4287.91796875, 46.3028564453125) }, 
        { pos: new mp.Vector3(-2257.861083984375, 4404.07080078125, 39.22718811035156) },
        { pos: new mp.Vector3(-2178.15283203125, 4513.80712890625, 34.73441696166992) }, 
        { pos: new mp.Vector3(-2044.3631591796875, 4525.03759765625, 27.936193466186523) },
        { pos: new mp.Vector3(-1894.9892578125, 4430.2060546875, 43.89921188354492) }, 
        { pos: new mp.Vector3(-1771.49462890625, 4366.970703125, 56.40396499633789) },
        { pos: new mp.Vector3(-1656.112548828125, 4213.55859375, 82.7470703125) }, 
        { pos: new mp.Vector3(-1548.5218505859375, 4208.8681640625, 73.18083190917969) },
        { pos: new mp.Vector3(-1404.517333984375, 4183.28515625, 47.726402282714844) }, 
        { pos: new mp.Vector3(-1331.494140625, 4151.86279296875, 62.75554656982422) }, 
        { pos: new mp.Vector3(-1298.2813720703125, 4247.63330078125, 61.420475006103516) },
        { pos: new mp.Vector3(-1154.147705078125, 4285.01806640625, 83.32648468017578) }, 
        { pos: new mp.Vector3(-1039.091064453125, 4242.814453125, 114.65843200683594) }, 
        { pos: new mp.Vector3(-964.1026000976562, 4148.3896484375, 131.81564331054688) }, 
        { pos: new mp.Vector3(-872.9022827148438, 4089.1845703125, 163.70260620117188) }, 
        { pos: new mp.Vector3(-743.7936401367188, 4034.344970703125, 144.9051513671875) },
        { pos: new mp.Vector3(-620.5977172851562, 3985.63720703125, 120.04146575927734) }, 
        { pos: new mp.Vector3(-522.474609375, 3958.713134765625, 90.2151107788086) }, 
        { pos: new mp.Vector3(-405.9997253417969, 3951.75244140625, 62.050331115722656) }, 
        { pos: new mp.Vector3(-302.0539855957031, 3983.34716796875, 42.93971252441406) }, 
        { pos: new mp.Vector3(-215.69668579101562, 3825.4091796875, 37.536834716796875) }, 
        { pos: new mp.Vector3(-162.8680419921875, 3661.58642578125, 45.16219711303711) }, 
        { pos: new mp.Vector3(4.217535495758057, 3604.963134765625, 40.249053955078125) }, 
        { pos: new mp.Vector3(40.592613220214844, 3674.746337890625, 39.1543083190918) }, 
        { pos: new mp.Vector3(66.06303405761719, 3738.2314453125, 39.206024169921875) }]
},
{ 
    checkpoint_positions: [
        { pos: new mp.Vector3(583.0028686523438, -1728.310302734375, 28.90625) },
        { pos: new mp.Vector3(740.5350952148438, -1747.65185546875, 28.849592208862305) },  
        { pos: new mp.Vector3(943.8587036132812, -1765.757080078125, 30.73955726623535) },  
        { pos: new mp.Vector3(941.012451171875, -1947.6549072265625, 30.160680770874023) }, 
        { pos: new mp.Vector3(933.8762817382812, -2079.612060546875, 30.016271591186523) }, 
        { pos: new mp.Vector3(1101.0888671875, -2082.800048828125, 36.78807830810547) },  
        { pos: new mp.Vector3(1244.617919921875, -2054.08349609375, 43.82442092895508) },  
        { pos: new mp.Vector3(1398.5240478515625, -1966.1669921875, 62.3009147644043) }, 
        { pos: new mp.Vector3(1415.65478515625, -1760.31591796875, 65.37750244140625) },  
        { pos: new mp.Vector3(1300.6524658203125, -1548.4012451171875, 48.06056594848633) },  
        { pos: new mp.Vector3(1247.0277099609375, -1342.04443359375, 34.7606315612793) },  
        { pos: new mp.Vector3(1215.1197509765625, -1127.858154296875, 37.63839340209961) },  
        { pos: new mp.Vector3(1172.95947265625, -860.497314453125, 53.67609786987305) },  
        { pos: new mp.Vector3(1224.3524169921875, -761.3329467773438, 58.53023147583008) },  
        { pos: new mp.Vector3(1294.1734619140625, -665.603759765625, 66.19780731201172) },  
        { pos: new mp.Vector3(1274.791748046875, -506.20050048828125, 68.55908203125) },  
        { pos: new mp.Vector3(1215.833251953125, -349.299560546875, 68.60575103759766) }, 
        { pos: new mp.Vector3(1256.260986328125, -280.2012939453125, 77.32941436767578) }, 
        { pos: new mp.Vector3(1281.1607666015625, -232.36016845703125, 97.3193588256836) }, 
        { pos: new mp.Vector3(1338.9288330078125, -119.27080535888672, 118.62516784667969) },
        { pos: new mp.Vector3(1463.6334228515625, -116.61924743652344, 140.0340576171875) },  
        { pos: new mp.Vector3(1639.08935546875, -86.64661407470703, 167.49636840820312) }, 
        { pos: new mp.Vector3(1670.5069580078125, -30.586669921875, 173.24671936035156) }, 
        { pos: new mp.Vector3(1655.39208984375, 47.26291275024414, 171.84596252441406) }, 
        { pos: new mp.Vector3(1820.4866943359375, 139.27134704589844, 171.15809631347656) },  
        { pos: new mp.Vector3(1803.044921875, 278.9939880371094, 172.2926483154297) },  
        { pos: new mp.Vector3(1792.3577880859375, 459.5961608886719, 170.6907196044922) },  
        { pos: new mp.Vector3(1912.336669921875, 526.8563842773438, 172.9145965576172) },  
        { pos: new mp.Vector3(1940.441650390625, 670.6793823242188, 184.64013671875) },  
        { pos: new mp.Vector3(1928.6199951171875, 870.3195190429688, 206.76702880859375) }, 
        { pos: new mp.Vector3(2019.6409912109375, 1022.9381103515625, 207.3509521484375) }, 
        { pos: new mp.Vector3(1991.5494384765625, 1201.07568359375, 183.24462890625) }, 
        { pos: new mp.Vector3(1936.992919921875, 1336.384765625, 158.32980346679688) }, 
        { pos: new mp.Vector3(1789.6781005859375, 1278.9730224609375, 138.79214477539062) },  
        { pos: new mp.Vector3(1696.0533447265625, 1098.97412109375, 121.81208801269531) },  
        { pos: new mp.Vector3(1608.9864501953125, 961.7698974609375, 91.99776458740234) }, 
        { pos: new mp.Vector3(1493.6910400390625, 770.1336059570312, 76.95014190673828) }, 
    ]
},
{ 
    checkpoint_positions: [
        { pos: new mp.Vector3(860.1832275390625, 1299.543701171875, 357.3106384277344) }, 
        { pos: new mp.Vector3(691.0873413085938, 1356.5748291015625, 329.78802490234375) },
        { pos: new mp.Vector3(554.4440307617188, 1369.409912109375, 299.7889099121094) }, 
        { pos: new mp.Vector3(411.5052795410156, 1260.582763671875, 259.8657531738281) }, 
        { pos: new mp.Vector3(498.4805908203125, 1099.9432373046875, 230.3627471923828) },
        { pos: new mp.Vector3(475.71917724609375, 924.6231079101562, 198.589599609375) }, 
        { pos: new mp.Vector3(394.01702880859375, 883.0665283203125, 198.16156005859375) },
        { pos: new mp.Vector3(258.1250915527344, 815.5846557617188, 194.2793731689453) }, 
        { pos: new mp.Vector3(113.53645324707031, 732.6033935546875, 209.0067901611328) },
        { pos: new mp.Vector3(2.9982614517211914, 626.574462890625, 206.9258575439453) }, 
        { pos: new mp.Vector3(-175.39328002929688, 685.2157592773438, 207.93182373046875) },
        { pos: new mp.Vector3(-364.02874755859375, 764.60302734375, 217.15509033203125) },
        { pos: new mp.Vector3(-343.2543640136719, 944.6279296875, 232.30288696289062) }, 
        { pos: new mp.Vector3(-220.77716064453125, 1052.6483154296875, 234.43679809570312) },
        { pos: new mp.Vector3(47.349365234375, 1033.698974609375, 217.73350524902344) }, 
        { pos: new mp.Vector3(251.9209747314453, 964.3220825195312, 210.20541381835938) },
        { pos: new mp.Vector3(484.80706787109375, 868.4119262695312, 197.65536499023438) },
        { pos: new mp.Vector3(779.8367919921875, 863.8455810546875, 216.61477661132812) },
        { pos: new mp.Vector3(993.1064453125, 907.2594604492188, 210.4334716796875) }, 
        { pos: new mp.Vector3(1044.7685546875, 718.1070556640625, 157.60923767089844) },
        { pos: new mp.Vector3(1201.9744873046875, 942.7727661132812, 145.56472778320312) },
        { pos: new mp.Vector3(1160.5640869140625, 1165.808349609375, 169.03466796875) }, 
        { pos: new mp.Vector3(1077.83251953125, 1458.9683837890625, 171.39663696289062) },
        { pos: new mp.Vector3(900.0739135742188, 1718.351806640625, 167.19252014160156) },
        { pos: new mp.Vector3(468.29315185546875, 1793.869384765625, 228.36476135253906) },
        { pos: new mp.Vector3(159.5867462158203, 1657.1993408203125, 228.71780395507812) },
        { pos: new mp.Vector3(81.76028442382812, 1696.3052978515625, 226.3340301513672) },
        { pos: new mp.Vector3(-95.072021484375, 1855.2889404296875, 198.63790893554688) },
        { pos: new mp.Vector3(-154.29391479492188, 1952.8782958984375, 193.4686737060547) },
        { pos: new mp.Vector3(229.44268798828125, 2098.92041015625, 115.22286224365234) },
        { pos: new mp.Vector3(734.7734985351562, 2200.9892578125, 56.29769515991211) }, 
        { pos: new mp.Vector3(1040.2557373046875, 2075.043701171875, 50.5662841796875) }, 
        { pos: new mp.Vector3(1269.5911865234375, 1640.6688232421875, 88.19422149658203) },
        { pos: new mp.Vector3(1290.034912109375, 1316.9864501953125, 106.4828109741211) },
        { pos: new mp.Vector3(1253.7667236328125, 747.7166748046875, 102.63632202148438) },
        { pos: new mp.Vector3(1010.8505859375, 471.82421875, 95.93270111083984) }, 
        { pos: new mp.Vector3(826.8328247070312, 207.63111877441406, 81.14300537109375) },
        { pos: new mp.Vector3(784.0742797851562, 219.1484832763672, 83.93896484375) }, 
    ]
},
{ 
    checkpoint_positions: [
        { pos: new mp.Vector3(-1858.525, 1954.85986, 143.544373) },
        { pos: new mp.Vector3(-1831.667, 1841.064, 158.048752) },
        { pos: new mp.Vector3(-1961.74866, 1763.3042, 175.631409) },
        { pos: new mp.Vector3(-1992.341, 1915.3175, 185.1082) },
        { pos: new mp.Vector3(-2042.30249, 1972.12854, 188.339417) },
        { pos: new mp.Vector3(-2100.87964, 2004.51111, 189.259033) },
        { pos: new mp.Vector3(-2225.87, 1919.86438, 186.743591) },
        { pos: new mp.Vector3(-2421.38525, 1951.39136, 176.6551) },
        { pos: new mp.Vector3(-2521.80127, 1846.00952, 164.655945) },
        { pos: new mp.Vector3(-2552.50537, 1673.26868, 144.325485) },
        { pos: new mp.Vector3(-2646.17554, 1575.38123, 120.815819) },
        { pos: new mp.Vector3(-2633.724, 1459.4386, 126.458954) },
        { pos: new mp.Vector3(-2634.33032, 1203.46558, 153.71843) },
        { pos: new mp.Vector3(-2563.47046, 1068.45337, 176.041122) },
        { pos: new mp.Vector3(-2288.4043, 1043.11157, 195.684082) },
        { pos: new mp.Vector3(-2155.99927, 990.757568, 186.0347) },
        { pos: new mp.Vector3(-2018.70569, 851.1899, 164.71199) },
        { pos: new mp.Vector3(-1967.97461, 704.4834, 141.085541) },
        { pos: new mp.Vector3(-1848.669, 795.2505, 138.799011) },
        { pos: new mp.Vector3(-1720.36865, 841.467041, 143.741562) },
        { pos: new mp.Vector3(-1607.33179, 974.8919, 153.416016) },
        { pos: new mp.Vector3(-1456.1499, 841.235046, 183.061462) },
        { pos: new mp.Vector3(-1298.09766, 794.719238, 187.794144) },
        { pos: new mp.Vector3(-1143.03369, 1045.43213, 206.55629) },
        { pos: new mp.Vector3(-908.0771, 1080.64526, 219.789429) },
        { pos: new mp.Vector3(-764.739563, 970.408936, 236.461655) },
        { pos: new mp.Vector3(-543.1787, 926.5229, 242.474) },
        { pos: new mp.Vector3(-361.4761, 956.7989, 232.47049) },
        { pos: new mp.Vector3(-260.416382, 1055.9397, 234.735916) },
        { pos: new mp.Vector3(-98.2425842, 1051.21838, 225.468124) },
        { pos: new mp.Vector3(72.82344, 1019.20673, 215.565582) },
        { pos: new mp.Vector3(248.877045, 950.2919, 209.675323) },
        { pos: new mp.Vector3(344.155, 1000.74884, 209.516144) },
        { pos: new mp.Vector3(392.7928, 931.232239, 201.381577) },
        { pos: new mp.Vector3(436.483215, 860.222351, 195.648163) },
        { pos: new mp.Vector3(359.291016, 760.6692, 181.095657) },
        { pos: new mp.Vector3(335.6778, 737.2764, 179.757523) }]
},
{ 
    checkpoint_positions: [
        { pos: new mp.Vector3(-2461.22729, 2291.80371, 30.07762) },
        { pos: new mp.Vector3(-2334.07446, 2242.87769, 31.9335022) },
        { pos: new mp.Vector3(-2122.5835, 2304.90918, 36.3762054) },
        { pos: new mp.Vector3(-2092.3667, 2290.11182, 37.47852) },
        { pos: new mp.Vector3(-1886.22327, 2303.7334, 61.4124146) },
        { pos: new mp.Vector3(-1742.07861, 2286.63647, 75.80862) },
        { pos: new mp.Vector3(-1643.41272, 2204.32764, 89.59288) },    
        { pos: new mp.Vector3(-1803.74719, 2040.56152, 127.625732) },
        { pos: new mp.Vector3(-1871.45654, 2024.11755, 138.60788) },
        { pos: new mp.Vector3(-1880.17432, 1982.43921, 142.132568) },
        { pos: new mp.Vector3(-1792.796, 1852.45081, 151.793839) },
        { pos: new mp.Vector3(-1897.311, 1780.82739, 169.131668) },
        { pos: new mp.Vector3(-1995.41064, 1776.42334, 179.099548) },
        { pos: new mp.Vector3(-1962.00049, 1897.56775, 184.045181) },
        { pos: new mp.Vector3(-2048.421, 1932.3175, 186.632874) },
        { pos: new mp.Vector3(-2040.40771, 2006.6936, 189.430176) },
        { pos: new mp.Vector3(-2184.31421, 1939.77539, 188.56662) },
        { pos: new mp.Vector3(-2284.85718, 1869.7489, 180.971619) },
        { pos: new mp.Vector3(-2549.54834, 1895.586, 166.894348) },
        { pos: new mp.Vector3(-2467.4165, 1765.62988, 157.783325) },
        { pos: new mp.Vector3(-2513.43384, 1682.56641, 150.524872) },
        { pos: new mp.Vector3(-2611.43848, 1654.47046, 136.829132) },
        { pos: new mp.Vector3(-2649.707, 1523.32068, 116.673431) },
        { pos: new mp.Vector3(-2676.50244, 1510.49365, 112.526886) },
        { pos: new mp.Vector3(-2715.85156, 1485.75244, 102.391159) },
        { pos: new mp.Vector3(-2813.73413, 1301.35278, 69.11722) },
        { pos: new mp.Vector3(-2929.68213, 1337.88513, 43.1324844) },
        { pos: new mp.Vector3(-3071.61157, 1190.86267, 20.4937572) },
        { pos: new mp.Vector3(-3099.23535, 1214.92358, 19.2906227) },
        { pos: new mp.Vector3(-2975.38086, 1535.71631, 27.3268089) },
        { pos: new mp.Vector3(-3035.8147, 1757.029, 35.1965446) },
        { pos: new mp.Vector3(-2967.34546, 2078.15674, 39.7614326) },
        { pos: new mp.Vector3(-2738.162, 2248.86743, 20.4983826) },
        { pos: new mp.Vector3(-2691.427, 2278.64648, 18.98248) },
        { pos: new mp.Vector3(-2538.78833, 2285.68237, 31.8913326) }]
},
{ 
    checkpoint_positions: [
        { pos: new mp.Vector3(2033.586, 3304.576, 45.433) },
        { pos: new mp.Vector3(2134.422, 3263.982, 45.620) },
        { pos: new mp.Vector3(2243.161, 3228.858, 47.744) },
        { pos: new mp.Vector3(2298.575, 3058.289, 46.065) },
        { pos: new mp.Vector3(2177.180, 3012.635, 45.025) },
        { pos: new mp.Vector3(1986.672, 2984.804, 45.312) },
        { pos: new mp.Vector3(1682.230, 2871.008, 42.279) },    
        { pos: new mp.Vector3(1398.974, 2700.488, 37.115) },
        { pos: new mp.Vector3(1126.280, 2687.019, 37.968) },
        { pos: new mp.Vector3(758.568, 2702.126, 39.655) },
        { pos: new mp.Vector3(369.042, 2661.986, 44.281) },
        { pos: new mp.Vector3(316.537, 2646.260, 44.137) },
        { pos: new mp.Vector3(154.834, 2655.016, 48.739) },
        { pos: new mp.Vector3(-26.912, 2803.130, 56.252) },
        { pos: new mp.Vector3(-20.121, 2825.809, 55.796) },
        { pos: new mp.Vector3(209.340, 2951.326, 43.108) },
        { pos: new mp.Vector3(238.067, 3318.459, 39.677) },
        { pos: new mp.Vector3(424.369, 3477.954, 34.172) },
        { pos: new mp.Vector3(806.221, 3529.686, 33.760) },
        { pos: new mp.Vector3(932.337, 3533.069, 34.033) },
        { pos: new mp.Vector3(1134.619, 3533.667, 34.781) },
        { pos: new mp.Vector3(1293.148, 3546.794, 35.193) },
        { pos: new mp.Vector3(1532.796, 3636.363, 34.678) },
        { pos: new mp.Vector3(1624.524, 3637.283, 35.227) },
        { pos: new mp.Vector3(1690.501, 3522.292, 36.269) },
        { pos: new mp.Vector3(1756.137, 3541.841, 36.077) },
        { pos: new mp.Vector3(1978.239, 3672.397, 33.326) },
        { pos: new mp.Vector3(2071.289, 3707.091, 33.099) },
        { pos: new mp.Vector3(2100.847, 3661.688, 38.321) },
        { pos: new mp.Vector3(2108.265, 3582.441, 41.544) },
        { pos: new mp.Vector3(2149.593, 3498.926, 45.447) },
        { pos: new mp.Vector3(2199.430, 3374.043, 45.547) },
        { pos: new mp.Vector3(2235.771, 3271.731, 47.753) },
        { pos: new mp.Vector3(2325.497, 3261.093, 47.396) }]
},
{ 
    checkpoint_positions: [
        { pos: new mp.Vector3(-2249.43896484375, 4295.2587890625, 46.75114822387695) },
        { pos: new mp.Vector3(-2259.004150390625, 4394.80126953125, 39.75299835205078) },
        { pos: new mp.Vector3(-2184.31689453125, 4507.37744140625, 34.4365119934082) },
        { pos: new mp.Vector3(-2072.960205078125, 4514.69677734375, 29.826210021972656) },
        { pos: new mp.Vector3(-1898.4837646484375, 4431.078125, 43.531551361083984) },
        { pos: new mp.Vector3(-1765.9857177734375, 4363.1171875, 57.58885192871094) },
        { pos: new mp.Vector3(-1655.1795654296875, 4213.1416015625, 82.94322967529297) },    
        { pos: new mp.Vector3(-1485.917724609375, 4227.2109375, 55.89749526977539) },
        { pos: new mp.Vector3(-1374.762451171875, 4148.8232421875, 59.10652542114258) },
        { pos: new mp.Vector3(-1307.034423828125, 4219.79736328125, 60.71258544921875) },
        { pos: new mp.Vector3(-1151.4844970703125, 4286.0126953125, 83.63578033447266) },
        { pos: new mp.Vector3(-1055.737060546875, 4263.7890625, 108.49607849121094) },
        { pos: new mp.Vector3(-970.8624877929688, 4146.21826171875, 129.6845703125) },
        { pos: new mp.Vector3(-808.8670654296875, 4051.592041015625, 160.89913940429688) },
        { pos: new mp.Vector3(-682.8799438476562, 4013.5732421875, 130.16262817382812) },
        { pos: new mp.Vector3(-514.7718505859375, 3961.9677734375, 87.76824188232422) },
        { pos: new mp.Vector3(-349.7488708496094, 4008.567626953125, 47.33039855957031) },
        { pos: new mp.Vector3(-218.61231994628906, 3839.132080078125, 38.32001876831055) },
        { pos: new mp.Vector3(-160.3234100341797, 3660.41162109375, 45.38908386230469) },
        { pos: new mp.Vector3(103.33464050292969, 3559.35986328125, 39.36277770996094) },
        { pos: new mp.Vector3(162.9564208984375, 3405.33154296875, 38.610252380371094) }]
},
{ 
    checkpoint_positions: [
        { pos: new mp.Vector3(-268.45538330078125, -1829.5634765625, 27.447593688964844) },
        { pos: new mp.Vector3(-79.61148834228516, -1728.5400390625, 28.9263916015625) },
        { pos: new mp.Vector3(141.86895751953125, -1620.69970703125, 28.903076171875) },
        { pos: new mp.Vector3(411.875, -1465.9715576171875, 28.908615112304688) },
        { pos: new mp.Vector3(633.8237915039062, -1440.5418701171875, 30.03615379333496) },
        { pos: new mp.Vector3(858.0210571289062, -1431.86279296875, 28.364688873291016) },
        { pos: new mp.Vector3(1261.2044677734375, -1455.037353515625, 34.77670669555664) },    
        { pos: new mp.Vector3(1375.20556640625, -1678.8516845703125, 58.58662414550781) },
        { pos: new mp.Vector3(1426.6549072265625, -1862.82763671875, 70.943115234375) },
        { pos: new mp.Vector3(1296.3204345703125, -2029.8555908203125, 44.67293167114258) },
        { pos: new mp.Vector3(949.3728637695312, -2081.057861328125, 30.278623580932617) },
        { pos: new mp.Vector3(688.288818359375, -2051.779052734375, 28.89388656616211) },
        { pos: new mp.Vector3(460.974853515625, -2024.3260498046875, 23.59757423400879) },
        { pos: new mp.Vector3(306.1548156738281, -1872.0596923828125, 26.594289779663086) },
        { pos: new mp.Vector3(-18.232980728149414, -1600.3233642578125, 28.89067268371582) },
        { pos: new mp.Vector3(-272.1080627441406, -1433.751220703125, 30.915693283081055) },
        { pos: new mp.Vector3(-521.6534423828125, -1335.7799072265625, 28.915498733520508) },
        { pos: new mp.Vector3(-533.4983520507812, -1091.7049560546875, 21.960973739624023) },
        { pos: new mp.Vector3(-499.29986572265625, -834.089599609375, 30.061092376708984) },
        { pos: new mp.Vector3(-528.1963500976562, -660.6748046875, 32.869178771972656) },
        { pos: new mp.Vector3(-349.39373779296875, -658.4398193359375, 31.584796905517578) },
        { pos: new mp.Vector3(-244.4964599609375, -635.3861694335938, 33.19675827026367) },
        { pos: new mp.Vector3(-157.73960876464844, -398.7253112792969, 33.30310821533203) },
        { pos: new mp.Vector3(-101.34451293945312, -271.40802001953125, 42.6247444152832) },
        { pos: new mp.Vector3(31.44687271118164, -270.6980285644531, 47.219200134277344) },
        { pos: new mp.Vector3(93.43905639648438, -110.7931900024414, 57.530357360839844) },
        { pos: new mp.Vector3(171.9732666015625, 90.90167999267578, 87.65802001953125) },
        { pos: new mp.Vector3(218.87249755859375, 187.07164001464844, 105.192138671875) },
        { pos: new mp.Vector3(362.3813171386719, 135.57278442382812, 102.66907501220703) }]
},
{ 
    checkpoint_positions: [
        { pos: new mp.Vector3(51.918, 250.407, 109.221) },
        { pos: new mp.Vector3(-251.999, 262.582, 91.358) },
        { pos: new mp.Vector3(-661.625, 280.383, 80.990) },
        { pos: new mp.Vector3(-853.687, 438.571, 86.749) },
        { pos: new mp.Vector3(-1080.439, 587.138, 102.659) },
        { pos: new mp.Vector3(-1240.933, 469.106, 92.174) },
        { pos: new mp.Vector3(-1075.501, 395.965, 68.578) },    
        { pos: new mp.Vector3(-1093.525, 266.791, 63.514) },
        { pos: new mp.Vector3(-1427.722, 132.606, 52.790) },
        { pos: new mp.Vector3(-1454.948, -90.786, 50.515) },
        { pos: new mp.Vector3(-1626.258, -302.819, 51.143) },
        { pos: new mp.Vector3(-1741.791, -498.096, 38.646) },
        { pos: new mp.Vector3(-1290.487, -900.727, 10.971) },
        { pos: new mp.Vector3(-1220.116, -1156.851, 7.330) },
        { pos: new mp.Vector3(-1293.278, -1193.577, 4.520) },
        { pos: new mp.Vector3(-1226.133, -1371.305, 3.713) },
        { pos: new mp.Vector3(-660.764, -1039.222, 16.966) },
        { pos: new mp.Vector3(-633.861, -648.082, 31.299) },
        { pos: new mp.Vector3(-615.390, -373.761, 34.297) },
        { pos: new mp.Vector3(-290.199, -364.065, 29.497) },
        { pos: new mp.Vector3(-247.212, -62.347, 49.064) },
        { pos: new mp.Vector3(210.777, -218.897, 53.615) },
        { pos: new mp.Vector3(463.653, -308.546, 47.132) },
        { pos: new mp.Vector3(516.403, -128.039, 59.890) },
        { pos: new mp.Vector3(685.923, -2.488, 83.742) },
        { pos: new mp.Vector3(761.983, 160.650, 81.042) },
        { pos: new mp.Vector3(543.542, 252.113, 102.704) },
        { pos: new mp.Vector3(421.184, 290.388, 102.624) },
        { pos: new mp.Vector3(357.480, 140.791, 102.688) },
        { pos: new mp.Vector3(222.990, 190.201, 105.098) },
        { pos: new mp.Vector3(29.090, 256.432, 109.173) }]
},
{ 
    checkpoint_positions: [
        { pos: new mp.Vector3(176.711, -3195.336, 5.176) },
        { pos: new mp.Vector3(207.900, -2960.731, 5.536) },
        { pos: new mp.Vector3(262.914, -2672.239, 5.596) },
        { pos: new mp.Vector3(139.348, -2600.501, 5.581) },
        { pos: new mp.Vector3(329.606, -2501.514, 5.157) },
        { pos: new mp.Vector3(479.010, -2066.625, 24.075) },    
        { pos: new mp.Vector3(755.873, -2045.167, 28.702) },
        { pos: new mp.Vector3(824.435, -1525.061, 28.552) },
        { pos: new mp.Vector3(808.007, -1321.815, 25.700) },
        { pos: new mp.Vector3(826.302, -1360.257, 25.692) },
        { pos: new mp.Vector3(849.109, -1344.120, 25.648) },
        { pos: new mp.Vector3(796.971, -1317.802, 25.831) },
        { pos: new mp.Vector3(771.988, -497.622, 35.638) },
        { pos: new mp.Vector3(611.527, -358.118, 43.210) },
        { pos: new mp.Vector3(860.136, 126.378, 70.914) },
        { pos: new mp.Vector3(1066.304, 426.845, 90.831) },
        { pos: new mp.Vector3(1113.145, 551.050, 96.403) },
        { pos: new mp.Vector3(1277.073, 838.830, 104.980) },
        { pos: new mp.Vector3(1285.536, 1584.350, 93.108) },
        { pos: new mp.Vector3(1166.628, 1808.825, 73.956) },
        { pos: new mp.Vector3(1247.528, 1860.084, 79.151) },
        { pos: new mp.Vector3(1270.858, 1911.215, 79.594) },
        { pos: new mp.Vector3(1206.370, 1867.674, 78.122) },
        { pos: new mp.Vector3(1163.735, 1810.923, 73.725) },
        { pos: new mp.Vector3(857.828, 2228.200, 48.106) },
        { pos: new mp.Vector3(333.620, 2088.512, 101.742) },
        { pos: new mp.Vector3(-97.359, 1988.907, 183.423) },
        { pos: new mp.Vector3(-162.926, 1889.079, 197.837) },
        { pos: new mp.Vector3(-53.204, 1880.037, 195.777) }]
},
/*{ 
    checkpoint_positions: [
        { pos: new mp.Vector3(-1027.799, -3321.593, 13.520) },
		{ pos: new mp.Vector3(-1374.961, -3121.326, 13.521) },
		{ pos: new mp.Vector3(-1731.256, -2898.480, 13.520) },
		{ pos: new mp.Vector3(-1478.240, -2456.645, 13.521) },
		{ pos: new mp.Vector3(-1284.411, -2185.112, 13.520) },
		{ pos: new mp.Vector3(-1420.200, -2479.418, 13.523) },
		{ pos: new mp.Vector3(-1603.323, -2794.809, 13.546) },
		{ pos: new mp.Vector3(-1183.711, -3037.096, 13.520) },
		{ pos: new mp.Vector3(-868.995, -3226.934, 13.520) },
		{ pos: new mp.Vector3(-944.638, -3355.782, 13.521) },
		{ pos: new mp.Vector3(-1319.392, -3153.340, 13.520) },
		{ pos: new mp.Vector3(-1724.315, -2908.218, 13.520) },
		{ pos: new mp.Vector3(-1477.410, -2455.258, 13.521) },
		{ pos: new mp.Vector3(-1291.246, -2195.350, 13.521) },
		{ pos: new mp.Vector3(-1471.922, -2569.216, 13.531) },
		{ pos: new mp.Vector3(-1602.348, -2795.101, 13.544) },
		{ pos: new mp.Vector3(-1205.988, -3024.030, 13.520) },
		{ pos: new mp.Vector3(-869.353, -3228.523, 13.520) },
		{ pos: new mp.Vector3(-946.172, -3352.731, 13.520) },
		{ pos: new mp.Vector3(-1324.501, -3150.451, 13.520) },
		{ pos: new mp.Vector3(-1727.831, -2900.831, 13.520) },
		{ pos: new mp.Vector3(-1459.378, -2424.127, 13.519) },
		{ pos: new mp.Vector3(-1289.652, -2199.118, 13.520) },
		{ pos: new mp.Vector3(-1460.993, -2550.023, 13.530) },
		{ pos: new mp.Vector3(-1599.047, -2796.973, 13.540) },
		{ pos: new mp.Vector3(-1099.047, -3085.943, 13.520) },
		{ pos: new mp.Vector3(-868.937, -3237.330, 13.520) }]
},*/
{ 
    checkpoint_positions: [{ pos: new mp.Vector3(502.296, 5545.134, 778.706) }, { pos: new mp.Vector3(406.222, 5504.216, 730.776) },
						   { pos: new mp.Vector3(354.893, 5454.802, 684.723) }, { pos: new mp.Vector3(231.879, 5303.491, 620.460) },
						   { pos: new mp.Vector3(226.595, 5249.903, 601.207) }, { pos: new mp.Vector3(153.102, 5190.644, 558.368) },
						   { pos: new mp.Vector3(127.542, 5221.662, 542.211) }, { pos: new mp.Vector3(110.741, 5103.428, 509.449) },
						   { pos: new mp.Vector3(91.489, 5019.408, 462.732) }, { pos: new mp.Vector3(35.408, 5052.230, 457.381) },
						   { pos: new mp.Vector3(3.023, 5009.569, 444.248) }, { pos: new mp.Vector3(-62.951, 4963.473, 395.232) },
						   { pos: new mp.Vector3(-169.332, 4903.870, 337.713) },{ pos: new mp.Vector3(-231.290, 4905.799, 309.443) },
						   { pos: new mp.Vector3(-337.594, 4996.192, 222.279) },{ pos: new mp.Vector3(-365.463, 4924.228, 196.942) },
						   { pos: new mp.Vector3(-388.433, 4907.845, 192.460) },{ pos: new mp.Vector3(-513.168, 5014.164, 137.381) },
						   { pos: new mp.Vector3(-637.685, 5107.005, 129.035) },{ pos: new mp.Vector3(-734.956, 5186.755, 107.397) },
						   { pos: new mp.Vector3(-759.792, 5261.347, 91.873) }, { pos: new mp.Vector3(-941.838, 5256.280, 82.184) },
						   { pos: new mp.Vector3(-848.267, 5315.524, 77.414) }, { pos: new mp.Vector3(-675.513, 5315.672, 67.309) },
						   { pos: new mp.Vector3(-703.269, 5429.072, 45.357) }, { pos: new mp.Vector3(-819.208, 5416.318, 33.888) }]
},
{ 
    checkpoint_positions: [{ pos: new mp.Vector3(1125.980, 2150.818, 52.893) },{ pos: new mp.Vector3(1167.505, 2180.574, 53.141) },
						   { pos: new mp.Vector3(1125.371, 2227.969, 48.371) },{ pos: new mp.Vector3(1035.495, 2258.495, 43.340) },
						   { pos: new mp.Vector3(940.976, 2286.505, 45.066) }, { pos: new mp.Vector3(981.816, 2330.562, 48.284) },
						   { pos: new mp.Vector3(926.578, 2365.000, 46.445) }, { pos: new mp.Vector3(1000.972, 2408.228, 50.557) },
						   { pos: new mp.Vector3(1127.356, 2454.307, 51.567) },{ pos: new mp.Vector3(1139.453, 2314.554, 48.609) },
						   { pos: new mp.Vector3(1150.935, 2262.414, 48.193) },{ pos: new mp.Vector3(1165.743, 2376.355, 57.106) },
						   { pos: new mp.Vector3(1135.251, 2480.652, 52.479) },{ pos: new mp.Vector3(914.982, 2479.577, 50.711) },
						   { pos: new mp.Vector3(896.861, 2351.650, 51.129) }, { pos: new mp.Vector3(905.881, 2279.838, 44.850) },
						   { pos: new mp.Vector3(992.257, 2214.450, 46.704) }, { pos: new mp.Vector3(1082.776, 2215.236, 48.096) },
						   { pos: new mp.Vector3(1096.844, 2158.324, 52.930) },{ pos: new mp.Vector3(1125.980, 2150.818, 52.893) }, 
						   { pos: new mp.Vector3(1167.505, 2180.574, 53.141) },{ pos: new mp.Vector3(1125.371, 2227.969, 48.371) },
						   { pos: new mp.Vector3(1035.495, 2258.495, 43.340) },{ pos: new mp.Vector3(940.976, 2286.505, 45.066) },
						   { pos: new mp.Vector3(981.816, 2330.562, 48.284) }, { pos: new mp.Vector3(926.578, 2365.000, 46.445) },
						   { pos: new mp.Vector3(1000.972, 2408.228, 50.557) },{ pos: new mp.Vector3(1127.356, 2454.307, 51.567) },
						   { pos: new mp.Vector3(1139.453, 2314.554, 48.609) },{ pos: new mp.Vector3(1150.935, 2262.414, 48.193) },
						   { pos: new mp.Vector3(1165.743, 2376.355, 57.106) },{ pos: new mp.Vector3(1135.251, 2480.652, 52.479) },
						   { pos: new mp.Vector3(914.982, 2479.577, 50.711) }, { pos: new mp.Vector3(896.861, 2351.650, 51.129) },
						   { pos: new mp.Vector3(905.881, 2279.838, 44.850) }, { pos: new mp.Vector3(992.257, 2214.450, 46.704) },
						   { pos: new mp.Vector3(1082.776, 2215.236, 48.096) },{ pos: new mp.Vector3(1096.844, 2158.324, 52.930) }]
},
{ 
    checkpoint_positions: [{ pos: new mp.Vector3(-378.455, -624.924, 36.856) },{ pos: new mp.Vector3(-183.549, -545.420, 27.372) },
						   { pos: new mp.Vector3(-64.434, -540.587, 31.412) }, { pos: new mp.Vector3(5.825, -628.463, 15.309) },
						   { pos: new mp.Vector3(17.570, -719.413, 16.162) }, { pos: new mp.Vector3(68.245, -775.537, 17.340) }, 
						   { pos: new mp.Vector3(105.503, -621.412, 17.225) }, { pos: new mp.Vector3(164.591, -584.708, 18.334) },
						   { pos: new mp.Vector3(180.873, -535.015, 21.544) }, { pos: new mp.Vector3(277.085, -459.644, 23.118) },
						   { pos: new mp.Vector3(382.659, -455.947, 16.706) }, { pos: new mp.Vector3(422.275, -525.702, 8.483) }, 
						   { pos: new mp.Vector3(467.139, -573.935, 2.068) }, { pos: new mp.Vector3(558.460, -511.422, -3.693) },
						   { pos: new mp.Vector3(737.183, -327.306, 1.443) }, { pos: new mp.Vector3(869.631, -259.808, 11.459) },
						   { pos: new mp.Vector3(916.000, -154.188, 24.512) }, { pos: new mp.Vector3(1025.584, -239.234, 43.462) },
						   { pos: new mp.Vector3(1007.608, -327.799, 48.278) },{ pos: new mp.Vector3(863.882, -397.288, 30.442) },
						   { pos: new mp.Vector3(574.872, -719.100, 11.959) }, { pos: new mp.Vector3(570.583, -1280.271, 9.318) },
						   { pos: new mp.Vector3(640.058, -1505.213, 9.301) }, { pos: new mp.Vector3(675.226, -1475.557, 9.305) },
						   { pos: new mp.Vector3(615.464, -1043.769, 9.939) }, { pos: new mp.Vector3(623.823, -664.890, 13.058) },
						   { pos: new mp.Vector3(841.402, -429.385, 27.151) }, { pos: new mp.Vector3(1081.099, -259.342, 57.542) }]
}]

let racePositionCalculationInterval = null;
let userScore
const racePositionCalculation = function () {
  {
    const racers = mp.players.toArray().filter((x) => x.dimension === mp.players.local.dimension);

    racers.sort((r1, r2) => {
      const r1checkpointServerIndex = r1.getVariable("gameCheckpoint") ?? 0;
      const r2checkpointServerIndex = r2.getVariable("gameCheckpoint") ?? 0;

      if (r1checkpointServerIndex != r2checkpointServerIndex) {
        return r1checkpointServerIndex - r2checkpointServerIndex;
      } else {
        if (r1checkpointServerIndex >= checkpoints.length) {
          return 1;
        } else if (r2checkpointServerIndex >= checkpoints.length) {
          return -1;
        }

        const r1NextCheckPoint = checkpoints.map((x) => new mp.Vector3(x.position.x, x.position.y, x.position.z))[
          r1checkpointServerIndex + 1
        ];
        const r2NextCheckPoint = checkpoints.map((x) => new mp.Vector3(x.position.x, x.position.y, x.position.z))[
          r2checkpointServerIndex + 1
        ];

        const r1travelDistToNextCheckpoint = mp.game.pathfind.calculateTravelDistanceBetweenPoints(
          r1.position.x,
          r1.position.y,
          r1.position.z,
          r1NextCheckPoint.x,
          r1NextCheckPoint.y,
          r1NextCheckPoint.z
        );
        const r2travelDistToNextCheckpoint = mp.game.pathfind.calculateTravelDistanceBetweenPoints(
          r2.position.x,
          r2.position.y,
          r2.position.z,
          r2NextCheckPoint.x,
          r2NextCheckPoint.y,
          r2NextCheckPoint.z
        );

        return r2travelDistToNextCheckpoint - r1travelDistToNextCheckpoint;
      }
    });

    let races = racers.reverse();
    races = races.slice(0, 3);

    myPositionInRaces = racers.indexOf(mp.players.local) + 1;

    let data = []
    for (let i = 0; i < 3; i++) {
		data.push({ text: [`${i + 1}`, `${races[i] ? races[i].name : "Відсутнє"}`, ``], color: 'black' })
	}
    data.push({ text: ['', 'Позиція', `${myPositionInRaces}`], color: 'green' })
    if (mp.activeRating == "races" || (userScore !== myPositionInRaces)) {
		browserMenu.call(`hudControl`, `setRatingData`, data);
		mp.activeRating = "races"
	}
    userScore = myPositionInRaces
  }
};

let checkpoints = []
let currentCheckpoint = 0 
let backVehicleToLastCheckpointCooldown = null
mp.keys.bindEx(0x59, true, () => {
    if (mp.bindBlocker({ gungamecheck: true }) || !mp.players.local.vehicle) return
    let timeleft = Math.floor((1000 * 30 - (Date.now() - backVehicleToLastCheckpointCooldown)) / 1000) 
    if (checkpoints.length) {  
        if (backVehicleToLastCheckpointCooldown && timeleft > 0) return rpc.callBrowser(browserMenu, "nError", `Не так часто! Залишилось ${timeleft} секунд`)
        if (checkpoints[currentCheckpoint - 1] != undefined) {
            backVehicleToLastCheckpointCooldown = Date.now()
            mp.events.callRemote("server::setPlayerVehicleLastPositionOnRaces", checkpoints[currentCheckpoint - 1].position.x, checkpoints[currentCheckpoint - 1].position.y, checkpoints[currentCheckpoint - 1].position.z + 1.5)
            mp.players.local.vehicle.setVelocity(0, 0, 0)
        }
    }
}, "На останню позицію у перегонах")  

mp.events.add("client::startRacing", (track, dimension, timer) => { 
    for(let i = 0; i < configRaceActivity[track].checkpoint_positions.length; i++){
        let pos = {...configRaceActivity[track].checkpoint_positions[i].pos}
        pos.z -= 1.25
        let destination, checkpoint
        checkpoint = mp.checkpoints.new(i + 1 >= configRaceActivity[track].checkpoint_positions.length ? 4 : 1, pos, 8, {
            color: [255, 165, 0, 100],
            visible: false,
            dimension: dimension
        });
 
        if(i + 1 >= configRaceActivity[track].checkpoint_positions.length){
            destination = configRaceActivity[track].checkpoint_positions[i].pos
            checkpoint.destination = new mp.Vector3(destination)
        }
        else{
            destination = configRaceActivity[track].checkpoint_positions[i+1].pos
            checkpoint.direction = destination        
        }
        // checkpoint.blip = mp.blips.new(1, configRaceActivity[track].checkpoint_positions[i].pos, {
        //     color: 81,
        //     name: "",
        //     shortRange: true,
        //     scale: 0.5,
        //     dimension: dimension
        // });
        checkpoint.owner = `race`
        checkpoints.push(checkpoint)
    }
    mp.game.invoke("0x7A6535691B477C48", mp.players.local.handle, 1)
    checkpoints[0].visible = true  
    mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[0].position.x, checkpoints[0].position.y, checkpoints[0].position.z));
    browserMenu.call(`hudControl`, `setRatingDataTimer`, timer, "failActivity");
    if (racePositionCalculationInterval) clearInterval(racePositionCalculationInterval), racePositionCalculationInterval = null
    racePositionCalculationInterval = setInterval(() => {
        racePositionCalculation()
    }, 1000)
})
mp.events.add("client::endRacing", () => {
    for(var i = 0; i < checkpoints.length; i++){
        if(mp.checkpoints.exists(checkpoints[i])){
            checkpoints[i].destroy();
            delete checkpoints[i]
        }
    }
    checkpoints = []
    currentCheckpoint = 0
    mp.game.invoke("0x7A6535691B477C48", mp.players.local.handle, 0)
    if (racePositionCalculationInterval) clearInterval(racePositionCalculationInterval), racePositionCalculationInterval = null
    browserMenu.call(`hudControl`, `setRatingData`, false);
})
mp.events.add("playerEnterCheckpoint", (checkpoint) => {
    if(checkpoint.owner == "race" && mp.players.local.vehicle){
        checkpoint.visible = false;
        //if(mp.blips.exists(checkpoints[currentCheckpoint].blip)) checkpoints[currentCheckpoint].blip.destroy()
        currentCheckpoint = currentCheckpoint + 1 == checkpoints.length ? currentCheckpoint : currentCheckpoint + 1
        checkpoints[currentCheckpoint].visible = currentCheckpoint == checkpoints.length ? false : true
        mp.events.callRemote("playerRaceCheckpoint", currentCheckpoint);
        mp.events.call("resetNavigationMarker")
        if(checkpoint.destination){
            mp.events.callRemote("server::quitRacing")
            mp.events.callRemote("server::successfulCompletionOfRace")
            mp.game.audio.playSoundFrontend(-1, "FIRST_PLACE", "HUD_MINI_GAME_SOUNDSET", true);
        }
        else {
            mp.game.audio.playSoundFrontend(-1, "CHECKPOINT_NORMAL", "HUD_MINI_GAME_SOUNDSET", true);
            mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[currentCheckpoint].position.x, checkpoints[currentCheckpoint].position.y, checkpoints[currentCheckpoint].position.z));
        }
    }
});
}; a; }
{let a = function scriptEntryPoint(mp) {
require('gamemode/scripts/activities/races.js')
require('gamemode/scripts/activities/Gungame.js')
require('gamemode/scripts/activities/Drift/index.js')
require('gamemode/scripts/activities/Airdrop.js')
require('gamemode/scripts/activities/FGraffiti.js')
require('gamemode/scripts/activities/FamiliesCapture.js')
require('gamemode/scripts/activities/Prospecting.js')
require('gamemode/scripts/activities/JudgmentNight.js')
require('gamemode/scripts/activities/EasterCarrot.js')
require('gamemode/scripts/activities/FamilyDealers.js')
}; a; }
{let a = function scriptEntryPoint(mp) {
let garage = {
    marker: null,
    colshape: null,
    label: null,
    labelForVehicleEntrance: null
}
mp.events.add("client::setPlayerHouseAssets", async (type, pos, show, certain) => {
    if(show){
        if(!pos.x || !pos.y) return  
        if(type == "garageMarker"){
            if(mp.markers.exists(garage.marker)){
                garage.marker.destroy()
            }
            if(mp.colshapes.exists(garage.colshape)){
                garage.colshape.destroy()
            }
            if(mp.labels.exists(garage.label)){
                garage.label.destroy()
            }
            garage.marker = mp.markers.new(1, pos, 1, {
                color: [255, 165, 0, 100], // Config.primaryMarkerColor
                visible: true
            });
            garage.colshape = mp.colshapes.newCircle(pos.x, pos.y, 10); 
            garage.label = mp.labels.new(`E`, new mp.Vector3(pos.x, pos.y, pos.z + 0.5),
            {
                los: false,
                font: 0,
                drawDistance: 10,
            })
        }
        if (type == "garageVehicleMarker"){
            if(mp.labels.exists(garage.labelForVehicleEntrance)){
                garage.labelForVehicleEntrance.destroy()
            }
            garage.labelForVehicleEntrance = mp.labels.new(`Гараж \n[H]`, pos,
            {
                los: false,
                font: 0,
                drawDistance: 10,
            })
        }
    }
    else{ 
        if(mp.markers.exists(garage.marker) && certain != "houseBlip"){
            garage.marker.destroy()
        }
        if(mp.colshapes.exists(garage.colshape) && certain != "houseBlip"){
            garage.colshape.destroy()
        }
        if(mp.labels.exists(garage.label) && certain != "houseBlip"){
            garage.label.destroy()
        }
        if(mp.labels.exists(garage.labelForVehicleEntrance) && certain != "houseBlip"){
            garage.labelForVehicleEntrance.destroy()
        }
    }
})

mp.events.add("playerEnterColshape", (colshape) => {
    if(mp.colshapes.exists(garage.colshape) && mp.markers.exists(garage.marker) && colshape == garage.colshape){
        garage.marker.visible = true
    }
})

mp.events.add("playerExitColshape", (colshape) => {
    if(mp.colshapes.exists(garage.colshape) && mp.markers.exists(garage.marker) && colshape == garage.colshape){
        garage.marker.visible = false
    }
})


mp.keys.bindEx(0x48, true, function() { // H key
    if (mp.bindBlocker()) return;
    if(mp.players.local.vehicle){
        mp.events.callRemote("parkCarToGarage");
    }
}, "Поставити у гараж");
mp.events.add("setHouseMenuActive", (enable) => {
    mp.houseMenuActive = enable;
});

rpc.register("getStreetNameAtCoord", (pos) => {
    return mp.game.ui.getStreetNameFromHashKey(mp.game.pathfind.getStreetNameAtCoord(pos.x, pos.y, pos.z, 0, 0)["streetName"]) 
})
mp.events.add("houseMenu.show", (params) => { 
    if (mp.players.local.colshape && mp.players.local.colshape.catchEvent && (!mp.players.local.colshape.data || !mp.players.local.colshape.data.enterColshape)) return
    params = JSON.parse(params);  
    let getStreet = mp.game.pathfind.getStreetNameAtCoord(params.position.x, params.position.y, params.position.z, 0, 0);
    let streetName = mp.game.ui.getStreetNameFromHashKey(getStreet["streetName"]);
    Object.assign(params, { district: streetName }) 

    browserMenu.call("houseMenuAPI", 'setData', params)
});

mp.events.add("houseMenu.hide", () => {
    browserMenu.call("houseMenuAPI", 'setData', null)
});

mp.events.add("showInteriorsMenu", (data) => {
    if (data) mp.interfaceActive = "interiorsMenu"
    else mp.interfaceActive = false
    browserMenu.call(`interiors`, `set`, data)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
class Fishing {
    constructor () {
        this.zones = [] 
    }
	
	markerRotate() {
		if (!fishing.currentFushing) return fishing.stopGame();
		if (fishing.currentFushing.add === true) fishing.currentFushing.rot++;
		else if (fishing.currentFushing.add === false) fishing.currentFushing.rot--;
		
		if (fishing.currentFushing.rot == fishing.currentFushing.maxrot) fishing.currentFushing.add = false;
		else if (fishing.currentFushing.rot == fishing.currentFushing.minrot) fishing.currentFushing.add = true;
		
		mp.game.graphics.drawMarker(26,
		  player.position.x, player.position.y, player.position.z - 0.7,
		  0, 0, 0,
		  0, 0, fishing.currentFushing.rot,
		  1.0, 1.0, 10.3,
		  255, 165, 0, 100,
		  false, false, 2,
		  false, null, null, false
		);
		
		if (fishing.currentFushing.add !== 'stop') {
			if (mp.game.controls.isDisabledControlJustReleased(0, 24)) {
				player.setHeading(fishing.currentFushing.rot);
				fishing.currentFushing.add = 'stop';
			}
		}
		else if (fishing.currentFushing.add === 'stop') {
			if (!fishing.currentFushing.offset) {
				fishing.currentFushing.offset = 2.5
				fishing.currentFushing.maxoffset = fishing.currentFushing.offset + 2.0;
				fishing.currentFushing.minoffset = fishing.currentFushing.offset - 1.0;
				fishing.currentFushing.addoffset = true
			}
			
			if (fishing.currentFushing.addoffset === true) fishing.currentFushing.offset += 0.04;
			else if (fishing.currentFushing.addoffset === false) fishing.currentFushing.offset -= 0.04;
			fishing.currentFushing.offset = parseFloat(fishing.currentFushing.offset.toFixed(2));
			
	
			if (fishing.currentFushing.offset == fishing.currentFushing.maxoffset) fishing.currentFushing.addoffset = false;
			else if (fishing.currentFushing.offset == fishing.currentFushing.minoffset) fishing.currentFushing.addoffset = true;
			
			//getOffsetFromInWorldCoords
			var rot = fishing.currentFushing.rot
			var direction = new mp.Vector3(3.3 * Math.sin(135 - rot * Math.PI / 180), 3.3 * Math.cos(135 - rot * Math.PI / 180), 0);
			let offsetPos = player.position
			offsetPos.x -= direction.x * fishing.currentFushing.offset;
			offsetPos.y -= direction.y * fishing.currentFushing.offset;
			var height = mp.game.water.getWaterHeight(offsetPos.x, offsetPos.y, offsetPos.z, 0);

			if (typeof height !== 'number') return fishing.stopGame();
			
			mp.game.graphics.drawMarker(28,
			  offsetPos.x, offsetPos.y, height,
			  0, 0, 0,
			  0, 0, 0,
			  0.3, 0.3, 0.3,
			  255, 165, 0, 100,
			  false, false, 2,
			  false, null, null, false
			);
		
		
			if (fishing.currentFushing.addoffset !== 'stop') {
				if (mp.game.controls.isDisabledControlJustReleased(0, 24)) {
					fishing.currentFushing.addoffset = 'stop';
					if (mp.players.exists(player)) rpc.callServer("addSoundObject", { url: "sounds/start-fish.mp3", volume: 1, range: 7 })
					fishing.currentFushing.timeout = setTimeout(() => {
						mp.events.call("enableSound", "fishing.mp3", 0.5)
						if (fishing.currentFushing && fishing.currentFushing.timeout) fishing.currentFushing.timeout = null, clearTimeout(fishing.currentFushing.timeout)
						if (!fishing.currentFushing) return fishing.stopGame();
						fishing.currentFushing.timeout = setTimeout(() => {
							if (!fishing.currentFushing) return fishing.stopGame();
							browserMenu.call(`minigameFishing2`, `start`, true);
							if (fishing.currentFushing && fishing.currentFushing.timeout) fishing.currentFushing.timeout = null, clearTimeout(fishing.currentFushing.timeout)
						}, 1000);
					}, getRandomInt(4000, 14000));
				}
			}
		
			
		}
		
	}	
	
	checkFishing () {
		if (this.currentFushing) {
			mp.minigamePressingActive = false 
			mp.events.remove("render", this.markerRotate);
			if (this.currentFushing && this.currentFushing.timeout) clearTimeout(this.currentFushing.timeout), this.currentFushing.timeout = null
			delete this.currentFushing;
			browserMenu.call(`minigameFishing2`, `terminate`);
			mp.events.callRemote("fishing::startFishing", false);
		}
		else {
			var offsetPos = player.getOffsetFromInWorldCoords(0.0, 5.0, 0.0);
			mp.game.water.getWaterHeight(offsetPos.x, offsetPos.y, offsetPos.z, 10.0);
			var water = mp.game.invoke('0xF6829842C06AE524', offsetPos.x, offsetPos.y, offsetPos.z)
			if (!water) return rpc.callBrowser(browserMenu, "nError", `Повернися до води!`)
			mp.events.callRemote("fishing::startFishing", true);
		}
	}
	
	startFishing () {
		mp.minigamePressingActive = true 
		this.currentFushing = {}
		this.currentFushing.rot = player.getHeading()
		this.currentFushing.maxrot = this.currentFushing.rot + 50;
		this.currentFushing.minrot = this.currentFushing.rot - 50;

		this.currentFushing.add = false
		mp.events.add("render", this.markerRotate);
	}
	
	stopGame () {
		mp.events.remove("render", this.markerRotate);
		if (this.currentFushing && this.currentFushing.timeout) clearTimeout(this.currentFushing.timeout), this.currentFushing.timeout = null
		delete this.currentFushing;
		mp.minigamePressingActive = false 
		mp.events.callRemote("fishing::startFishing", false)
	 	rpc.callBrowser(browserMenu, "nError", `Ти не рибалиш!`)
	}
	
	winGame () {
		if (getRandomInt(0, 100) < 10) {
			rpc.callBrowser(browserMenu, "nError", `Рибі вдалося втекти!`)
			this.loseGame();
			return
		}
		mp.events.callRemote("fishing::win");
		mp.events.remove("render", this.markerRotate);
		if (this.currentFushing && this.currentFushing.timeout) clearTimeout(this.currentFushing.timeout), this.currentFushing.timeout = null
		delete this.currentFushing;
		mp.minigamePressingActive = false 
	}
	
	loseGame () { 
		mp.events.callRemote("fishing::lose");
		mp.events.remove("render", this.markerRotate);
		if (this.currentFushing && this.currentFushing.timeout) clearTimeout(this.currentFushing.timeout), this.currentFushing.timeout = null
		delete this.currentFushing;
		mp.minigamePressingActive = false 
		rpc.callBrowser(browserMenu, "nError", `Риба зірвалася!`)
	}

	
}

function getRandomInt(min, max) {
    return min + Math.floor(Math.random() * (max - min + 1));
}

const fishing = new Fishing
const player = mp.players.local 


mp.events.add("fishing.forceClose", () => {
	if (fishing.currentFushing) {
		browserMenu.call(`minigameFishing2`, `terminate`);
		mp.minigamePressingActive = false 
		mp.events.remove("render", fishing.markerRotate);
		if (fishing.currentFushing.timeout) clearTimeout(fishing.currentFushing.timeout), fishing.currentFushing.timeout = null
		delete fishing.currentFushing;
		mp.events.callRemote("fishing::startFishing", false);
	}
});


mp.events.add("fishing::startFishing", () => {
    fishing.startFishing()
})

mp.events.add('minigameFishing.loseGame', () => {
	fishing.loseGame()
});

mp.events.add('minigameFishing.winGame', () => {
	fishing.winGame()
});



mp.keys.bindEx(0x45, true, () => {
	if (player.variable_attachedObject !== 'prop_fishing_rod_01') return;
	if (mp.bindBlocker({swimcheck: true, minigamePressing: true}) || player.vehicle) return;
	fishing.checkFishing()
}, "Клавіша дії")


}; a; }
{let a = function scriptEntryPoint(mp) {
let garage = {
    marker: null,
    colshape: null,
    label: null,
    labelForVehicleEntrance: null
}
mp.events.add("client::setPlayerFactionAssets", (type, pos, show) => {
    if(show){
        if(!pos.x || !pos.y) return  
        if(type == "garageMarker"){
            if(mp.markers.exists(garage.marker)){
                garage.marker.destroy()
            }
            if(mp.colshapes.exists(garage.colshape)){
                garage.colshape.destroy()
            }
            if(mp.labels.exists(garage.label)){
                garage.label.destroy()
            }
            garage.marker = mp.markers.new(1, pos, 1, {
                color: [255, 165, 0, 100], // Config.primaryMarkerColor
                visible: true
            });
            garage.colshape = mp.colshapes.newCircle(pos.x, pos.y, 10); 
            garage.label = mp.labels.new(`E`, new mp.Vector3(pos.x, pos.y, pos.z + 0.5),
            {
                los: false,
                font: 0,
                drawDistance: 10,
            })
        }
        if (type == "garageVehicleMarker"){
            if(mp.labels.exists(garage.labelForVehicleEntrance)){
                garage.labelForVehicleEntrance.destroy()
            }
            garage.labelForVehicleEntrance = mp.labels.new(`Гараж \n[H]`, pos,
            {
                los: false,
                font: 0,
                drawDistance: 10,
            })
        }
    }
    else{ 
        if(mp.markers.exists(garage.marker)){
            garage.marker.destroy()
        }
        if(mp.colshapes.exists(garage.colshape)){
            garage.colshape.destroy()
        }
        if(mp.labels.exists(garage.label)){
            garage.label.destroy()
        }
        if(mp.labels.exists(garage.labelForVehicleEntrance)){
            garage.labelForVehicleEntrance.destroy()
        }
    }
})

mp.events.add("playerEnterColshape", (colshape) => {
    if(mp.colshapes.exists(garage.colshape) && mp.markers.exists(garage.marker) && colshape == garage.colshape){
        garage.marker.visible = true
    }
})

mp.events.add("playerExitColshape", (colshape) => {
    if(mp.colshapes.exists(garage.colshape) && mp.markers.exists(garage.marker) && colshape == garage.colshape){
        garage.marker.visible = false
    }
})


mp.keys.bindEx(0x48, true, function() { // H key
    if (mp.bindBlocker()) return;
    if(mp.players.local.vehicle){
        mp.events.callRemote("enterGarageWithVehicleFaction");
    }
}, "Поставити у гараж");


}; a; }
{let a = function scriptEntryPoint(mp) {
var animatorActive = false;
var animIndex = 0;
mp.clientStorage.animName = "";

mp.events.add("animator", () => {
    animatorActive = !animatorActive;
    if (animatorActive) {
        mp.keys.bindEx(37, false, () => { //left
            animIndex--;
            if (animIndex < 0) animIndex = 0;
            mp.events.callRemote("playAnimation", animIndex);
        });

        mp.keys.bindEx(39, false, () => { //right
            animIndex++;
            mp.events.callRemote("playAnimation", animIndex);
        });

        mp.keys.bindEx(38, false, () => { //up
            animIndex -= 100;
            if (animIndex < 0) animIndex = 0;
            mp.events.callRemote("playAnimation", animIndex);
        });

        mp.keys.bindEx(40, false, () => { //down
            animIndex += 100;
            mp.events.callRemote("playAnimation", animIndex);
        });

        mp.events.callRemote("playAnimation", animIndex);
    } else {
        mp.keys.unbind(37, false);
        mp.keys.unbind(39, false);
        mp.keys.unbind(38, false);
        mp.keys.unbind(40, false);

        mp.events.callRemote("cancelAnimation");
    }
});

mp.events.add("render", () => {
    if (animatorActive) {
        mp.game.graphics.drawText(`~y~left, right ~w~- листать анимации`, [0.2, 0.36], {
            font: 4,
            color: [12, 144, 12, 230],
            scale: [0.6, 0.6],
            outline: true
        });
        mp.game.graphics.drawText(`~y~ up, down ~w~- листать на 100 анимаций`, [0.2, 0.4], {
            font: 4,
            color: [12, 144, 12, 230],
            scale: [0.6, 0.6],
            outline: true
        });
        mp.game.graphics.drawText(`~b~ ${mp.clientStorage.animName}`, [0.2, 0.44], {
            font: 4,
            color: [12, 144, 12, 230],
            scale: [0.6, 0.6],
            outline: true
        });
    }
});

}; a; }
{let a = function scriptEntryPoint(mp) {
class Scaleform {
	constructor(movieName) {
		this.handle = Scaleform.requestMovie(movieName);
	}

	callFunction(name, ...args) {
		mp.game.graphics.pushScaleformMovieFunction(this.handle, name);

		for (const arg of args) {
			switch (typeof(arg)) {
				case "string":
					mp.game.graphics.pushScaleformMovieFunctionParameterString(arg);
					break;
				case "boolean":
					mp.game.graphics.pushScaleformMovieFunctionParameterBool(arg);
					break;
				case "number":
					if (Number.isInteger(arg)) {
						mp.game.graphics.pushScaleformMovieFunctionParameterInt(arg);
					} else {
						mp.game.graphics.pushScaleformMovieFunctionParameterFloat(arg);
					}

					break;
				default:
					continue;
			}
		}

		mp.game.graphics.popScaleformMovieFunctionVoid();
	}

	drawFullscreen(red = 255, green = 255, blue = 255, alpha = 255) {
		mp.game.graphics.drawScaleformMovieFullscreen(this.handle, red, green, blue, alpha, false);
	}

	dispose() {
		mp.game.graphics.setScaleformMovieAsNoLongerNeeded(this.handle);
	}

	static requestMovie(movieName) {
		const id = mp.game.graphics.requestScaleformMovie(movieName);
		/*mp.events.call('chat.custom_push', id);
		while (!mp.game.graphics.hasScaleformMovieLoaded(id)) { Крашит
			mp.game.wait(100);
		}
		*/
		return id;
	}
}

exports = {
	Scaleform
};

}; a; }
{let a = function scriptEntryPoint(mp) {
 
 
mp.debugEnabled = false // TODO: false

mp.events.add("enableDebug", () => {
    mp.debugEnabled = !mp.debugEnabled 
}) 

mp.events.add("render", () => {
    try {
        const player = mp.players.local; 
        if (mp.clientStorage["admin"] > 0 && mp.clientStorage["wh"] > 0) {
            const pos = player.position;
            const heading = player.getHeading();
            let inv = player.variable_invisible
            mp.game.graphics.drawText(`x: ${pos.x.toFixed(2)}, y: ${pos.y.toFixed(2)}, z: ${pos.z.toFixed(2)}, h: ${heading.toFixed(2)}, inv: ~y~${inv ? "on" : "off"}`, [0.5, 0.965], {
                font: 0,
                color: [255, 255, 255, 230],
                scale: [0.4, 0.4],
                outline: true
            });
            if (mp.clientStorage["whc"] > 0) {
                mp.vehicles.forEachInStreamRange((veh) => {
                    let distance = Math.abs(Math.sqrt(Math.pow((veh.position.x - mp.players.local.position.x), 2) +
                                            Math.pow((veh.position.y - mp.players.local.position.y), 2) +
                                            Math.pow((veh.position.z - mp.players.local.position.z), 2)));

                    if (distance < 60 && veh != mp.players.local.vehicle) {
                        mp.game.graphics.drawText(`ID: ~y~${veh.remoteId}~w~ | EHP: ~y~${parseInt(veh.getEngineHealth())}~w~ | BHP: ~y~${parseInt(veh.getBodyHealth())}~w~\n${mp.game.vehicle.getDisplayNameFromVehicleModel(veh.model)} | SPEED: ~y~${parseInt((veh.getSpeed() * 3.6).toFixed(0))}~w~ KM/H\n${veh.variable_soundObject && veh.variable_soundObject.maxVehicleSpeedCheck ? "Sub: ~y~on" : ""}`, [veh.position.x, veh.position.y, veh.position.z - 0.2], { 
                            font: 0, 
                            color: [255, 255, 255, 255], 
                            scale: [0.20, 0.20], 
                            outline: true,
                            centre: true
                        }); 
                    }
                })
            }
            if (mp.clientStorage["wh"] > 0) {
                mp.players.forEachInStreamRange((pl) => {
                    let tagFaction = pl.getVariable("factionTag")
                    if (pl != mp.players.local) { 
                        mp.game.graphics.drawText(`ID: ~y~${pl.remoteId}~w~, ${pl.getVariable("admin") ? `~g~${pl.name}~w~` : pl.getVariable("level") == undefined ? `~r~${pl.name}~w~` : pl.getVariable("level") < 3 ? `~b~${pl.name}~w~` : `${pl.name}`} (LvL: ~y~${pl.getVariable("level")}~w~) | ~y~${tagFaction || "Цивiльний"}~w~\nHP: ~y~${pl.getHealth()}~w~ | AP: ~y~${pl.getArmour()}`, [pl.position.x, pl.position.y, pl.position.z + (pl.vehicle ? 0.6 : 0.2)], { 
                            font: 0, 
                            color: [255, 255, 255, 255], 
                            scale: [0.20, 0.20], 
                            outline: true,
                            centre: true
                        });
                    } 
                })
            }  
        }  
    } catch (err) {
        chatDebug(`Error: ${err}`)
    }
}); 

 

}; a; }
{let a = function scriptEntryPoint(mp) {
const disabledControls = new Set();

mp.events.add("render", () => {
	if (disabledControls.size === 0) {
		return;
	}

	for (const disabledControl of disabledControls) {
		mp.game.controls.disableControlAction(2, disabledControl, true);
	}
});
function add (control) {
	disabledControls.add(control);
} 
function addRange (controls) {
	if (!Array.isArray(controls)) {
		return;
	}
	
	for (const control of controls) {
		disabledControls.add(control);
	}
}
function remove (control) {
	disabledControls.delete(control);
}
function removeRange (controls) {
	if (!Array.isArray(controls)) {
		return;
	}
	
	for (const control of controls) {
		disabledControls.delete(control);
	}
}
function removeAll () {
	disabledControls.clear();
}

exports = {
	add,
	addRange,
	remove,
	removeRange,
	removeAll
}

}; a; }
{let a = function scriptEntryPoint(mp) {
const { Scaleform } = require("gamemode/scripts/helpers/scaleformHelper.js");
class InstructionButtonsDrawler {
	constructor() {
		this.isActive = false;
		this.scaleform = undefined;

		mp.events.add("render", () => {
			if (!this.isActive || !this.scaleform) {
				return;
			}
		
			this.draw();
		});
	}

	init() {
		this.scaleform = new Scaleform("instructional_buttons");
	}

	setActive(state) {
		this.isActive = state;
	}

	setButtons(...buttons) {
		this.scaleform.callFunction("SET_DATA_SLOT_EMPTY");

		if (Array.isArray(buttons)) {
			for (let i = 0; i < buttons.length; i++) {
				const button = buttons[i].altControl
					? buttons[i].altControl
					: mp.game.controls.getControlActionName(2, buttons[i].control, true);

					this.scaleform.callFunction("SET_DATA_SLOT", i, button, buttons[i].labelText ? buttons[i].labelText : mp.game.ui.getLabelText(buttons[i].label));
			}
		}
		
		this.scaleform.callFunction("DRAW_INSTRUCTIONAL_BUTTONS", -1);
	}

	draw() {
		this.scaleform.drawFullscreen();
	}

	dispose() {
		this.isActive = false;
		this.scaleform.dispose();
		this.scaleform = undefined;
	}
}

const drawler = new InstructionButtonsDrawler();

exports = drawler;

}; a; }
{let a = function scriptEntryPoint(mp) {
class CameraRotator {
	start(camera, basePosition, lookAtPosition, offsetVector, heading, fov = undefined) {
		this.camera = camera;
		this.basePosition = basePosition;
		this.lookAtPosition = lookAtPosition;
		this.offsetVector = offsetVector;
		this.heading = heading;
		this.baseHeading = heading;
		this.currentPoint = { x: 0, y: 0 };
		this.isPause = false;
		this.zUp = 0;
		this.zUpMultipler = 1;
		this.xBound = [ 0, 0 ];
		this.zBound = [ -0.01, 0.8 ];

		this.changePosition();

		camera.pointAtCoord(lookAtPosition.x, lookAtPosition.y, lookAtPosition.z);

		if (fov) {
			camera.setFov(fov);
		}

		this.activate(true);
	}

	pause(state) {
		this.isPause = state;
	}

	stop() {
		if (this.moveZCustom) this.stopMoveCamZ();
		this.activate(false);
	}

	reset() {
		this.heading = this.baseHeading;
		this.zUp = 0;
		this.changePosition();
	}

	setXBound(min, max) {
		this.xBound = [ min, max ];
	}

	setZBound(min, max) {
		this.zBound = [ min, max ];
	}

	setZUpMultipler(value) {
		this.zUpMultipler = value;
	}

	getRelativeHeading() {
		return this.normilizeHeading(this.baseHeading - this.heading);
	}

	activate(state) {
		/* this.camera.setActive(state);
		mp.game.cam.renderScriptCams(state, false, 3000, true, false); */
		this.isActive = state;
	}

	onMouseMove(dX, dY) {
		this.heading = this.normilizeHeading(this.heading + dX * 100);

		let relativeHeading = this.getRelativeHeading();

		if (relativeHeading > this.xBound[0] && relativeHeading < this.xBound[1]) {
			relativeHeading = Math.abs(this.xBound[0] - relativeHeading) > Math.abs(this.xBound[1] - relativeHeading) 
				? this.xBound[1]
				: this.xBound[0];
		}

		this.heading = this.normilizeHeading(-relativeHeading + this.baseHeading);
		this.zUp += dY * this.zUpMultipler * -1;

		if (this.zUp > this.zBound[1]) {
			this.zUp = this.zBound[1];
		} else if (this.zUp < this.zBound[0]) {
			this.zUp = this.zBound[0];
		}

		this.changePosition();
	}

	moveCamZ(base, lookAt) {
		if (this.moveZCustom) return

		this.moveZCustom = { base, lookAt }

		this.basePosition.z += this.moveZCustom.base;
		this.lookAtPosition.z += this.moveZCustom.lookAt;

		this.changePosition();
		this.camera.pointAtCoord(this.lookAtPosition.x, this.lookAtPosition.y, this.lookAtPosition.z);
	}

	stopMoveCamZ() {
		if (!this.moveZCustom) return

		this.basePosition.z -= this.moveZCustom.base;
		this.lookAtPosition.z -= this.moveZCustom.lookAt;

		this.changePosition();
		this.camera.pointAtCoord(this.lookAtPosition.x, this.lookAtPosition.y, this.lookAtPosition.z);
		
		delete this.moveZCustom
	}

	setZUp(value){
		this.zUp = value
		this.changePosition()
	}
	
	changePosition() {
		const position = mp.game.object.getObjectOffsetFromCoords(this.basePosition.x, this.basePosition.y,
			this.basePosition.z + this.zUp, this.heading, this.offsetVector.x, this.offsetVector.y, this.offsetVector.z);
		
		this.camera.setCoord(position.x, position.y, position.z);
	}

	isPointEmpty() {
		return this.currentPoint.x === 0 && this.currentPoint.y === 0;
	}

	setPoint(x, y) {
		this.currentPoint = { x, y };
	}

	getPoint() {
		return this.currentPoint;
	}

	normilizeHeading(heading) {
		if (heading > 360) {
			heading = heading - 360;
		} else if (heading < 0) {
			heading = 360 + heading;
		}

		return heading;
	}
}

const cameraRotator = new CameraRotator();

mp.events.add("render", () => {
	if (!mp.gui.cursor.visible || !cameraRotator.isActive || cameraRotator.isPause || mp.banCameraRotate) {
		return;
	}

	const x = mp.game.controls.getDisabledControlNormal(2, 239);
	const y = mp.game.controls.getDisabledControlNormal(2, 240);

	if (cameraRotator.isPointEmpty()) {
		cameraRotator.setPoint(x, y);
	}

	const currentPoint = cameraRotator.getPoint();
	const dX = currentPoint.x - x;
	const dY = currentPoint.y - y;
	
	cameraRotator.setPoint(x, y);

	// Comment before commit
	//drawDebugText();

	if (mp.game.controls.isDisabledControlPressed(2, 237)) {
		cameraRotator.onMouseMove(dX, dY);
	}
});

function drawDebugText() {
	if (!mp.isHudEnable) return
	let message = `zUp: ${cameraRotator.zUp.toFixed(3)}`;

	message += `\nHeading: ${cameraRotator.heading.toFixed(2)}`;
	message += `\nBase Heading: ${cameraRotator.baseHeading.toFixed(2)}`;
	message += `\nRelative Heading: ${cameraRotator.getRelativeHeading().toFixed(2)}`;

	mp.game.graphics.drawText(message, [0.5, 0.005], { 
		font: 7, 
		color: [255, 255, 255, 185], 
		scale: [0.8, 0.8], 
		outline: true,
		centre: true
	});
}

exports = cameraRotator;

}; a; }
{let a = function scriptEntryPoint(mp) {
try { 
    require('gamemode/scripts/BigData.js');
    require('gamemode/scripts/bindBlocker.js') 
    require('gamemode/scripts/Settings.js')
    require('gamemode/scripts/CayoPerico.js') 
    require('gamemode/scripts/CompletedQuest.js')

    require('gamemode/scripts/helpers/actionCallshape.js')

    require('gamemode/scripts/Factions/Medics.js');
    require('gamemode/scripts/Factions/Police.js');
    require('gamemode/scripts/Factions/InitFactions.js');
    require('gamemode/scripts/Factions/FactionMenu.js');

    
    require('gamemode/scripts/jobs/ProductDistibutor.js'); 
    require('gamemode/scripts/jobs/Trucker.js'); 
    require('gamemode/scripts/jobs/Mechanic.js'); 
    require('gamemode/scripts/jobs/Taxi.js'); 
    require('gamemode/scripts/jobs/Courier.js'); 
    require('gamemode/scripts/jobs/Postman.js');  
    require('gamemode/scripts/jobs/LoaderDriver.js'); 
    require('gamemode/scripts/jobs/Lawnmower.js');  
    require('gamemode/scripts/jobs/Flatbed.js');
    require('gamemode/scripts/jobs/Hunting.js');
    require('gamemode/scripts/jobs/Bus.js');
    require('gamemode/scripts/jobs/Electric.js');
    require('gamemode/scripts/jobs/Firefighter.js');
    require('gamemode/scripts/jobs/Aquanaut.js');
    require('gamemode/scripts/jobs/Contrabandist.js');
    require('gamemode/scripts/jobs/Woodcutter.js');

    require('gamemode/scripts/Casino/index.js')

    require('gamemode/scripts/ArmWrestling.js')
    require('gamemode/scripts/PushVehicle.js')

    require('gamemode/scripts/selectMenuPrimary_events.js');
    require('gamemode/scripts/timebar.js');
    require('gamemode/scripts/barbershop/index.js'); 
    require('gamemode/scripts/Walking.js');
    require('gamemode/scripts/Emotions.js');
    require('gamemode/scripts/peds_events.js');
    require('gamemode/scripts/Doors.js');
    require('gamemode/scripts/InteriorChangedHandler.js');
    require('gamemode/scripts/Greenzones.js');
    require('gamemode/scripts/admin.js');
    require('gamemode/scripts/QuestsHandler.js');
    require('gamemode/scripts/CharacterCreation/CharacterCreation.js');
    //require('gamemode/scripts/planeSmoke.js'); 
    require('gamemode/scripts/Bank.js');
    require('gamemode/scripts/activities/index');
    require('gamemode/scripts/ClothesSelector.js')

    require('gamemode/scripts/notifs.js');
    require('gamemode/scripts/DrivingSchool.js');
    require('gamemode/scripts/Gangzones.js');
    require('gamemode/scripts/Captures.js');
    require('gamemode/scripts/CharacterEvents.js');
    require('gamemode/scripts/SelectMenu.js');  
    require('gamemode/scripts/InteractionMenu.js');
    require('gamemode/scripts/ModalWindow.js');
    require('gamemode/scripts/Prompts.js');
    require('gamemode/scripts/ChoiceMenu.js');
    require('gamemode/scripts/CamerasEvents.js');
    require('gamemode/scripts/Console.js'); 
    require('gamemode/scripts/Nametags.js');
    require('gamemode/scripts/VehicleDirectionIndicators.js');
    require('gamemode/scripts/OnlinePlayers.js'); 
    require('gamemode/scripts/Weather.js');
    require('gamemode/scripts/forefinger.js'); 
    require('gamemode/scripts/soundviewer.js');
    require('gamemode/scripts/TradeEvents.js');
    require('gamemode/scripts/ClosedDoors.js');
    require('gamemode/scripts/player_weapon.js'); 

    require('gamemode/scripts/ClientEvents.js')
    require('gamemode/scripts/Timebars')
    require('gamemode/scripts/AuthorizationProcess.js');  
    require('gamemode/scripts/CarTuning.js');  
    require('gamemode/scripts/BusinessPanel.js');
    require('gamemode/scripts/Chat.js');
    require('gamemode/scripts/TransportSalons.js');
    require('gamemode/scripts/VehicleInfo.js');
    require('gamemode/scripts/Knockdown.js');
    require('gamemode/scripts/Subtitles.js');
    require('gamemode/scripts/PassiveMode.js')
    require('gamemode/scripts/tattoo_shop/tattoo_shop.js')
    require('gamemode/scripts/activities.js')
    require('gamemode/scripts/DialogBoxes.js')
    require('gamemode/scripts/Raycasting.js')
    require('gamemode/scripts/CustomVehicleEntering.js');
    require('gamemode/scripts/ShootingRange.js');
    //require('gamemode/scripts/Anticheat.js');
    require('gamemode/scripts/QuantPhone.js');
    require('gamemode/scripts/TabletPrimary.js');
    require('gamemode/scripts/BrowserPrimary.js');
    require('gamemode/scripts/KillList.js');
    require('gamemode/scripts/BizesRobbery.js')  
    require('gamemode/scripts/Hitmarker.js')
    require('gamemode/scripts/MainMenu.js');
    require('gamemode/scripts/Graffiti.js');  
    require('gamemode/scripts/Promo.js'); 
    require('gamemode/scripts/ChipStation.js');
    require('gamemode/scripts/Gas.js');
    require('gamemode/scripts/AtmCriminal/index.js'); 
    require('gamemode/scripts/Cinema.js');
    require('gamemode/scripts/Chair.js');
    require('gamemode/scripts/Duels.js');
    require('gamemode/scripts/Familiar.js');
    require('gamemode/scripts/Shop.js');
    require('gamemode/scripts/WeaponDisplay/index.js');
    require('gamemode/scripts/Passport.js');
    require('gamemode/scripts/CreateFamily.js');
    require('gamemode/scripts/Seller.js');
    require('gamemode/scripts/Craft.js');
    require('gamemode/scripts/Lottery.js');
    require('gamemode/scripts/Marriage.js');
    require('gamemode/scripts/Crosshair.js');
    require('gamemode/scripts/Container.js');
    require('gamemode/scripts/Sound.js');
    require('gamemode/scripts/Carry.js');
    require('gamemode/scripts/Spectate.js');
    require('gamemode/scripts/DailyReward.js');
    
    require('gamemode/scripts/Arena/index');
    require('gamemode/scripts/CarSystem.js');
    require('gamemode/scripts/Refuel.js');
    require('gamemode/scripts/Market.js');
    require('gamemode/scripts/Compass.js');
    require('gamemode/scripts/Binoculars.js');
    require('gamemode/scripts/VehicleRent.js');
    require('gamemode/scripts/Radio.js');
    require('gamemode/scripts/BattlePass.js');
    require('gamemode/scripts/Blackout.js');
    require('gamemode/scripts/Numberplate.js');
    require('gamemode/scripts/AmmoDisplay.js');
    require('gamemode/scripts/Parachute.js');
    require('gamemode/scripts/TrainSystem/trainC.js');
    require('gamemode/scripts/TrainSystem/trainRobberyC.js');
    require('gamemode/scripts/Arrest.js');
    //require('gamemode/scripts/Halloween.js');
    require('gamemode/scripts/Firework.js');
    require('gamemode/scripts/Crouch.js');
    require('gamemode/scripts/NRD.js');
    require('gamemode/scripts/IdleCamera.js');
    require('gamemode/scripts/Markers.js');
    require('gamemode/scripts/Apartments.js');
    require('gamemode/scripts/Hints.js');
    require('gamemode/scripts/Drones.js');
    require('gamemode/scripts/BodySearch.js');
    require('gamemode/scripts/QuitMarkers.js');
    require('gamemode/scripts/AttachmentsEditor.js');
    require('gamemode/scripts/HideInTrunk.js');
    require('gamemode/scripts/TakeHand.js');
    require('gamemode/scripts/Cooking.js');

    mp.game.gameplay.disableAutomaticRespawn(true);
    mp.game.gameplay.ignoreNextRestart(true);
    mp.game.gameplay.setFadeInAfterDeathArrest(false);
    mp.game.gameplay.setFadeOutAfterDeath(false);
    mp.game.gameplay.setFadeInAfterLoad(false);
    mp.game.audio.startAudioScene("CHARACTER_CHANGE_IN_SKY_SCENE");
    mp.game.audio.setAudioFlag("DisableFlightMusic", true);
    /* SNOW
    mp.game.graphics.setForceVehicleTrails(true);
    mp.game.graphics.setForcePedFootstepsTracks(true);
    mp.game.audio.requestScriptAudioBank("ICE_FOOTSTEPS", false);
    mp.game.audio.requestScriptAudioBank("SNOW_FOOTSTEPS", false);
    mp.game.invoke("0x6E9EF3A33C8899F8", true); // Enable snow textures
    mp.game.invoke("0x7F06937B0CDCBC1A", 0.9); // Snow intensity
    */
    mp.players.local.setConfigFlag(35, false);
    const colour = { r: 255, g: 179, b: 0 };
    mp.game.invoke('0xF314CF4F0211894E', 143, colour.r, colour.g, colour.b, 255);
    mp.game.invoke('0xF314CF4F0211894E', 116, colour.r, colour.g, colour.b, 255);
    mp.game.gxt.set("PM_PAUSE_HDR", "Quant RP | QUANT5.COM.UA");
    mp.game.invoke("0x9F343285A00B4BB6", mp.players.local, true)
    for (let i = 0; i < 50; i++) mp.gui.chat.push('');
    mp.game.stats.statSetProfileSetting(0, 0);
    setCamStartedPos()
    // Creating browser. 

    let browserLoaded = false
    let browserDomReady = false
    let customSync = false
    let socketUUID = false
 
    function loadBrowser() {
        try {  
            browserLoaded = true
            browserMenu.call(`setCustomSync`, customSync)
            if (mp.socketEnabled) browserMenu.call(`socket`, `init`, mp.players.local.remoteId, socketUUID)
            else mp.events.callRemote("playerBrowserReady")
            mp.gui.execute("window.location = 'http://package2/chat/index.html'")
            mp.events.call("setFreeze", true); 
            mp.events.call("setCursorVisibleInRender", true)
        } catch (err) { 
            mp.game.graphics.notify(`Error: ${err}`)
            mp.events.callRemote("log", `Error: ${err}`)
        }
    }

    try { 
        if (!browserMenu) {
            // Creating CEF browser.  
            browserMenu = mp.browsers.new('http://package2/index.html?t' + new Date().getTime());
            mp.events.add('browserDomReady', (browser) => { 
                if (browser == browserMenu) { 
                    browserDomReady = true
                    if (customSync && !browserLoaded && socketUUID) loadBrowser()
                }
            });
        }
    } catch (err) { 
        mp.events.callRemote("log", `gui error: ${err}`)
    }

    /*mp.events.add("eval", (cmd) => {
        if (mp.clientStorage["admin"] > 0)
        {
            eval(cmd)
            mp.events.callRemote("log", `eval, run ${cmd}`)
        }
    });*/

    rpc.on('setVehHealth', (data) => {
        customSync = data
        if (!browserLoaded && browserDomReady && socketUUID) loadBrowser()
    })

    mp.events.add("setSocketUUID", (id) => {
        socketUUID = id
        if (!browserLoaded && browserDomReady && socketUUID) loadBrowser()
    })

    mp.events.add("reconnectSocket", () => {
        browserMenu.call(`socket`, `reconnect`, mp.players.local.remoteId, socketUUID)
    })

    mp.events.add("playerCompletelyReady", () => {
        require('gamemode/scripts/Sync/SyncVehicles.js');
        require('gamemode/scripts/Sync/SyncObjects.js')
        require('gamemode/scripts/Sync/SyncPlayers.js')
        require('gamemode/scripts/Sync/SyncBlips.js');
        require('gamemode/scripts/Sync/SyncAnimations.js');
        require('gamemode/scripts/Sync/SyncRadio.js'); 
        require('gamemode/scripts/Sync/SyncFacialAnim.js');
        
        require('gamemode/scripts/bigmap.js'); 
        require('gamemode/scripts/FlyMode.js'); 
        require('gamemode/scripts/HUD.js');
        require('gamemode/scripts/houseMenu.js');
        require('gamemode/scripts/FactionMenu.js');
        require('gamemode/scripts/Inventory.js');
        require('gamemode/scripts/animator.js');
        require('gamemode/scripts/jobs/Autoroober.js');  
        require('gamemode/scripts/jobs/Fishing.js');  
    
    })

    /*mp.keys.bind(0x73, true, function () {
        if (mp.keys.isDown(0xA4)) {
            mp.events.callRemote("savePlayerQuit")
        }
    });*/

    mp.events.add("render", () => { 
        mp.game.gameplay.disableAutomaticRespawn(true);
        mp.game.gameplay.setFadeInAfterDeathArrest(false);
        mp.game.gameplay.setFadeOutAfterDeath(false);

        mp.game.invoke('0x4757F00BC6323CFE', -1553120962, 0.0); // disable vehicle damage
        mp.game.invoke('0x9E4CFFF989258472'); // void _INVALIDATE_VEHICLE_IDLE_CAM();
        mp.game.invoke('0xF4F2C0D4EE209E20'); // void INVALIDATE_IDLE_CAM();
        mp.game.invoke("0xDFC252D8A3E15AB7")
        if (mp.game.invoke('0x475768A975D5AD17', mp.players.local.handle, 6)) 
            {
                mp.game.controls.disableControlAction(2, 140, true); // отключаем клавишу R (MELEE_ATTACK)
                mp.game.controls.disableControlAction(2, 141, true); // отключаем клавишу Q (MELEE_ATTACK)
                mp.game.controls.disableControlAction(2, 263, true); // отключаем клавишу R (MELEE_ATTACK)
                mp.game.controls.disableControlAction(2, 264, true); // отключаем клавишу Q (MELEE_ATTACK)
                mp.game.controls.disableControlAction(2, 142, true);
            }
        // mp.game.controls.disableAllControlActions(17);
        // mp.game.controls.disableAllControlActions(18);
        // mp.game.controls.disableAllControlActions(19);
        // mp.game.controls.disableAllControlActions(20);
        // mp.game.controls.disableAllControlActions(21);
        mp.game.player.setLockonRangeOverride(0.0);
        mp.game.player.resetStamina(); 
        handleRender();
        if(mp.game.ui.isPauseMenuActive()) {
            if(mp.gui.cursor.visible === true) {
                mp.gui.cursor.visible = false;
            }
        }
        else if(mp.players.local.cursorVisible == true && mp.gui.cursor.visible === false) {
            mp.gui.cursor.visible = true;
        }
        if (mp.players.local.vehicle) {
            mp.game.invoke("0x1913FE4CBF41C463", mp.players.local.handle, 32, mp.players.local.vehicle.variable_seatbelt ? false : true) 
        }
        mp.game.player.setHealthRechargeMultiplier(0); //Disable regeneration  
        if (mp.players.local.isBeingStunned(0))
            mp.players.local.setMinGroundTimeForStungun(30000);
    })
    function setCamStartedPos () {
        mp.movingcam = mp.cameras.new('login', new mp.Vector3(-1412.06, 4312.16, 7.82), new mp.Vector3(0,0,0), 40);
        mp.movingcam.pointAtCoord(-1370.69, 4332.15, 4.06);
        mp.movingcam.setActive(true); 
        mp.players.local.position = new mp.Vector3(-1412.21, 4312.03, 3.47) 
        mp.players.local.setAlpha(0) 
        mp.players.local.isFreeze = true;
        mp.players.local.setVisible(true, false);
        mp.game.cam.renderScriptCams(true, false, 0, true, false);
        mp.game.ui.setMinimapVisible(false);
        mp.game.ui.displayRadar(false);  
    }
    global.setCamStartedPos = setCamStartedPos 

    
} catch (err) {
    mp.events.callRemote("log", `Error sdfd: ${err}`)
}

const player = mp.players.local;
const dayOfWeekGxts = [ 'fSu', 'fMo', 'fTu', 'fWe', 'fTh', 'fFr', 'fSa' ];

const pad = (num) => ('0' + num).slice(-2);

const getLocalPlayerName = () => {
	return player.name.toUpperCase();
}

const getTimeString = () => {
    const level = mp.clientStorage["level"]
    const exp = mp.clientStorage["exp"]

	return `${level} LVL, ${exp}/${level * 4} EXP`;
}

const getMoneyString = () => {
	const playerMoney = mp.clientStorage["money"]
	return `$${playerMoney.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".")}`
}

const handleRender = () => {
	if (!mp.game.ui.isPauseMenuActive())
		return;
	
	const firstLineText = getLocalPlayerName();
	const secondLineText = getTimeString();
	const thirdLineText = getMoneyString();
	
	mp.game.graphics.beginScaleformMovieMethodOnFrontend("SET_HEADING_DETAILS");
	mp.game.graphics.scaleformMovieMethodAddParamTextureNameString(firstLineText);
	mp.game.graphics.scaleformMovieMethodAddParamTextureNameString(secondLineText);
	mp.game.graphics.scaleformMovieMethodAddParamTextureNameString(thirdLineText);
	mp.game.graphics.scaleformMovieMethodAddParamBool(false);
	mp.game.graphics.endScaleformMovieMethod();
}

var autopilotStart = !1,
    autopilotPoint = null,
    autopilotInterval = null;
const autoPilotSpeed = 50;

mp.keys.bindEx(0x58, false, function () { // X key
    if (mp.bindBlocker()) return;
    const a = player.vehicle;
    if (!a) return
    if(player.vehicle.getPedInSeat(-1) !== player.handle) return;
    if (autopilotStart)
    {
        const a = player.vehicle;
        return a && (player.clearTasks(), player.taskVehicleTempAction(a.handle, 27, 1e4)), autopilotPoint = null, autopilotStart = !1, mp.game.invoke("0xA7E4E2D361C2627F"), (autopilotInterval && (clearInterval(autopilotInterval), autopilotInterval = null))
    }
    if (null == a) return;

    var engine = a.getIsEngineRunning();
    if (!a.getVariable("autopilot")) return
    if (engine == false) return rpc.callBrowser(browserMenu, "nError", `Автопілот: Двигун не заведений!`)

    let b = mp.game.invoke("0x1DD1F58F493F1DA5"),
        c = mp.game.invoke("0x186E5D252FA50E7D"),
        d = mp.game.invoke("0x1BEDE233E6CD2A1F", c),
        e = mp.game.invoke("0x14F96AA50D6FBEA7", c);

    for (let a = d; 0 != mp.game.invoke("0xA6DB27D19ECBB7DA", a); a = e)
        if (4 == mp.game.invoke("0xBE9B0959FFD0779B", a) && !!b)
        {
            autopilotPoint = mp.game.ui.getBlipInfoIdCoord(a);
            break
        }
        let startDate
        return null == autopilotPoint ? void rpc.callBrowser(browserMenu, "nInfo", `Автопілот: Для початку шляху необхідно вказати точку на мапі.`) : void(!autopilotStart && (rpc.callBrowser(browserMenu, "nSuccess", `Автопілот: Точка вказана, маршрут побудовано, починаємо рух.`), mp.events.call("enableSound", "NaviAdd.mp3", 1.0), mp.events.callRemote("executeBattlePassDailyTask", JSON.stringify({ progress: 1, task: 40 })) , player.taskVehicleDriveToCoord(a.handle, autopilotPoint.x, autopilotPoint.y, autopilotPoint.z, autoPilotSpeed, 1, 1, 2883621, 30, 1), autopilotStart = !0, (autopilotInterval && (clearInterval(autopilotInterval), autopilotInterval = null)), startDate = Date.now(), autopilotInterval = setInterval(() => {
            chatDebug(`autopilotInterval`)
            if (!autopilotStart) {
                if (autopilotInterval) {
                    clearInterval(autopilotInterval)
                    autopilotInterval = null
                }
                return
            };
            const a = player.vehicle;
            const vehEngine = a ? a.getIsEngineRunning() : false
            if (!player.vehicle || vehEngine == false || Date.now() - startDate >= 1000 * 60 * 5) return (player.clearTasks(), a && player.taskVehicleTempAction(a.handle, 27, 1e4), autopilotPoint = null, autopilotStart = !1, (autopilotInterval && (clearInterval(autopilotInterval), autopilotInterval = null)), mp.game.invoke("0xA7E4E2D361C2627F"), void rpc.callBrowser(browserMenu, "nWarning", `Автопілот: Щось пішло не так, автопілот вимкнено!`))
            return a ? 30 > mp.game.system.vdist(player.position.x, player.position.y, player.position.z, autopilotPoint.x, autopilotPoint.y, autopilotPoint.z) ? (player.clearTasks(), a && player.taskVehicleTempAction(a.handle, 27, 1e4), autopilotPoint = null, autopilotStart = !1, (autopilotInterval && (clearInterval(autopilotInterval), autopilotInterval = null)), void rpc.callBrowser(browserMenu, "nSuccess", `Автопілот: Місце призначення успішно досягнуто!`)) : void 0 : (a && (player.clearTasks(), player.taskVehicleTempAction(a.handle, 27, 1e4)), autopilotStart = !1, mp.game.invoke("0xA7E4E2D361C2627F"), void clearInterval(autopilotInterval))
        }, 300)))
}, "Автопілот", 1);

let warningMenuActive = false

setInterval(() => {
    if (mp.game.invoke('0xE18B138FABC53103') && !warningMenuActive) {
        mp.events.callRemote("savePlayerQuit")
        warningMenuActive = true
    }
    else if (!mp.game.invoke('0xE18B138FABC53103') && warningMenuActive) {
        warningMenuActive = false
    }
}, 1000)

const radiusVariables = {
    "player": ["soundObject", "SyncedAnimation", "godmode", "hideAttachments", "isInGreenZone", "attachedObject", "hideAttachment", "Armour", "hasMask", "invisible", "isCrouched"],
    "vehicle": ["soundObject", "fuel", "mileage", "maxFuel", "seatbelt", "sirenSound", "hood", "boot", "dirtLevel", "text", "color", "attachedObjects", "anchor", "tyreSmokeColor", "freeze", "heading", "modKit", "godmode", "livery", "turbo", "headlightsColor", "disableDriving", "numberPlate", "handling", "owner", "accelerationLimit", "limitedSpeed", "locked", "maxSpeed", "electric", "familyData", "chip", "leftSignal", "rightSignal"],
    "dummy": ["soundObject"],
    "object": ["soundObject", "INTENSION", "state"]
}

mp.events.add("updateRadiusVariable", (entity, name, value) => {
	if (entity) {
        entity[`variable_${name}`] = value
        mp.events.call("setRadiusVariable", entity, name, value)
    }
})

mp.events.add("measureVehiclesPoolDesync", (serverVehiclesPoolLength) => {
    mp.events.callRemote("receiveVehiclesPoolDesync", serverVehiclesPoolLength - mp.vehicles.length);
});

let entitiesQueue = []

function getRadiusVariables() {
    if (entitiesQueue.length) {
        mp.events.callRemote("getRadiusVariables", JSON.stringify(entitiesQueue))
        entitiesQueue = []
    }
}

let interval = setInterval(getRadiusVariables, 20)

mp.events.add("entityStreamIn", (entity) => {
    if (entity) {
        if (radiusVariables[entity.type]) {
            let arrEntity = entitiesQueue.find((item => item.id === entity.remoteId && item.type === entity.type))
            if (!arrEntity) {
                entitiesQueue.push({ id: entity.remoteId, type: entity.type })
                if (entitiesQueue.length < 20) {
                    clearInterval(interval)
                    interval = setInterval(getRadiusVariables, 20)
                }
            }
        }
    }
})

mp.events.add("entityStreamOut", (entity) => {
    if (entity) {
        let arrEntity = entitiesQueue.find((item => item.id === entity.remoteId && item.type === entity.type))
        if (arrEntity) entitiesQueue.splice(entitiesQueue.indexOf(arrEntity), 1)
    }
})

mp.events.add("setRadiusVariables", (data) => {
    data.forEach((item) => {
        if (!item.variables) return

        let entity = item.type == "dummy" ? mp.dummies.atRemoteId(item.id) : mp[`${item.type}s`].atRemoteId(item.id)
        if (!isEntityExists(entity)) return
        if (!radiusVariables[entity.type]) return

        radiusVariables[entity.type].forEach((name) => {
            entity[`variable_${name}`] = item.variables[name]
        })
        
        if (entity.type === "player") {
            setTimeout(() => {
                if (!isEntityExists(entity)) return
                mp.events.call("entityStreamInCustom", entity)
            }, 1000)
        }
        else {
            mp.events.call("entityStreamInCustom", entity)
        }
    })
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.electricMinigameActive = false

mp.events.add("electric.startMinigame", (start, amount, vehicle = false) => {
    if (start) mp.electricMinigameActive = true
    else mp.electricMinigameActive = false
    browserMenu.call(`minigameElectrician`, `minigameElectrician`, mp.electricMinigameActive, amount, vehicle)
})

mp.events.add("electric.forceClose", () => {
    if (mp.electricMinigameActive) {
        mp.events.callRemote('electric.stopMinigame', false)
        mp.events.call("electric.startMinigame", false)
    }
})



}; a; }
{let a = function scriptEntryPoint(mp) {
const localPlayer = mp.players.local;

class Firefighter {
    constructor() {
        this.storageParams = {
            position: new mp.Vector3(-372.300, 6126.286, 31.441),
            blip: undefined,
            marker: undefined,
            subcolshape: undefined,
            colshape: undefined
        }

        this.fires = []
        this.models = [mp.game.joaat("firetruk2"), mp.game.joaat("firescania")]
    }

    getFireByUniqName(uniqName) {
        let result = undefined
        this.fires.forEach((entity) => {
            if (entity.uniqName == uniqName) {
                result = entity
            }
        })
        return result
    }

    getNearFire(pos) {
        let nearFire = null
        let minDist = 5
        for (let i = 0; i < firefighter.fires.length; i++) {
            let fire = firefighter.fires[i]
            let distance = vdist(fire.pos, pos)
            let playerDist = vdist(fire.pos, mp.players.local.position)
            if (distance < minDist && playerDist < 25) {
                nearFire = fire
                minDist = distance
            }
        }

        return nearFire
    }

    raycast() {
        if (localPlayer.vehicle && firefighter.models.includes(localPlayer.vehicle.model)) {
            if (mp.keys.isDown(2)) {
                if (!firefighter.isDownAt) firefighter.isDownAt = Date.now()
                if (Date.now() - firefighter.isDownAt > 1000) {
                    firefighter.isDownAt = Date.now()
                    mp.events.callRemote("firefighterUpdateVehicle")
                }


                const distance = 50.0;
                const position = new mp.Vector3(localPlayer.vehicle.position.x, localPlayer.vehicle.position.y, localPlayer.vehicle.position.z);
                const direction = localPlayer.raycasting.camera.getDirection();
                const farAway = new mp.Vector3((direction.x * distance) + (position.x), (direction.y * distance) + (position.y), (direction.z * distance) + (position.z));
                const raycast = mp.raycasting.testPointToPoint(position, farAway, mp.players.local, [1, 16]);

                if (raycast) {
                    mp.game.graphics.drawMarker(28,
                        raycast.position.x, raycast.position.y, raycast.position.z + 2,
                        0, 0, 0,
                        0, 0, 0,
                        0.5, 0.5, 0.5,
                        255, 0, 0, 100,
                        false, false, 2,
                        false, null, null, false
                    )


                    let nearFire = firefighter.getNearFire(raycast.position)

                    if (nearFire) {
                        if (!firefighter.currentFire) firefighter.currentFire = nearFire
                        else if (firefighter.currentFire && nearFire != firefighter.currentFire) {
                            delete firefighter.currentFire.startedAt
                            delete firefighter.currentFire
                        }
                    }
                    else if (firefighter.currentFire) {
                        delete firefighter.currentFire.startedAt
                        delete firefighter.currentFire
                    }

                    if (firefighter.currentFire) {
                        if (!firefighter.currentFire.startedAt) firefighter.currentFire.startedAt = Date.now()
                        if (Date.now() - firefighter.currentFire.startedAt > 1000 * firefighter.currentFire.time) {
                            mp.game.graphics.stopParticleFxLooped(firefighter.currentFire.id, false)
                            mp.events.call("enableSound", "fire_win.mp3", 0.4)
                            firefighter.fires.splice(firefighter.fires.indexOf(firefighter.currentFire), 1)
                            delete firefighter.currentFire
                            if (firefighter.fires.length <= 0) {
                                mp.events.callRemote("finishFireOrder")
                            }
                        }
                    }
                }



            }
            else {
                if (firefighter.currentFire) {
                    delete firefighter.currentFire.startedAt
                    delete firefighter.currentFire
                }
                if (firefighter.isDownAt) delete firefighter.isDownAt
            }

            if (firefighter.currentFire) {
                var screen = mp.game.graphics.world3dToScreen2d(firefighter.currentFire.pos.x, firefighter.currentFire.pos.y, firefighter.currentFire.pos.z + 2)
                if (screen) {
                    const width = 0.07
                    const height = 0.004
                    let time = Date.now() - firefighter.currentFire.startedAt
                    let fullTime = 1000 * firefighter.currentFire.time
                    let precent = time / (fullTime / 100)
                    const health = parseInt(precent) / 100
                    if (health > 100) health = 100

                    mp.game.graphics.drawRect(screen.x, screen.y + 0.042, width, height, 0, 0, 0, 255) // фон
                    mp.game.graphics.drawRect(screen.x - width / 2 * (1 - health), screen.y + 0.042, width * health, height, 227, 16, 16, 200) // заливка
                }
            }
        }
    }

}

const firefighter = new Firefighter

mp.events.add("render", () => {
    if (firefighter.disabled) mp.game.controls.disableControlAction(0, 68, true)
    mp.game.controls.disableControlAction(0, 37, true) // Disable INPUT_SELECT_WEAPON
})

mp.events.add("setFirefighterWaterDisabled", (disabled) => {
    if (disabled) firefighter.disabled = true
    else delete firefighter.disabled
})

mp.events.add("setRouteFirefighterStorage", (enabled) => {
    if (firefighter.storageParams.blip) {
        firefighter.storageParams.blip.setRoute(enabled)
    }
})
mp.events.add('createFirefighterStorage', (type) => {
    if (type) {
        firefighter.storageParams.marker = mp.markers.new(1, new mp.Vector3(firefighter.storageParams.position.x, firefighter.storageParams.position.y, firefighter.storageParams.position.z - 1), 6, {
            visible: true,
            color: [255, 0, 0, 100],
            rotation: 180
        });
        firefighter.storageParams.blip = mp.blips.new(569, firefighter.storageParams.position, {
            alpha: 255,
            name: "Склад",
            scale: 1,
            color: 1
        });
        /*firefighter.storageParams.subcolshape = mp.colshapes.newSphere(firefighter.storageParams.position.x, firefighter.storageParams.position.y, firefighter.storageParams.position.z, 15)
        firefighter.storageParams.subcolshape.catchEvent = "enterPostalSubcolshape" 
        firefighter.storageParams.subcolshape.data = { enterColshape: true }*/

        firefighter.storageParams.colshape = mp.colshapes.newSphere(firefighter.storageParams.position.x, firefighter.storageParams.position.y, firefighter.storageParams.position.z, 4)
        firefighter.storageParams.colshape.catchEvent = "firefighterLoadVehicle"
    } else {
        if (firefighter.storageParams.blip) {
            firefighter.storageParams.blip.destroy()
            firefighter.storageParams.blip = undefined
        }
        if (firefighter.storageParams.marker) {
            firefighter.storageParams.marker.destroy()
            firefighter.storageParams.marker = undefined
        }
        /*if (firefighter.storageParams.subcolshape) {
            firefighter.storageParams.subcolshape.destroy()
            firefighter.storageParams.subcolshape = undefined
        }*/
        if (firefighter.storageParams.colshape) {
            firefighter.storageParams.colshape.destroy()
            firefighter.storageParams.colshape = undefined
        }
    }
});

mp.events.add("createDynamicFireByParams", async (params) => {
    if (firefighter.getFireByUniqName(params.uniqName))
        mp.events.call("removeDynamicFireByUniqName", params.uniqName)

    await mp.game.streaming.loadNamedPtfxAsset("scr_trevor3")
    mp.game.graphics.setPtfxAssetNextCall("scr_trevor3")
    const particle = mp.game.graphics.startParticleFxLoopedAtCoord("scr_trev3_trailer_plume", params.position.x, params.position.y, params.position.z - 0.5, 0.0, 0.0, 0.0, 1.0, false, false, false, false)
    if (params.scale)
        mp.game.graphics.setParticleFxLoopedScale(particle, params.scale)

    firefighter.fires.push({
        uniqName: params.uniqName,
        id: particle,
        scale: params.scale,
        time: params.time,
        value: 100,
        pos: params.position
    })
})

mp.events.add("removeDynamicFireByUniqName", (uniqName) => {
    let fire = firefighter.getFireByUniqName(uniqName)
    if (fire) {
        mp.game.graphics.stopParticleFxLooped(fire.id, false)
        firefighter.fires.splice(firefighter.fires.indexOf(fire), 1)
    }
})

mp.events.add("startFirefighterWork", (start) => {
    if (start) {
        mp.events.add("render", firefighter.raycast)
    }
    else {
        mp.events.remove("render", firefighter.raycast)
    }
})



}; a; }
{let a = function scriptEntryPoint(mp) {
let prevPositionVehicle = null 
let totalDistanceVehicle = 0
let prevPositionWalk = null 
let totalDistanceWalk = 0

setInterval(() => {
        if (mp.players.local.vehicle) {
            totalDistanceWalk = 0
            prevPositionWalk = null
            if (!prevPositionVehicle) prevPositionVehicle = mp.players.local.vehicle.position
            let dist = vdist(mp.players.local.vehicle.position, prevPositionVehicle)
            if(dist > 2 && dist < 70) {
                totalDistanceVehicle += dist 
                prevPositionVehicle = null 
                if (totalDistanceVehicle > 1000) {
                    totalDistanceVehicle = 0
                    if (mp.testDriveActive) {
                        mp.events.callRemote("executeDailyTask", JSON.stringify({ progress: 1, task: 46 }))
                    }
                    else {
                        if (mp.game.vehicle.isThisModelACar(mp.players.local.vehicle.model) || mp.game.vehicle.isThisModelABike(mp.players.local.vehicle.model)) {
                            mp.events.callRemote("executeQuestTask", JSON.stringify({ task: 2, progress: 1 }))
                            mp.events.callRemote("executeQuestTask", JSON.stringify({ progress: 1, task: 24 })) 
                            mp.events.callRemote("executeBattlePassDailyTask", JSON.stringify({ progress: 1, task: 35 })) 
                        }
                        
                        if (mp.game.vehicle.isThisModelABoat(mp.players.local.vehicle.model)) {
                            mp.events.callRemote("executeDailyTask", JSON.stringify({ progress: 1, task: 36 }))
                            mp.events.callRemote("executeQuestTask", JSON.stringify({ task: 105, progress: 1 }))
                            mp.events.callRemote("executeBattlePassDailyTask", JSON.stringify({ progress: 1, task: 60 })) 
                        } else if (mp.game.vehicle.isThisModelABicycle(mp.players.local.vehicle.model)) {
                            mp.events.callRemote("executeDailyTask", JSON.stringify({ progress: 1, task: 85 }))
                            mp.events.callRemote("executeBattlePassDailyTask", JSON.stringify({ progress: 1, task: 167 })) 
                        } else if (mp.game.vehicle.isThisModelABike(mp.players.local.vehicle.model)) {
                            mp.events.callRemote("executeDailyTask", JSON.stringify({ progress: 1, task: 37 }))
                        } 
                    }

                    mp.events.callRemote("addMileage", 1)
                }
            } else if (dist > 70) prevPositionVehicle = null
        } else {
            totalDistanceVehicle = 0
            prevPositionVehicle = null
            
            const player = mp.players.local
            const pos = player.position
            
            let taskId = null
            let isQuest = false
            
            if (player.variable_attachedObject && player.variable_attachedObject === "quant_flag10") {
              taskId = 101
              isQuest = true
            } else if (player.isSwimming()) {
              taskId = 111
            } else {
              taskId = 107
            }
            
            if (!prevPositionWalk) prevPositionWalk = pos
            
            const dist = vdist(pos, prevPositionWalk)
            if (dist > 2 && dist < 7) {
              totalDistanceWalk += dist
              prevPositionWalk = null
            
              if (totalDistanceWalk > 50) {
                totalDistanceWalk = 0
            
                const payload = JSON.stringify({ task: taskId, progress: 50 })
                if (isQuest) {
                  mp.events.callRemote("executeQuestTask", payload)
                } else {
                  mp.events.callRemote("executeBattlePassDailyTask", payload)
                }
              }
            } else if (dist > 7) prevPositionWalk = null
        }
}, 200)
}; a; }
{let a = function scriptEntryPoint(mp) {
let medicCallBlip = null;
mp.events.add('medic.acceptCall', (data) => {
    medicCallBlip = mp.blips.new(1, data.pos, 
    { 
        alpha: 255, 
        scale: 1.0, 
        color: 81, 
        name: "Виклик", 
        shortRange: false 
    });
    medicCallBlip.setRoute(true);
});

mp.events.add('medic.cancelCall', () => {
    if (mp.blips.exists(medicCallBlip)) {
        medicCallBlip.setRoute(false);
        medicCallBlip.destroy(); 
    }
}); 


}; a; }
{let a = function scriptEntryPoint(mp) {
let policeCallBlip = null;
mp.events.add('police.acceptCall', (data) => {
    policeCallBlip = mp.blips.new(1, data.pos, 
    { 
        alpha: 255, 
        scale: 1.0, 
        color: 81, 
        name: "Виклик", 
        shortRange: false 
    });
    policeCallBlip.setRoute(true);
});

mp.events.add('police.cancelCall', () => {
    if (mp.blips.exists(policeCallBlip)) {
        policeCallBlip.setRoute(false);
        policeCallBlip.destroy(); 
    }
}); 


}; a; }
{let a = function scriptEntryPoint(mp) {
let criminalPurchaseComponents = {
    blip: null,
    marker: null, 
    colshape: null
}
mp.events.add("setCriminalPurchaseComponents", (params) => {
    if (mp.blips.exists(criminalPurchaseComponents.blip)) {
        criminalPurchaseComponents.blip.destroy()
        criminalPurchaseComponents.blip = null
    }
    if (mp.colshapes.exists(criminalPurchaseComponents.colshape)) {
        criminalPurchaseComponents.colshape.destroy()
        criminalPurchaseComponents.colshape = null
    }
    if (mp.markers.exists(criminalPurchaseComponents.marker)) {
        criminalPurchaseComponents.marker.destroy()
        criminalPurchaseComponents.marker = null
    }
    if (!params) return
    criminalPurchaseComponents.blip = mp.blips.new(556, params, 
    { 
        alpha: 255, 
        scale: 1.0, 
        color: 7, 
        name: "Закупiвля комплектуючих", 
        shortRange: true 
    });
    criminalPurchaseComponents.colshape = mp.colshapes.newSphere(params.x, params.y, params.z, 2)
    criminalPurchaseComponents.colshape.catchEvent = "criminalPurchaseComponents"
    criminalPurchaseComponents.marker = mp.markers.new(1, new mp.Vector3(params.x, params.y, params.z - 1), 1, {
        color: [255, 165, 0, 0],
        visible: true,
        dimension: 0
    })
    mp.labels.new("Закупiвля комплектуючих", new mp.Vector3(121.05, -3082.12, 6.01),
    {
    los: true,
    font: 1,
    drawDistance: 30,
    });
})


let criminalReceivingFinishedComponents = null
mp.events.add("setCriminalReceivingFinishedComponents", (params) => { 
    if (mp.colshapes.exists(criminalReceivingFinishedComponents)) {
        criminalReceivingFinishedComponents.destroy()
        criminalReceivingFinishedComponents = null
    }
    if (!params) return 
    criminalReceivingFinishedComponents = mp.colshapes.newSphere(params.x, params.y, params.z, 2)
    criminalReceivingFinishedComponents.catchEvent = "criminalReceivingFinishedComponents" 
}) 

mp.events.add("criminalStopMinigame", (win) => { 
    mp.minigamePressingActive = false 
    mp.events.callRemote("criminalRecyclingFinishedComponents", win)
});

mp.events.add("criminalStopMinigameNarko", (win) => { 
    mp.minigamePressingActive = false 
    mp.events.callRemote("playerOnWinDrugsMinigame", win)
});

mp.events.add("stopMinigameActivity", (win) => { 
    mp.minigamePressingActive = false 
    mp.events.callRemote("stopMinigameActivity", win)
});

mp.events.add("stopMinigameFAidKit", (win) => { 
    mp.minigamePressingActive = false 
    mp.events.callRemote("stopMinigameFAidKit", win)
});

mp.events.add("item.weapon.recycle.win", (win) => { 
    mp.minigamePressingActive = false 
    mp.events.callRemote("item.weapon.recycle.win", win)
});

mp.events.add('criminalMinigameDrugs.setactive', (active) => {
    mp.minigameDrugsActive = active 
});

mp.events.add("playerOnWinDrugsMinigame", () => { 
    mp.minigameDrugsActive = false 
    mp.events.callRemote("playerOnWinDrugsMinigame", 'drugs')
}) 

mp.events.add("criminalStartMinigame", (type, clicks) => { 
    if (type == 'pressing') {
        mp.minigamePressingActive = true 
        browserMenu.call(`minigamePressing`, `setActive`, 'criminal');
    }
    else if (type == 'narko') {
        mp.minigamePressingActive = true 
        browserMenu.call(`minigamePressing`, `setActive`, 'narko');
    }
    else if (type == 'trashActivity') {
        mp.minigamePressingActive = true 
        browserMenu.call(`minigamePressing`, `setActive`, 'trashActivity');
    }
    else if (type == 'fAidKit') {
        mp.minigamePressingActive = true 
        browserMenu.call(`minigamePressing`, `setActive`, 'fAidKit');
    }
    else if (type == 'drugs') {
        mp.minigameDrugsActive = true 
        browserMenu.call(`minigameDrugs`, `start`);
    }
    else if (type == 'hunting') {
        mp.minigamePressingActive = true 
        browserMenu.call(`minigamePressing`, `setActive`, 'hunting');
    }
    else if (type == 'recycle') {
        mp.minigamePressingActive = true 
        browserMenu.call(`minigamePressing`, `setActive`, 'recycle', clicks);
    }
    else browserMenu.call(`minigameMaterials`, `start`, type);
}) 

mp.events.add('criminalMinigame.setactive', (active) => {
    mp.minigameMaterials = active 
});

mp.events.add('criminalMinigame.forceClose', (active) => {
    if (mp.minigameMaterials) browserMenu.call(`minigameMaterials`, `terminate`, 'knock');
    if (mp.minigameDrugsActive) browserMenu.call(`minigameDrugs`, `terminate`);
});


let criminalRecyclingComponents = {
    blip: null,
    marker: null, 
    colshape: null
}
mp.events.add("setCriminalRecyclingComponents", (params) => {
    if (mp.blips.exists(criminalRecyclingComponents.blip)) {
        criminalRecyclingComponents.blip.destroy()
        criminalRecyclingComponents.blip = null
    }
    if (mp.colshapes.exists(criminalRecyclingComponents.colshape)) {
        criminalRecyclingComponents.colshape.destroy()
        criminalRecyclingComponents.colshape = null
    }
    if (mp.markers.exists(criminalRecyclingComponents.marker)) {
        criminalRecyclingComponents.marker.destroy()
        criminalRecyclingComponents.marker = null
    }
    if (!params) return
    criminalRecyclingComponents.blip = mp.blips.new(556, params, 
    { 
        alpha: 255, 
        scale: 1.0, 
        color: 7, 
        name: "Переробка комплектуючих", 
        shortRange: true 
    });
    criminalRecyclingComponents.colshape = mp.colshapes.newSphere(params.x, params.y, params.z, 2)
    criminalRecyclingComponents.colshape.catchEvent = "criminalRecyclingComponents"
    criminalRecyclingComponents.marker = mp.markers.new(1, new mp.Vector3(params.x, params.y, params.z - 1), 1, {
        color: [255, 165, 0, 0],
        visible: true,
        dimension: 0
    })
    mp.labels.new("Переробка комплектуючих", new mp.Vector3(868.696, -1347.990, 26.309),
    {
    los: true,
    font: 1,
    drawDistance: 30,
    });
    mp.labels.new("Виготовлення наркотику", new mp.Vector3(1090.413, -3194.850, -38.993),
    {
    los: true,
    font: 1,
    drawDistance: 30,
    });
    mp.labels.new("Виготовлення матерiалiв", new mp.Vector3(2431.59, 4971.17, 42.35),
    {
    los: true,
    font: 1,
    drawDistance: 30,
    });
}) 




}; a; }
{let a = function scriptEntryPoint(mp) {
mp.isFactionMenuActive = false

mp.events.add("setFactionMenu", (params) => { 
    if (!params && !mp.isFactionMenuActive) return
    mp.isFactionMenuActive = !!params
    if (params) {
        browserMenu.call(`tablet`, `set`, params)
    }
    else {
        browserMenu.call(`tablet`, `set`, params)
    }
})

mp.events.add("setFactionMenuData", (params) => { 
    browserMenu.call(`tablet`, `_initFactionInfo`, params)
})

mp.events.addProc('factionMenu.callRemoteProc', async (name, values) => {
    const response = await mp.events.callRemoteProc(name, values)
    if (response && response.list && response.list[0] && response.list[0].pos) {
        response.list.forEach((value) => {
            if (value.pos) value.dist = `${parseInt(calcDist(mp.players.local.position, value.pos))} м.`
        })
    }
    return JSON.stringify(response)
});

mp.events.add("setFactionMenuActive", (params) => { 
    if (!params && !mp.isFactionMenuActive) return
    mp.isFactionMenuActive = !!params
})

mp.events.add("updateFactionMenuData", () => {
    if (mp.isFactionMenuActive) {
        mp.events.callRemote("updateFactionMenuData")
    }
}) 

mp.events.add("updateFactionMenuList", (name) => {
    if (mp.isFactionMenuActive) {
        browserMenu.call(`tablet`, `updateList`, name)
    }
}) 

mp.events.add("updateAdsParams", () => {
    browserMenu.call(`tablet`, `getAdsParams`)
})

mp.events.add("closeCurrentAd", () => {
    // browserMenu.call(`factionMenuAPI`, `closeCurrentAd`)
})

mp.events.add("updateFactionQuestParams", () => {
    browserMenu.call(`tablet`, `getQuestsParams`)
})

mp.events.add("updateFactionCaptsParams", () => {
    if (mp.isFactionMenuActive) browserMenu.call(`tablet`, `getCaptsParams`)
})

mp.events.add("handleClosePlanAttackModalLocal", () => {
    if (mp.isFactionMenuActive) browserMenu.call(`handleClosePlanAttackModalLocal`)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
const storageParams = {
	marker: undefined,
	blip: undefined,
	colshape: undefined,
	subcolshape: undefined
}
mp.events.add("createProductDistributorStorage", (pos) => {
	if (storageParams.marker) {
		storageParams.marker.destroy()
		storageParams.marker = undefined
	}
	if (storageParams.blip) {
		storageParams.blip.destroy()
		storageParams.blip = undefined
	}
	if (storageParams.colshape) {
		storageParams.colshape.destroy()
		storageParams.colshape = undefined
	}
	if (storageParams.subcolshape) {
		storageParams.subcolshape.destroy()
		storageParams.subcolshape = undefined
	}
	if (!pos) return
	storageParams.marker = mp.markers.new(1, new mp.Vector3(pos.x, pos.y, pos.z - 1), 4, {
		visible: true,
		color: [246, 60, 161, 100],
		rotation: 180
	});
	storageParams.blip = mp.blips.new(478, pos, {
		alpha: 255,
		name: "Склад продуктiв",
		scale: 1,
		color: 48
	});
	storageParams.subcolshape = mp.colshapes.newSphere(pos.x, pos.y, pos.z, 100)
	storageParams.subcolshape.catchEvent = "enterProductDistributorSubcolshape" 
	storageParams.subcolshape.data = { enterColshape: true }

	storageParams.colshape = mp.colshapes.newSphere(pos.x, pos.y, pos.z, 4)
	storageParams.colshape.catchEvent = "productDistributorLoadVehicle" 
	storageParams.subcolshape.data = { enterColshape: true }
})

// mp.events.add("playerExitVehicle", (vehicle) => { 
// 	try {
// 		if (mp.players.local.colshape && mp.players.local.colshape.data && mp.players.local.colshape.data.postalCloseToHouse != undefined) { 
// 			mp.events.callRemote("postalExitVehicleCloseToHouse", mp.players.local.colshape.data.postalCloseToHouse)
// 		}
// 	} catch (err) {
// 		mp.events.call("client::getMessage", `Error ${err}`)
// 	}
// })
}; a; }
{let a = function scriptEntryPoint(mp) {
class Trucker {
    constructor () {
        this.trailerBaseCheckpoint = undefined
        this.trailerBaseMarker = undefined
        this.deliveryPlaceCheckpoint = undefined

        this.trailerBlip = undefined
    }
}

const trucker = new Trucker 


mp.events.add("client::truckerCreatePathToBase", (pos) => {
    mp.events.call("createNavigationToMarker", pos, "Получить груз")
    if (mp.checkpoints.exists(trucker.trailerBaseCheckpoint)) {
        trucker.trailerBaseCheckpoint.destroy()
        trucker.trailerBaseCheckpoint = undefined
    }
    trucker.trailerBaseCheckpoint = mp.checkpoints.new(4, {x: pos.x, y: pos.y, z: pos.z - 1}, 7, {
        color: [255, 165, 0, 100],
        visible: true,
        dimension: 0
    });
}) 
mp.events.add("client::truckerDeletePathToBase", () => {
    mp.events.call("resetNavigationMarker")
    if (mp.checkpoints.exists(trucker.trailerBaseCheckpoint)) {
        trucker.trailerBaseCheckpoint.destroy()
        trucker.trailerBaseCheckpoint = undefined
    }
})

mp.events.add("detachFromTrailer", () => {
    mp.players.local.vehicle.detachFromTrailer()
})


mp.events.add("client::setTrailerBlip", (pos, destroy = false) => {
    if (mp.blips.exists(trucker.trailerBlip)) {
        trucker.trailerBlip.destroy()
        trucker.trailerBlip = undefined
    }
    if (destroy) return
    trucker.trailerBlip = mp.blips.new(479, pos, {
        color: 81,
        name: "Трейлер",
        shortRange: false,
        scale: 1,
    });
    trucker.trailerBlip.setRoute(true);
	trucker.trailerBlip.setRouteColour(47);
})

mp.events.add("client::truckerCreateDeliveryPlace", (pos) => {
    mp.events.call("resetNavigationMarker")
    if (mp.blips.exists(trucker.trailerBlip)) {
        trucker.trailerBlip.destroy()
        trucker.trailerBlip = undefined
    }
    mp.events.call("createNavigationToMarker", pos, "Сдать груз")
    if (mp.checkpoints.exists(trucker.deliveryPlaceCheckpoint)) {
        trucker.deliveryPlaceCheckpoint.destroy()
        trucker.deliveryPlaceCheckpoint = undefined
    }
    trucker.deliveryPlaceCheckpoint = mp.checkpoints.new(4, {x: pos.x, y: pos.y, z: pos.z - 1}, 7, {
        color: [255, 165, 0, 100],
        visible: true,
        dimension: 0
    });
})
mp.events.add("client::truckerDeleteDeliveryPlace", () => {
    mp.events.call("resetNavigationMarker")
    if (mp.checkpoints.exists(trucker.deliveryPlaceCheckpoint)) {
        trucker.deliveryPlaceCheckpoint.destroy()
        trucker.deliveryPlaceCheckpoint = undefined
    }
})




mp.events.add("playerEnterCheckpoint", (checkpoint) => {
    if (trucker.trailerBaseCheckpoint == checkpoint) mp.events.call("promptSecondary.show", "Натисни <span>E</span> для завантаження фури")

    if (trucker.deliveryPlaceCheckpoint && trucker.deliveryPlaceCheckpoint == checkpoint) mp.events.callRemote("server::successfulDeliveryTrailer")
})

mp.events.add("playerExitCheckpoint", (checkpoint) => {
    if (trucker.trailerBaseCheckpoint == checkpoint) mp.events.call("promptSecondary.hide")
})


mp.events.add("client::addMarkerUnderVehicle", (pos, vehicle, trailer) => {
    if (mp.markers.exists(trucker.trailerBaseMarker)) {
        trucker.trailerBaseMarker.destroy()
        trucker.trailerBaseMarker = undefined
    }

    trucker.trailerBaseMarker = mp.markers.new(20, {x: pos.x, y: pos.y, z: pos.z + 6}, 6, {
        color: [255, 165, 0, 100],
        visible: true,
        dimension: 0,
        rotation: new mp.Vector3(180, 0, 0)
    })  
}) 

mp.events.add("client::removeMarkerUnderVehicle", () => {
    if (mp.markers.exists(trucker.trailerBaseMarker)) {
        trucker.trailerBaseMarker.destroy()
        trucker.trailerBaseMarker = undefined
    } 
})
}; a; }
{let a = function scriptEntryPoint(mp) {
try {
    mp.socketEnabled = true
 
    global.rpc = require('./rage-rpc.min.js')
    global.stringHelper = require('./gamemode/scripts/helpers/stringHelper')
    global.sleep = async function sleep (duration) {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve(true)
            }, duration)
        })
    }
    global.chatDebug = chatDebug 
    global.browserMenu = null 
    global.setCursor = setCursor
    global.getHash = getHash
    global.getClosestVehicle = getClosestVehicle
    global.getClosestPlayer = getClosestPlayer
    global.setFreeze = setFreeze
    global.debug = debug 
    global.vdist = vdist
    global.calcDist = calcDist
    global.getOccupants = getOccupants
    global.getStreetName = getStreetName
    global.getElectroCar = getElectroCar
    global.getZoneName = (x,y,z) => { 
        let zoneName = mp.game.zone.getNameOfZone(x,y,z); 
        if(zoneNamesShort.includes(zoneName)) {
            let zoneID = zoneNamesShort.indexOf(zoneName);
            return zoneNames[zoneID];
        } else {
            return "San Andreas";
        }
    }
    global.isEntityExists = (entity) => {
        if (!entity) return false;

        if (entity) {
            // if (entity.destroyed) return false;
            if (entity.type) {
                if (entity.type == "textlabel") {
                    if (mp.labels.exists(entity)) return true;
                }
                else if (entity.type == "dummy") {
                    if (mp.dummies.exists(entity)) return true;
                }
                else {
                    if (mp[`${entity.type}s`] && mp[`${entity.type}s`].exists(entity)) return true;
                }
            }
        }
        // chatDebug(`OBJECT NOT EXISTS`)
        // chatDebug(entity)
        return false
    }
    global.waitForHandle = (object) => {
        return new Promise(async (resolve) => {
            for (let a = 0; 0 === object?.handle && a < 15e3; ++a) await mp.game.waitAsync(0);
            resolve();
        });
    }
    global.waitEntity = waitEntity
    let customSync = false

    rpc.on('setVehHealth', (data) => {
        customSync = data
    })

    let eventsToSendViaRageMp = {
        "server::backPositionInShopClothes": true,
        "getRadiusVariables": true,
        "enableVoiceTo": true,
        "disableVoiceTo": true,
        "EventKeyDownE": true,
        "setVoiceEnabled": true,
        "onZombieDie": true
    }

    mp.events.__callRemote__ = mp.events.callRemote

    mp.events.callRemote = (...params) => {
        try {
            if (!customSync) return

            params.splice(1, 0, customSync)
            const eventName = params[0]

            if (eventName in eventsToSendViaRageMp) {
                mp.events.__callRemote__.apply(null, params)
                return
            }

            if (mp.socketEnabled) {
                params = params.map((a) => a && a.hasOwnProperty("type") && a.hasOwnProperty("id") && isEntityExists(a) ? {isRageObject: true, type: a.type, id: a.remoteId} : a)
                browserMenu.call(`socket`, `callRemote`, params)
            }
            else {
                if (params[0] != "log") chatDebug(`Event ${params[0]} sent to server. Arguments: ${JSON.stringify(params)}.`) 
                mp.events.__callRemote__.apply(null, params)
            }
        }
        catch (err) {
            //mp.game.graphics.notify(`err : ${params[0]} ${err}`) 
            chatDebug(`err : ${params[0]} ${err}`) 
        }
    }

    mp.events.__callRemoteUnreliable__ = mp.events.callRemoteUnreliable

    mp.events.callRemoteUnreliable = (...params) => {
        try {    
            if (!customSync) return

            params.splice(1, 0, customSync)

            if (params[0] != "log") chatDebug(`Event ${params[0]} sent to server unreliable. Arguments: ${JSON.stringify(params)}.`) 
            mp.events.__callRemoteUnreliable__.apply(null, params)
        }
        catch (err) {
            //mp.game.graphics.notify(`err : ${params[0]} ${err}`) 
            chatDebug(`err : ${params[0]} ${err}`) 
        }
    }

    if (mp.socketEnabled) {
        mp.events.add("remoteEvent", (params) => {
            try {    
                params = JSON.parse(params)
                if (params[1]) {
                    params[1] = params[1].map((a) => a && a.isRageObject ? mp[`${a.type}s`].atRemoteId(a.id) : a)
                    mp.events.call(params[0], ...params[1])
                }
                else mp.events.call(params[0])
            }
            catch (err) {
                //mp.game.graphics.notify(`err : ${params[0]} ${err}`) 
                chatDebug(`err remoteEvent : ${params[0]} ${params} ${err}`) 
            }
        })
    }

    /*const quantMp = global.mp;
    const f = quantMp.events.callRemote;
    const g = quantMp.events.callRemoteUnreliable;

    Object.defineProperty(quantMp.events, "callRemote", {
        enumerable: !1,
        configurable: !1,
        writable: !1,
        value: f
    }), Object.defineProperty(quantMp.events, "callRemoteUnreliable", {
        enumerable: !1,
        configurable: !1,
        writable: !1,
        value: g
    });
    try {
        Object.defineProperty(global, "mp", {
            enumerable: !1,
            configurable: !0,
            writable: !0,
            value: quantMp
        })
    } catch (a) {
        throw ""
    }*/

    // mp.events.__add__ = mp.events.add
    // mp.events.add = (eventName, eventCallback) => { 
    //     try { 
    //         if (typeof eventName == 'object') {
    //             for (let key in Object.keys(eventName)) { 
    //                 mp.events.add(Object.keys(eventName)[key], eventName[Object.keys(eventName)[key]])
    //             }
    //             return
    //         }
    //         const proxy = new Proxy(eventCallback, {
    //             apply: (target, thisArg, argumentsList) => {
    //                 try { 
    //                     target.apply(thisArg, argumentsList);
    //                     return;
    //                 } 
    //                 catch (err) {
    //                     chatDebug(`Помилка mp.events.add ${eventName}: ${err}`)
    //                 }
    //             }
    //         });
        
    //         mp.events.__add__(eventName, proxy); 
    //     } catch (err) {
    //         chatDebug(`Помилка mp.events.add ${eventName}: ${err}`)
    //     }
    // }

    mp.events.__addDataHandler__ = mp.events.addDataHandler
    mp.events.addDataHandler = (dataName, dataCallback) => {
        try {
            const proxy = new Proxy(dataCallback, {
                apply: (target, thisArg, argumentsList) => {
                    try { 
                        if (!(argumentsList[0] && argumentsList[0].type === "dummy" && (dataName === "position" || dataName === "speed"))) chatDebug(`addDataHandler apply ${dataName}: ${JSON.stringify(argumentsList[1])}`)
                        target.apply(thisArg, argumentsList);
                        return;
                    } 
                    catch (err) {
                        mp.events.call("client::getMessage", `Помилка addDataHandler ${dataName}: ${err}`)
                    }
                }
            });
        
            mp.events.__addDataHandler__(dataName, proxy); 
        } catch (err) {
            mp.events.call("client::getMessage", `Помилка addDataHandler ${dataName}: ${err}`)
        }
    } 
 

    let zoneNamesShort = ["AIRP","ALAMO","ALTA","ARMYB","BANHAMC","BANNING","BEACH","BHAMCA","BRADP","BRADT","BURTON","CALAFB","CANNY","CCREAK","CHAMH","CHIL","CHU","CMSW","CYPRE","DAVIS","DELBE","DELPE","DELSOL","DESRT","DOWNT","DTVINE", "EAST_V","EBURO","ELGORL","ELYSIAN","GALFISH","GOLF","GRAPES","GREATC","HARMO","HAWICK","HORS","HUMLAB","JAIL","KOREAT","LACT","LAGO","LDAM","LEGSQU","LMESA","LOSPUER","MIRR","MORN","MOVIE","MTCHIL","MTGORDO", "MTJOSE","MURRI","NCHU","NOOSE","OCEANA","PALCOV","PALETO","PALFOR","PALHIGH","PALMPOW","PBLUFF","PBOX","PROCOB","RANCHO","RGLEN","RICHM","ROCKF","RTRAK","SANAND","SANCHIA","SANDY","SKID","SLAB","STAD","STRAW", "TATAMO","TERMINA","TEXTI","TONGVAH","TONGVAV","VCANA","VESP","VINE","WINDF","WVINE","ZANCUDO","ZP_ORT","ZQ_UAR"];
    let zoneNames = ["Los Santos International Airport","Alamo Sea","Alta","Fort Zancudo","Banham Canyon Dr","Banning","Vespucci Beach","Banham Canyon","Braddock Pass","Braddock Tunnel","Burton","Calafia Bridge","Raton Canyon","Cassidy Creek","Chamberlain Hills","Vinewood Hills","Chumash","Chiliad Mountain State Wilderness","Cypress Flats","Davis","Del Perro Beach","Del Perro","La Puerta","Grand Senora Desert","Downtown","Downtown Vinewood","East Vinewood","El Burro Heights","El Gordo Lighthouse","Elysian Island","Galilee","GWC and Golfing Society","Grapeseed","Great Chaparral","Harmony","Hawick","Vinewood Racetrack","Humane Labs and Research","Bolingbroke Penitentiary","Little Seoul","Land Act Reservoir","Lago Zancudo","Land Act Dam","Legion Square","La Mesa","La Puerta","Mirror Park","Morningwood","Richards Majestic","Mount Chiliad","Mount Gordo","Mount Josiah","Murrieta Heights","North Chumash","N.O.O.S.E","Pacific Ocean","Paleto Cove","Paleto Bay","Paleto Forest","Palomino Highlands","Palmer-Taylor Power Station","Pacific Bluffs","Pillbox Hill","Procopio Beach","Rancho","Richman Glen","Richman","Rockford Hills","Redwood Lights Track","San Andreas","San Chianski Mountain Range","Sandy Shores","Mission Row","Stab City","Maze Bank Arena","Strawberry","Tataviam Mountains","Terminal","Textile City","Tongva Hills","Tongva Valley","Vespucci Canals","Vespucci","Vinewood","Ron Alternates Wind Farm","West Vinewood","Zancudo River","Port of South Los Santos","Davis Quartz"];

    function setCursor(enable) {
        if (mp.isPhoneActive && enable) return mp.gui.cursor.show(false, enable)
        mp.gui.cursor.show(enable, enable);
    } 
    function chatDebug (message) {
        if (mp.clientStorage && mp.clientStorage.admin && mp.debugEnabled) { // && mp.debugEnabled
            mp.events.call("client::getMessage", `[DEBUG]: ${message.toString()}`, "#11DF8E")
            
        }
        mp.browsers.forEach((browser) => {
            if (browser == browserMenu) {
                browser.call(`log`, message)
            }
        })
    } 
    function getHash(str) {
        var sum = 0;
        for (var i = 0; i < str.length; i++) {
            sum += str.charCodeAt(i);
        }
        return sum;
    } 
    function getClosestVehicle (maxDist = 10, position) {
        let vehicle = undefined; 
        mp.vehicles.forEachInStreamRange((veh) => {
            let distance = vdist(veh.position, position || mp.players.local.position);
            if (distance < maxDist) {
                vehicle = veh;
                maxDist = distance;
            }
        });
        return vehicle;
    }
    function getClosestPlayer (maxDist = 10) {
        let player = undefined; 
        mp.players.forEachInStreamRange((pl) => {
            if (pl == mp.players.local) return
            let distance = vdist(pl.position, mp.players.local.position);
            if (distance < maxDist) {
                player = pl;
                maxDist = distance;
            }
        });
        return player;
    }
    function waitEntity(entity) {
        try {
            return new Promise((resolve, reject) => {
                let time = Date.now()
                let interval = setInterval(() => {
                    if (entity && entity.handle) {
                        clearInterval(interval)
                        resolve(entity)
                    }

                    if (Date.now() - time >= 5000) {
                        clearInterval(interval)
                        resolve(null)
                    }
                }, 10)
            })
        } catch (e) {
            mp.events.callRemote("log", `Error waitEntity: ${e}`)
        }
    }
    
    function setFreeze(enable) {
        mp.events.call("setFreeze", enable);
    }
    

    function debug(text) {
        mp.events.call("pushConsoleMessage", "debug", text);
    }
    

    function vdist(posA, posB) {
        try {
            if (!posA || !posB) return Number.MAX_VALUE;
            return mp.game.system.vdist(posA.x, posA.y, posA.z, posB.x, posB.y, posB.z);
        }
        catch (err) {
            chatDebug(`erR: ${err}`)
        }
    }
    

    function getOccupants(vehId) {
        var veh = mp.vehicles.atRemoteId(vehId);
        if (!mp.vehicles.exists(veh)) return [];
        var occupants = [];
        mp.players.forEach((rec) => {
            if (rec.vehicle && rec.vehicle.remoteId == vehId) occupants.push(rec);
        });
        return occupants;
    } 

    

    function getElectroCar(vehicle) {
        let models = [
            "neon", "raiden", "taycan", "astron", "teslamodels", "rsetrongt21", "terzo", "rimac", "ipace", "humev22", "lanzador", "bmwi4", "bmwi5",
            "bmwix", "avtr", "exp100", "leaf", "davinci", "evija", "battista", "missionr", "vwid4"
        ]
        let electro = false
        for (let key in models) {
            if (vehicle.model == mp.game.joaat(models[key])) return electro = true
        }
        return electro
    } 

    function getStreetName(pos) {
        var getStreet = mp.game.pathfind.getStreetNameAtCoord(pos.x, pos.y, pos.z, 0, 0);
        var streetName = mp.game.ui.getStreetNameFromHashKey(getStreet["streetName"]);
        return streetName;
    }
    function calcDist(v1, v2) {
        return mp.game.system.vdist(
            v1.x,
            v1.y,
            v1.z,
            v2.x,
            v2.y,
            v2.z
        );
    }

    mp.colshapes.__newSphere__ = mp.colshapes.newSphere

    Object.defineProperty(mp.colshapes, 'newSphere', {
        value: (...data) => {
            let colshape = mp.colshapes.__newSphere__(...data)
            if (!isEntityExists(colshape)) colshape = mp.colshapes.__newSphere__(...data)
            if (!isEntityExists(colshape)) mp.events.callRemote("log", `ERROR: colshape ${isEntityExists(colshape)} ${JSON.stringify(data)}`)
            return colshape
        },
        writable: false,
        configurable: false
    });

    mp.markers.__new__ = mp.markers.new

    mp.markers.new = (...data) => {
        let marker = mp.markers.__new__(...data)
        if (!isEntityExists(marker)) marker = mp.markers.__new__(...data)
        if (!isEntityExists(marker)) mp.events.callRemote("log", `ERROR: marker ${isEntityExists(marker)} ${JSON.stringify(data)}`)
        return marker
    }

    mp.game.streaming.loadNamedPtfxAsset = async (fxName) => {
        let result = false

        mp.game.streaming.requestNamedPtfxAsset(fxName)
        for(let i = 0; i < 15; i++)
        {
            if (mp.game.streaming.hasNamedPtfxAssetLoaded(fxName) === true)
            {
                result = true
                break
            }
            await mp.game.waitAsync(100)
        }

        if (!result)
            mp.events.callRemote("log", `ERROR: failed to load fx ${fxName}`)

        return result
    }

    mp.game.streaming.loadAnimDict = async (animDict) => {
        let result = false

        mp.game.streaming.requestAnimDict(animDict)
        for(let i = 0; i < 50; i++)
        {
            if (mp.game.streaming.hasAnimDictLoaded(animDict))
            {
                result = true
                break
            }
            await mp.game.waitAsync(100)
        }

        if (!result)
            mp.events.callRemote("log", `ERROR: failed to load animDict ${animDict}`)

        return result
    }

    mp.game.streaming.loadClipSet = async (animDict) => {
        let result = false

        mp.game.streaming.requestClipSet(animDict)
        for(let i = 0; i < 50; i++)
        {
            if (mp.game.streaming.hasClipSetLoaded(animDict))
            {
                result = true
                break
            }
            await mp.game.waitAsync(100)
        }

        if (!result)
            mp.events.callRemote("log", `ERROR: failed to load ClipSet ${animDict}`)

        return result
    }

    require('./gamemode/scripts/KeyBinds.js');
    
    Math.clamp = function(value, min, max) {
        return Math.max(min, Math.min(max, value));
    }

    String.prototype.escape = function() {
        return this.replace(/[&"'\\]/g, "");
    };

    require('./gamemode/index.js');
    require('./gamemode/scripts/Discord.js');
    require('./gamemode/scripts/ScaleformMessages');
} catch (err) {
    mp.events.callRemote("log", `Errorrss: ${err}`)
}
}; a; }
{let a = function scriptEntryPoint(mp) {
!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports=r():e.rpc=r()}("undefined"!=typeof self?self:this,function(){return function(e){var r={};function n(t){if(r[t])return r[t].exports;var o=r[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)n.d(t,o,function(r){return e[r]}.bind(null,o));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="",n(n.s=1)}([function(e,r,n){"use strict";var t;function o(e,r){const n="client"===s();if(e&&"object"==typeof e&&void 0!==e.id){const o=(r,t,o)=>n?e.type===r&&t.at(e.id)===e:e instanceof o;switch(r){case t.Blip:return o("blip",mp.blips,mp.Blip);case t.Checkpoint:return o("checkpoint",mp.checkpoints,mp.Checkpoint);case t.Colshape:return o("colshape",mp.colshapes,mp.Colshape);case t.Label:return o("textlabel",mp.labels,mp.TextLabel);case t.Marker:return o("marker",mp.markers,mp.Marker);case t.Object:return o("object",mp.objects,mp.Object);case t.Pickup:return o("pickup",mp.pickups,mp.Pickup);case t.Player:return o("player",mp.players,mp.Player);case t.Vehicle:return o("vehicle",mp.vehicles,mp.Vehicle)}}return!1}function c(){const e=46656*Math.random()|0,r=46656*Math.random()|0;return("000"+e.toString(36)).slice(-3)+("000"+r.toString(36)).slice(-3)}function s(){return mp.joaat?"server":mp.game&&mp.game.joaat?"client":mp.trigger?"cef":void 0}function i(e){const r=s();return JSON.stringify(e,(e,n)=>{if("client"===r||"server"===r&&n&&"object"==typeof n){let e;if(o(n,t.Blip)?e=t.Blip:o(n,t.Checkpoint)?e=t.Checkpoint:o(n,t.Colshape)?e=t.Colshape:o(n,t.Marker)?e=t.Marker:o(n,t.Object)?e=t.Object:o(n,t.Pickup)?e=t.Pickup:o(n,t.Player)?e=t.Player:o(n,t.Vehicle)&&(e=t.Vehicle),e)return{__t:e,i:"number"==typeof n.remoteId?n.remoteId:n.id}}return n})}function a(e){const r=s();return JSON.parse(e,(e,n)=>{if(("client"===r||"server"===r)&&n&&"object"==typeof n&&"string"==typeof n.__t&&"number"==typeof n.i&&2===Object.keys(n).length){const e=n.i;let o;switch(n.__t){case t.Blip:o=mp.blips;break;case t.Checkpoint:o=mp.checkpoints;break;case t.Colshape:o=mp.colshapes;break;case t.Label:o=mp.labels;break;case t.Marker:o=mp.markers;break;case t.Object:o=mp.objects;break;case t.Pickup:o=mp.pickups;break;case t.Player:o=mp.players;break;case t.Vehicle:o=mp.vehicles}if(o)return o["client"===r?"atRemoteId":"at"](e)}return n})}function l(e){return new Promise(r=>setTimeout(()=>r(e),0))}function u(e){return new Promise((r,n)=>setTimeout(()=>n(e),0))}function p(e,r){return"number"==typeof r?Promise.race([new Promise((e,n)=>{setTimeout(()=>n("TIMEOUT"),r)}),e]):e}function f(e){try{e.url}catch(e){return!1}return!0}n.d(r,"h",function(){return c}),n.d(r,"a",function(){return s}),n.d(r,"g",function(){return i}),n.d(r,"c",function(){return a}),n.d(r,"e",function(){return l}),n.d(r,"d",function(){return u}),n.d(r,"f",function(){return p}),n.d(r,"b",function(){return f}),function(e){e.Blip="b",e.Checkpoint="cp",e.Colshape="c",e.Label="l",e.Marker="m",e.Object="o",e.Pickup="p",e.Player="pl",e.Vehicle="v"}(t||(t={}))},function(e,r,n){"use strict";n.r(r),function(e){n.d(r,"register",function(){return d}),n.d(r,"unregister",function(){return h}),n.d(r,"call",function(){return w}),n.d(r,"callServer",function(){return v}),n.d(r,"callClient",function(){return y}),n.d(r,"callBrowsers",function(){return B}),n.d(r,"callBrowser",function(){return x}),n.d(r,"on",function(){return j}),n.d(r,"off",function(){return O}),n.d(r,"trigger",function(){return C}),n.d(r,"triggerClient",function(){return S}),n.d(r,"triggerServer",function(){return E}),n.d(r,"triggerBrowsers",function(){return L}),n.d(r,"triggerBrowser",function(){return M});var t=n(0);const o=t.a();if(!o)throw"Unknown RAGE environment";const c="PROCEDURE_NOT_FOUND",s="__rpc:id",i="__rpc:process",a="__rpc:browserRegister",l="__rpc:browserUnregister",u="__rpc:triggerEvent",p="__rpc:triggerEventBrowsers",f="cef"===o?window:e;if(!f[i]){if(f.__rpcListeners={},f.__rpcPending={},f.__rpcEvListeners={},f[i]=(e,r)=>{"server"!==o&&(r=e);const n=t.c(r);if(n.req){const r={id:n.id,environment:n.fenv||n.env};"server"===o&&(r.player=e);const c={ret:1,id:n.id,env:o};let s;switch(o){case"server":s=e=>r.player.call(i,[t.g(e)]);break;case"client":if("server"===n.env)s=e=>mp.events.callRemote(i,t.g(e));else if("cef"===n.env){const e=n.b&&f.__rpcBrowsers[n.b];r.browser=e,s=r=>e&&t.b(e)&&g(e,r,!0)}break;case"cef":s=e=>mp.trigger(i,t.g(e))}if(s){const e=m(n.name,n.args,r);n.noRet||e.then(e=>s({...c,res:e})).catch(e=>s({...c,err:e}))}}else if(n.ret){const r=f.__rpcPending[n.id];if("server"===o&&r.player!==e)return;r&&(r.resolve(n.err?t.d(n.err):t.e(n.res)),delete f.__rpcPending[n.id])}},"cef"!==o){if(mp.events.add(i,f[i]),"client"===o){d("__rpc:callServer",([e,r,n],t)=>_(e,r,{fenv:t.environment,noRet:n})),d("__rpc:callBrowsers",([e,r,n],t)=>P(null,e,r,{fenv:t.environment,noRet:n})),f.__rpcBrowsers={};const e=e=>{const r=t.h();Object.keys(f.__rpcBrowsers).forEach(r=>{const n=f.__rpcBrowsers[r];n&&t.b(n)&&n!==e||delete f.__rpcBrowsers[r]}),f.__rpcBrowsers[r]=e,e.execute(`\n                    window.name = '${r}';\n                    if(typeof window['${s}'] === 'undefined'){\n                        window['${s}'] = Promise.resolve(window.name);\n                    }else{\n                        window['${s}:resolve'](window.name);\n                    }\n                `)};mp.browsers.forEach(e),mp.events.add("browserCreated",e),f.__rpcBrowserProcedures={},mp.events.add(a,e=>{const[r,n]=JSON.parse(e);f.__rpcBrowserProcedures[n]=r}),mp.events.add(l,e=>{const[r,n]=JSON.parse(e);f.__rpcBrowserProcedures[n]===r&&delete f.__rpcBrowserProcedures[n]}),d(p,([e,r],n)=>{Object.values(f.__rpcBrowsers).forEach(t=>{k(t,u,[e,r],{fenv:n.environment,noRet:1})})})}}else void 0===f[s]&&(f[s]=new Promise(e=>{window.name?e(window.name):f[s+":resolve"]=e}));d(u,([e,r],n)=>R(e,r,n))}function g(e,r,n){const o=t.g(r);e.execute(`var process = window["${i}"]; if(process){ process(${JSON.stringify(o)}); }else{ ${n?"":`mp.trigger("${i}", '{"ret":1,"id":"${r.id}","err":"${c}","env":"cef"}');`} }`)}function m(e,r,n){const o=f.__rpcListeners[e];return o?t.e(o(r,n)):t.d(c)}function d(e,r){if(2!==arguments.length)throw'register expects 2 arguments: "name" and "cb"';"cef"===o&&f[s].then(r=>mp.trigger(a,JSON.stringify([r,e]))),f.__rpcListeners[e]=r}function h(e){if(1!==arguments.length)throw'unregister expects 1 argument: "name"';"cef"===o&&f[s].then(r=>mp.trigger(l,JSON.stringify([r,e]))),f.__rpcListeners[e]=void 0}function w(e,r,n={}){return arguments.length<1||arguments.length>3?t.d('call expects 1 to 3 arguments: "name", optional "args", and optional "options"'):t.f(m(e,r,{environment:o}),n.timeout)}function _(e,r,n={}){switch(o){case"server":return w(e,r);case"client":{const c=t.h();return new Promise(s=>{n.noRet||(f.__rpcPending[c]={resolve:s});const a={req:1,id:c,name:e,env:o,args:r,...n};mp.events.callRemote(i,t.g(a))})}case"cef":return y("__rpc:callServer",[e,r,+n.noRet])}}function v(e,r,n={}){if(arguments.length<1||arguments.length>3)return t.d('callServer expects 1 to 3 arguments: "name", optional "args", and optional "options"');let o={};return n.noRet&&(o.noRet=1),t.f(_(e,r,o),n.timeout)}function b(e,r,n,c={}){switch(o){case"client":return w(r,n);case"server":{const s=t.h();return new Promise(a=>{c.noRet||(f.__rpcPending[s]={resolve:a,player:e});const l={req:1,id:s,name:r,env:o,args:n,...c};e.call(i,[t.g(l)])})}case"cef":{const e=t.h();return f[s].then(s=>new Promise(a=>{c.noRet||(f.__rpcPending[e]={resolve:a});const l={b:s,req:1,id:e,name:r,env:o,args:n,...c};mp.trigger(i,t.g(l))}))}}}function y(e,r,n,c={}){switch(o){case"client":if(c=n||{},n=r,r=e,e=null,arguments.length<1||arguments.length>3||"string"!=typeof r)return t.d('callClient from the client expects 1 to 3 arguments: "name", optional "args", and optional "options"');break;case"server":if(arguments.length<2||arguments.length>4||"object"!=typeof e)return t.d('callClient from the server expects 2 to 4 arguments: "player", "name", optional "args", and optional "options"');break;case"cef":if(c=n||{},n=r,r=e,e=null,arguments.length<1||arguments.length>3||"string"!=typeof r)return t.d('callClient from the browser expects 1 to 3 arguments: "name", optional "args", and optional "options"')}let s={};return c.noRet&&(s.noRet=1),t.f(b(e,r,n,s),c.timeout)}function k(e,r,n,c={}){return new Promise(s=>{const i=t.h();c.noRet||(f.__rpcPending[i]={resolve:s}),g(e,{req:1,id:i,name:r,env:o,args:n,...c},!1)})}function P(e,r,n,s={}){switch(o){case"client":const i=f.__rpcBrowserProcedures[r];if(!i)return t.d(c);const a=f.__rpcBrowsers[i];return a&&t.b(a)?k(a,r,n,s):t.d(c);case"server":return b(e,"__rpc:callBrowsers",[r,n,+s.noRet],s);case"cef":return b(null,"__rpc:callBrowsers",[r,n,+s.noRet],s)}}function B(e,r,n,c={}){let s,i={};switch(o){case"client":case"cef":if(c=n||{},n=r,r=e,arguments.length<1||arguments.length>3)return t.d('callBrowsers from the client or browser expects 1 to 3 arguments: "name", optional "args", and optional "options"');c.noRet&&(i.noRet=1),s=P(null,r,n,i);break;case"server":if(arguments.length<2||arguments.length>4)return t.d('callBrowsers from the server expects 2 to 4 arguments: "player", "name", optional "args", and optional "options"');c.noRet&&(i.noRet=1),s=P(e,r,n,i)}if(s)return t.f(s,c.timeout)}function x(e,r,n,c={}){if("client"!==o)return t.d("callBrowser can only be used in the client environment");if(arguments.length<2||arguments.length>4)return t.d('callBrowser expects 2 to 4 arguments: "browser", "name", optional "args", and optional "options"');let s={};return c.noRet&&(s.noRet=1),t.f(k(e,r,n,s),c.timeout)}function R(e,r,n){const t=f.__rpcEvListeners[e];t&&t.forEach(e=>e(r,n))}function j(e,r){if(2!==arguments.length)throw'on expects 2 arguments: "name" and "cb"';const n=f.__rpcEvListeners[e]||new Set;n.add(r),f.__rpcEvListeners[e]=n}function O(e,r){if(2!==arguments.length)throw'off expects 2 arguments: "name" and "cb"';const n=f.__rpcEvListeners[e];n&&n.delete(r)}function C(e,r){if(arguments.length<1||arguments.length>2)throw'trigger expects 1 or 2 arguments: "name", and optional "args"';R(e,r,{environment:o})}function S(e,r,n){switch(o){case"client":if(n=r,r=e,e=null,arguments.length<1||arguments.length>2||"string"!=typeof r)throw'triggerClient from the client expects 1 or 2 arguments: "name", and optional "args"';break;case"server":if(arguments.length<2||arguments.length>3||"object"!=typeof e)throw'triggerClient from the server expects 2 or 3 arguments: "player", "name", and optional "args"';break;case"cef":if(n=r,r=e,e=null,arguments.length<1||arguments.length>2||"string"!=typeof r)throw'triggerClient from the browser expects 1 or 2 arguments: "name", and optional "args"'}b(e,u,[r,n],{noRet:1})}function E(e,r){if(arguments.length<1||arguments.length>2)throw'triggerServer expects 1 or 2 arguments: "name", and optional "args"';_(u,[e,r],{noRet:1})}function L(e,r,n){switch(o){case"client":case"cef":if(n=r,r=e,e=null,arguments.length<1||arguments.length>2)throw'triggerBrowsers from the client or browser expects 1 or 2 arguments: "name", and optional "args"';break;case"server":if(arguments.length<2||arguments.length>3)throw'triggerBrowsers from the server expects 2 or 3 arguments: "player", "name", and optional "args"'}b(e,p,[r,n],{noRet:1})}function M(e,r,n){if("client"!==o)throw"callBrowser can only be used in the client environment";if(arguments.length<2||arguments.length>4)throw'callBrowser expects 2 or 3 arguments: "browser", "name", and optional "args"';k(e,u,[r,n],{noRet:1})}r.default={register:d,unregister:h,call:w,callServer:v,callClient:y,callBrowsers:B,callBrowser:x,on:j,off:O,trigger:C,triggerServer:E,triggerClient:S,triggerBrowsers:L,triggerBrowser:M}}.call(this,n(2))},function(e,r){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n}])});
}; a; }
{let a = function scriptEntryPoint(mp) {
const entityMap = {
  '&': '&amp;',
  "'": '&#39;',
  '/': '&#x2F;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  '`': '&#x60;',
  '=': '&#x3D;'
};

function escapeHtml (str) {
  return String(str).replace(/[&<>"'`=\/]/g, function (s) {
    return entityMap[s];
  });
}

exports = {
	escapeHtml
}

}; a; }
{let a = function scriptEntryPoint(mp) {
mp.keys.data = []

mp.keys.bindEx = (key, toggle, handler, name, category) => {
    if (name) {
        if (mp.clientStorage && mp.clientStorage["binds"]) {
            let custom = mp.clientStorage["binds"].find(val => val.name == name)
            if (custom) key = custom.key
        }
        mp.keys.data.push({ key, toggle, handler, name, category: category ? category : 0 })
        if (browserMenu) browserMenu.call(`mainMenuAPI`, `setBindKeys`, mp.keys.data)
    }
    if (key) mp.keys.bind(key, toggle, handler)
}

mp.keys.bindEx(false, false,  () => {
    if (!mp.game.recorder.isRecording()) {
        mp.game.recorder.start(1);
    } else {
        mp.game.invoke("0x071A5197D6AFC8B3")
    }
}, "Старт/стоп запису Rockstar Editor", 3); 

mp.keys.bindEx(false, false,  () => {
    mp.game.invoke("0x88BB3507ED41A240")
}, "Зупинити запис без збереження", 3); 

mp.events.add("updateBind", (name, key, newKey, newName) => {
    let binds = mp.keys.data.filter(val => val.key == key && val.name == name)
    if (!binds.length) return rpc.callBrowser(browserMenu, "nError", `Помилка №13345. Зверніться до розробника`)
    binds.forEach((bind) => {
        mp.keys.unbind(bind.key, bind.toggle, bind.handler)
        bind.key = newKey
        mp.keys.bind(bind.key, bind.toggle, bind.handler)
    })
    browserMenu.call(`mainMenuAPI`, `setBindKeys`, mp.keys.data)
    rpc.callBrowser(browserMenu, "nSuccess", `${binds[0].name} призначено на клавішу ${newName}!`)
    mp.events.callRemote("setBinds", name, binds[0].key)
})

mp.events.add("authCharacter.success", () => {  
    try {
        if (mp.clientStorage && mp.clientStorage["binds"]) {
            mp.clientStorage["binds"].forEach((cbind) => {
                let newBind = mp.keys.data.filter(val => val.name == cbind.name)
                if (!newBind.length) return
                newBind.forEach((bind) => {
                    mp.keys.unbind(bind.key, bind.toggle, bind.handler)
                    bind.key = cbind.key
                    mp.keys.bind(bind.key, bind.toggle, bind.handler)
                })
            })
            browserMenu.call(`mainMenuAPI`, `setBindKeys`, mp.keys.data)
        }
    } catch (err) {
        mp.events.callRemote("log", `Error client authCharacter.success: ${err}`)
    }
})
}; a; }
{let a = function scriptEntryPoint(mp) {
function fixData(item) {
	item = JSON.stringify(item)
	if (item.includes("'")) item = item.replace(/'/g, '`')
	return item
}

function processCar(entity) {
    const vehicle = mp.vehicles.atRemoteId(entity.remoteId)
    if (isEntityExists(vehicle)) {
		if (!entity.maxSpeed) entity.maxSpeed = (mp.game.vehicle.getVehicleModelMaxSpeed(vehicle.model) * 3.6).toFixed(0)
		entity.angle = vehicle.getMod(11) + 1
		entity.suspension = vehicle.getMod(15) + 1
		entity.brakes = vehicle.getMod(12) + 1
		entity.transmission = vehicle.getMod(13) + 1
    }
}

mp.events.add("inventory.forceClose", () => {
	if (mp.inventoryActive) browserMenu.call(`inventoryAPI`, `show`, false);
	if (mp.interfaceActive === "storageManager") mp.events.call("showStorageManager", null)
	if (mp.interfaceActive === "cooking") mp.events.call("showCooking", null)
});

mp.events.add("inventory.init", (type, items, data, itemsData, bunch) => {
	if (type == "main") {
		mp.events.call("setLocalVar", "inventoryItems", itemsData)
		browserMenu.call(`inventoryAPI`, `init`, type, fixData(items), data)
	}
	else if (type == "trade") {
		if (data) {
			data.forEach((entity) => {
				if (entity.type == "transport") processCar(entity)
			})
		}
		browserMenu.call(`inventoryAPI`, `init`, type, items, data, mp.players.local.getHealth(), mp.players.local.getArmour())
	}
	else if (type == "arena") browserMenu.call(`inventoryAPI`, `init`, type, fixData(items))
	else browserMenu.call(`inventoryAPI`, `init`, type, fixData(items), mp.players.local.getHealth(), mp.players.local.getArmour(), data, itemsData)
});

mp.events.add("inventory.destroy", (type) => {
	browserMenu.call(`inventoryAPI`, `destroy`, type)
});

mp.events.add("inventory.add", (item, tradeCustomIdx, type) => {
	//mp.events.callRemote("log", `SERVER inventory.add ${JSON.stringify(item)}`, true)
	browserMenu.call(`inventoryAPI`, `add`, fixData(item), tradeCustomIdx, type);
});

mp.events.add("inventory.delete", (sqlId, type) => {
	//mp.events.callRemote("log", `SERVER inventory.delete ${sqlId} ${type}`, true)
	if (type) browserMenu.call(`inventoryAPI`, `delete`, sqlId, type)
	else browserMenu.call(`inventoryAPI`, `delete`, sqlId)
});

mp.events.add("inventory.updateParams", (sqlId, params, type) => {
	//mp.events.callRemote("log", `SERVER inventory.updateParams ${sqlId}, ${JSON.stringify(params)}`, true)
	browserMenu.call(`inventoryAPI`, `updateParams`, sqlId, fixData(params), type);
});

mp.events.add("inventory.updateSqlId", (sqlId, newSqlId, type, updateItem) => {
	//mp.events.callRemote("log", `SERVER inventory.updateSqlId ${sqlId}, ${newSqlId}, ${type}`, true)
	browserMenu.call(`inventoryAPI`, `updateSqlId`, sqlId, newSqlId, type, updateItem);
});

let bindsLocked = false

var bindhandler = {
	1: () => {
		if (mp.bindBlocker({inventory: mp.inventoryActive}) || mp.players.local.getVariable("cuffedBy") != null || mp.altPressed || bindsLocked) return;
		browserMenu.call(`inventoryAPI`, `quickKeyPressed`, 88);
	}, 
	2: () => {
		if (mp.bindBlocker({inventory: mp.inventoryActive}) || mp.players.local.getVariable("cuffedBy") != null || mp.altPressed || bindsLocked) return;
		browserMenu.call(`inventoryAPI`, `quickKeyPressed`, 89);
	}, 
	3: () => {
		if (mp.bindBlocker({inventory: mp.inventoryActive}) || mp.players.local.getVariable("cuffedBy") != null || mp.altPressed || bindsLocked) return;
		browserMenu.call(`inventoryAPI`, `quickKeyPressed`, 90);
	}, 
	4: () => {
		if (mp.bindBlocker({inventory: mp.inventoryActive}) || mp.players.local.getVariable("cuffedBy") != null || mp.altPressed || bindsLocked) return;
		browserMenu.call(`inventoryAPI`, `quickKeyPressed`, 91);
	}, 
	5: () => {
		if (mp.bindBlocker({inventory: mp.inventoryActive}) || mp.players.local.getVariable("cuffedBy") != null || mp.altPressed || bindsLocked) return;
		browserMenu.call(`inventoryAPI`, `quickKeyPressed`, 92);
	}, 
	6: () => {
		if (mp.bindBlocker({inventory: mp.inventoryActive, radio: true}) || mp.players.local.getVariable("cuffedBy") != null || mp.altPressed) return;
		browserMenu.call(`inventoryAPI`, `show`, !mp.inventoryActive, mp.players.local.getHealth(), mp.players.local.getArmour());
	}
}

mp.events.add("setLockBinds", (enable) => {
	bindsLocked = enable;
});

mp.events.add("setInventoryActive", (enable) => {
	mp.inventoryActive = enable;
	if (!mp.inventoryActive) bindsLocked = false
});


mp.events.add("inventory.setMoney", (value) => {
	browserMenu.call(`inventoryAPI`, `setMoney`, value);
});

mp.events.add("inventory.setBankMoney", (value) => {
	browserMenu.call(`inventoryAPI`, `setBankMoney`, value);
});

mp.events.add("inventory.setHealth", (value) => {
	browserMenu.call(`inventoryAPI`, `setHealth`, value);
});

mp.events.add("inventory.setArmour", (value) => {
	browserMenu.call(`inventoryAPI`, `setArmour`, value);
});

mp.events.add("inventory.refreshMagazine", () => {
	browserMenu.call(`inventoryAPI`, `_refreshMagazine`);
});

mp.events.add("inventory.setSatiety", (value) => {
	browserMenu.call(`inventoryAPI`, `setSatiety`, value);
});

mp.events.add("inventory.setThirst", (value) => {
	browserMenu.call(`inventoryAPI`, `setThirst`, value);
});

mp.events.add("inventory.takeOffMask", () => {
	browserMenu.call(`inventoryAPI`, `takeOffMask`);
});

mp.events.add("inventory.showRecycleFactionButton", () => {
	browserMenu.call(`inventoryAPI`, `updateParam`, `showRecycleFactionButton`, true);
});

mp.events.add("authCharacter.success", () => {
	try {
		mp.keys.bindEx( 0x31, true, bindhandler[1], "Швидкий слот №1", 3);
		mp.keys.bindEx( 0x32, true, bindhandler[2], "Швидкий слот №2", 3);
		mp.keys.bindEx( 0x33, true, bindhandler[3], "Швидкий слот №3", 3);
		mp.keys.bindEx( 0x34, true, bindhandler[4], "Швидкий слот №4", 3);
		mp.keys.bindEx( 0x35, true, bindhandler[5], "Швидкий слот №5", 3);
		mp.keys.bindEx( 0x49, true, bindhandler[6], "Інвентар");
	} catch (err) {
		mp.events.callRemote("log", `Error client gamemode\scripts\Inventory.js authCharacter.success: ${err}`)
	}
}) 

mp.events.add("showStorageManager", (data) => {
	if (data) mp.interfaceActive = "storageManager"
    else mp.interfaceActive = false
    browserMenu.call(`storageManager`, `set`, data)
});

mp.events.add("setStorageManagerActive", (data) => {
	if (data) mp.interfaceActive = "storageManager"
    else mp.interfaceActive = false
});

mp.events.add("storage.add", (data) => {
	if (mp.interfaceActive === "storageManager") browserMenu.call(`storageManager`, `add`, data)
});

mp.events.add("storage.delete", (data) => {
	if (mp.interfaceActive === "storageManager") browserMenu.call(`storageManager`, `delete`, data)
});

mp.events.add("storage.updateParams", (sqlId, params) => {
	if (mp.interfaceActive === "storageManager") browserMenu.call(`storageManager`, `updateParams`, sqlId, fixData(params))
});

mp.events.add("updateStorageManager", (data) => {
	if (mp.interfaceActive === "storageManager") browserMenu.call(`storageManager`, `update`, data)
});
}; a; }
{let a = function scriptEntryPoint(mp) {
class Autoroober {
    constructor() {
		mp.minigamePressingActive = false  
		
		this.blip = undefined
		this.marker = undefined
	}
	
	stopAll () {
		if (mp.markers.exists(this.marker)) {
			this.marker.destroy()
			this.marker = undefined
		}
		if (this.blip !== undefined) {
			if (this.blip.id) {
				this.blip.destroy()
				this.blip = undefined
			}
			else {
				//mp.game.invoke("0x86A652570E5F25DD", this.blip);
				mp.game.invoke("0x45FF974EEE1C8734", this.blip, 0);
				this.blip = undefined
			}
		}
		if (mp.minigamePressingActive) {
			this.cancelGame('terminate')
		}
	}
	
	startGame (level) { 
		mp.minigamePressingActive = true  
		browserMenu.call(`minigameCarThief`, `start`, true, level);
		mp.events.call("displayChat", false)
		mp.events.call("hudControl.enable", false) 
	}
	
	cancelGame (type) { 
		mp.minigamePressingActive = false 
		mp.events.call("displayChat", true)
		mp.events.call("hudControl.enable", true) 
		if (type === 'terminate') browserMenu.call(`minigameCarThief`, `terminate`);
		else if (type) {
			this.stopAll()
			var streetName = getStreetName(mp.players.local.position)
			mp.events.callRemote("autoroober.win", streetName);
		}
		else mp.events.callRemote("autoroober.lose");
	}
	
	createFirstPlace (pos, skill) { 
		let radius = skill == 1 ? 300 : skill == 2 ? 350 : skill == 3 ? 400 : skill == 4 ? 450 : 500
		this.blip = mp.game.ui.addBlipForRadius(pos.x + getRandomInt(-radius + 150, radius - 150), pos.y + getRandomInt(-radius + 150, radius - 150), pos.z, radius);
        mp.game.invoke("0xDF735600A4696DAF", this.blip, 9); // SET_BLIP_SPRITE
        mp.game.invoke("0x03D7FB09E75D6B7E", this.blip, 47); // SET_BLIP_COLOUR
        mp.game.invoke("0x45FF974EEE1C8734", this.blip, 150); // SET_BLIP_ALPHA
        mp.game.invoke("0xF87683CDF73C3F6E", this.blip, false);
	}
	
	createSecondPlace (pos) { 
		this.blip = mp.blips.new(626, new mp.Vector3(pos.x, pos.y), { alpha: 255, scale: 1.0, name: `Місце здачi`, color: 47 });
		this.blip.setRoute(true);
		this.blip.setRouteColour(47);
		this.marker = mp.markers.new(1, {x: pos.x, y: pos.y, z: pos.z - 1}, 4, {
			color: [255, 165, 0, 100],
			visible: true,
			dimension: 0,
		}) 
		
	}
	
	addMarkerUnderVehicleAutorobber (pos) { 
		if (mp.markers.exists(this.marker)) {
			this.marker.destroy()
			this.marker = undefined
		}

		this.marker = mp.markers.new(20, {x: pos.x, y: pos.y, z: pos.z + 2}, 2, {
			color: [255, 165, 0, 100],
			visible: true,
			dimension: 0,
			rotation: new mp.Vector3(180, 0, 0)
		}) 
	}
	
}

function getRandomInt(min, max) {
    return min + Math.floor(Math.random() * (max - min + 1));
}


const autoroober = new Autoroober

mp.events.add('minigamePressing.loseGame', () => {
	try {
		autoroober.cancelGame(false)
	}
	catch (err) {
		chatDebug(`ERror: ${err}`)
	}
});

mp.events.add('minigamePressing.winGame', () => {
	try {
		autoroober.cancelGame(true)
	}
	catch (err) {
		chatDebug(`ERror: ${err}`)
	}
});

mp.events.add('autoroober.stop', () => {
	try {
		autoroober.stopAll()
	}
	catch (err) {
		chatDebug(`ERror: ${err}`)
	}
});

mp.events.add('autoroober.closeGame', () => {
	try {
		autoroober.cancelGame('terminate')
	}
	catch (err) {
		chatDebug(`ERror: ${err}`)
	}
});

mp.events.add('create.first.autorob.place', (pos, skill) => {
	try {
		autoroober.createFirstPlace(pos, skill)
	}
	catch (err) {
		chatDebug(`ERror: ${err}`)
	}
});

mp.events.add('create.second.autorob.place', (pos) => {
	try {
		autoroober.createSecondPlace(pos)
	}
	catch (err) {
		chatDebug(`ERror: ${err}`)
	}
});

mp.events.add("client::addMarkerUnderVehicleAutorobber", (pos) => {
	try {
		autoroober.addMarkerUnderVehicleAutorobber(pos)
	}
	catch (err) {
		chatDebug(`ERror: ${err}`)
	}
}) 


mp.events.add('startRoobingVehicle', (level) => {
	try {
		autoroober.startGame(level)
	}
	catch (err) {
		chatDebug(`ERror: ${err}`)
	}
});




}; a; }
{let a = function scriptEntryPoint(mp) {
const fireworks = [
    {
        item: 'firework_1',
        itemRemovable: true,
        command: 'fire_1',
        shoots: 50,
        prop: "ind_prop_firework_03",
        timeToStart: 5500,
        timeBetweenShoots: 1250,
        particles: [
            { name: "scr_indep_fireworks", effect: "scr_indep_firework_starburst", scale: 2.0, plusHeight: 0, randomizeXY: false, timeToNextShoot: 1000 },
            { name: "proj_indep_firework", effect: "scr_indep_firework_grd_burst", scale: 2.0, plusHeight: 50.0, randomizeXY: true, timeToNextShoot: 300 },
            { name: "proj_indep_firework", effect: "scr_indep_firework_air_burst", scale: 2.0, plusHeight: 50.0, randomizeXY: true, timeToNextShoot: 600 },
        ]
    },
    {
        item: 'firework_2',
        itemRemovable: true,
        command: 'fire_2',
        shoots: 80,
        prop: "ind_prop_firework_03",
        timeToStart: 5500,
        timeBetweenShoots: 250,
        particles: [
            { name: "scr_indep_fireworks", effect: "scr_indep_firework_trailburst", scale: 2.0, plusHeight: 0, randomizeXY: false, timeToNextShoot: 1000 },
            { name: "proj_indep_firework_v2", effect: "scr_firework_indep_burst_rwb", scale: 1.0, plusHeight: 50.0, randomizeXY: true, timeToNextShoot: 125 },
            { name: "proj_xmas_firework", effect: "scr_firework_xmas_ring_burst_rgw", scale: 1.0, plusHeight: 50.0, randomizeXY: true, timeToNextShoot: 125 },
        ]
    },
    {
        item: 'firework_3',
        itemRemovable: true,
        command: 'fire_3',
        shoots: 80,
        prop: "ind_prop_firework_03",
        timeToStart: 5500,
        timeBetweenShoots: 250,
        particles: [
            { name: "scr_indep_fireworks", effect: "scr_indep_firework_trailburst", scale: 2.0, plusHeight: 0, randomizeXY: false, timeToNextShoot: 1000 },
            { name: "proj_indep_firework", effect: "scr_indep_firework_air_burst", scale: 1.0, plusHeight: 50.0, randomizeXY: true, timeToNextShoot: 125 },
            { name: "proj_indep_firework_v2", effect: "scr_firework_indep_spiral_burst_rwb", scale: 1.0, plusHeight: 50.0, randomizeXY: true, timeToNextShoot: 125 },
            { name: "proj_indep_firework_v2", effect: "scr_firework_indep_repeat_burst_rwb", scale: 1.0, plusHeight: 50.0, randomizeXY: true, timeToNextShoot: 125 },
            { name: "scr_indep_fireworks", effect: "scr_indep_firework_starburst", scale: 1.0, plusHeight: 50.0, randomizeXY: true, timeToNextShoot: 125 },
        ]
    },
    {
        item: 'firework_4',
        itemRemovable: true,
        command: 'fire_4',
        shoots: 50,
        prop: "ind_prop_firework_03",
        timeToStart: 5000,
        timeBetweenShoots: 550,
        particles: [
            { name: "scr_indep_fireworks", effect: "scr_indep_firework_trailburst", scale: 4.0, plusHeight: 0, randomizeXY: false, timeToNextShoot: 10 },
        ]
    },
    {
        item: 'fontain_4',
        itemRemovable: true,
        command: 'fontain_4',
        shoots: 80,
        prop: "ind_prop_firework_04",
        timeToStart: 3500,
        timeBetweenShoots: 700,
        particles: [
            { name: "scr_indep_fireworks", effect: "scr_indep_firework_fountain", scale: 0.25, plusHeight: 0.25, randomizeXY: false, timeToNextShoot: 500 },
        ]
    },
]

let currentFireworks = []

function getRandomInteger(min, max) {
    let rand = min - 0.5 + Math.random() * (max - min + 1)
    rand = Math.round(rand);
    return rand;
}

function getForwardPosition(position, heading, radius) {
    let forward = new mp.Vector3(radius * Math.sin(-(heading * Math.PI / 180)) + position.x,
        radius * Math.cos(-(heading * Math.PI / 180)) + position.y,
        position.z);
    return forward;
}

mp.events.add("startFirework", (type, position, heading, name, sex) => {
    const firework = fireworks[type]
    let pos = getForwardPosition(new mp.Vector3(position.x, position.y, position.z - 0.95), heading, 0.5)

    let entity = mp.objects.new(mp.game.joaat(firework.prop), pos, {
        rotation: new mp.Vector3(0, 0, heading),
        dimension: mp.players.local.dimension
    })

    entity.firework = true
    entity.fireworkType = type
    entity.fireworkName = name
    entity.fireworkSex = sex
    entity.fireworkShoots = firework.shoots
    entity.notifyStreaming = true
});

mp.events.add("entityStreamIn", async (entity) => {
    if (entity.firework) {
        const firework = fireworks[entity.fireworkType]
        if (!firework) return chatDebug(`firework error`)
        if (!entity.fireworkShoots) return

        entity.placeOnGroundProperly()
        currentFireworks.push(entity)

        await sleep(firework.timeToStart)

        for (let key in firework.particles) await mp.game.streaming.loadNamedPtfxAsset(firework.particles[key].name)

        while (entity.fireworkShoots > 0) {
            entity.fireworkShoots -= 1
            for (let key in firework.particles) {
                const particle = firework.particles[key]
                mp.game.graphics.useParticleFxAsset(particle.name)
                mp.game.graphics.startNetworkedParticleFxNonLoopedAtCoord(particle.effect, entity.position.x + (particle.randomizeXY ? getRandomInteger(0, 10) : 0), entity.position.y + (particle.randomizeXY ? getRandomInteger(0, 10) : 0), entity.position.z + particle.plusHeight, 0.0, 0.0, 0.0, particle.scale, false, false, false, false)
                await sleep(particle.timeToNextShoot)
            }
            await sleep(firework.timeBetweenShoots || 300)
        }

        await sleep(5000)
        if (isEntityExists(entity)) {
            let idx = currentFireworks.indexOf(entity)
            if (idx !== -1) currentFireworks.splice(idx, 1)
            entity.destroy()
        }
    }
})

mp.events.add("render", () => {
    if (currentFireworks.length) {
        currentFireworks.forEach((entity) => {
            if (!isEntityExists(entity)) return
            let dist = mp.game.system.vdist(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, entity.position.x, entity.position.y, entity.position.z)
            if (dist < 10) {
                const firework = fireworks[entity.fireworkType]
                mp.game.graphics.drawText(`Встанови${entity.fireworkSex ? "в" : "ла"}: ~y~${entity.fireworkName} \n~w~Залишок: ~y~${parseInt(entity.fireworkShoots / (firework.shoots / 100))}%`, [entity.position.x, entity.position.y, entity.position.z], {
                    font: 4,
                    color: [255, 255, 255, 255],
                    scale: [0.3, 0.3],
                    outline: true,
                });
            }
        })
    }
})

}; a; }
{let a = function scriptEntryPoint(mp) {
const player = mp.players.local

const MaterialHash = {
    0: "None",
    2519482235: "Unk",
    1187676648: "Concrete",
    359120722: "ConcretePothole",
    3210327185: "ConcreteDusty",
    282940568: "Tarmac",
    2993614768: "TarmacPainted",
    1886546517: "TarmacPothole",
    4044799021: "RumbleStrip",
    3340854742: "BreezeBlock",
    3454750755: "Rock",
    4170197704: "RockMossy",
    765206029: "Stone",
    576169331: "Cobblestone",
    1639053622: "Brick",
    1945073303: "Marble",
    1907048430: "PavingSlab",
    592446772: "SandstoneSolid",
    1913209870: "SandstoneBrittle",
    2699818980: "SandLoose",
    510490462: "SandCompact",
    909950165: "SandWet",
    2387446527: "SandTrack",
    3158909604: "SandUnderwater",
    509508168: "SandDryDeep",
    1288448767: "SandWetDeep",
    3508906581: "Ice",
    2363942873: "IceTarmac",
    2357397706: "SnowLoose",
    3416406407: "SnowCompact",
    1619704960: "SnowDeep",
    1550304810: "SnowTarmac",
    951832588: "GravelSmall",
    2128369009: "GravelLarge",
    3938260814: "GravelDeep",
    1925605558: "GravelTrainTrack",
    2409420175: "DirtTrack",
    2352068586: "MudHard",
    312396330: "MudPothole",
    1635937914: "MudSoft",
    4021477129: "MudUnderwater",
    1109728704: "MudDeep",
    223086562: "Marsh",
    1584636462: "MarshDeep",
    3594309083: "Soil",
    1144315879: "ClayHard",
    560985072: "ClaySoft",
    3833216577: "GrassLong",
    1333033863: "Grass",
    3008270349: "GrassShort",
    2461440131: "Hay",
    581794674: "Bushes",
    3381615457: "Twigs",
    2253637325: "Leaves",
    3985845843: "Woodchips",
    2379541433: "TreeBark",
    2847687191: "MetalSolidSmall",
    3929336056: "MetalSolidMedium",
    752131025: "MetalSolidLarge",
    15972667: "MetalHollowSmall",
    1849540536: "MetalHollowMedium",
    3711753465: "MetalHollowLarge",
    762193613: "MetalChainlinkSmall",
    125958708: "MetalChainlinkLarge",
    834144982: "MetalCorrugatedIron",
    3868849285: "MetalGrille",
    2100727187: "MetalRailing",
    1761524221: "MetalDuct",
    4063706601: "MetalGarageDoor",
    3539969597: "MetalManhole",
    3895095068: "WoodSolidSmall",
    555004797: "WoodSolidMedium",
    815762359: "WoodSolidLarge",
    126470059: "WoodSolidPolished",
    3545514974: "WoodFloorDusty",
    1993976879: "WoodHollowSmall",
    3929491133: "WoodHollowMedium",
    3369548007: "WoodHollowLarge",
    1176309403: "WoodChipboard",
    722686013: "WoodOldCreaky",
    2552123904: "WoodHighDensity",
    2011204130: "WoodLattice",
    3108646581: "Ceramic",
    1755188853: "RoofTile",
    2877802565: "RoofFelt",
    1354180827: "Fibreglass",
    3652308448: "Tarpaulin",
    2221655295: "Plastic",
    627123000: "PlasticHollow",
    2668971817: "PlasticHighDensity",
    2435246283: "PlasticClear",
    772722531: "PlasticHollowClear",
    2956494126: "PlasticHighDensityClear",
    3528912198: "FibreglassHollow",
    4149231379: "Rubber",
    3511032624: "RubberHollow",
    289630530: "Linoleum",
    1845676458: "Laminate",
    669292054: "CarpetSolid",
    158576196: "CarpetSolidDusty",
    2898482353: "CarpetFloorboard",
    122789469: "Cloth",
    3720844863: "PlasterSolid",
    4043078398: "PlasterBrittle",
    236511221: "CardboardSheet",
    2885912856: "CardboardBox",
    474149820: "Paper",
    808719444: "Foam",
    1341866303: "FeatherPillow",
    2538039965: "Polystyrene",
    3724496396: "Leather",
    1429989756: "Tvscreen",
    673696729: "SlattedBlinds",
    937503243: "GlassShootThrough",
    244521486: "GlassBulletproof",
    1500272081: "GlassOpaque",
    2675173228: "Perspex",
    4201905313: "CarMetal",
    2137197282: "CarPlastic",
    3315319434: "CarSofttop",
    2130571536: "CarSofttopClear",
    1247281098: "CarGlassWeak",
    602884284: "CarGlassMedium",
    1070994698: "CarGlassStrong",
    2573051366: "CarGlassBulletproof",
    513061559: "CarGlassOpaque",
    435688960: "Water",
    5236042: "Blood",
    3660485991: "Oil",
    2660782956: "Petrol",
    868733839: "FreshMeat",
    2849806867: "DriedMeat",
    1501078253: "EmissiveGlass",
    1059629996: "EmissivePlastic",
    3985833031: "VfxMetalElectrified",
    611561919: "VfxMetalWaterTower",
    3603690002: "VfxMetalSteam",
    332778253: "VfxMetalFlame",
    1666473731: "PhysNoFriction",
    2601153738: "PhysGolfBall",
    4038262533: "PhysTennisBall",
    4059664613: "PhysCaster",
    2016463089: "PhysCasterRusty",
    1345867677: "PhysCarVoid",
    4003336261: "PhysPedCapsule",
    3124923563: "PhysElectricFence",
    2281206151: "PhysElectricMetal",
    2751643840: "PhysBarbedWire",
    605776921: "PhysPooltableSurface",
    972939963: "PhysPooltableCushion",
    3546625734: "PhysPooltableBall",
    483400232: "Buttocks",
    3834431425: "ThighLeft",
    652772852: "ShinLeft",
    1926285543: "FootLeft",
    4057986041: "ThighRight",
    3848931141: "ShinRight",
    2925830612: "FootRight",
    2372680412: "Spine0",
    3154854427: "Spine1",
    1457572381: "Spine2",
    32752644: "Spine3",
    2825350831: "ClavicleLeft",
    3784624938: "UpperArmLeft",
    1045062756: "LowerArmLeft",
    113101985: "HandLeft",
    2737678298: "ClavicleRight",
    1501153539: "UpperArmRight",
    1777921590: "LowerArmRight",
    2000961972: "HandRight",
    1718294164: "Neck",
    3559574543: "Head",
    286224918: "AnimalDefault",
    2378027672: "CarEngine",
    999829011: "Puddle",
    2015599386: "ConcretePavement",
    3147605720: "BrickPavement",
    2247498441: "PhysDynamicCoverBound",
    998201806: "VfxWoodBeerBarrel",
    2154880249: "WoodHighFriction",
    127813971: "RockNoinst",
    1441114862: "BushesNoinst",
    3565854962: "MetalSolidRoadSurface",
    2206792300: "StuntRampSurface",
    746881105: "Temp01",
    2316997185: "Temp02",
    1911121241: "Temp03",
    1923995104: "Temp04",
    2901304848: "Temp05",
    1061250033: "Temp06",
    2529443614: "Temp07",
    1343679702: "Temp08",
    1026054937: "Temp09",
    63305994: "Temp10",
    47470226: "Temp11",
    702596674: "Temp12",
    2657481383: "Temp13",
    3649011722: "Temp14",
    2710969365: "Temp15",
    2782232023: "Temp16",
    1011960114: "Temp17",
    1354993138: "Temp18",
    3493162850: "Temp19",
    2242086891: "Temp20",
    3257211236: "Temp21",
    3674578943: "Temp22",
    465002639: "Temp23",
    1963820161: "Temp24",
    1952288305: "Temp25",
    3178714198: "Temp26",
    889255498: "Temp27",
    3115293198: "Temp28",
    1078418101: "Temp29",
    13626292: "Temp30"
};

const materialMaxSpeed = { //max speed by ground forward
    "GrassShort": 50,
    "Grass": 50,
    "GrassLong": 50
}

const materialMaxSpeedZero = { //set max speed to 0 when up
    "GrassShort": true,
    "Grass": true,
    "GrassLong": true
}

const materialMaxSpeedBackward = 20 //max speed when go backward

const blackListClasses = [2, 9, 12, 17, 18, 19]

const speedRemove = 10 //how much speed removed in 100ms

const blackListVehicles = [
    mp.game.joaat("bf400"),
    mp.game.joaat("cliffhanger"),
    mp.game.joaat("enduro"),
    mp.game.joaat("manchez"),
    mp.game.joaat("manchez2"),
    mp.game.joaat("manchez3"),
    mp.game.joaat("sanchez"),
    mp.game.joaat("sanchez2"),
    mp.game.joaat("mower"),
    mp.game.joaat("snowmobile"),
    mp.game.joaat("sadler"),
    mp.game.joaat("flatbed")
]

setInterval(() => {
    if (player.vehicle && player.vehicle.getPedInSeat(-1) == player.handle) {
        let veh = player.vehicle;
        if ((mp.game.vehicle.isThisModelACar(veh.model) || mp.game.vehicle.isThisModelABike(veh.model) || mp.game.vehicle.isThisModelABicycle(veh.model)) && !blackListClasses.includes(veh.getClass()) && !blackListVehicles.includes(veh.model)) {
            let pos = veh.position;
            let entityMaterial = mp.raycasting.testCapsule(pos, new mp.Vector3(pos.x, pos.y, pos.z - 5), 0.5, null, 1);
            if (entityMaterial && MaterialHash[entityMaterial.material]) {
                let targetSpeed = null
                let isMovingBack = veh.getSpeedVector(true).y

                if (materialMaxSpeed[MaterialHash[entityMaterial.material]]) {
                    targetSpeed = materialMaxSpeed[MaterialHash[entityMaterial.material]]
                    if (isMovingBack <= 0) {
                        targetSpeed = materialMaxSpeedBackward
                    }
                }

                if (materialMaxSpeedZero[MaterialHash[entityMaterial.material]] && isMovingBack > 0 && veh.getPitch() > 10) {
                    targetSpeed = 1
                }

                if (targetSpeed != null) {
                    if (!veh.hasOwnProperty("lastMaxSpeed")) veh.lastMaxSpeed = veh.getSpeed() * 3.6

                    if (veh.lastMaxSpeed > targetSpeed) veh.lastMaxSpeed -= speedRemove
                    else veh.lastMaxSpeed = targetSpeed

                    if (veh.lastMaxSpeed <= 1) veh.lastMaxSpeed = 1

                    veh.setMaxSpeed(veh.lastMaxSpeed / 3.6)

                    // chatDebug(`MaterialHash ${MaterialHash[entityMaterial.material]} speed: ${veh.lastMaxSpeed} targetSpeed: ${targetSpeed}`)
                }
                else {
                    if (veh.currentSpeedZone) veh.setMaxSpeed(veh.currentSpeedZone / 3.636363)
                    else veh.setMaxSpeed(0.0)
                    if (veh.hasOwnProperty("lastMaxSpeed")) delete veh.lastMaxSpeed
                }
            }
            else {
                if (veh.currentSpeedZone) veh.setMaxSpeed(veh.currentSpeedZone / 3.636363)
                else veh.setMaxSpeed(0.0)
                if (veh.hasOwnProperty("lastMaxSpeed")) delete veh.lastMaxSpeed
            }
        }
    }
}, 100)
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("apartments.show", (params) => {
    if (params) mp.interfaceActive = "apartments"
    else mp.interfaceActive = false
    browserMenu.call("apartments", "set", params)
})

mp.events.add("apartments.update", (name, value) => {
    if (mp.interfaceActive !== "apartments") return
    browserMenu.call("apartments", "update", name, value)
})

let garage = {
    labelForVehicleEntrance: null
}
mp.events.add("client::setPlayerApartmentAssets", async (type, pos, show, certain) => {
    if (show) {
        if (!pos.x || !pos.y) return
        if (type == "garageVehicleMarker") {
            if (mp.labels.exists(garage.labelForVehicleEntrance)) garage.labelForVehicleEntrance.destroy()

            garage.labelForVehicleEntrance = mp.labels.new(`Паркiнг \n[H]`, pos, {
                los: false,
                font: 0,
                drawDistance: 15,
            })
        }
    }
    else {
        if (mp.labels.exists(garage.labelForVehicleEntrance) && certain != "houseBlip") garage.labelForVehicleEntrance.destroy()
    }
})

mp.keys.bindEx(0x48, true, function () { // H key
    if (mp.bindBlocker()) return
    if (mp.players.local.vehicle) {
        mp.events.callRemote("parkCarToGarageApartments")
    }
}, "Поставити у гараж")
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("hints.show", (params) => {
    if (params) mp.interfaceActive = "hints"
    else mp.interfaceActive = false
    browserMenu.call("hints", "set", params)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("showBodySearch", (data) => {
    if (data) mp.interfaceActive = "bodySearch"
    else mp.interfaceActive = false
    browserMenu.call(`bodySearch`, `set`, data)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
const pool = []
let enabled = false

mp.events.add("createExitMarker", (data) => {
    data.rotationY = 0
    pool.push(data)
    setTimeout(() => {
        if (pool.indexOf(data) !== -1) {
            pool.splice(pool.indexOf(data), 1)
        }
    }, 1000 * 60 * 2)
})

mp.keys.bindEx(0x50, true, function () {
    if (mp.bindBlocker()) return
    enabled = true
    mp.game.graphics.startScreenEffect("ChopVision", 5000, true)
}, "OOC режим")

mp.keys.bindEx(0x50, false, function () {
    enabled = false
    mp.game.graphics.stopScreenEffect("ChopVision")
}, "OOC режим")

mp.events.add("render", () => {
    if (!enabled) return

    pool.forEach((item) => {
        if (vdist(mp.players.local.position, item.position) > 10) return

        if (item.rotationY >= 360) item.rotationY = 0
        else item.rotationY += 1

        mp.game.graphics.drawMarker(42,
            item.position.x, item.position.y, item.position.z,
            0, 0, 0,
            0, item.rotationY, 0,
            0.5, 0.5, 0.5,
            255, 165, 0, 100,
            false, true, 2,
            false, null, null, false
        );

        mp.game.graphics.drawText(`#${item.sqlId} вийшов в ${item.date}`, [item.position.x, item.position.y, item.position.z + 0.5], {
            font: 4,
            color: [255, 255, 255, 185],
            scale: [0.5, 0.5],
            outline: true,
        });
    })
});
}; a; }
{let a = function scriptEntryPoint(mp) {
var localPlayer = mp.players.local;

let object = null;
let boneId = 0;
let modelName = '';

mp.events.add("showAttachmentsEditor", (data) => {
    if (mp.clientStorage["admin"] > 0) {
        if (data) mp.interfaceActive = "AttachmentsEditor"
        else mp.interfaceActive = false
        browserMenu.call(`attachmentsEditor`, `set`, data)
    }
})

const onClear = () => {
    if (object && mp.objects.exists(object)) object.destroy();

    object = null;
    boneId = 0;
    modelName = '';
}

const onApply = (model, bone, positions) => {
    if (!mp.game.streaming.isModelInCdimage(mp.game.joaat(model))) return mp.console.logInfo('Invalid model', true, true);
    if (object) onClear();


    boneId = parseInt(bone);
    if (isNaN(boneId)) return mp.console.logInfo('Invalid bone', true, true);

    object = mp.objects.new(mp.game.joaat(model), new mp.Vector3(localPlayer.position.x, localPlayer.position.y, localPlayer.position.z - 5), {
        rotation: new mp.Vector3(0, 0, 0),
        alpha: 255,
        dimension: localPlayer.dimension
    });

    if (!object) return mp.console.logInfo('Failed to create object', true, true);

    modelName = mp.game.joaat(model);

    positions = JSON.parse(positions);

    setTimeout(() => {
        object.attachTo(
            localPlayer.handle,
            boneId,
            parseFloat(positions.offsetX),
            parseFloat(positions.offsetY),
            parseFloat(positions.offsetZ),
            parseFloat(positions.rotationX),
            parseFloat(positions.rotationY),
            parseFloat(positions.rotationZ),
            false,
            false,
            false,
            false,
            2,
            true
        );
    }, 200)
}

const onUpdatePosition = (positions) => {
    if (!object) return;

    positions = JSON.parse(positions);

    object.attachTo(
        localPlayer.handle,
        boneId,
        parseFloat(positions.offsetX),
        parseFloat(positions.offsetY),
        parseFloat(positions.offsetZ),
        parseFloat(positions.rotationX),
        parseFloat(positions.rotationY),
        parseFloat(positions.rotationZ),
        false,
        false,
        false,
        false,
        2,
        true
    );
}

const onReset = () => {
    onClear();
}

mp.events.add('cef::attachmentsEditor:updatePosition', onUpdatePosition.bind(this));
mp.events.add('cef::attachmentsEditor:reset', onReset.bind(this));
mp.events.add('cef::attachmentsEditor:apply', onApply.bind(this));

}; a; }
{let a = function scriptEntryPoint(mp) {
mp.game.streaming.requestAnimDict('timetable@floyd@cryingonbed@base');
mp.isHideInTrunk = false

class HideInTrunk {
    constructor() {
        this.hideData = []

        mp.events.add("playerQuit", (entity) => {
            let data = this.hideData.find((data => data.player == entity.remoteId))
            if (data) this.stopHideInTrunk(data.vehicle)
        })

        mp.events.add("entityStreamIn", (entity) => {
            let data = entity.getVariable("hiddenPlayer")
            if (data) this.startHideInTrunk(data)
        })

        mp.events.add("entityStreamOut", (entity) => {
            let data = entity.getVariable("hiddenPlayer")
            if (data) this.stopHideInTrunk(data.vehicle)
        })

        mp.events.addDataHandler("hiddenPlayer", (entity, value) => {
            if (entity.type != "vehicle") return
            if (!this.isStreamed(entity.remoteId)) return

            if (value) this.startHideInTrunk(value)
            else this.stopHideInTrunk(entity.remoteId)
        })

        mp.events.add("render", () => {
            let spliceIds = []

            this.hideData.forEach((data) => {
                const player = mp.players.atRemoteId(data.player)
                const vehicle = mp.vehicles.atRemoteId(data.vehicle)

                if (!isEntityExists(player) || !isEntityExists(vehicle)) return spliceIds.push(data.vehicle)

                if (!player.isPlayingAnim('timetable@floyd@cryingonbed@base', 'base', 3)) {
                    player.taskPlayAnim('timetable@floyd@cryingonbed@base', 'base', 8.0, -8.0, -1, 35, 0, false, false, false)
                }

                if (!player.isAttachedTo(vehicle.handle)) {
                    const vehicleSize = this.vehicleLayout(vehicle)

                    player.attachTo(vehicle.handle, 6286, 0.0, vehicleSize.size.min.y + 0.5, vehicleSize.size.z + 0.95, 0.0, 0.0, 0.0, false, false, false, false, 0, true)
                }
            })

            if (spliceIds.length) {
                for (let i = spliceIds.length - 1; i >= 0; i--) this.stopHideInTrunk(spliceIds[i])
            }
        })
    }

    rotateRect(angle, ox, oy, x, y, w, h) {
        const xAx = Math.cos(angle);  // x axis x
        const xAy = Math.sin(angle);  // x axis y
        x -= ox;  // move rectangle onto origin
        y -= oy;
        return [[ // return array holding the resulting points
            x * xAx - y * xAy + ox,   // Get the top left rotated position
            x * xAy + y * xAx + oy,   // and move it back to the origin
        ], [
            (x + w) * xAx - y * xAy + ox,   // Get the top right rotated position
            (x + w) * xAy + y * xAx + oy,
        ], [
            (x + w) * xAx - (y + h) * xAy + ox,   // Get the bottom right rotated position
            (x + w) * xAy + (y + h) * xAx + oy,
        ], [
            x * xAx - (y + h) * xAy + ox,   // Get the bottom left rotated position
            x * xAy + (y + h) * xAx + oy,
        ]
        ];
    }

    vehicleLayout(vehicle) {
        const sizeofVehicle = mp.game.gameplay.getModelDimensions(vehicle.model);
        const vehicleRotation = vehicle.getRotation(2);
        const Xwidth = (0 - sizeofVehicle.min.x) + (sizeofVehicle.max.x);
        const Ywidth = (0 - sizeofVehicle.min.y) + (sizeofVehicle.max.y);
        const degree = (vehicleRotation.z + 180) * Math.PI / 180;

        const newDegrees = this.rotateRect(degree, vehicle.position.x, vehicle.position.y, vehicle.position.x - sizeofVehicle.max.x, vehicle.position.y - sizeofVehicle.max.y, Xwidth, Ywidth);

        const frontX = newDegrees[0][0] + ((newDegrees[1][0] - newDegrees[0][0]) / 2);
        const frontY = newDegrees[0][1] + ((newDegrees[1][1] - newDegrees[0][1]) / 2);

        const bottomX = newDegrees[2][0] + ((newDegrees[3][0] - newDegrees[2][0]) / 2);
        const bottomY = newDegrees[2][1] + ((newDegrees[3][1] - newDegrees[2][1]) / 2);

        return {
            front: { x: frontX, y: frontY },
            back: { x: bottomX, y: bottomY },
            center: { x: vehicle.position.x, y: vehicle.position.y },
            size: {
                lengthX: Xwidth,
                lengthY: Ywidth,
                min: { x: sizeofVehicle.min.x, y: sizeofVehicle.min.y },
                max: { x: sizeofVehicle.max.x, y: sizeofVehicle.max.y },
                z: sizeofVehicle.min.z
            }
        };

    }

    isStreamed(remoteId) {
        return mp.vehicles.streamed.find(x => x.remoteId == remoteId)
    }

    startHideInTrunk(value) {
        const player = mp.players.atRemoteId(value.player)
        const vehicle = mp.vehicles.atRemoteId(value.vehicle)

        if (!isEntityExists(player) || !isEntityExists(vehicle)) return

        if (player == mp.players.local) {
            mp.game.ui.displayRadarCustom(false)
            mp.isHideInTrunk = value
            mp.players.local.raycasting.entity = undefined
            mp.players.local.raycasting.object = undefined
        }

        this.hideData.push(value)
    }

    stopHideInTrunk(vehicleRemoteId) {
        let data = this.hideData.find((data => data.vehicle == vehicleRemoteId))

        if (data) {
            const player = mp.players.atRemoteId(data.player)

            if (isEntityExists(player)) {
                player.detach(true, false)
                player.stopAnimTask('timetable@floyd@cryingonbed@base', 'base', 2)
                player.freezePosition(false)

                if (player == mp.players.local) {
                    mp.isHideInTrunk = false
                    mp.game.ui.displayRadarCustom(true)
                }
            }

            this.hideData.splice(this.hideData.indexOf(data), 1)
        }
    }
}

const hideInTrunk = new HideInTrunk()
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.game.streaming.requestAnimDict("quant_anim@hands_together");

class TakeHandPlayer {
    constructor(remoteId, followRemoteId) {
        this.remoteId = remoteId
        this.followRemoteId = followRemoteId
    }
}

class TakeHand {
    constructor() {
        this.followPlayers = []
        this.dictHand = "quant_anim@hands_together"

        mp.events.add("playerQuit", (entity) => {
            let value = entity.getVariable("takeHandTo");

            if (value != undefined) {
                let follow = this.getFollow(entity.remoteId);
                if (follow) this.removeFollow(entity.remoteId);
            }
        })

        mp.events.addDataHandler("takeHandTo", (entity, value) => {
            if (entity.type != "player") return

            if (value != undefined) {
                let follow = this.getFollow(value)
                if (!follow) this.addFollow(entity.remoteId, value)
            }
            else {
                let follow = this.getFollow(entity.remoteId)
                if (follow) this.removeFollow(entity.remoteId)
            }
        });

        mp.events.add("entityStreamIn", (entity) => {
            try {
                if (entity.type != "player") return

                let value = entity.getVariable("takeHandTo");

                if (value != undefined) {
                    let follow = this.getFollow(value);
                    if (!follow) this.addFollow(entity.remoteId, value);
                }
            }
            catch (err) {
                mp.events.callRemote("log", `Error client gamemode\scripts\TakeHand.js entityStreamIn: ${err}`)
            }
        });

        mp.events.add("entityStreamOut", (entity, value) => {
            try {
                if (entity.type != "player") return

                let value = entity.getVariable("takeHandTo");

                if (value != undefined) {
                    let follow = this.getFollow(entity.remoteId);
                    if (follow) this.removeFollow(entity.remoteId);
                }
            } catch (err) {
                mp.events.callRemote("log", `Error entityStreamOut: ${err}`)
            }
        });

        setInterval(() => {
            let spliceIds = []

            this.followPlayers.forEach((element) => {
                const player = mp.players.atRemoteId(element.remoteId)
                const follower = mp.players.atRemoteId(element.followRemoteId)

                if (!isEntityExists(player) || !isEntityExists(follower)) return spliceIds.push(element.remoteId)

                if (!follower.isAttachedTo(player.handle)) {
                    follower.attachTo(player.handle, 11816, 0.85, 0.0, 0.0, 0.0, 0.0, 0.0, false, false, true, true, 2, true)
                }

                if (!follower.isPlayingAnim(this.dictHand, 'together_man', 3)) {
                    follower.playAnim(this.dictHand, 'together_man', 8.0, 8.0, -1, 51, 0, false, false, false)
                }

                if (!player.isPlayingAnim(this.dictHand, 'together_girl', 3)) {
                    player.playAnim(this.dictHand, 'together_girl', 8.0, 8.0, -1, 51, 0, false, false, false)
                }

                const dict = "move_f@multiplayer"

                if (player.isWalking()) {
                    if (!follower.isPlayingAnim(dict, 'walk', 3)) {
                        follower.playAnim(dict, 'walk', 8.0, -8, -1, 1, 0.0, false, false, false)
                    }
                }
                else if (player.isRunning() || player.isSprinting()) {
                    if (!follower.isPlayingAnim(dict, 'run', 3)) {
                        follower.playAnim(dict, 'run', 8.0, -8, -1, 1, 0.0, false, false, false)
                    }
                }
                else {
                    follower.stopAnimTask(dict, 'walk', -8.0)
                    follower.stopAnimTask(dict, 'run', -8.0)
                }
            });

            if (spliceIds.length) {
                for (let i = spliceIds.length - 1; i >= 0; i--) this.removeFollow(spliceIds[i])
            }
        }, 500);
    }

    addFollow(remoteId, followRemoteId) {
        this.followPlayers.push(new TakeHandPlayer(remoteId, followRemoteId));
    }

    getFollow(remoteId) {
        let found = this.followPlayers.find((element => element.remoteId == remoteId));

        if (found) return found;
        else return undefined;
    }

    removeFollow(remoteId) {
        let found = this.followPlayers.find(element => element.remoteId == remoteId);

        if (found) {
            let follow = mp.players.atRemoteId(found.followRemoteId);
            let player = mp.players.atRemoteId(found.remoteId);

            if (isEntityExists(follow)) {
                follow.detach(true, false);

                const dict = follow.isMale() ? "move_m@multiplayer" : "move_f@multiplayer"

                follow.stopAnimTask(dict, 'walk', -8.0)
                follow.stopAnimTask(dict, 'run', -8.0)
                follow.stopAnimTask(this.dictHand, 'together_man', -8.0)
            }

            if (isEntityExists(player)) {
                player.stopAnimTask(this.dictHand, 'together_girl', -8.0)
            }
        }

        let findIndex = this.followPlayers.findIndex(element => element.remoteId == remoteId);
        if (findIndex != -1) this.followPlayers.splice(findIndex, 1);
    }
}

new TakeHand
}; a; }
{let a = function scriptEntryPoint(mp) {
function fixData(item) {
    item = JSON.stringify(item)
    if (item.includes("'")) item = item.replace(/'/g, '`')
    return item
}

mp.events.add("showCooking", (data) => {
    if (data) mp.interfaceActive = "cooking"
    else mp.interfaceActive = false
    browserMenu.call(`cooking`, `set`, data)
})

mp.events.add("cookingSetRecipes", (data) => {
    browserMenu.call(`cooking`, `setRecipes`, data)
})

mp.events.add("cooking.updateSqlId", (sqlId, newSqlId) => {
    if (mp.interfaceActive === "cooking") browserMenu.call(`cooking`, `updateSqlId`, sqlId, newSqlId)
})

mp.events.add("cooking.add", (data) => {
    if (mp.interfaceActive === "cooking") browserMenu.call(`cooking`, `add`, data)
})

mp.events.add("cooking.delete", (data) => {
    if (mp.interfaceActive === "cooking") browserMenu.call(`cooking`, `delete`, data)
})

mp.events.add("cooking.updateParams", (sqlId, params) => {
    if (mp.interfaceActive === "cooking") browserMenu.call(`cooking`, `updateParams`, sqlId, fixData(params))
})

mp.events.add("setCookingUniqueItems", (items) => {
    browserMenu.call("cooking", "addUniqueItems", items)
})

mp.events.add("setCookingStats", (items) => {
    browserMenu.call("cooking", "setCookingStats", items)
})

mp.enableMeleeDamageMultiplier = false

mp.events.add("playerReady", () => {
    mp.game.player.setRunSprintMultiplierFor(1.0)
})

mp.events.add("setBonusData", (name, enable) => {
    if (name === "runningSpeed") mp.game.player.setRunSprintMultiplierFor(enable ? 1.49 : 1.0)
    else if (name === "meleeDamage") mp.enableMeleeDamageMultiplier = enable
})
}; a; }
{let a = function scriptEntryPoint(mp) {
//We registered an event to the client side's events tree which sets discord status.
mp.events.add('setDiscordStatus', (serverName, status) => {
  mp.discord.update(serverName, status)
});

mp.events.add("updateDiscordForPlayer", (id) => {
  mp.events.call('setDiscordStatus', 'Quant RP – QUANT5.COM.UA', id != undefined ? `ID: ${id}` : `Авторизація`); 
});
}; a; }
{let a = function scriptEntryPoint(mp) {

try {
    const BasicScaleform = require("gamemode/scripts/ScaleformMessages/Scaleform.js")
    global.messageScaleform = BasicScaleform
    require("gamemode/scripts/ScaleformMessages/BigMessage.js")
    require("gamemode/scripts/ScaleformMessages/MidsizedMessage.js")

    mp.game.ui.messages = {
        showShard: (title, message, titleColor, bgColor, time = 5000) => mp.events.call("ShowShardMessage", title, message, titleColor, bgColor, time),
        showWeaponPurchased: (title, weaponName, weaponHash, time = 5000) => mp.events.call("ShowWeaponPurchasedMessage", title, weaponName, weaponHash, time),
        showPlane: (title, planeName, planeHash, time = 5000) => mp.events.call("ShowPlaneMessage", title, planeName, planeHash, time),
        showMidsized: (title, message, time = 5000) => mp.events.call("ShowMidsizedMessage", title, message, time),
        showMidsizedShard: (title, message, bgColor, useDarkerShard, condensed, time = 5000) => mp.events.call("ShowMidsizedShardMessage", title, message, bgColor, useDarkerShard, condensed, time)
    };
} catch (err) { 
    mp.events.callRemote("log", `Error ыыыыы: ${err}`)
}

}; a; }
{let a = function scriptEntryPoint(mp) {
class BasicScaleform {
    constructor() {

    }

    async requestScaleform(scaleformName) {
        this.handle = mp.game.graphics.requestScaleformMovie(scaleformName);
        while (!mp.game.graphics.hasScaleformMovieLoaded(this.handle)) await mp.game.waitAsync(0);
    }

    callFunction(functionName, ...args) {
        mp.game.graphics.pushScaleformMovieFunction(this.handle, functionName);

        args.forEach(arg => {
            switch(typeof arg) {
                case "string": {
                    mp.game.graphics.pushScaleformMovieFunctionParameterString(arg);
                    break;
                }

                case "boolean": {
                    mp.game.graphics.pushScaleformMovieFunctionParameterBool(arg);
                    break;
                }

                case "number": {
                    if(Number(arg) === arg && arg % 1 !== 0) {
                        mp.game.graphics.pushScaleformMovieFunctionParameterFloat(arg);
                    } else {
                        mp.game.graphics.pushScaleformMovieFunctionParameterInt(arg);
                    }
                }
            }
        });

        mp.game.graphics.popScaleformMovieFunctionVoid();
    }

    renderFullscreen() {
        mp.game.graphics.drawScaleformMovieFullscreen(this.handle, 255, 255, 255, 255, false);
    }

    dispose() {
        mp.game.graphics.setScaleformMovieAsNoLongerNeeded(this.handle);
    }
}

exports = BasicScaleform;
}; a; }
{let a = function scriptEntryPoint(mp) {
 

let bigMessageScaleform = null;
let bigMsgInit = 0;
let bigMsgDuration = 5000;
let bigMsgAnimatedOut = false;

mp.events.add("ShowWeaponPurchasedMessage", async (title, weaponName, weaponHash, time = 5000) => {
    if (bigMessageScaleform == null) {
        bigMessageScaleform = new messageScaleform();
        await bigMessageScaleform.requestScaleform("mp_big_message_freemode");
    }
    bigMessageScaleform.callFunction("SHOW_WEAPON_PURCHASED", title, weaponName, weaponHash);

    bigMsgInit = Date.now();
    bigMsgDuration = time;
    bigMsgAnimatedOut = false;
});

mp.events.add("ShowPlaneMessage", async (title, planeName, planeHash, time = 5000) => {
    if (bigMessageScaleform == null) {
        bigMessageScaleform = new messageScaleform();
        await bigMessageScaleform.requestScaleform("mp_big_message_freemode");
    }
    bigMessageScaleform.callFunction("SHOW_PLANE_MESSAGE", title, planeName, planeHash);

    bigMsgInit = Date.now();
    bigMsgDuration = time;
    bigMsgAnimatedOut = false;
});

mp.events.add("ShowShardMessage", async (title, message, titleColor, bgColor, time = 5000) => {
    if (bigMessageScaleform == null) {
        bigMessageScaleform = new messageScaleform();
        await bigMessageScaleform.requestScaleform("mp_big_message_freemode");
    }
    bigMessageScaleform.callFunction("SHOW_SHARD_CENTERED_MP_MESSAGE", title, message, titleColor, bgColor);

    bigMsgInit = Date.now();
    bigMsgDuration = time;
    bigMsgAnimatedOut = false;
});

mp.events.add("render", () => {
    if (bigMessageScaleform != null) {
        bigMessageScaleform.renderFullscreen();

        if (bigMsgInit > 0 && Date.now() - bigMsgInit > bigMsgDuration) {
            if (!bigMsgAnimatedOut) {
                bigMessageScaleform.callFunction("TRANSITION_OUT");
                bigMsgAnimatedOut = true;
                bigMsgDuration += 750;
            } else {
                bigMsgInit = 0;
                bigMessageScaleform.dispose();
                bigMessageScaleform = null;
            }
        }
    }
});
}; a; }
{let a = function scriptEntryPoint(mp) {

let midsizedMessageScaleform = null;
let msgInit = 0;
let msgDuration = 5000;
let msgAnimatedOut = false;
let msgBgColor = 0;

mp.events.add("ShowMidsizedMessage", async (title, message, time = 5000) => {
    if (midsizedMessageScaleform == null) {
        midsizedMessageScaleform = new messageScaleform();
        await midsizedMessageScaleform.requestScaleform("midsized_message");
    }
    midsizedMessageScaleform.callFunction("SHOW_MIDSIZED_MESSAGE", title, message);

    msgInit = Date.now();
    msgDuration = time;
    msgAnimatedOut = false;
});

mp.events.add("ShowMidsizedShardMessage", async (title, message, bgColor, useDarkerShard, condensed, time = 5000, playSound = true) => {
	if (playSound) mp.events.call("playSound", "Boss_Blipped", "GTAO_Magnate_Hunt_Boss_SoundSet")
    if (midsizedMessageScaleform == null) {
        midsizedMessageScaleform = new messageScaleform();
        await midsizedMessageScaleform.requestScaleform("midsized_message");
    }
    midsizedMessageScaleform.callFunction("SHOW_SHARD_MIDSIZED_MESSAGE", title, message, bgColor, useDarkerShard, condensed);
    msgInit = Date.now();
    msgDuration = time;
    msgAnimatedOut = false;
    msgBgColor = bgColor;
});

mp.events.add("render", () => {
    if (midsizedMessageScaleform != null) {
        midsizedMessageScaleform.renderFullscreen();

        if (msgInit > 0 && Date.now() - msgInit > msgDuration) {
            if (!msgAnimatedOut) {
                midsizedMessageScaleform.callFunction("SHARD_ANIM_OUT", msgBgColor);
                msgAnimatedOut = true;
                msgDuration += 750;
            } else {
                msgInit = 0;
                midsizedMessageScaleform.dispose();
                midsizedMessageScaleform = null;
            }
        }
    }
});
}; a; }
{let a = function scriptEntryPoint(mp) {
const DRONE_TYPES = {
    LSPD: 0,
    RED: 1,
    BLUE: 2,
};

const DRONE_HASHES = {
    [DRONE_TYPES.LSPD]: 1657647215,
    [DRONE_TYPES.RED]: 442185650,
    [DRONE_TYPES.BLUE]: -388213579,
};

const serializeDroneData = (id, type) => {
    return `${id}:${type}`;
};

const deserializeDroneData = (str) => {
    const [id, type] = str.split(":");
    return { id: parseInt(id), type: parseInt(type) };
};

class Drone {
    static pool = new Map();

    constructor(vehicle, id, type) {
        this.id = id;
        this.vehicle = vehicle;
        this.type = type;
        this.vehicle.drone = this;

        // this.speed = {
        //     max: 13,
        //     current: 0,
        //     currentZ: 0,
        //     slowly: 0.1,
        // };

        // this.acceleration = {
        //     forward: 0.4,
        //     turning: 0.9,
        //     vertical: 0.004,
        //     deceleration: 0.05,
        // };

        this.speed = {
            max: 9,
            current: 0,
            currentZ: 0,
            slowly: 0.1,
        };

        this.acceleration = {
            forward: 0.3,
            turning: 0.9,
            vertical: 0.0035,
            deceleration: 0.05,
        };

        this.vision_state = 0;

        if (this.vehicle.handle != 0) {
            global.waitForHandle(this.droneObject).then(() => {
                setTimeout(() => {
                    this.init();
                }, 100);
            });
        }

        Drone.pool.set(this.id, this);
    }

    init() {
        if (!this.vehicle || !mp.vehicles.exists(this.vehicle)) return;

        this.vehicle.setAlpha(0);
        this.vehicle.setDoorsLocked(2);
        this.vehicle.setCanBeDamaged(false);
        this.vehicle.setInvincible(true);

        mp.game.audio.playSoundFromEntity(mp.game.audio.getSoundId(), "Flight_Loop", this.vehicle.handle, "DLC_Arena_Drone_Sounds", true, 0);

        const attachDroneObject = () => {
            if (this.droneObject && mp.objects.exists(this.droneObject)) {
                this.droneObject.attachTo(this.vehicle.handle, 0, 0, 0, 0.2, 0, 0, 180, false, false, false, false, 0, true);
            }
        };

        if (this.droneObject && mp.objects.exists(this.droneObject)) {
            attachDroneObject();
        } else {
            this.droneObject = mp.objects.new(DRONE_HASHES[this.type], this.vehicle.position, { dimension: this.vehicle.dimension });

            global.waitForHandle(this.droneObject).then(() => {
                setTimeout(attachDroneObject, 100);
            });
        }
    }

    destroy() {
        if (this.droneObject && mp.objects.exists(this.droneObject)) {
            this.droneObject.destroy();
        }
    }

    static getById(id) {
        return Drone.pool.get(id);
    }
}

class DroneController {
    constructor() {
        this.contRcRatePR = 1.5;
        this.contRcRateY = 1.5;
        this.contExpoPR = 0.8;
        this.contExpoY = 0.8;
        this.contRateP = 0.5;
        this.contRateR = 0.5;
        this.contRateY = 0.3;
    }

    calculateDegSec(input, rcRate, gRate, expo) {
        let RPY_useRates = 1.0 - Math.abs(input) * gRate;
        let input2 = input * input * input * expo + input * (1 - expo);
        return (200.0 / RPY_useRates) * input2 * rcRate;
    }

    calculateDegSecPitch(inputP) {
        return this.calculateDegSec(inputP, this.contRcRatePR, this.contRateP, this.contExpoPR);
    }

    calculateDegSecRoll(inputR) {
        return this.calculateDegSec(inputR, this.contRcRatePR, this.contRateR, this.contExpoPR);
    }

    calculateDegSecYaw(inputY) {
        return this.calculateDegSec(inputY, this.contRcRateY, this.contRateY, this.contExpoY);
    }

    vectorMag(vector) {
        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);
    }

    vectorNorm(vector) {
        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);
    }

    toggleVision(drone) {
        try {
            if (drone.vision_state === 0) {
                mp.game.graphics.setNightvision(true);
                drone.vision_state = 1;
            } else if (drone.vision_state === 1) {
                mp.game.graphics.setNightvision(false);
                mp.game.graphics.setSeethrough(true);
                drone.vision_state = 2;
            } else {
                mp.game.graphics.setNightvision(false);
                mp.game.graphics.setSeethrough(false);
                drone.vision_state = 0;
            }
            mp.game.audio.playSoundFrontend(-1, "SELECT", "HUD_FRONTEND_DEFAULT_SOUNDSET", false);
        } catch (e) {
            mp.console.logError(`Error toggling drone vision: ${e}`);
        }
    }

    resetVision(drone) {
        mp.game.graphics.setNightvision(false);
        mp.game.graphics.setSeethrough(false);
        drone.vision_state = 0;
    }

    disableControls() {
        mp.game.controls.disableControlAction(0, 85, true);
        mp.game.controls.disableControlAction(0, 75, true);
        mp.game.controls.disableControlAction(0, 8, true);
        mp.game.controls.disableControlAction(0, 9, true);
        mp.game.controls.disableControlAction(0, 30, true);
        mp.game.controls.disableControlAction(0, 31, true);
        mp.game.controls.disableControlAction(0, 32, true);
        mp.game.controls.disableControlAction(0, 33, true);
        mp.game.controls.disableControlAction(0, 34, true);
        mp.game.controls.disableControlAction(0, 35, true);
        mp.game.controls.disableControlAction(0, 36, true);
        mp.game.controls.disableControlAction(0, 63, true);
        mp.game.controls.disableControlAction(0, 64, true);
        mp.game.controls.disableControlAction(0, 71, true);
        mp.game.controls.disableControlAction(0, 72, true);
        mp.game.controls.disableControlAction(0, 77, true);
        mp.game.controls.disableControlAction(0, 78, true);
        mp.game.controls.disableControlAction(0, 87, true);
        mp.game.controls.disableControlAction(0, 88, true);
        mp.game.controls.disableControlAction(0, 89, true);
        mp.game.controls.disableControlAction(0, 90, true);
        mp.game.controls.disableControlAction(0, 129, true);
        mp.game.controls.disableControlAction(0, 130, true);
        mp.game.controls.disableControlAction(0, 133, true);
        mp.game.controls.disableControlAction(0, 134, true);
        mp.game.controls.disableControlAction(0, 136, true);
        mp.game.controls.disableControlAction(0, 139, true);
        mp.game.controls.disableControlAction(0, 146, true);
        mp.game.controls.disableControlAction(0, 147, true);
        mp.game.controls.disableControlAction(0, 148, true);
        mp.game.controls.disableControlAction(0, 149, true);
        mp.game.controls.disableControlAction(0, 150, true);
        mp.game.controls.disableControlAction(0, 151, true);
        mp.game.controls.disableControlAction(0, 232, true);
        mp.game.controls.disableControlAction(0, 266, true);
        mp.game.controls.disableControlAction(0, 267, true);
        mp.game.controls.disableControlAction(0, 268, true);
        mp.game.controls.disableControlAction(0, 269, true);
        mp.game.controls.disableControlAction(0, 278, true);
        mp.game.controls.disableControlAction(0, 279, true);
        mp.game.controls.disableControlAction(0, 338, true);
        mp.game.controls.disableControlAction(0, 339, true);
        mp.game.controls.disableControlAction(0, 44, true);
        mp.game.controls.disableControlAction(0, 20, true);
        mp.game.controls.disableControlAction(0, 47, true);
        mp.game.controls.disableControlAction(0, 200, true);
    }

    handleControl(drone) {
        try {
            if (drone.vehicle && mp.vehicles.exists(drone.vehicle)) {
                this.disableControls();

                let roll = drone.vehicle.getRoll();
                let pitch = drone.vehicle.getPitch();

                let isPressS = mp.game.controls.isDisabledControlPressed(0, 32);
                let isPressW = mp.game.controls.isDisabledControlPressed(0, 33);
                let isPressA = mp.game.controls.isDisabledControlPressed(0, 34);
                let isPressD = mp.game.controls.isDisabledControlPressed(0, 35);

                let inputPitch = isPressS ? drone.acceleration.forward : 0;
                let inputRoll = isPressW ? drone.acceleration.forward * -1 : 0;
                let inputYaw = isPressA ? drone.acceleration.turning : 0;
                let inputThrottle = isPressD ? drone.acceleration.turning * -1 : 0;

                let hasColl = drone.vehicle.hasCollidedWithAnything();

                let offsetStop = 0;
                let offsetRotRoll = 0;
                let offsetRotYaw = 0;

                if (isPressS) offsetRotRoll = -0.6;
                if (isPressW) offsetRotRoll = 0.6;

                if (isPressA && (drone.speed.current > 5 || drone.speed.current < -5)) offsetRotYaw = -2;
                if (isPressD && (drone.speed.current > 5 || drone.speed.current < -5)) offsetRotYaw = 2;

                let zOffset = 0;
                let zOffsetStop = 0;
                if (mp.game.controls.isDisabledControlPressed(0, 21) && !hasColl) zOffset = drone.acceleration.vertical;
                if (mp.game.controls.isDisabledControlPressed(0, 36) && !hasColl) zOffset = -drone.acceleration.vertical;

                if (!mp.game.controls.isDisabledControlPressed(0, 36) && !mp.game.controls.isDisabledControlPressed(0, 21) && !hasColl) {
                    if (drone.speed.currentZ < -0.1) zOffsetStop = drone.acceleration.vertical;
                    else if (drone.speed.currentZ > 0.1) zOffsetStop = -drone.acceleration.vertical;
                    else if (drone.speed.currentZ < 0) zOffsetStop = drone.acceleration.vertical / 4;
                    else if (drone.speed.currentZ > 0) zOffsetStop = -drone.acceleration.vertical / 4;
                }

                if (!isPressA && !isPressD) {
                    if (drone.vehicle.getRotation(0).y < -1) offsetRotYaw = 2;
                    else if (drone.vehicle.getRotation(0).y > 1) offsetRotYaw = -2;
                    else if (drone.vehicle.getRotation(0).y < 0) offsetRotYaw = 0.001;
                    else if (drone.vehicle.getRotation(0).y > 0) offsetRotYaw = -0.001;
                }

                if (!isPressS && !isPressW && drone.speed.current !== 0) {
                    if (drone.speed.current < -1) offsetStop = drone.acceleration.deceleration;
                    else if (drone.speed.current > 1) offsetStop = -drone.acceleration.deceleration;
                    else if (drone.speed.current < 0) offsetStop = 0.001;
                    else if (drone.speed.current > 0) offsetStop = -0.001;

                    if (drone.vehicle.getRotation(0).x < -1) offsetRotRoll = 0.6;
                    else if (drone.vehicle.getRotation(0).x > 1) offsetRotRoll = -0.6;
                    else if (drone.vehicle.getRotation(0).x < 0) offsetRotRoll = 0.001;
                    else if (drone.vehicle.getRotation(0).x > 0) offsetRotRoll = -0.001;
                }

                let yoff = inputPitch + inputRoll;
                let xoff = inputYaw + inputThrottle;

                drone.speed.current += yoff + offsetStop;

                if (drone.vehicle.isInWater()) zOffset = 0.01;

                let speedOffsetZ = 0;
                if (drone.speed.current > 1) {
                    speedOffsetZ = zOffset + drone.vehicle.getRotation(0).x / -200;
                }
                if (drone.speed.current < -1) {
                    speedOffsetZ = zOffset + drone.vehicle.getRotation(0).x / 400;
                }

                drone.speed.currentZ += zOffset + zOffsetStop;
                if (drone.speed.currentZ > drone.speed.max / 100) drone.speed.currentZ = drone.speed.max / 100;
                if (drone.speed.currentZ < drone.speed.max / -100) drone.speed.currentZ = drone.speed.max / -100;

                if (drone.speed.max < drone.speed.current) drone.speed.current = drone.speed.max;
                if ((drone.speed.max * -1) / 2 > drone.speed.current) drone.speed.current = (drone.speed.max * -1) / 2;

                if (hasColl && drone.speed.current > 5) drone.speed.current = 5;

                let newPos = drone.vehicle.getOffsetFromInWorldCoords(0, drone.speed.current / 50, drone.speed.currentZ + speedOffsetZ);
                let heading = drone.vehicle.getRotation(0).z;

                drone.vehicle.setVelocity(0, drone.speed.current / 30, drone.speed.currentZ + drone.vehicle.getRotation(0).x / -100);

                let finalX = offsetRotRoll + drone.vehicle.getRotation(0).x;
                let finalY = offsetRotYaw + drone.vehicle.getRotation(0).y;

                if (finalX > 25) finalX = 25;
                if (finalX < -25) finalX = -25;

                if (finalY > 50) finalY = 50;
                if (finalY < -50) finalY = -50;

                drone.vehicle.setRotation(finalX, finalY, heading + xoff, 0, false);
                drone.vehicle.setCoordsNoOffset(newPos.x, newPos.y, newPos.z, true, true, true);
            }
        } catch (e) {
            mp.console.logError(`Error in drone control: ${e}`);
        }
    }
}

class DroneSession {
    constructor() {
        this.isInDrone = false;
        this.activeDrone = null;
        this.controller = new DroneController();
    }

    enter(droneId) {
        const drone = Drone.getById(droneId);
        if (!drone) return;

        this.isInDrone = true;
        this.activeDrone = drone;
    }

    exit() {
        if (!this.isInDrone) return;

        this.isInDrone = false;
        if (this.activeDrone) {
            this.controller.resetVision(this.activeDrone);
        }

        this.activeDrone = null;
    }

    toggleVision() {
        if (this.isInDrone && this.activeDrone && this.activeDrone.type === DRONE_TYPES.LSPD) {
            this.controller.toggleVision(this.activeDrone);
        }
    }

    handleActiveControl() {
        if (this.isInDrone && this.activeDrone) {
            this.controller.handleControl(this.activeDrone);
        }
    }

    isActive() {
        return this.isInDrone;
    }

    getActiveDrone() {
        return this.activeDrone;
    }
}

const droneSession = new DroneSession();

mp.isDroneSessionActive = () => droneSession.isActive()

mp.events.add("c:drone:control", (droneId) => {
    droneSession.enter(droneId);
});

mp.events.add("c:drone:exit", () => {
    droneSession.exit();
});

mp.events.add("playerLeaveVehicle", () => {
    if (droneSession.isActive()) {
        droneSession.exit();
    }
});

mp.events.add("outgoingDamage", (sourceEntity, targetEntity, targetPlayer, weapon, boneIndex, damage) => {
    if (sourceEntity !== mp.players.local) return;

    if (targetEntity && targetEntity.type === "vehicle" && targetEntity.drone) {
        mp.events.callRemote("s:drone:damage", targetEntity.drone.id, weapon, damage);
    }
});

mp.keys.bind(0x1b, true, () => {
    if (droneSession.isActive()) {
        mp.events.callRemote("s:drone:exit");
    }
});

mp.keys.bind(0x14, false, () => {
    if (droneSession.isActive()) {
        droneSession.toggleVision();
    }
});

mp.events.add("playerReady", () => {
    mp.events.addDataHandler("drone", (entity, value, oldValue) => {
        if (value != null) {
            const { id, type } = deserializeDroneData(value);

            new Drone(entity, id, type);
        }
    });

    mp.vehicles.forEach((vehicle) => {
        const droneData = vehicle.getVariable("drone");
        if (droneData != null) {
            const { id, type } = deserializeDroneData(droneData);

            new Drone(vehicle, id, type);
        }
    });
});

mp.events.add("entityStreamIn", (entity) => {
    if (entity && entity.type === "vehicle" && entity.drone) {
        entity.drone.init();
    }
});

mp.events.add("entityStreamOut", (entity) => {
    if (entity && entity.type === "vehicle" && entity.drone) {
        entity.drone.destroy();
    }
});

mp.events.add("render", () => {
    droneSession.handleActiveControl();
});

}; a; }
{let a = function scriptEntryPoint(mp) {
const localPlayer = mp.players.local

class Graffiti {
	constructor() {
		
	}
	drawGraffiti(model) {
		if (this.drawedGraf) this.stopDrawGraffiti();
		this.drawedGraf = mp.objects.new(mp.game.joaat(model), localPlayer.position, {
			rotation: new mp.Vector3(0, 0, 0),
			dimension: 0
		});
		this.model = model;
		mp.events.add('render', this.render);
		mp.keys.bindEx(0x45, true, this.applyDraw, "Граффити"); 
	}
	stopDrawGraffiti() {
		if (!this.drawedGraf) return;
		mp.keys.unbind(0x45, true, this.applyDraw);  
		mp.events.remove("render", this.render);
		this.drawedGraf.destroy();
		delete this.drawedGraf;
		delete this.model;
	}
	applyDraw() {
		if(mp.bindBlocker()) return;
		const info = {pos: graffiti.drawedGraf.position, rot: graffiti.drawedGraf.rotation}
		mp.events.callRemote("graffiti:save", JSON.stringify(info), graffiti.model);
	}
	render() {
		const distance = 10.0;
		const position = new mp.Vector3(localPlayer.position.x, localPlayer.position.y, localPlayer.position.z + 0.5);
		const direction = localPlayer.raycasting.camera.getDirection();
		const farAway = new mp.Vector3((direction.x * distance) + (position.x), (direction.y * distance) + (position.y), (direction.z * distance) + (position.z));
		const raycast = mp.raycasting.testPointToPoint(position, farAway, mp.players.local, [1, 16]);
		if (raycast) {
			graffiti.drawedGraf.position = raycast.position; 
			var rot = localPlayer.raycasting.camera.getRot(2)
			graffiti.drawedGraf.rotation = new mp.Vector3(0, 0, rot.z);
		}
	}
}

const graffiti = new Graffiti()	

mp.events.add({
	"graffiti:draw": (model = false) => {
		if (model) graffiti.drawGraffiti(model);
		else graffiti.stopDrawGraffiti();
	},
	"graffiti:startPaint": (faction) => {
		browserMenu.call(`graffiti`, `showGrafitti`, true, faction)
	},
	"graffiti:forseClose": () => {
		browserMenu.call(`graffiti`, `showGrafitti`, false)
	},
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("promo.show", (data) => {
  if (data && !mp.isPromoActive) {
    mp.events.call('setBlockControl', true);
    mp.isPromoActive = true
    setCursor(true)

    browserMenu.call(`promo`, `show`, data)
  } else if (!data && mp.isPromoActive) {
    browserMenu.call(`promo`, `show`, false)
    mp.events.call("hudControl.enable", true);
    mp.events.call('setBlockControl', false);
    setCursor(false)
    mp.isPromoActive = false
  }
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.chipStationActive = false

mp.events.add("setChipStation", (active, data = false) => {
  browserMenu.call(`chipsAPI`, `setActive`, active, data);
  mp.chipStationActive = active
})

mp.events.add("showChipsEnter", (data) => {
  if (data) mp.interfaceActive = "chipsEnter"
  else mp.interfaceActive = false
  browserMenu.call(`chipsEnter`, `set`, data)
})
}; a; }
{let a = function scriptEntryPoint(mp) {


const { findWeaponDataByHash } = require("gamemode/scripts/weapons/weapon_data.js");

class HitObject { 
    constructor(amount, position, maxcolor) {
        this.amount = amount
        this.position = position
        this.count = 0
        this.maxcolor = maxcolor
    }
}

class HitText {
    #list = [];
    constructor() {
      this.#list = [];
    }
  
    #getColorForValue(value, minValue, maxValue, colors) {
      if (colors.length < 2) {
        throw new Error("There should be at least two colors for interpolation.");
      }
  
      const normalizedValue = (value - minValue) / (maxValue - minValue);
      const rangePerColor = 1 / (colors.length - 1);
      const colorIndex = Math.min(Math.floor(normalizedValue / rangePerColor), colors.length - 2);
      const fractionalPart = (normalizedValue - colorIndex * rangePerColor) / rangePerColor;
  
      const startColor = colors[colorIndex];
      const endColor = colors[colorIndex + 1];
      const r = Math.round(startColor[0] + (endColor[0] - startColor[0]) * fractionalPart);
      const g = Math.round(startColor[1] + (endColor[1] - startColor[1]) * fractionalPart);
      const b = Math.round(startColor[2] + (endColor[2] - startColor[2]) * fractionalPart);
  
      return [r, g, b];
    }
  
    add(amount, position, maxcolor) {
      this.#list.push(new HitObject(amount, position, maxcolor));
    }
  
    render() {
      this.#list.forEach((element) => {
        mp.game.graphics.drawText(element.amount.toString(), [element.position.x, element.position.y, element.position.z], {
          font: 4,
          centre: true,
          color: [
            ...this.#getColorForValue(element.amount, 0, element.maxcolor, [
              [0, 255, 0],
              [255, 0, 0],
            ]),
            255 - element.count,
          ],
          scale: [0.4, 0.4],
          outline: true,
        });
        element.count += 3;
        element.position.z += 0.02;
  
        if (element.count > 155) {
          let find = Hits.#list.findIndex((elemen) => elemen == element);
          Hits.#list.splice(find, 1);
        }
      });
    }
}

const Hits = new HitText();

let activeHitmarker = false
mp.events.add("setHitmarker", (value, server) => {
    if (value !== undefined) activeHitmarker = value;
    else activeHitmarker = !activeHitmarker;
    if (server) return
    if (activeHitmarker) rpc.callBrowser(browserMenu, "nInfo", `Відображення шкоди активовано!`)
    else rpc.callBrowser(browserMenu, "nInfo", `Відображення шкоди вимкнено!`)
})

mp.events.add("render", () => {
    Hits.render()
    if (mp.players.exists(mp.players.local)) {
        let passiveMode = !!mp.players.local.getVariable("passiveMode")
        mp.players.local.setProofs(passiveMode, passiveMode, passiveMode, false, passiveMode, false, false, false);
    }
})

const damageMult = {
    0: 0.6,
    1: 0.5,
    2: 0.5,
    3: 0.5,
    4: 0.5,
    5: 0.5,
    6: 0.5,
    7: 0.8,
    8: 0.8 ,
    9: 1.0,
    10: 1.0,
    11: 1.25,
    12: 0.8,
    13: 0.8,
    14: 0.8,
    15: 1.25,
    16: 0.8,
    17: 0.8,
    18: 0.8,
    19: 1.5,
    20: 2.0
}


// const damageRemainder = 1

let lastRevolverShotTime = Date.now()
let lastRevolverShotPlayer = null

function pointingAt(distance) {
    const camera = mp.cameras.new("gameplay");
    const position = camera.getCoord();
    const direction = camera.getDirection();
  
    const target = {
      x: direction.x * distance + position.x,
      y: direction.y * distance + position.y,
      z: direction.z * distance + position.z,
    };
  
    return (mp.raycasting.testPointToPoint(position, new mp.Vector3(target.x, target.y, target.z), [1, 16]) || {}).position || null;
  }

mp.events.add('outgoingDamage', (sourceEntity, targetEntity, sourcePlayer, weapon, boneIndex, damage) => {
  if(!targetEntity || targetEntity.type != "player") return;
  if (!sourceEntity.weapon || targetEntity.variable_godmode || !!targetEntity.getVariable("passiveMode") || (targetEntity.variable_isInGreenZone && weapon !== 911657153)) return true;
  
  const sourceWeapon = sourceEntity.weapon;
  const damageType = mp.game.weapon.getWeaponDamageType(sourceWeapon);
  const weaponGroup = mp.game.weapon.getWeapontypeGroup(sourceWeapon);
  const weaponParams = findWeaponDataByHash (sourceWeapon)
  if (damageType === 2 || damageType === 3 || sourceWeapon == 126349499){ // 126349499 - Сніжок
    if (sourceWeapon == 3249783761 && lastRevolverShotPlayer == sourceEntity && Date.now() - lastRevolverShotTime < 50) { // 3249783761 - Револьвер
        return true
    }

    if (weaponParams && weaponParams.damage) {
        let damage = parseInt(weaponParams.damage);
        let dist = mp.game.system.vdist(targetEntity.position.x, targetEntity.position.y, targetEntity.position.z, sourceEntity.position.x, sourceEntity.position.y, sourceEntity.position.z);
        
        if (dist > 50 && ![3082541095, 416676503].includes(weaponGroup) && ![3249783761, 205991906, 3415619887, 2548703416].includes(sourceWeapon)) {
            damage /= dist / 50 ;
        }

        const reduceDamage = targetEntity.getVariable("reduceDamage");
        if (targetEntity.variable_Armour <= 0 && reduceDamage?.reduce) {
            damage /= reduceDamage.reduce;
        }

        damage *= damageMult[boneIndex] ?? 1;

        if (damageType === 2 && mp.enableMeleeDamageMultiplier) damage *= 2

        if (sourceWeapon == 205991906) damage = 1000; // Хеві снайпер

        if (weaponGroup != 3082541095 && damage > 80) {
            damage = 80;
        }

        if (sourceWeapon == 3249783761) { // Револьвер
            lastRevolverShotPlayer = sourceEntity;
            lastRevolverShotTime = Date.now();
        }

        damage = Math.round(damage);

        if (sourceEntity.vehicle && sourceEntity.vehicle.getPedInSeat(-1) == sourceEntity.handle) damage = 1;

        mp.game.weapon.setCurrentDamageEventAmount(damage);
        const healthAndArmour = targetEntity.getHealth() + targetEntity.getArmour();
        // if(healthAndArmour - damage <= 0) mp.events.callRemote("sendPlayerDeath", targetEntity);
        if (healthAndArmour > 0) targetEntity.applyDamageTo(damage, true);

        if (activeHitmarker) {
            // chatDebug(`нанес удар ${damage} в позиции ${boneIndex} WeaponGroup: ${WeaponGroup}`)
            Hits.add(parseInt(damage), pointingAt(9999) ?? targetEntity.position, Math.floor(parseInt(weaponParams.damage) * Math.max(...Object.values(damageMult))))
            mp.events.call("enableSound", "hitmarker.mp3", 0.06)   
        }

        if (mp.captureStats?.started) mp.captureStats.dmg += damage
    }
  } 
});

// let damageTimeout = Date.now()
let lastDamager = null;

let lastDeath = null;

mp.events.add("incomingDamage", (sourceEntity, sourcePlayer, targetEntity, weapon, boneIndex, damage) => {
  if (!targetEntity || targetEntity.type != "player") return;
  if (!sourceEntity.weapon || targetEntity.variable_godmode || !!targetEntity.getVariable("passiveMode") || (targetEntity.variable_isInGreenZone && weapon !== 911657153)) return true;

  // damageTimeout = Date.now()
  // lastDamager = sourcePlayer ? sourcePlayer : lastDamager;
  
  const healthAndArmour = targetEntity.getHealth() + targetEntity.getArmour();
  if(healthAndArmour - damage <= 0 && healthAndArmour > 0 && !!(sourceEntity ?? sourcePlayer)){
    mp.events.callRemote("gPlayerDeath", 0, sourcePlayer ?? sourceEntity);
    lastDeath = Date.now();
  }

  mp.game.weapon.setCurrentDamageEventAmount(0);
  mp.game.weapon.setCurrentDamageEventCritical(healthAndArmour - damage <= 0);
  targetEntity.applyDamageTo(parseInt(damage), true);
});


mp.events.add("playerDeath", (player, reason, killer) => {
    if(player != mp.players.local) return;

    chatDebug("playerDeath")
    chatDebug(`reason: ${reason ?? "no reason"} | killer: ${killer ? `YES | ${killer.remoteId}` : "NO"}`)
    if (Date.now() - lastDeath < 3000) return
    if (player.variable_attachedObject) mp.events.callRemote("removeAttach");
    mp.events.callRemote("gPlayerDeath", reason, killer);
    lastDeath = Date.now();
});

mp.events.add("testPlayer", (player_id) => {
  let targetEntity = mp.players.atRemoteId(player_id)
  if (!targetEntity) return chatDebug(`testPlayer not found ${player_id}`)
  chatDebug(`testPlayer ${targetEntity.variable_godmode} ${!!targetEntity.getVariable("passiveMode")} ${targetEntity.variable_isInGreenZone}`)
});

function getMeeleKiller() {
	const localplayer = mp.players.local;
	let minDist = null;
	let lastPlayer = null;
	mp.players.forEachInStreamRange((player) => {
		if (player.weapon != 2725352035 || player.weapon != -1569615261) return;

		const distance = mp.game.system.vdist(
			player.position.x,
			player.position.y,
			player.position.z,
			localplayer.position.x,
			localplayer.position.y,
			localplayer.position.z
		);

		if (!minDist && !lastPlayer) {
			minDist = distance;
			lastPlayer = player;
		} else {
			if (minDist > distance) {
				minDist = distance;
				lastPlayer = player;
			}
		}
	});
	return minDist < 10 ? lastPlayer : null;
}



mp.events.add("authCharacter.success", () => { 
    try {
        let lastHealth = mp.players.local.getHealth()
        let lastArmour = mp.players.local.getArmour()

        setInterval(() => {
            let newHealth = mp.players.local.getHealth()
            let newArmour = mp.players.local.getArmour()
            if (lastHealth !== newHealth) {
                mp.events.callRemote("playerDamaged", newHealth)
                lastHealth = newHealth
            }
            if (lastArmour !== newArmour) {
                mp.events.callRemote("playerDamaged", undefined, newArmour)
                lastArmour = newArmour
            }
        }, 100) 
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\Hitmarker.js authCharacter.success: ${err}`)
    }
});



mp.events.add('playerWeaponShot', async (targetPosition, targetEntity) => {
  let currentWeapon = mp.players.local.weapon;
  if (currentWeapon == 126349499) {
    await sleep(500);
    mp.events.call("enableSound", "snowshoot.mp3", 1.0);
    mp.events.callRemote("getSnowBallShot", targetEntity);
  }
  else {
    const weaponParams = findWeaponDataByHash(currentWeapon);

    if (weaponParams && targetEntity) {
      const healthSumm = targetEntity.getHealth() + targetEntity.getArmour();
      const isNextDead = healthSumm - weaponParams.damage <= 0;
      targetEntity.setCanRagdoll(isNextDead);
      // targetEntity.setCanBeDamaged(isNextDead);
    }
  }
});
}; a; }
{let a = function scriptEntryPoint(mp) {

mp.events.add("authCharacter.success", () => {  
    try {
        mp.events.add("setMainMenu", (params) => { 
            if (mp.bindBlocker({ mainmenu: mp.isMainMenuActive, noknock: true })) return 
            if (params && mp.isMainMenuActive) {
                mp.events.call("setMainMenu", null)
            } else {
                if (params && params.house) {
                    let street = mp.game.ui.getStreetNameFromHashKey(mp.game.pathfind.getStreetNameAtCoord(params.house.position.x, params.house.position.y, params.house.position.z, 0, 0)["streetName"]) 
                    params.house.street = street
                    delete params.house.position
                }
                mp.isMainMenuActive = !!params
                browserMenu.call(`mainMenuAPI`, `set`, params)
            }
        }) 
        mp.events.add("setMainMenuActive", (params) => {
            mp.isMainMenuActive = params
        })
        mp.events.add("updateMainMenuData", () => {
            if (mp.isMainMenuActive) {
                mp.events.callRemote("getCharacterInfo")
            }
        })
        mp.events.add("getCharacterInfo", (params) => {
            if (mp.isMainMenuActive) {
                if (params.house) {
                    let street = mp.game.ui.getStreetNameFromHashKey(mp.game.pathfind.getStreetNameAtCoord(params.house.position.x, params.house.position.y, params.house.position.z, 0, 0)["streetName"]) 
                    params.house.street = street
                    delete params.house.position
                }
                browserMenu.call(`mainMenuAPI`, `_initInfo`, params)
            }
        })
        mp.keys.bindEx(0x4D, true, async () => { // M Key
            try { 
                let getActiveBrowserElement = null
                if (mp.isMainMenuActive) getActiveBrowserElement = await rpc.callBrowsers("getActiveBrowserElement") 
                if (mp.bindBlocker({ mainmenu: mp.isMainMenuActive, noknock: true, antiflood: 1500 }) || (mp.isMainMenuActive && getActiveBrowserElement && getActiveBrowserElement.tagName == "input")) return 
                mp.events.callRemote("EventKeyDown", "M")
            } catch (err) {  }
        }, "Основне меню", 2)
        

        mp.events.add("setAchievementMenu", (status) => {
            if (status) {
                mp.events.call("setMainMenu", null)
            }
            mp.isAchievementMenuActive = status
            browserMenu.call(`achievementsAPI`, `setStatus`, status)
        })

        mp.isAchievementMenuActive = false
        mp.isMainMenuActive = false
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\MainMenu.js authCharacter.success: ${err}`)
    }
}) 

mp.events.add("setDailyTasks", (boolean) => {
    if (mp.isMainMenuActive) {
        mp.events.call("setMainMenu", null)
    } 
    browserMenu.call(`dailyTasks`, `setDailyTasks`, boolean)
})

mp.events.add("updateDailyTasks", () => {
    browserMenu.call(`mainMenuAPI`, `getDailyTasks`)
})

mp.events.add("updateRatingParams", () => {
    browserMenu.call(`mainMenuAPI`, `getRatingParams`)
})

mp.events.add("updateRouletteParams", () => {
    browserMenu.call(`mainMenuAPI`, `getRouletteParams`)
})

mp.events.add("updateDonateParams", () => {
    browserMenu.call(`mainMenuAPI`, `getDonateParams`)
})

mp.events.add("setQuestsParams", (params) => {
    browserMenu.call(`mainMenuAPI`, `setQuestsParams`, params)
    browserMenu.call(`hudControl`, `setQuestsParams`, params);
})

mp.events.add("updateQuestParams", () => {
    mp.events.callRemote("getQuestsParams")
})

mp.events.add("updateSettingsParams", () => {
    browserMenu.call(`mainMenuAPI`, `getSettingsParams`)
})

mp.events.add("updateAchievementParams", () => {
    browserMenu.call(`mainMenuAPI`, `getAchievementsParams`)
    browserMenu.call(`achievementsAPI`, `getAchievementsParams`)
})

mp.events.add("updatePhoneParams", () => {
    browserMenu.call(`mainMenuAPI`, `getPhoneParams`)
})

mp.events.add("updateSkinsParams", () => {
    browserMenu.call(`mainMenuAPI`, `getSkinsParams`)
})

mp.events.add("setSkinsList", (params) => {
    browserMenu.call(`mainMenuAPI`, `setSkinsList`, params)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("showGas", (data) => {
  if (data) {
    if (data.position) {
      let street = mp.game.ui.getStreetNameFromHashKey(mp.game.pathfind.getStreetNameAtCoord(data.position.x, data.position.y, data.position.z, 0, 0)["streetName"])
      data.street = street
      delete data.position
    }
    mp.interfaceActive = "gas"
  }
  else mp.interfaceActive = false
  browserMenu.call(`gas`, `set`, data)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
require('gamemode/scripts/AtmCriminal/CircuitBreaker.events');

}; a; }
{let a = function scriptEntryPoint(mp) {
const { clientCircuitBreakerManager } = require('gamemode/scripts/AtmCriminal/CircuitBreaker.manager');

mp.events.add({
  CircuitBreakerStart: clientCircuitBreakerManager.start.bind(clientCircuitBreakerManager),
  CircuitBreakerStop: clientCircuitBreakerManager.end.bind(clientCircuitBreakerManager),
  render: clientCircuitBreakerManager.handleRender.bind(clientCircuitBreakerManager),
});

}; a; }
{let a = function scriptEntryPoint(mp) {
const { CircuitBreaker } = require("gamemode/scripts/AtmCriminal/CircuitBreaker");

class CircuitBreakerManager {
  constructor() {
    this.game = null;
  }
  start(lives, difficulty, levels) {
    if (this.game !== null)
      return; // Cannot start twice
    this.game = new CircuitBreaker(lives, difficulty, levels, () => {
      this.game = null;
    });
  }
  end() {
    if (this.game) this.game.endGame()
  }
  handleRender() {
    if (this.game === null)
      return;
    this.game.tick();
  }
}
exports.clientCircuitBreakerManager = new CircuitBreakerManager();
}; a; }
{let a = function scriptEntryPoint(mp) {
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const { cbGenericPorts } = require('gamemode/scripts/AtmCriminal/CbGenericPorts');
const { cbHelper } = require('gamemode/scripts/AtmCriminal/CbHelper');
const { cbMapBoundaries } = require('gamemode/scripts/AtmCriminal/CbMapBoundaries');
const { cbPoint } = require('gamemode/scripts/AtmCriminal/CbPoint');
const { Scaleform } = require('gamemode/scripts/AtmCriminal/Scaleform');

class CircuitBreaker {
  constructor(lives, difficulty, levels, onDestroy) {
    this.lives = lives;
    this.difficulty = difficulty;
    this.levels = levels;
    this.onDestroy = onDestroy;
    // NONE, ERROR, FAILURE_OUTOFBOUNDS, FAILURE_COLLISIONWITHPORT, FAILURE_TRAILCOLLISION, QUIT, STARTING, INPROGRESS, DEATH, DISCONNECTED, SUCCESS
    this.status = 'NONE';
    this.soundId = -1;
    this.blockedAreas = [];
    this.gameBounds = [
      { x: 0.159, y: 0.153 },
      { x: 0.159, y: 0.848 },
      { x: 0.841, y: 0.848 },
      { x: 0.841, y: 0.153 } //  Top Right
    ];
    this.textureDictionaries = ['MPCircuitHack', 'MPCircuitHack2', 'MPCircuitHack3'];
    this.currentPointSpeed = 0.00085;
    this.scaleform = null;
    this.startTime = 0;
    this.endTime = 0;
    this.availableLevels = [1, 2, 3, 4, 5, 6];
    this.levelsToComplete = [];
    this.level = 1;
    this.livesLeft = 1;
    this.disconnected = false;
    this.disconnectChance = 0;
    this.disconnectCheckRateMs = 0;
    this.nextTimeCheckDisconnect = 0;
    this.reconnectIn = 0;
    this.status = 'STARTING';
    // Ensure levels aren't out of bounds
    if (this.levels > 6)
      this.levels = 6;
    if (this.levels < 1)
      this.levels = 1;
    this.fillLevels(this.levels);
    this.level = this.getLevel();
    this.livesLeft = this.lives;
    // Ensure lives aren't out of bounds
    if (this.livesLeft > 10)
      this.livesLeft = 10;
    if (this.livesLeft < 1)
      this.livesLeft = 1;
    // Ensure difficulty isn't out of bounds
    if (this.difficulty > 4)
      this.difficulty = 4;
    if (this.difficulty < 0)
      this.difficulty = 0;
    this.currentPointSpeed = this.getPointSpeedFromDifficulty(this.difficulty);
    this.disconnectChance = this.getDisconnectChanceFromDifficulty(this.difficulty);
    this.disconnectCheckRateMs = this.getDisconnectCheckRateMsFromDifficulty(this.difficulty);
    this.init();
  }
  getLevel() {
    var _a;
    if (this.levelsToComplete.length === 0)
      return 1;
    return (_a = this.levelsToComplete.shift()) !== null && _a !== void 0 ? _a : 1;
  }
  fillLevels(count) {
    if (count < 1)
      return;
    this.levelsToComplete = new Array(count).fill(1).map(() => this.getRandomLevel());
  }
  getRandom(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
  }
  getRandomLevel() {
    if (this.availableLevels.length === 0)
      return 1;
    const randomIndex = this.getRandom(0, this.availableLevels.length - 1);
    return this.availableLevels[randomIndex];
  }
  gameDraw() {
    if (this.scaleform === null)
      return false;
    this.drawMapSprite(this.level);
    const collisionHit = this.drawPointAndPortSprites();
    this.scaleform.render2D();
    return collisionHit;
  }
  checkDisconnect() {
    if (Date.now() >= this.nextTimeCheckDisconnect) {
      this.disconnected = this.getRandom(0, 100) <= this.disconnectChance;
      return this.disconnected;
    }
    return false;
  }
  inProcessLogic(collisionHit) {
    if (this.exitButtonPressed()) {
      this.endGame(true);
      return;
    }
    if (Date.now() < this.startTime)
      return;
    if (this.disconnectChance > 0 && this.checkDisconnect()) {
      this.status = 'DISCONNECTED';
      return;
    }
    if (cbGenericPorts.isPointInGameWinningPosition(cbPoint.position)) {
      this.status = 'SUCCESS';
      return;
    }
    if (this.isPointOutOfBounds(this.blockedAreas, this.gameBounds)) {
      this.status = 'FAILURE_OUTOFBOUNDS';
      return;
    }
    if (cbGenericPorts.isCollidingWithPort(cbPoint.position)) {
      this.status = 'FAILURE_COLLISIONWITHPORT';
      return;
    }
    if (collisionHit) {
      this.status = 'FAILURE_TRAILCOLLISION';
      return;
    }
    if (cbPoint.isAlive) {
      cbPoint.getPointInputFromPlayer();
      cbPoint.movePoint(this.currentPointSpeed);
    }
  }
  successLogic() {
    const now = Date.now();
    if (this.endTime === 0) {
      this.showSuccessScreenAndPlaySound();
      this.endTime = now + 3000;
      return;
    }
    if (now < this.endTime)
      return;
    if (this.checkLevelsToPlay()) {
      this.continueGame();
      return;
    }
    this.status = 'QUIT';
    mp.events.call('CircuitBreakerWIN');
  }
  restartSameLevel() {
    this.status = 'DEATH';
    this.showDeathScreenAndPlaySound();
    cbPoint.initialize();
    this.startTime = Date.now() + 3000;
    this.nextTimeCheckDisconnect = this.startTime + this.disconnectCheckRateMs;
  }
  failureLogic() {
    this.livesLeft--;
    if (this.livesLeft > 0) {
      this.restartSameLevel();
      return;
    }
    if (cbPoint.isAlive) {
      cbPoint.startPointDeathAnimation();
    }
    if (!cbPoint.isVisible) {
      const now = Date.now();
      if (this.endTime === 0) {
        this.showFailureScreenAndPlaySound();
        this.endTime = Date.now() + 3000;
        return;
      }
      if (now >= this.endTime) {
        this.status = 'QUIT';
        mp.events.call('CircuitBreakerLOSE');
      }
    }
  }
  deathLogic() {
    const now = Date.now();
    if (now >= this.startTime) {
      this.playStartSound();
      this.resetDisplayScaleform();
      this.status = 'INPROGRESS';
      return;
    }
  }
  disconnectLogic() {
    if (this.reconnectIn === 0) {
      mp.game.audio.playSoundFrontend(-1, 'Power_Down', 'DLC_HEIST_HACKING_SNAKE_SOUNDS', true);
      this.showDisplayScaleform('CONNECTION LOST', 'Reconnecting...', cbHelper.RED_COLOUR.r, cbHelper.RED_COLOUR.g, cbHelper.RED_COLOUR.b, false);
      this.reconnectIn = Date.now() + this.getRandom(500, 5000);
      return;
    }
    const now = Date.now();
    if (now >= this.reconnectIn) {
      this.playStartSound();
      this.resetDisplayScaleform();
      this.status = 'INPROGRESS';
      this.reconnectIn = 0;
      this.nextTimeCheckDisconnect = now + this.disconnectCheckRateMs;
      return;
    }
  }
  tick() {
    if (this.status === 'NONE')
      return;
    this.disableControls();
    const collisionHit = this.gameDraw();
    switch (this.status) {
      case 'INPROGRESS':
        this.inProcessLogic(collisionHit);
        break;
      case 'SUCCESS':
        this.successLogic();
        break;
      case 'FAILURE_OUTOFBOUNDS':
      case 'FAILURE_COLLISIONWITHPORT':
      case 'FAILURE_TRAILCOLLISION':
        this.failureLogic();
        break;
      case 'DEATH':
        this.deathLogic();
        break;
      case 'DISCONNECTED':
        this.disconnectLogic();
        break;
      case 'QUIT':
        this.endGame(false);
        break;
      default:
        break;
    }
  }
  endGame(exit) {
    if (exit)
      mp.events.call('CircuitBreakerLOSE');
    this.status = 'NONE';
    this.destroy();
  }
  checkLevelsToPlay() {
    return this.levelsToComplete.length !== 0;
  }
  continueGame() {
    this.resetDisplayScaleform();
    this.level = this.getLevel();
    this.blockedAreas = cbMapBoundaries.getBoxBounds(this.level);
    cbGenericPorts.initialize(this.level);
    cbPoint.initialize();
    this.startTime = Date.now() + 3000;
    this.nextTimeCheckDisconnect = this.startTime + this.disconnectCheckRateMs;
    this.endTime = 0;
    this.playStartSound();
    this.status = 'INPROGRESS';
  }
  init() {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.status !== 'STARTING')
        return;
      yield this.loadResources();
      //this.soundId = mp.game.invokeFloat('0x430386FE9BF80B45'); // GET_SOUND_ID
      //mp.game.audio.playSoundFrontend(this.soundId, 'Background', 'DLC_HEIST_HACKING_SNAKE_SOUNDS', true);
      this.blockedAreas = cbMapBoundaries.getBoxBounds(this.level);
      cbGenericPorts.initialize(this.level);
      cbPoint.initialize();
      this.startTime = Date.now() + 3000;
      this.nextTimeCheckDisconnect = this.startTime + this.disconnectCheckRateMs;
      this.playStartSound();
      this.status = 'INPROGRESS';
    });
  }
  loadResources() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.loadTextures();
      yield this.loadScaleform();
    });
  }
  loadTextures() {
    return __awaiter(this, void 0, void 0, function* () {
      for (const dict of this.textureDictionaries) {
        mp.game.graphics.requestStreamedTextureDict(dict, false);
        while (!mp.game.graphics.hasStreamedTextureDictLoaded(dict)) {
          yield new Promise(res => setTimeout(res, 5));
        }
      }
    });
  }
  resetTextureDictionaries() {
    for (const dict of this.textureDictionaries) {
      mp.game.graphics.setStreamedTextureDictAsNoLongerNeeded(dict);
    }
  }
  resetSounds() {
    if (this.soundId === -1)
      return;
    mp.game.audio.stopSound(this.soundId);
    mp.game.audio.releaseSoundId(this.soundId);
    this.soundId = -1;
  }
  playStartSound() {
    mp.game.audio.playSoundFrontend(-1, 'Start', 'DLC_HEIST_HACKING_SNAKE_SOUNDS', true);
  }
  resetDisplayScaleform() {
    if (this.scaleform === null)
      return;
    this.scaleform.callFunction('SET_DISPLAY', -1);
  }
  showDisplayScaleform(title, msg, r, g, b, stagePassed) {
    if (this.scaleform === null)
      return;
    this.scaleform.callFunction('SET_DISPLAY', 0, title, msg, r, g, b, stagePassed);
  }
  showSuccessScreenAndPlaySound() {
    mp.game.audio.playSoundFrontend(-1, 'Success', 'DLC_HEIST_HACKING_SNAKE_SOUNDS', true);
    this.showDisplayScaleform('CIRCUIT COMPLETE', 'Decryption Execution x86 Tunneling', cbHelper.GREEN_COLOUR.r, cbHelper.GREEN_COLOUR.g, cbHelper.GREEN_COLOUR.b, true);
  }
  showFailureScreenAndPlaySound() {
    mp.game.audio.playSoundFrontend(-1, 'Crash', 'DLC_HEIST_HACKING_SNAKE_SOUNDS', true);
    this.showDisplayScaleform('CIRCUIT FAILED', 'Security Tunnel Detected', cbHelper.RED_COLOUR.r, cbHelper.RED_COLOUR.g, cbHelper.RED_COLOUR.b, false);
  }
  showDeathScreenAndPlaySound() {
    mp.game.audio.playSoundFrontend(-1, 'Crash', 'DLC_HEIST_HACKING_SNAKE_SOUNDS', true);
    this.showDisplayScaleform('CIRCUIT FAILED', `${this.livesLeft} Attempts Left`, cbHelper.RED_COLOUR.r, cbHelper.RED_COLOUR.g, cbHelper.RED_COLOUR.b, false);
  }
  resetScaleform() {
    if (this.scaleform === null)
      return;
    this.scaleform.dispose();
    this.scaleform = null;
  }
  loadScaleform() {
    return __awaiter(this, void 0, void 0, function* () {
      this.resetScaleform();
      yield new Promise(res => setTimeout(res, 50));
      this.scaleform = new Scaleform('HACKING_MESSAGE');
      let loadAttempt = 0;
      while (this.scaleform === null || !this.scaleform.isLoaded()) {
        yield new Promise(res => setTimeout(res, 50));
        loadAttempt++;
        if (loadAttempt > 50)
          break;
      }
    });
  }
  drawMapSprite(currentMap) {
    mp.game.graphics.drawSprite(currentMap > 3 ? 'MPCircuitHack3' : 'MPCircuitHack2', `cblevel${this.level}`, 0.5, 0.5, 1, 1, 0, 255, 255, 255, 255);
  }
  drawPointAndPortSprites() {
    cbPoint.drawPoint(this.status);
    const collisionHit = cbPoint.drawTailHistoryAndCheckCollisions(this.status);
    cbGenericPorts.drawPorts();
    return collisionHit;
  }
  getPointSpeedFromDifficulty(difficulty) {
    if (difficulty === 0)
      return 0.00085;
    if (difficulty === 1)
      return 0.001;
    if (difficulty === 2)
      return 0.002;
    if (difficulty === 3)
      return 0.003;
    if (difficulty === 4)
      return 0.003;
    return 0.00085;
  }
  getDisconnectChanceFromDifficulty(difficulty) {
    if (difficulty === 0)
      return 0;
    if (difficulty === 1)
      return 0.15;
    if (difficulty === 2)
      return 0.3;
    if (difficulty === 3)
      return 0.45;
    if (difficulty === 4)
      return 0.6;
    return 0;
  }
  getDisconnectCheckRateMsFromDifficulty(difficulty) {
    if (difficulty === 0)
      return 15000;
    if (difficulty === 1)
      return 10000;
    if (difficulty === 2)
      return 5000;
    if (difficulty === 3)
      return 4000;
    if (difficulty === 4)
      return 2000;
    return 10000;
  }
  exitButtonPressed() {
    return mp.game.controls.isDisabledControlJustPressed(0, 44);
  }
  disableControls() {
    mp.game.controls.disableControlAction(0, 32, true); // W, Up
    mp.game.controls.disableControlAction(0, 33, true); // S, Down
    mp.game.controls.disableControlAction(0, 34, true); // A, Left
    mp.game.controls.disableControlAction(0, 35, true); // D, Right
    mp.game.controls.disableControlAction(0, 44, true); // Q, Cover
  }
  isPointOutOfBounds(polybounds, mapBounds) {
    const headPts = this.getPointMaxPoints(cbPoint.position, cbPoint.pointHeadSize + -0.375 * cbPoint.pointHeadSize);
    for (const pt of headPts) {
      for (const bounds of polybounds) {
        if (cbHelper.isInPoly(bounds, pt)) {
          return true;
        }
      }
      if (!cbHelper.isInPoly(mapBounds, pt)) {
        return true;
      }
    }
    return false;
  }
  getPointMaxPoints(pointCoord, pointHeadSize) {
    const headHeight = pointHeadSize;
    const headWidth = pointHeadSize;
    const headPts = [
      { x: pointCoord.x - headWidth / 2, y: pointCoord.y },
      { x: pointCoord.x + headWidth / 2, y: pointCoord.y },
      { x: pointCoord.x, y: pointCoord.y - headHeight / 2 },
      { x: pointCoord.x, y: pointCoord.y + headHeight / 2 }
    ];
    return [...headPts, pointCoord];
  }
  destroy() {
    this.resetScaleform();
    this.resetSounds();
    this.resetTextureDictionaries();
    this.onDestroy();
  }
}

exports.CircuitBreaker = CircuitBreaker;
}; a; }
{let a = function scriptEntryPoint(mp) {
const controlsIds = {
    F5: 327,
    W: 32, // 232
    S: 33, // 31, 219, 233, 268, 269
    A: 34, // 234
    D: 35, // 30, 218, 235, 266, 267
    Space: 321,
    LCtrl: 326,
};

global.fly = {
    flying: false, f: 2.0, w: 2.0, h: 2.0, point_distance: 1000,
};
global.gameplayCam = mp.cameras.new('gameplay');

let direction = null;
let coords = null;

function pointingAt(distance) {
    const farAway = new mp.Vector3((direction.x * distance) + (coords.x), (direction.y * distance) + (coords.y), (direction.z * distance) + (coords.z));

    const result = mp.raycasting.testPointToPoint(coords, farAway, [1, 16]);
    if (result === undefined) {
        return 'undefined';
    }
    return result;
}

let flyMult = false

mp.keys.bindEx(0xBB, true, function () { 
    if (mp.clientStorage["admin"] > 0) {
        if (typeof flyMult === 'number') flyMult *= 1.2
        else flyMult = 10
    }
});

mp.keys.bindEx(0xBD, true, function () { 
    if (mp.clientStorage["admin"] > 0) {
        if (typeof flyMult === 'number') {
            if (flyMult / 1.2 > 0) flyMult /= 1.2
            else flyMult = 0
        }
        else flyMult = 10
    }
});

mp.events.add('render', () => { 
    try {
        if (mp.clientStorage["admin"] > 0) {
            const controls = mp.game.controls; 
            direction = gameplayCam.getDirection();
            coords = gameplayCam.getCoord();

            if (controls.isControlJustPressed(0, controlsIds.F5)) {
                flyMult = false
                fly.flying = !fly.flying;

                const player = mp.players.local;

                player.setInvincible(fly.flying);
                player.freezePosition(fly.flying);
                player.setAlpha(fly.flying ? 0 : 255);

                if (!fly.flying && !controls.isControlPressed(0, controlsIds.Space)) {
                    const position = mp.players.local.position;
                    position.z = mp.game.gameplay.getGroundZFor3dCoord(position.x, position.y, position.z, 0.0, false);
                    mp.players.local.setCoordsNoOffset(position.x, position.y, position.z, false, false, false);
                }
                mp.events.callRemote('setInvisible', fly.flying);
                mp.events.call("BN_ShowWithPictureCustomState", `Fly: ${fly.flying ? '<span class="green">Активован</span>' : '<span class="red">Деактивовано</span>'}`, fly.flying ? "fly-green.svg" : "fly-red.svg")
                mp.events.callRemote("logTxt", fly.flying ? '[FLY]: Включен' : '[FLY]: Выключен')
            } else if (fly.flying) {
                let updated = false;
                const position = mp.players.local.position;

                if (controls.isControlPressed(0, controlsIds.W)) {
                    if (typeof flyMult === 'number') {
                        position.x += direction.x * flyMult;
                        position.y += direction.y * flyMult;
                        position.z += direction.z * flyMult;
                    }
                    else {
                        if (fly.f < 8.0) { fly.f *= 1.025; }
                        position.x += direction.x * fly.f;
                        position.y += direction.y * fly.f;
                        position.z += direction.z * fly.f;
                    }

                    updated = true;
                } else if (controls.isControlPressed(0, controlsIds.S)) {
                    if (typeof flyMult === 'number') {
                        position.x -= direction.x * flyMult;
                        position.y -= direction.y * flyMult;
                        position.z -= direction.z * flyMult;
                    }
                    else {
                        if (fly.f < 8.0) { fly.f *= 1.025; }
                        position.x -= direction.x * fly.f;
                        position.y -= direction.y * fly.f;
                        position.z -= direction.z * fly.f;
                    }
                    updated = true;
                } else {
                    fly.f = 2.0;
                }

                if (controls.isControlPressed(0, controlsIds.A)) {
                    if (typeof flyMult === 'number') {
                        position.x += (-direction.y) * flyMult;
                        position.y += direction.x * flyMult;
                    }
                    else {
                        if (fly.l < 8.0) { fly.l *= 1.025; }
                        position.x += (-direction.y) * fly.l;
                        position.y += direction.x * fly.l;
                    }
                    
                    updated = true;
                } else if (controls.isControlPressed(0, controlsIds.D)) {
                    if (typeof flyMult === 'number') {
                        position.x -= (-direction.y) * flyMult;
                        position.y -= direction.x * flyMult;
                    }
                    else {
                        if (fly.l < 8.0) { fly.l *= 1.05; }
                        position.x -= (-direction.y) * fly.l;
                        position.y -= direction.x * fly.l;
                    }
                    
                    updated = true;
                } else {
                    fly.l = 2.0;
                }

                if (controls.isControlPressed(0, controlsIds.Space)) {
                    if (typeof flyMult === 'number') {
                        position.z += flyMult;
                    }
                    else {
                        if (fly.h < 8.0) { fly.h *= 1.025; }
                        position.z += fly.h;
                    }
                    
                    updated = true;
                } else if (controls.isControlPressed(0, controlsIds.LCtrl)) {
                    if (typeof flyMult === 'number') {
                        position.z -= flyMult;
                    }
                    else {
                        if (fly.h < 8.0) { fly.h *= 1.05; }
                        position.z -= fly.h;
                    }
                    
                    updated = true;
                } else {
                    fly.h = 2.0;
                }

                if (updated) {
                    mp.players.local.setCoordsNoOffset(position.x, position.y, position.z, false, false, false);
                }
            }
        } 
    } catch (err) {
        chatDebug(`error fly: ${err}`)
        mp.game.graphics.notify(`error fly: ${err}`)
    }
});

function GetWaypointCoords() {
    try {
        if (mp.game.invoke('0x1DD1F58F493F1DA5')) {
            let Blip_Interator = mp.game.invoke('0x186E5D252FA50E7D');
            let BlipsFound = mp.game.invoke('0x9A3FF3DE163034E8');
            let FirstInfoId = mp.game.invoke('0x1BEDE233E6CD2A1F', Blip_Interator);
            let NextInfoId = mp.game.invoke('0x14F96AA50D6FBEA7', Blip_Interator);
            for (let i = FirstInfoId, blipCount = 0; blipCount != BlipsFound; blipCount++, i = NextInfoId) {
                if (mp.game.invoke('0x1FC877464A04FC4F'))
                    var coord = mp.game.ui.getBlipInfoIdCoord(i);
                return coord;
            }
        }
        return null;
    } catch (e) { }
}
function getZCoord(x, y, z, fnd) {
    let zcoord = 0.0;
    let interval_c = 0;

    let interval = setInterval(function () {
        interval_c++;
        mp.game.streaming.setFocusArea(x, y, 1000, 0.0, 0.0, 0.0);

        if (z == 0) {
            for (let i = 800; i >= 0; i -= 20) {
                let checkz = i + 0.1;

                mp.game.streaming.requestAdditionalCollisionAtCoord(x, y, checkz);
                if (interval_c >= 50) mp.players.local.setCoordsNoOffset(x, y, checkz, false, false, false);
                zcoord = mp.game.gameplay.getGroundZFor3dCoord(x, y, checkz, 0.0, false);
                if (zcoord !== 0.0) {
                    mp.game.invoke('0x198F77705FA0931D', mp.players.local.handle)
                    fnd(zcoord + 0.1);
                    clearInterval(interval);
                    return;
                }
            }
        } else {
            zcoord = mp.game.gameplay.getGroundZFor3dCoord(x, y, checkz, 0.0, false);
            mp.game.invoke('0x198F77705FA0931D', mp.players.local.handle)
            fnd(zcoord + 0.1);
            clearInterval(interval);
            return;
        }
        if (interval_c >= 100) {
            if (interval_c >= 50) mp.players.local.setCoordsNoOffset(x, y, 10.0, false, false, false);
            mp.game.invoke('0x198F77705FA0931D', mp.players.local.handle);
            clearInterval(interval);
            return
        }
    }, 1);
}


mp.keys.bindEx(0x79, true, function () { // F10
    try {
        if (mp.clientStorage["admin"] > 0) {
            let coords = GetWaypointCoords();
            if (!coords) return mp.game.graphics.notify('~r~ Точка телепорта вiдсутня');
            if (coords !== null) {
                getZCoord(coords.x, coords.y, 0, function (z) {
                    if (!mp.players.local.vehicle) {
                        mp.players.local.setCoordsNoOffset(coords.x, coords.y, z, false, false, false);
                    } else {
                        mp.players.local.vehicle.setCoordsNoOffset(coords.x, coords.y, z, false, false, false);
                    }
                    const player = mp.players.local
                    mp.events.call("ac:refreshtp")
                    mp.events.callRemote("logTxt", `[TP]: ${player.name} сделал ТП по метке в ${coords.x}, ${coords.y}, ${coords.z}.`)
                })
            }
        }
    } catch (err) {
        chatDebug(`err f10: ${err}`)
    }
});

mp.events.add('updatePosition', (entity, position) => {
    entity.setCoordsNoOffset(position.x, position.y, position.z, false, false, false);
});

/*mp.events.add('getCamCoords', (name) => {
    mp.events.callRemote('saveCamCoords', JSON.stringify(coords), JSON.stringify(pointingAt(fly.point_distance)), name);
});
*/

}; a; }
{let a = function scriptEntryPoint(mp) {

let hidingHudBeforeOpening = undefined

mp.events.add('hudControl.setData', (data) => {
    browserMenu.call(`hudControl`, `changeOptions`, `setData`, data);
});

mp.events.add('hudControl.updateMoney', (money, noSound = false) => { 
    browserMenu.call(`hudControl`, `changeOptions`, `updateMoney`, { money: money });
    if (!noSound) mp.events.call("enableSound", "money.mp3", 0.5)
});

mp.events.add('hudControl.updateWanted', (wanted) => { 
    browserMenu.call(`hudControl`, `changeOptions`, `updateWanted`, { wanted: wanted })
});

mp.events.add('hudControl.updateBank', (bank) => { 
    browserMenu.call(`hudControl`, `changeOptions`, `updateBank`, { bank: bank })
});

mp.events.add('hudControl.passiveMode', (enable) => {
    browserMenu.call(`hudControl`, `changeOptions`, `passiveModeHandler`, enable)
})


mp.events.add('hudControl.greenZone', (enable) => {
    browserMenu.call(`hudControl`, `changeOptions`, `isInGreenZoneHandler`, enable)
})

mp.events.add('hudControl.useBodyCamera', (data) => {
    browserMenu.call(`hudControl`, `setBodyCam`, data)
})

mp.events.add('hudControl.notifyReward', (data) => {
    browserMenu.call(`hudControl`, `notifyReward`, data)
})

mp.events.add('hudControl.addTimeout', (data) => {
    if (!mp.settings.timeouts) return
    browserMenu.call(`hudControl`, `addTimeout`, data)
})

mp.events.add('hudControl.removeAllTimeouts', () => {
    browserMenu.call(`hudControl`, `removeAllTimeouts`)
})

mp.events.add("authCharacter.success", async () => {
    try {
        let enableHud = true
        let reward = await rpc.callServer("getCharacterReward") 
        if (reward.length) {
            let mainReward = reward.find(item => item.id == 1)
            if (mainReward) {
                if (!mp.settings.hideEnterAction) {
                    mp.events.call("promo.show", mainReward);
                    enableHud = false
                }
            }
            for(let key in reward){
                if (!mainReward) {
                    if (reward[key].id == 3 || reward[key].id == 4) {
                        if (!mp.settings.hideEnterAction) {
                            mp.events.call("promo.show", reward[key]);
                            enableHud = false
                        }
                    }
                }
                if (reward[key].id == 2) browserMenu.call(`hudControl`, `startRewardTimer`, mp.settings.hideHudTimerRoulette ? false : true, reward[key].minutes);
            }
        }
        if (enableHud) mp.events.call("hudControl.enable", true);
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\HUD.js authCharacter.success: ${err}`)
    }
})

mp.events.add("updateRewardTimer", async () => {
    let reward = await rpc.callServer("getCharacterReward") 
    if (reward.length) {
        for(let key in reward){
            if (reward[key].id == 2) browserMenu.call(`hudControl`, `startRewardTimer`, mp.settings.hideHudTimerRoulette ? false : true, reward[key].minutes);
        }
    }
})

mp.events.add("stopRewardTimer", () => {
    browserMenu.call(`hudControl`, `stopRewardTimer`);
})

mp.events.add('hudControl.micro', (enable) => {
    browserMenu.call(`hudControl`, `changeOptions`, `microHandler`, enable)
})

mp.events.add("hudControl.enable", (enable, hiding, noChat) => { 
    if (mp.settings.hud && !mp.isHudEnable) return;
    if (hidingHudBeforeOpening === true && hiding === undefined) return
    if (mp.binocularActive) return
    mp.isHudEnable = enable
    browserMenu.call(`hudControlLogo`, `enable`, enable)
    browserMenu.call(`hudControl`, `enable`, enable)
    mp.game.ui.displayHud(enable);
    // mp.gui.chat.show(enable);
    mp.game.ui.displayRadarCustom(enable); 
    hidingHudBeforeOpening = hiding
    if (!noChat) mp.events.call("displayChat", enable)
    mp.events.call("setKillListActive", enable)
    mp.events.call("setWarsActive", enable)
});

mp.events.add("notifications.enable", (enable) => { 
    browserMenu.call(`toast-setHidden`, enable)
});

mp.events.add("setMoney", (value) => {
    mp.events.call("setLocalVar", "money", value);
});

mp.events.add("enableSound", (soundName, volume, isUrl) => {
    browserMenu.call(`enableSoundStart`, soundName, volume, isUrl);
});

mp.events.add("disableSound", () => {
    browserMenu.call(`disableSound`);
});

mp.events.add("setVolume", (volume) => {
    browserMenu.call(`setVolume`, volume);
});

mp.events.add("setHUDProgressBar", (params) => {
    browserMenu.call(`hudControl`, `changeOptions`, `setProgressBar`, params)
})

mp.events.add("setHUDTimer", (params) => {
    browserMenu.call(`hudControl`, `changeOptions`, `setTimer`, params)
})

let enable = false

mp.keys.bindEx(0x76, false, () => {
    if (mp.bindBlocker()) return
    enable = !enable

    mp.settings.hud = enable
    mp.settings.hideminimap = enable
    mp.settings.chat = enable
    mp.compassDisabled = enable
    mp.settings.hidekills = enable
    mp.crosshairDisabled = enable

    browserMenu.call(`hudControlLogo`, `enableLogo`, enable)
    mp.events.call("notifications.enable", !mp.settings.hud)
    mp.events.call("hudControl.enable", !mp.settings.hud)
    mp.game.ui.displayRadarCustom(!mp.settings.hideminimap, true)
    browserMenu.call(`wars`, `setCompass`, !mp.settings.compass || mp.compassDisabled ? false : true);
}, "Вимкнути HUD", 3)

let streetParams = {
    streetName: null,
    district: null
}  
let bigmapEnabled = mp.game.ui.getRadarBigmapEnabled()
mp.events.add('render', () => { 
    try {
        mp.game.ui.hideHudComponentThisFrame(1); // wanted start
        mp.game.ui.hideHudComponentThisFrame(2); // weapon icon
        mp.game.ui.hideHudComponentThisFrame(3); // cash
        mp.game.ui.hideHudComponentThisFrame(4); // mp cash
        mp.game.ui.hideHudComponentThisFrame(6); // vehicle name
        mp.game.ui.hideHudComponentThisFrame(7); // area name
        mp.game.ui.hideHudComponentThisFrame(8); // vehicle class
        mp.game.ui.hideHudComponentThisFrame(9); // street name 
        mp.game.ui.hideHudComponentThisFrame(13); // cash change 
    
        let getStreet = mp.game.pathfind.getStreetNameAtCoord(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, 0, 0);
        let streetName = mp.game.ui.getStreetNameFromHashKey(getStreet["streetName"])
        let district = getZoneName(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z)
    
        if (streetParams.streetName != streetName || streetParams.district != district) { 
            streetParams.streetName = streetName
            streetParams.district = district
            browserMenu.call(`hudControl`, `changeOptions`, `setStreet`, { streetName, district })
        } 
    
        if (bigmapEnabled != mp.game.ui.getRadarBigmapEnabled()) {
            bigmapEnabled = mp.game.ui.getRadarBigmapEnabled()
            chatDebug(`${getMinimapAnchor().width} ${getMinimapAnchor().leftX}`)
            if (bigmapEnabled) {
                browserMenu.call(`hudControl`, `changeOptions`, `setOffsetMinimap`, { top: getMinimapAnchor().topY, left: getMinimapAnchor().rightX })
                browserMenu.call(`toast-setOffsetMinimap`, { top: getMinimapAnchor().topY, left: getMinimapAnchor().rightX })
            } else {
                browserMenu.call(`hudControl`, `changeOptions`, `setOffsetMinimap`, { top: 0, left: 0})
                browserMenu.call(`toast-setOffsetMinimap`, { top: 0, left: 0})
            }
        } 
    } catch (err) {
        chatDebug(`ererr: ${err}`)
    }
}); 

function getMinimapAnchor() {
    let sfX = 1.0 / 20.0;
    let sfY = 1.0 / 20.0;
    let safeZone = mp.game.graphics.getSafeZoneSize();
    let aspectRatio = mp.game.graphics.getScreenAspectRatio(false);
    let resolution = mp.game.graphics.getScreenActiveResolution(0, 0);
    let scaleX = 1.0 / resolution.x;
    let scaleY = 1.0 / resolution.y;

    let minimap = {
        width: scaleX * (resolution.x / (4 * aspectRatio)),
        height: scaleY * (resolution.y / 5.674),
        scaleX: scaleX,
        scaleY: scaleY,
        leftX: scaleX * (resolution.x * (sfX * (Math.abs(safeZone - 1.0) * 10))),
        bottomY: 1.0 - scaleY * (resolution.y * (sfY * (Math.abs(safeZone - 1.0) * 10))),
    };

    minimap.rightX = minimap.leftX + minimap.width;
    minimap.topY = minimap.bottomY - minimap.height;
    return minimap;
}
}; a; }
{let a = function scriptEntryPoint(mp) {
global.upgradeNumberPlate = (vehicle, numberPlate) => {
    if (!vehicle) return
    if (mp.game.vehicle.isThisModelAPlane(vehicle.model) || mp.game.vehicle.isThisModelAHeli(vehicle.model)) return

    if (!numberPlate?.length) {
        vehicle.setExtra(7, true)
        vehicle.setExtra(8, true)
    }
    else if (vehicle.getNumberPlateTextIndex() == 5) {
        vehicle.setExtra(7, false)
        vehicle.setExtra(8, true)
    }
    else {
        vehicle.setExtra(7, true)
        vehicle.setExtra(8, false)
    }
}
}; a; }
{let a = function scriptEntryPoint(mp) {
const { isLocalPlayerInGreenZone } = require("gamemode/scripts/Greenzones.js"); 
const player = mp.players.local;  

mp.events.add("setRadiusVariable", (entity, name, value) => {
    if (!isEntityExists(entity)) return
    if (entity.type !== "vehicle") return;

    if (name === "attachedObjects") {
        executeObjects(entity, value);
    } else if (name === "handling") {
        setHandling(entity, value);
    } else if (name === "suspensionSystemBrake") {
        let handlings = entity.variable_handling;
        if (value) entity.setSuspensionHeight(0.075);
        else if (handlings && handlings.hasOwnProperty("suspensionHeight")) entity.setSuspensionHeight(handlings.suspensionHeight);
    } else if (name === "tiresSystemBrake") {
        let handlings = entity.variable_handling;
        if (value) {
            entity.setHandling('fTractionCurveLateral', 1);
            entity.setHandling('fTractionCurveMin', 1);
        } else if (handlings && handlings.hasOwnProperty("fTractionCurveLateral") && handlings.hasOwnProperty("fInitialDriveForce") && handlings.hasOwnProperty("fTractionCurveMin")) {
            entity.setHandling('fTractionCurveLateral', 3.5 - handlings.fTractionCurveLateral);
            entity.setHandling('fTractionCurveMin', 3.5 - handlings.fTractionCurveMin);
        } else if (handlings && handlings.hasOwnProperty("fTractionCurveLateral")) entity.setHandling('fTractionCurveLateral', handlings.fTractionCurveLateral);
    } else if (name === "dirtLevel") {
        value = parseFloat(value);
        entity.setDirtLevel(value);
    } else if (name === "anchor") {
        setAnchor(entity, value);
    } else if (name === "headlightsColor") {
        setHeadlightsColor(entity, value);
    } else if (name === "color") {
        setColor(entity, value);
    } else if (name === "turbo") {
        toggleMod(entity, 18, value);
    } else if (name === "modKit") {
        entity.setModKit(value);
    } else if (name === "disableDriving") {
        disableDriving(entity, value);
    } else if (name === "numberPlate") {
        mp.game.invoke("0x95A88F0B409CDA47", entity.handle, value || "");
        if (global.upgradeNumberPlate) global.upgradeNumberPlate(entity, value || "")
    } else if (name === "tyreSmokeColor") {
        setTyreSmokeColor(entity, Array.isArray(value) ? value : -1);
    } else if (name === "livery") {
        setLivery(entity, value);
    } else if (name === "locked") {
        let dist = vdist(mp.players.local.position, entity.position);
        if (dist > 15) return;
        if (value) {
            entity.setLights(2);
            mp.game.audio.playSoundFromEntity(1, "Remote_Control_Close", entity.handle, "PI_Menu_Sounds", true, 0);
            setTimeout(() => {
                entity.setLights(0);
                setTimeout(() => {
                    entity.setLights(2);
                    setTimeout(() => {
                        entity.setLights(0);
                    }, 100);
                }, 100);
            }, 100);
        } else {
            entity.setLights(2);
            mp.game.audio.playSoundFromEntity(1, "Remote_Control_Open", entity.handle, "PI_Menu_Sounds", true, 0);
            setTimeout(() => {
                entity.setLights(0);
            }, 100);
        }
    } else if (name === "setOnGroundProperly") {
        entity.setOnGroundProperly();
        entity.setVelocity(0, 0, 0)
    } else if (name === "leftSignal") {
        var left = entity.variable_leftSignal;
        var right = entity.variable_rightSignal;
        let emergency = entity.getVariable("emergency") 
        entity.setIndicatorLights(1, left);
    
        if (player.vehicle && entity.remoteId == player.vehicle.remoteId) {
            // var left = player.vehicle.variable_leftSignal; 
            var engine = entity.getVariable("engine");
            if (engine) {
                if(emergency){
                    browserMenu.call(`hudControl`, `changeOptions`, `LeftSignalHandler`, left);
                    browserMenu.call(`hudControl`, `changeOptions`, `RightSignalHandler`, right);
                }
                else if (!left || !right) { 
                    browserMenu.call(`hudControl`, `changeOptions`, `LeftSignalHandler`, left);
                    browserMenu.call(`hudControl`, `changeOptions`, `RightSignalHandler`, right);
                } else { 
                }
            } else {
                browserMenu.call(`hudControl`, `changeOptions`, `LeftSignalHandler`, false);
                browserMenu.call(`hudControl`, `changeOptions`, `RightSignalHandler`, false);
            }
        }
    } else if (name === "rightSignal") {
        var right = entity.variable_rightSignal;
        var left = entity.variable_leftSignal;
        let emergency = entity.getVariable("emergency");
        entity.setIndicatorLights(0, right);
        if (player.vehicle && entity.remoteId == player.vehicle.remoteId) {
            var engine = entity.getVariable("engine");
            if (engine) {
                if (emergency) {
                    browserMenu.call(`hudControl`, `changeOptions`, `LeftSignalHandler`, left);
                    browserMenu.call(`hudControl`, `changeOptions`, `RightSignalHandler`, right);
                } else if (!left || !right) {
                    browserMenu.call(`hudControl`, `changeOptions`, `LeftSignalHandler`, left);
                    browserMenu.call(`hudControl`, `changeOptions`, `RightSignalHandler`, right);
                }
            } else {
                browserMenu.call(`hudControl`, `changeOptions`, `LeftSignalHandler`, false);
                browserMenu.call(`hudControl`, `changeOptions`, `RightSignalHandler`, false);
            }
        }
    } else if (name === "seatbelt") {
        if (player.vehicle && entity.remoteId == player.vehicle.remoteId) {
            if (value) mp.game.invoke("0x7A6535691B477C48", mp.players.local.handle, 1);
            else mp.game.invoke("0x7A6535691B477C48", mp.players.local.handle, 0);
            browserMenu.call(`hudControl`, `changeOptions`, `seatbeltHandler`, value);
        }
    } else if (name === "hood") {
        var hood = entity.variable_hood;
        if (hood) entity.setDoorOpen(4, false, false);
        else entity.setDoorShut(4, false);
    } else if (name === "boot") {
        var boot = entity.variable_boot;
        if (boot) entity.setDoorOpen(5, false, false);
        else entity.setDoorShut(5, false);
    } else if (name === "sirenSound") {
        var sirenSound = entity.variable_sirenSound;
        entity.setSirenSound(sirenSound);
    } else if (name === "freeze") {
        entity.freezePosition(value);
        entity.setOnGroundProperly();
    } else if (name === "heading") {
        value = parseInt(value);
        if (!isNaN(value)) {
            entity.setHeading(value);
        }
    } else if (name === "godmode") {
        if (value) entity.setProofs(true, true, true, true, true, true, true, true);
        else entity.setProofs(false, false, false, false, false, false, false, false);
	}
});

mp.events.add("render", () => {
    let vehicle = mp.players.local.vehicle
    if (vehicle) {
        let handling = vehicle.variable_handling
        let accelerationLimit = vehicle.variable_accelerationLimit
        mp.game.controls.disableControlAction(2, 345, true); // Veh meele attack (X)
        mp.game.controls.disableControlAction(2, 80, true); // Veh cinematic camera (R)
        if (handling && handling.hasOwnProperty("engineTorqueMultiplier")) { 
            let engineTorqueMultiplier = handling.engineTorqueMultiplier
            if (accelerationLimit) engineTorqueMultiplier -= (accelerationLimit / 100)

            vehicle.setEngineTorqueMultiplier(engineTorqueMultiplier);
        }
        else if (accelerationLimit) {
            vehicle.setEngineTorqueMultiplier(1.0 - (accelerationLimit / 100));
        }
        let maxSpeed = vehicle.variable_maxSpeed
        let isInGreenZone = isLocalPlayerInGreenZone()
        if (isInGreenZone) {
            vehicle.setMaxSpeed(isInGreenZone / 3.636363) 
        }
        else if (maxSpeed) {
            let limitedSpeed = vehicle.variable_limitedSpeed
            let vehMaxSpeed = maxSpeed / 3.636363
            let chip = vehicle.variable_chip
            if (chip) {
                if (chip == 1) vehMaxSpeed = vehMaxSpeed + (vehMaxSpeed / 100 * 5)
                else if (chip == 2) vehMaxSpeed = vehMaxSpeed + (vehMaxSpeed / 100 * 10)
                else if (chip == 3) vehMaxSpeed = vehMaxSpeed + (vehMaxSpeed / 100 * 15)
                else if (chip == 4) vehMaxSpeed = vehMaxSpeed + (vehMaxSpeed / 100 * 20)
            }
            if (limitedSpeed) vehMaxSpeed = vehMaxSpeed - (vehMaxSpeed / 100 * limitedSpeed)
            vehicle.setMaxSpeed(vehMaxSpeed)
        }
    }
    

    mp.vehicles.forEachInStreamRange((entity) => {
        let value = entity.variable_text
        if (value) {
            let distance = Math.abs(Math.sqrt(Math.pow((entity.position.x - mp.players.local.position.x), 2) +
                Math.pow((entity.position.y - mp.players.local.position.y), 2) +
                Math.pow((entity.position.z - mp.players.local.position.z), 2)));

            if (distance <= 10) {
                mp.game.graphics.drawText(value.text, [entity.position.x, entity.position.y, entity.position.z + value.posZ], {
                    font: 4,
                    color: [255, 255, 255, value.alpha || 255],
                    scale: [0.35, 0.35],
                    outline: true,
                    centre: true
                });
            }
        }

        let ehandling = entity.variable_handling

        if (ehandling) {
            if (ehandling.hasOwnProperty("trackWidth") && ehandling.trackWidth != 0.8) {
                for (var i = 0; i <= 3; i++) {
                    entity.setWheelTrackWidth(i, i % 2 ? ehandling.trackWidth : ehandling.trackWidth * -1)
                }
            }
            if (ehandling.hasOwnProperty("wheelWidth") && ehandling.wheelWidth != 0.5) {
                entity.setWheelWidth(ehandling.wheelWidth)
            }
        }

        let boot = entity.variable_boot || false

        if (boot) {
            entity.setDoorOpen(5, false, false)
        }
    })
})

function setHandling (entity, value) {
    if (!isEntityExists(entity)) return
    if (entity.type !== "vehicle") return 
    if (value) {
        //chatDebug(`fInitialDriveForce ${value.fInitialDriveForce} ${value.hasOwnProperty("fTractionCurveLateral")} ${value.hasOwnProperty("fInitialDriveForce")} ${value.hasOwnProperty("fTractionCurveMin")}`)
        if (value.hasOwnProperty("fDriveInertia")) entity.setHandling('fDriveInertia', value.fDriveInertia);
        if (value.hasOwnProperty("fHandBrakeForce")) entity.setHandling('fHandBrakeForce', value.fHandBrakeForce);
        if (value.hasOwnProperty("fSteeringLock")) entity.setHandling('fSteeringLock', value.fSteeringLock);
        if (entity.getVariable("tiresSystemBrake")) {
            entity.setHandling('fTractionCurveLateral', 1);
            entity.setHandling('fTractionCurveMin', 1);
        }
        else if (value.hasOwnProperty("fTractionCurveLateral") && value.hasOwnProperty("fInitialDriveForce") && value.hasOwnProperty("fTractionCurveMin")) {
            entity.setHandling('fTractionCurveLateral', 3.5 - value.fTractionCurveLateral);
            // entity.setHandling('fInitialDriveForce', 3.5 - value.fInitialDriveForce);
            entity.setHandling('fTractionCurveMin', 3.5 - value.fTractionCurveMin);
        }
        else if (value.hasOwnProperty("fTractionCurveLateral")) entity.setHandling('fTractionCurveLateral', value.fTractionCurveLateral);
        // if (value.hasOwnProperty("fRollCentreHeightFront")) entity.setHandling('fRollCentreHeightFront', value.fRollCentreHeightFront);
        if (entity.getVariable("suspensionSystemBrake")) entity.setSuspensionHeight(0.075)
        else if (value.hasOwnProperty("suspensionHeight")) entity.setSuspensionHeight(value.suspensionHeight)
        if (value.hasOwnProperty("wheelCamber")) entity.setWheelCamber(255, value.wheelCamber)
        if (value.hasOwnProperty("wheelWidth") && value.wheelWidth == 0.5) {
            entity.setWheelWidth(value.wheelWidth)
        }
        if (value.hasOwnProperty("trackWidth") && value.trackWidth == 0.8) {
            for (var i = 0; i <= 3; i++) {
                entity.setWheelTrackWidth(i, i % 2 ? value.trackWidth : value.trackWidth * -1)
            }
        }
    }
    //if (value && value.hasOwnProperty("enginePowerMultiplier")) entity.setEnginePowerMultiplier(value.enginePowerMultiplier) 
    //entity.setHandling("fTractionCurveMin", 5)
}

function setAnchor(entity, value) {
    if (entity.anchorLock && value !== 'unlock') return;
    if (value === 'lock') entity.anchorLock = true,  value = true;
    else if (value === 'unlock' && entity.anchorLock) delete entity.anchorLock, value = false;
    mp.game.invoke('0x75DBEC174AEEAD10', entity.handle, value);
    mp.game.invoke('0xE3EBAAE484798530', entity.handle, value);
}

let freezeBoat = false;
mp.keys.bindEx(0x71, true, function() {
    if (mp.players.local.vehicle && mp.game.vehicle.isThisModelABoat(mp.players.local.vehicle.model)) {
        if (mp.players.local.vehicle.getPedInSeat(-1) == mp.players.local.handle) {
            let entity = mp.players.local.vehicle
            freezeBoat = !freezeBoat
            entity.freezePosition(freezeBoat)
        }
    }
}, "Якір човна", 1);

async function executeObjects (entity, array) { 
    try {
        if (Array.isArray(array)) { 
            if (!isEntityExists(entity)) return
            if (!entity.handle) return chatDebug(`entity handle не найден у ${entity.remoteId}`)
            if (!entity.attachedObjects) entity.attachedObjects = []
            if (entity.attachedObjects.length) executeObjects(entity, null)
            for (let key in array) {
                let value = array[key]
                if (value) {
                    let object = mp.objects.new(mp.game.joaat(value.name), new mp.Vector3(entity.position.x, entity.position.y, entity.position.z), { rotation: value.objectRotation || 0.0 });
                    // if (!object.handle) chatDebug(`OOBBJJEECCTT handle не найден у ${entity.remoteId}`)
                    if (!object.handle) {
                        let target = await waitEntity(object) 
                        if (!target) {
                            if (isEntityExists(object)) object.destroy()
                        }
                    }
                    if (!isEntityExists(entity)) {
                        chatDebug(`entity не найден, но object найден, объект удаляется`)
                        if (isEntityExists(object)) object.destroy()
                        return
                    } 
                    else {
                        if (!isEntityExists(object)) return
                        object.attachedTo = entity.remoteId
                        object.uniqName = value.uniqName
                        object.attachTo(entity.handle, value.boneIndexName ? entity.getBoneIndexByName(value.boneIndexName) : value.boneIndex || 0, value.offsetX || 0.0, value.offsetY || 0.0, value.offsetZ || 0.0, value.rotX || 0.0, value.rotY || 0.0, value.rotZ || 0.0, true, true, true, false, 0, true);
                        entity.attachedObjects.push(object) 
                    } 
                }
            }
        } else {
            for (let key in entity.attachedObjects) {
                if (isEntityExists(entity.attachedObjects[key])) entity.attachedObjects[key].destroy()
            }
            entity.attachedObjects = []
        }
    } catch (err) {
        mp.events.callRemote("log", `executeObjects: ${err}`)
    }
}
function disableDriving (entity, value) {
    // chatDebug(`disable driving ${value ? 'включён' : 'выключен'} у машины с ид ${entity.remoteId}`)
    if (value) {
        entity.disableDrivingRender = new mp.Event("render", () => {
            if (!entity || !mp.vehicles.exists(entity)) return
            if (entity.getPedInSeat(-1) == mp.players.local.handle) {
                mp.game.controls.disableControlAction(0, 30, true)
                mp.game.controls.disableControlAction(0, 31, true)
                mp.game.controls.disableControlAction(0, 32, true)
                mp.game.controls.disableControlAction(0, 33, true)
                mp.game.controls.disableControlAction(0, 34, true)
                mp.game.controls.disableControlAction(0, 35, true)
                mp.game.controls.disableControlAction(0, 59, true)
                mp.game.controls.disableControlAction(0, 63, true)
                mp.game.controls.disableControlAction(0, 64, true)
                mp.game.controls.disableControlAction(0, 59, true)
                mp.game.controls.disableControlAction(0, 77, true)
                mp.game.controls.disableControlAction(0, 78, true)
                mp.game.controls.disableControlAction(0, 71, true)
                mp.game.controls.disableControlAction(0, 72, true)
            }
        }) 
    } else {
        if (entity.disableDrivingRender) {
            entity.disableDrivingRender.destroy()
            delete entity.disableDrivingRender
        } 
    }
}
function toggleMod (entity, mod, toggle) {
    entity.toggleMod(mod, toggle === 1)
}
function setHeadlightsColor(vehicle, color) {
    if (color == 255) {
        vehicle.toggleMod(22, true);
        mp.game.invoke("0xE41033B25D003A07", vehicle.handle, 255);
    }
    else if (typeof color !== "number" || isNaN(color) || color < 0 || color === 255) {
        // Disable
        vehicle.toggleMod(22, false);
        mp.game.invoke("0xE41033B25D003A07", vehicle.handle, 255);
    } else {
        // Enable
        vehicle.toggleMod(22, true);
        mp.game.invoke("0xE41033B25D003A07", vehicle.handle, color);
    }
} 
function setTyreSmokeColor(vehicle, color) {
    if (color == -1) {
        // Disable
        vehicle.toggleMod(20, false);
        vehicle.setTyreSmokeColor(255, 255, 255);
    } else {
        // Enable
        vehicle.toggleMod(20, true); 
        let r = parseInt(color[0])
        let g = parseInt(color[1])
        let b = parseInt(color[2])
        if(isNaN(r) || isNaN(g) || isNaN(b)) return mp.events.callRemote("log", `error setTyreSmokeColor: ${JSON.stringify(color)}`)
        if (r == 0 && g == 0 && b == 0) b = 1
        vehicle.setTyreSmokeColor(r, g, b);
    }
} 


function setColor (entity, value) { 
    if (value.colorDefault) {
        entity.setExtraColours(0, (parseInt(value.wheelColor) == 255 ? 0 : parseInt(value.wheelColor)) || 0);
    }
    else {
        entity.setModColor1(parseInt(value.colorTypePrimary) || 0, 0, 0);
        entity.setModColor2(parseInt(value.colorTypeSecondary) || 0, 0); 
        entity.modColor1 = parseInt(value.colorTypePrimary)
        entity.modColor2 = parseInt(value.colorTypeSecondary)  
        entity.pearlescentColor = parseInt(value.pearlescentColor)  
        entity.setExtraColours(parseInt(value.pearlescentColor) || 0, (parseInt(value.wheelColor) == 255 ? 0 : parseInt(value.wheelColor)) || 0);
        if (typeof value.colorPrimary == 'string') value.colorPrimary = JSON.parse(value.colorPrimary)
        if (typeof value.colorSecondary == 'string') value.colorSecondary = JSON.parse(value.colorSecondary) 
        entity.color1 = value.colorPrimary
        entity.color2 = value.colorSecondary
        mp.game.invoke("0x7141766F91D15BEA", entity.handle, value.colorPrimary[0], value.colorPrimary[1], value.colorPrimary[2])
        mp.game.invoke("0x36CED73BFED89754", entity.handle, value.colorSecondary[0], value.colorSecondary[1], value.colorSecondary[2])
    }
}

mp.events.add('testDrawText', () => {
    let drawedTexts = []
    mp.vehicles.forEach((entity) => {
        if (entity.textRender) {
            let distance = Math.abs(Math.sqrt(Math.pow((entity.position.x - mp.players.local.position.x), 2) +
            Math.pow((entity.position.y - mp.players.local.position.y), 2) +
            Math.pow((entity.position.z - mp.players.local.position.z), 2)));

            drawedTexts.push({id: entity.remoteId, text: entity.text, pos: entity.position, distance, exists: isEntityExists(entity), getCoords: entity.getCoords(false), getCoordsNative: mp.game.invokeVector3('0x3FEF770D40960D5A', entity.handle, false)})
        }
    })

    mp.events.callRemote("log", `drawedTexts: ${JSON.stringify(drawedTexts)}`)
});

mp.events.add('vehicleEngineHandler', () => {
    mp.events.call("prompt.hide");
    let player = mp.players.local;
    if (!player.vehicle) return; 
    if (player.vehicle.getPedInSeat(-1) != player.handle) return; 
    let engine = player.vehicle.getVariable("engine");

    if (!engine) { 
        if (player.vehicle.variable_fuel <= 0) {
            let electric = player.vehicle.variable_electric; 
            return rpc.callBrowser(browserMenu, "nError", `${electric ? "Немає заряду!" : "Немає палива!"}`)
        }
    }

    mp.events.callRemote(`setEngineHandler`);
});

mp.keys.bindEx(0x50, true, function() {
    if (mp.bindBlocker() || !mp.players.local.vehicle) return;
    if (player.vehicle.getPedInSeat(-1) != player.handle) return; 

    mp.events.callRemote(`setSeatBelt`);
}, "Паски безпеки", 1);

mp.events.add('entityStreamOut', (entity) => {
    try {
        if (entity.type == 'vehicle') {
            executeObjects(entity, null)
        }
    }
    catch (err) {
        mp.events.callRemote("log", `Error entityStreamOut: ${err}`)
    }
})

mp.events.add('entityStreamIn', (entity) => {
    if (entity.type == 'vehicle' && entity.handle) {
        let engine = entity.getVariable("engine") || false;

        entity.setUndriveable(!engine);
        entity.setEngineOn(engine, true, true);
    }
});

mp.events.add('entityStreamInCustom', async (entity) => {
    try {
        if (entity.type == 'vehicle' && entity.handle) {
            chatDebug(`EntityStreamIn SyncVehicles`)
            let leftSignal = entity.variable_leftSignal || false;
            let rightSignal = entity.variable_rightSignal || false;
            let sirenSound = entity.variable_sirenSound || false;
            let hood = entity.variable_hood || false;
            let boot = entity.variable_boot || false;
            let dirty = entity.variable_dirtLevel || 0
            let text = entity.variable_text
            let color = entity.variable_color 
            let attachedObjects = entity.variable_attachedObjects
            let anchor = entity.variable_anchor 
            let tyreSmokeColor = entity.variable_tyreSmokeColor
            let isFreeze = entity.variable_freeze
            let heading = parseInt(entity.variable_heading)
            let modKit = entity.variable_modKit
            let godmode = entity.variable_godmode
            let livery = entity.variable_livery
            // let wheelType = entity.getVariable("wheelType") 
            // entity.setWheelType(wheelType)
            if (anchor !== undefined) setAnchor(entity, anchor);
            if (isFreeze !== undefined) {
                chatDebug("FREEZE")
                setTimeout(() => { 
                    entity.setOnGroundProperly()
                    entity.freezePosition(isFreeze)
                }, 3000)
            }
            if (!isNaN(heading)) entity.setHeading(heading);
            entity.setDirtLevel(parseFloat(dirty))

            entity.setIndicatorLights(1, leftSignal);
            entity.setIndicatorLights(0, rightSignal);

            entity.setSirenSound(sirenSound);

            if (color) setColor(entity, color)

            executeObjects(entity, attachedObjects)

            if (godmode) entity.setProofs(true, true, true, true, true, true, true, true);
            else entity.setProofs(false, false, false, false, false, false, false, false);

            setTimeout(() => { 
                if (hood) entity.setDoorOpen(4, false, false);
                else entity.setDoorShut(4, false);
                if (boot) entity.setDoorOpen(5, false, false);
                else entity.setDoorShut(5, false);
            }, 1000)
            
            toggleMod(entity, 18, parseInt(entity.variable_turbo))
            setHeadlightsColor(entity, parseInt(entity.variable_headlightsColor));
            if (modKit) entity.setModKit(modKit)
            disableDriving(entity, entity.variable_disableDriving || false) 
            mp.game.invoke("0x95A88F0B409CDA47", entity.handle, entity.variable_numberPlate || "")
            if (global.upgradeNumberPlate) global.upgradeNumberPlate(entity, entity.variable_numberPlate || "")
            //mp.events.call("client::getMessage", `numberplate у ${entity.id} => ${entity.variable_numberPlate}`)
            setTyreSmokeColor (entity, Array.isArray(tyreSmokeColor) ? tyreSmokeColor : -1)
            setHandling(entity, entity.variable_handling)
            entity.setFixed()
            let isAir = mp.game.vehicle.isThisModelAHeli(entity.model) || mp.game.vehicle.isThisModelAPlane(entity.model)
            if (isAir) {
                mp.game.invoke("0x983765856F2564F9", entity.handle, false)
                if (mp.game.vehicle.isThisModelAPlane(entity.model)) mp.game.invoke("0xAD2D28A1AFDFF131", entity.handle, 0.0)
                mp.game.invoke("0xE6F13851780394DA", entity.handle, 0.0)
            }
            setLivery(entity, livery)
        }
    }
    catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\Sync\SyncVehicles.js entityStreamIn: ${err}`)
    }
});

const speedoMetrHudBlackList = [mp.game.joaat("rcbandito")]
 
let vehPropActive = false  
setInterval(() => {
    try {
        mp.vehicles.forEachInStreamRange((veh) => {
            if (veh.getDirtLevel() != 0) {
                veh.setDirtLevel(0)
            }
        })
        // chatDebug(`vehPropActive ${vehPropActive}`)
        if (player.vehicle && player.vehicle.getPedInSeat(-1) == player.handle) {
            let veh = player.vehicle;
            if (mp.game.vehicle.isThisModelABicycle(veh.model)) return;
            let fuel = veh.variable_fuel;
            let engine = veh.getVariable("engine"); 
            let electric = veh.variable_electric; 
            if (fuel <= 0 && engine) {
                mp.events.callRemote(`turnOffEngine`);
            } 
            if (engine !== undefined) {
                player.vehicle.setUndriveable(!engine); 
                player.vehicle.setEngineOn(engine, true, true); 
            }
            
            let locked = player.vehicle.getDoorLockStatus() == 2;   
            if (!player.vehicle.locked || player.vehicle.locked != locked) {
                player.vehicle.locked = locked
                browserMenu.call(`hudControl`, `changeOptions`, `LockedHandler`, locked);
            }

            let lights = veh.getLightsState(1, 1)
            let lightsState = lights.highbeamsOn ? 2 : lights.lightsOn ? 1 : 0
            let isMovingBack = veh.getSpeedVector(true).y
            let test = { lightsState, gear: isMovingBack < -1 ? -1 : veh.gear, mileage: veh.variable_mileage, health: parseInt(veh.getBodyHealth()), fuel: fuel, electric, name: mp.game.ui.getLabelText(mp.game.vehicle.getDisplayNameFromVehicleModel(veh.model)), class: getLocalizedVehicleClassByModel(veh.model), isBoat: mp.game.vehicle.isThisModelABoat(veh.model) || getIsVehicleIgnored(veh.model), isAir: mp.game.vehicle.isThisModelAHeli(veh.model) || mp.game.vehicle.isThisModelAPlane(veh.model)};
            browserMenu.call(`hudControl`, `changeOptions`, `VehPropHandler`, test);
            let left = veh.variable_leftSignal ;
            let right = veh.variable_rightSignal ; 
            let seatbelt = veh.variable_seatbelt; 
            let maxFuel = veh.variable_maxFuel || 100; 
            if(!vehPropActive && !speedoMetrHudBlackList.includes(veh.model)){
                vehPropActive = true
                chatDebug(`vehPropActive top ${vehPropActive}`)
                browserMenu.call(`hudControl`, `enableSpeedoMetrHud`, true);
                if (engine) {
                    browserMenu.call(`hudControl`, `changeOptions`, `engineStatus`, true);
                    browserMenu.call(`hudControl`, `changeOptions`, `LeftSignalHandler`, left);
                    browserMenu.call(`hudControl`, `changeOptions`, `RightSignalHandler`, right);
                } else {
                    browserMenu.call(`hudControl`, `changeOptions`, `engineStatus`, false);
                    browserMenu.call(`hudControl`, `changeOptions`, `LeftSignalHandler`, false);
                    browserMenu.call(`hudControl`, `changeOptions`, `RightSignalHandler`, false);
                } 

                browserMenu.call(`hudControl`, `changeOptions`, `seatbeltHandler`, seatbelt);
                browserMenu.call(`hudControl`, `changeOptions`, `maxFuelHandler`, maxFuel);
            }   
            
        } 
        else if(vehPropActive){ 
            browserMenu.call(`hudControl`, `enableSpeedoMetrHud`, false);
            browserMenu.call(`hudControl`, `changeOptions`, `LeftSignalHandler`, false);
            browserMenu.call(`hudControl`, `changeOptions`, `RightSignalHandler`, false);
            browserMenu.call(`hudControl`, `changeOptions`, `LockedHandler`, true);
            browserMenu.call(`hudControl`, `changeOptions`, `engineStatus`, false);
            browserMenu.call(`hudControl`, `changeOptions`, `seatbeltHandler`, false);
            vehPropActive = false 
            chatDebug(`vehPropActive bottom ${vehPropActive}`)
        }
    } catch (err) {
        chatDebug(`err sync veh: ${err}`)
    }
    
}, 500)

setInterval(() => {
    if (player.vehicle && player.vehicle.getPedInSeat(-1) == player.handle) {
        let veh = player.vehicle;
        let data = { speed: parseInt((veh.getSpeed() * 3.6).toFixed(0)), maxSpeed: parseInt((mp.game.vehicle.getVehicleModelMaxSpeed(veh.model) * 3.6).toFixed(0))};
        browserMenu.call(`hudControl`, `changeOptions`, `VehPropHandlerSpeed`, data);
    }
}, 10)

function setLivery (entity, value) {
    if (value == undefined) return
    entity.setLivery(value)
}

function setBodyHealth (entity, value) {
    if (value == undefined) return
    entity.setHealth(value)
    entity.setBodyHealth(value)
    // mp.events.call("changeBodyHealth", entity, value)
}
function setEngineHealth (entity, value) {
    if (value == undefined) return
    entity.setEngineHealth(value)
    if (value < 0) {
        entity.setInvincible(false)
    }
}

mp.events.add("vehicle.setEngineHealth", (remoteId, value) => {
    let entity = mp.vehicles.atRemoteId(remoteId)
    if (entity) setEngineHealth(entity, value)
})

mp.events.add("vehicle.setBodyHealth", (remoteId, value) => {
    let entity = mp.vehicles.atRemoteId(remoteId)
    if (entity) setBodyHealth(entity, value)
})

mp.events.add("vehicle.removeEngineHealth", (remoteId, value) => {
    let entity = mp.vehicles.atRemoteId(remoteId)
    if (entity) setEngineHealth(entity, entity.getEngineHealth() - value)
})

mp.events.add("vehicle.removeBodyHealth", (remoteId, value) => {
    let entity = mp.vehicles.atRemoteId(remoteId)
    if (entity) setBodyHealth(entity, entity.getBodyHealth() - value)
})

mp.events.add("fixPlayerCar", (vehicle) => {
    vehicle.setVisible(true, false)
    vehicle.resetAlpha()
})

mp.events.add("syncPlayerEnterVehicle", (vehicle, seat) => {
    mp.players.local._vehicle = vehicle
    mp.players.local._seat = seat 
    mp.events.call("setLocalVar", "vehicle", vehicle)
    chatDebug(`~~~~~~~~~~~~~~ Ты сел в тачку ${vehicle.remoteId} ${seat} ${mp.players.local.seat}`)
    if (mp.game.vehicle.isThisModelABoat(vehicle.model)) {
        mp.game.invoke('0x75DBEC174AEEAD10', vehicle.handle, false);
        mp.game.invoke('0xE3EBAAE484798530', vehicle.handle, false);
    }
    if (vehicle.variable_seatbelt) mp.game.invoke("0x7A6535691B477C48", mp.players.local.handle, 1)
    else mp.game.invoke("0x7A6535691B477C48", mp.players.local.handle, 0)
})
mp.events.add("syncPlayerExitVehicle", async (vehicle, seat) => { 
    delete mp.players.local._vehicle
    delete mp.players.local._seat
    mp.events.call("setLocalVar", "vehicle", null)
    if (!vehicle) return
    chatDebug(`~~~~~~~~~~~~~~ Ты вышел из тачки ${vehicle.remoteId} ${seat}`)
    if (typeof vehicle.model !== 'number') return
    chatDebug(`${vehicle} ${vehicle.handle} ${vehicle.model} ${seat}`)
    if (mp.game.vehicle.isThisModelABoat(vehicle.model)) {
        mp.game.invoke('0x75DBEC174AEEAD10', vehicle.handle, true);
        mp.game.invoke('0xE3EBAAE484798530', vehicle.handle, true);
    }
})

mp.events.add("todo", (vehicle) => {
    if (vehicle && mp.players.local.vehicle == vehicle) {
        chatDebug(`Баг #3423434 ${vehicle.remoteId}`)
    }
    // if (mp.players.local.vehicle == vehicle) {
    //     mp.game.graphics.notify("баг #434254")
    // }
})

rpc.register("putIntoVehicle", async (data) => {
    let seat = data[1]
    let vehicle = data[0]
    //seat = mp.game.vehicle.isThisModelAQuadbike(vehicle.model) ? seat + 1 : mp.game.vehicle.isThisModelABike(vehicle.model) ? seat + 1 : mp.game.vehicle.isThisModelABicycle(model) ? seat + 1 : seat
    chatDebug(`vehicle: ${vehicle} seat: ${seat}`)
    while (!vehicle.handle) await sleep(200)
    seat--;
    mp.players.local.taskWarpIntoVehicle(vehicle.handle, seat);
    return vehicle
})

rpc.register("getVehicleHandle", async (vehicle) => {
    let handle = 0
    let i = 0
    while (!handle || !mp.vehicles.atHandle(handle)) {
        if (!isEntityExists(vehicle)) break
        handle = vehicle.handle
        i++
        if (i > 100) break
        chatDebug(`try getVehicleHandle`)
        await sleep(300) 
    }
    chatDebug(`Найденный getVehicleHandle: ${handle}`)
    return mp.vehicles.atHandle(handle)
})
     
function getIsVehicleIgnored (model) { 
    return model == mp.game.joaat("mower") || model == mp.game.joaat("emsford450") || model == mp.game.joaat("lguard") || model == mp.game.joaat("emsexp") || model == mp.game.joaat("submersible") || model == mp.game.joaat("submersible2")
} 
function getLocalizedVehicleClassByModel(hash){
    let classId = mp.game.vehicle.getVehicleClassFromName(hash)
    let classToString = {
        0: "Компакт",
        1: "Седан",
        2: "Позашляховик",
        3: "Купе",
        4: "Масл-кар",
        5: "Класичний спорткар",
        6: "Спорткар",
        7: "Супер-кар",
        8: "Мотоцикл",
        9: "Позашляховик",
        10: "Індустріальний автомобіль",
        11: "Спортивно-утилітарний автомобіль",
        12: "Мінівен",
        13: "Велосипед",
        14: "Човен",
        15: "Гелікоптер",
        16: "Літак",
        17: "Сервісний автомобіль",
        18: "Аварійний транспортний засіб",
        19: "Військовий автомобіль",
        20: "Комерційний автомобіль",
        21: "Потяг"
    }
    if(!classToString[classId]) return null
    return classToString[classId]
}

function logAboutVehicle (vehicle) {
    mp.events.callRemote("log", `zar veh is found remoteId ${vehicle.remoteId} handle ${vehicle.handle} id ${vehicle.id} pos.x ${vehicle.position.x} pos.y ${vehicle.position.y} pos.z ${vehicle.position.z} dimension ${vehicle.dimension} mode ${vehicle.model}`)
}

mp.events.add("debugAllStreamedVehicles", () => {
  for(let i=0;i<mp.vehicles.streamed.length;i++)
    logAboutVehicle(mp.vehicles.streamed[i])
});

mp.events.add("debugVehicleRemoteId", (vehicleID) => {
  let vehicle = mp.vehicles.atRemoteId(vehicleID);
  if(vehicle)
    logAboutVehicle(vehicle)
  else
    mp.events.callRemote("log", `zar veh isn't found remoteId ${vehicleID}`)
});

mp.events.add("printVehiclesPool", () => {
    let ids = []
    mp.vehicles.forEach((veh) => ids.push(veh.remoteId))
    let ids_str = ids.join(",")
    mp.events.callRemote("log", `client mp.vehicles.length is ${mp.vehicles.length}: ${ids_str}`)
});

mp.events.addProc("getVehiclesPoolLength", () => {
    return mp.vehicles.length;
});

mp.events.addDataHandler("engine", (entity) => {
    let engine = entity.getVariable("engine");
    entity.setUndriveable(!engine);
    entity.setEngineOn(engine, true, true);
    if (player.vehicle && player.vehicle.remoteId == entity.remoteId) {
        if (entity.getPedInSeat(-1) === mp.players.local.handle) {
            mp.events.call("BN_ShowWithPictureCustomState", `Двигун ${engine ? '<span class="green">заведений</span>' : '<span class="red">заглушений</span>'}`, engine ? "engine-green.svg" : "engine-red.svg")
        }
        var left = entity.getVariable("leftSignal");
        var right = entity.getVariable("rightSignal");
        if (engine) { 
            browserMenu.call(`hudControl`, `changeOptions`, `LeftSignalHandler`, left);
            browserMenu.call(`hudControl`, `changeOptions`, `RightSignalHandler`, right);

            browserMenu.call(`hudControl`, `changeOptions`, `engineStatus`, true);
        } else {
            browserMenu.call(`hudControl`, `changeOptions`, `LeftSignalHandler`, false);
            browserMenu.call(`hudControl`, `changeOptions`, `RightSignalHandler`, false);
            browserMenu.call(`hudControl`, `changeOptions`, `engineStatus`, false);
        }
    }
});

}; a; }
{let a = function scriptEntryPoint(mp) {
const Natives = {
    SET_BLIP_CATEGORY: "0x234CDD44D996FD9A",
    SHOW_HEADING_INDICATOR_ON_BLIP: "0x5FBCA48327B914DF",
    SET_BLIP_NAME_TO_PLAYER_NAME: "0x127DE7B20C60A6A3",
    SET_BLIP_ALPHA: "0x45FF974EEE1C8734",
    REMOVE_BLIP: "0x86A652570E5F25DD",
    GET_BLIP_ALPHA: "0x970F608F0EE6C885",
    SET_BLIP_COLOR: "0x03D7FB09E75D6B7E"
};

const COLOR = {
    STANDART: 4, //СТАНДАРТНЫЙ ЦВЕТ ИГРОКА
    FAMILIES: 3, //family
    LSPD: 63,
    FIB: 58,
    EMS: 59,
    NG: 52,
    NEWS: 23,
    FAMILES: 43,
    BALLAS: 27,
    AZTECAS: 26,
    VAGOS: 46,
    MG: 54,
    RMAFIA: 22,
    LCNMAFIA: 15,
    TRIADENMAFIA: 48,
    BIKER: 21,
    LAWYER: 28,
    ASSASSINS: 4
}

const FACTIONS = {
  LSPD: 1,
  FIB: 2,
  EMS: 3,
  NG: 4,
  NEWS: 5,
  FAMILES: 6, //The Grove Street Family
  BALLAS: 7, //The Ballas Gang
  AZTECAS: 8, //Los Aztecas
  VAGOS: 9, //Los Santos Vagos
  MG: 10, //Marabunta Grande
  RMAFIA: 11, //Русская Мафия
  LCNMAFIA: 12, //La Cosa Nostra
  TRIADENMAFIA: 13, //The Triads Mafia
  BIKER: 14, //Байкеры
  LAWYER: 15, //Коллегия адвокатов
  ASSASSINS: 16, //Наёмные убийцы
}

mp.events.addDataHandler("blipColor", (entity, value) => {
    if (entity.type != 'player') return
    SyncPlayer (entity)
})
mp.events.addDataHandler("isFactionDuty", (entity, value) => {
    if (entity.type != 'player') return
    SyncPlayer (entity)
})
mp.events.addDataHandler("NicknameColor", (entity, value) => {
    if (entity.type != 'player') return
    SyncPlayer (entity)
})
mp.events.addDataHandler("faction", (entity, value) => {
    if (entity.type != 'player') return
    SyncPlayer (entity)
    /*if (entity == mp.players.local) {
        mp.players.forEachInStreamRange((pl) => {
            setEntityBlipColor(pl)
        })
    }*/
})
mp.events.addDataHandler("family", (entity, value) => {
    if (entity.type != 'player') return
    SyncPlayer (entity)
    /*if (entity == mp.players.local) {
        mp.players.forEachInStreamRange((pl) => {
            setEntityBlipColor(pl)
        })
    }*/
})

mp.events.add("setRadiusVariable", (entity, name, value) => {
	if (name === "invisible") {
		if (entity.type != 'player') return

        if (value) mp.attachmentMngr.hideAllFor(entity, true)
        else mp.attachmentMngr.hideAllFor(entity, false)

        if (entity == mp.players.local) return
        if (value) {
            entity.setAlpha(0)
            entity.setInvincible(true)
        }
        else {
            entity.resetAlpha()
            entity.setInvincible(false)
        }
        
        SyncPlayer (entity)
	}
})

let blipsDisabled = false

mp.events.add("disableBlips", (disable) => {
    blipsDisabled = disable
    mp.players.forEachInStreamRange((pl) => {
        SyncPlayer(pl)
    })
})

function SyncPlayer (entity) { 
    if (entity == mp.players.local) return;
    let local = mp.players.local
    
    if (blipsDisabled) return blipHandler(entity, false)

    let invis = entity.variable_invisible
    let faction = entity.getVariable("faction")
    let localFaction = local.getVariable("faction")
    let family = entity.getVariable("family")
    let localFamily = local.getVariable("family")
    let nameColor = entity.getVariable("NicknameColor")

    //if (!invis && nameColor && nameColor == "[227,95,192]") return blipHandler(entity, true)
    
    if (faction && localFaction) {
        if (faction == localFaction) {
            if (invis) return blipHandler(entity, false)
            return blipHandler(entity, true)
        } else {
            blipHandler(entity, false)
        }
    }

    if (family && localFamily && mp.clientStorage.familyBlips) {
        if (family == localFamily) {
            if (invis) return blipHandler(entity, false, true)
            blipHandler(entity, true, true)
        } else {
            blipHandler(entity, false)
        }
    }
}

function blipHandler (entity, show, family = false) { 
    if (show) {
        if (entity.blipentity) mp.game.ui.removeBlip(entity.blipentity)
        entity.blipentity = mp.game.invoke("0x5CDE92C702A8FCE7", entity.handle)
        mp.game.invoke("0xD38744167B2FA257", entity.blipentity, 0.7)
        setEntityBlipColor(entity, family)
            
        mp.game.invoke(Natives.SET_BLIP_CATEGORY, entity.blipentity, 7);
        mp.game.invoke(Natives.SHOW_HEADING_INDICATOR_ON_BLIP, entity.blipentity, true);
        mp.game.invoke(Natives.SET_BLIP_ALPHA, entity.blipentity, 255);
    } 
    else {
        if (entity.blipentity) {
            mp.game.ui.removeBlip(entity.blipentity)
            delete entity.blipentity
        }
    }
}

mp.events.add("entityStreamInCustom", (entity) => {
    try {
        if (entity.type != 'player') return
        chatDebug("entityStreamIn SyncPlayers")
        const isInvincible = entity.variable_invisible
        if(isInvincible)
        {
            entity.setInvincible(!!isInvincible);
            entity.setAlpha(0)
            // mp.attachmentMngr.hideAllFor(entity, !!isInvincible)
        }
        SyncPlayer (entity)
    }
    catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\Sync\SyncPlayers.js entityStreamIn: ${err}`)
    }
})

mp.events.add("entityStreamOut", (entity) => {
    try {
        if (entity.type != 'player') return
        blipHandler (entity, false)
    } catch (err) {
        mp.events.callRemote("log", `Error entityStreamOut: ${err}`)
    }
})

function setEntityBlipColor(target, family) {
    let blipColor = parseInt(target.getVariable("blipColor"))
    let nameColor = target.getVariable("NicknameColor")
    //if (nameColor && nameColor == "[227,95,192]") return mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, 8);
    if (family) mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.FAMILIES);
    else mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.FAMILES);
    return
    if (target.getVariable("faction")) {
        if (target.getVariable("faction") == FACTIONS.LSPD)
           if(target.getVariable("isFactionDuty")) mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.LSPD);
           else mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.STANDART);
        else if (target.getVariable("faction") == FACTIONS.FIB)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.FIB);
        else if (target.getVariable("faction") == FACTIONS.EMS)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.EMS);
        else if (target.getVariable("faction") == FACTIONS.NG)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.NG);
        else if (target.getVariable("faction") == FACTIONS.NEWS)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.NEWS);
        else if (target.getVariable("faction") == FACTIONS.FAMILES)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.FAMILES);
        else if (target.getVariable("faction") == FACTIONS.BALLAS)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.BALLAS);
        else if (target.getVariable("faction") == FACTIONS.AZTECAS)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.AZTECAS);
        else if (target.getVariable("faction") == FACTIONS.VAGOS)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.VAGOS);
        else if (target.getVariable("faction") == FACTIONS.MG)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.MG);
        else if (target.getVariable("faction") == FACTIONS.RMAFIA)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.RMAFIA);
        else if (target.getVariable("faction") == FACTIONS.LCNMAFIA)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.LCNMAFIA);
        else if (target.getVariable("faction") == FACTIONS.TRIADENMAFIA)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.TRIADENMAFIA);
        else if (target.getVariable("faction") == FACTIONS.BIKER)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.BIKER);
        else if (target.getVariable("faction") == FACTIONS.LAWYER)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.LAWYER);
        else if (target.getVariable("faction") == FACTIONS.ASSASSINS)
            mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, COLOR.ASSASSINS);
            return
    }
    else mp.game.invoke("0x03D7FB09E75D6B7E", target.blipentity, isNaN(blipColor) ? 0 : blipColor);
}
}; a; }
{let a = function scriptEntryPoint(mp) {

mp.events.addDataHandler("text", (entity, value) => {
    if (entity.type != 'blip') return
})

mp.events.add("authCharacter.success", () => { 
    try {
        mp.blips.forEach((blip) => {
            let text = blip.getVariable('text')
            if (typeof text == "string") {  
                mp.game.invoke("0xF9113A30DE5C6670", text) 
                mp.game.invoke("0xBC38B49BCB83BC9B", blip.handle)
            }
        }) 
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\Sync\SyncBlips.js authCharacter.success: ${err}`)
    }
}) 
}; a; }
{let a = function scriptEntryPoint(mp) {
async function SyncAnim(entity, value, streamIn) {
	try {
		if (!entity) return
		if (entity.type != "player") return
		if (!mp.players.exists(entity)) return
		if (!streamIn) {
			if (!(value && value.notClearLastAnim) && !(value && value.playFixed) && !(entity.lastAnim && entity.lastAnim.playFixed) && !(entity.lastAnim && entity.lastAnim.dict === "cellphone@female" && entity.lastAnim.name === "cellphone_text_read_base") && !(entity.lastAnim && entity.lastAnim.dict === "anim_casino_b@amb@casino@games@shared@player@" && entity.lastAnim.name === "idle_cardgames") && !(entity.lastAnim && entity.lastAnim.dict === "random@arrests" && entity.lastAnim.name === "generic_radio_chatter") && !entity.isClimbing()) entity.clearTasksImmediately();
			else if ((entity.isClimbing() && entity.lastAnim) || (entity.lastAnim && entity.lastAnim.playFixed)) entity.stopAnimTask(entity.lastAnim.dict, entity.lastAnim.name, 3.0);
			else if (entity.lastAnim && entity.lastAnim.outSpeed) entity.clearTasks();
		}
		if (value === null && mp.attachedObjects[entity.remoteId] && mp.attachedObjects[entity.remoteId].modelName == 'prop_fishing_rod_01') {
			var info = mp.attachInfo['prop_fishing_rod_01'];
			var o = info.offset;
			mp.attachedObjects[entity.remoteId].attachTo(entity.handle, info.bone, o.x, o.y, o.z, o.rX, o.rY, o.rZ, false, false, false, false, 2, true);
		}
		if (entity.lastAnim) delete entity.lastAnim;
		if (!value || ((entity.getVariable("cuffedBy") != null || entity.getVariable("boundedBy") != null) && !value.important)) return;
		entity.lastAnim = value;

		if (await mp.game.streaming.loadAnimDict(value.dict)) entity.taskPlayAnim(value.dict, value.name, value.speed || 1, value.outSpeed || 0, value.duration || -1, value.hasOwnProperty("flag") ? value.flag : 1, 0, false, false, false)
		if (value.heading) entity.setHeading(value.heading)

		if (value.dict == "amb@world_human_stand_fishing@idle_a" && value.name == "idle_c" && mp.attachedObjects[entity.remoteId]) {
			let target = await waitEntity(mp.attachedObjects[entity.remoteId]) 
			if (target && entity && entity.handle) {
				mp.attachedObjects[entity.remoteId].attachTo(entity.handle, 61, 0, 0, 0, 0, 0, 0, false, false, false, false, 2, true);
			}
		}

		if (value.dict == "mp_player_inteat@burger" && value.name == "mp_player_int_eat_burger" && entity.variable_attachedObject && entity.variable_attachedObject == "ba_prop_battle_vape_01" && !entity.__glowPtfxHandle) {
			await sleep(950)
			if (!isEntityExists(entity)) return
			const name = "exp_grd_bzgas_smoke"
			const dict = "core" 

			if (await mp.game.streaming.loadNamedPtfxAsset(dict)) {
				if (!isEntityExists(entity)) return
				mp.game.graphics.setPtfxAssetNextCall(dict)
				entity.__glowPtfxHandle = mp.game.graphics.startParticleFxLoopedOnEntityBone(name, entity.handle, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, entity.getBoneIndex(20279), value.particleScale || 0.5, false, false, false)
				mp.game.graphics.setParticleFxLoopedAlpha(entity.__glowPtfxHandle, 0.5)
				await sleep(3000)
				if (!isEntityExists(entity)) return
				if (entity.__glowPtfxHandle) {
					mp.game.graphics.removeParticleFx(entity.__glowPtfxHandle, false)
					delete entity.__glowPtfxHandle
				}
				if (value.particleScale === 1) {
					entity.stopAnimTask("mp_player_inteat@burger", "mp_player_int_eat_burger", 3.0);
					entity.stopAnimTask("anim@heists@humane_labs@finale@keycards", "ped_a_enter_loop", 3.0);
				}
				else {
					entity.taskPlayAnim("anim@heists@humane_labs@finale@keycards", "ped_a_enter_loop", 8, 0, -1, 2 + 16 + 32, 0, false, false, false)
				}
			}
		}
	} catch (err) {
		mp.events.callRemote("log", `Error client gamemode\scripts\Sync\SyncAnimations.js entityStreamIn: ${err}`)
	}
}

mp.events.add("setRadiusVariable", (entity, name, value) => {
	if (!isEntityExists(entity)) return
	if (name === "SyncedAnimation") {
		SyncAnim(entity, value)
	}
})

mp.events.add("entityStreamInCustom", (entity) => {
	if (entity.type === "player") {
		SyncAnim(entity, entity.variable_SyncedAnimation, true)
	}
})

mp.events.add("clearTasksImmediately", () => {
	mp.players.local.clearTasksImmediately()
})
}; a; }
{let a = function scriptEntryPoint(mp) {
var radioTimerId;

mp.events.add('playerEnterVehicle', (vehicle, seat) => {
	if (vehicle.syncRadio) delete vehicle.syncRadio;
	radio_sync();
    radioTimerId = setInterval(() => {
        radio_sync();
    }, 1000);
});

mp.events.add('playerLeaveVehicle', (vehicle, seat) => {
    clearInterval(radioTimerId), radioTimerId = null
});

function radio_sync() {
    var player = mp.players.local;
    var radio_index;
    if (player.vehicle) {
        if (!player.vehicle.radio) {
			mp.game.audio.setRadioToStationName("OFF");
			mp.game.invoke("0x1B9C0099CB942AC6", player.vehicle.handle, "OFF");
            radio_index = 0;
        } 
		else if (!player.vehicle.syncRadio && player.vehicle.radio == 255) {
			mp.game.audio.setRadioToStationName("OFF");
			mp.game.invoke("0x1B9C0099CB942AC6", player.vehicle.handle, "OFF");
            radio_index = 255;
			player.vehicle.syncRadio = true
		}
		else {
            radio_index = player.vehicle.radio;
        }
        if (player.vehicle && player.vehicle.getPedInSeat(-1) === player.handle) {
            if (radio_index != mp.game.invoke("0xE8AF77C4C06ADC93")) {
                mp.events.callRemote("log", `radio_sync: ${radio_index} ${mp.game.invoke("0xE8AF77C4C06ADC93")}`)
                radio_index = mp.game.invoke("0xE8AF77C4C06ADC93");
                mp.events.callRemote('setRadio', radio_index);
            }
        } else {
            if (radio_index == 255) {
                mp.game.audio.setRadioToStationName("OFF");
            } else {
                mp.game.invoke("0xF7F26C6E9CC9EBB8", true);
                mp.game.invoke("0xA619B168B8A8570F ", radio_index);
            }
        }
    }
};

}; a; }
{let a = function scriptEntryPoint(mp) {

function setFacialAnim(player, facialAnim) {
    if (!facialAnim) {
        player.playFacialAnim("mood_normal_1", "facials@gen_male@variations@normal")
    } else {
        player.playFacialAnim("mic_chatter", "mp_facial");
    }
}

// mp.events.add("entityStreamIn", (entity) => {
//     try {
//         if (entity.type === "player" && entity.getVariable("facialAnim")) setFacialAnim(entity, entity.getVariable("facialAnim"))
//     }
//     catch (err) {
//         mp.events.callRemote("log", `Error client gamemode\scripts\Sync\SyncFacialAnim.js entityStreamIn: ${err}`)
//     }
// });

// mp.events.addDataHandler("facialAnim", (entity, value) => {
//     if (entity.type === "player") setFacialAnim(entity, value);
// });

mp.events.add("setFacialAnim", (entity, value) => {
    if (isEntityExists(entity)) setFacialAnim(entity, value);
});

}; a; }
{let a = function scriptEntryPoint(mp) {
const bigmap = [];

const bm_hide_time = 30000;

bigmap.status = 0;
bigmap.timer = null;

mp.game.ui.setRadarZoom(1.0);


let isRadarBigmapEnabled = false
mp.game.ui.setCustomRadarBigmapEnabled = (toggleBigMap, showFullMap) => {
    isRadarBigmapEnabled = toggleBigMap
    return mp.game.ui.setRadarBigmapEnabled(toggleBigMap, showFullMap)
}

mp.game.ui.getRadarBigmapEnabled = () => {
    return isRadarBigmapEnabled
}

mp.game.ui.setRadarBigmapEnabled(false, false);

mp.events.add('render', () => {
    if (mp.bindBlocker({ gungamecheck: true })) return; 
    try {
        mp.game.controls.disableControlAction(0, 48, true);
        if (mp.game.controls.isDisabledControlJustPressed(0, 48)) {
            if (bigmap.status === 0) {
                mp.game.ui.setRadarZoom(0.0);
                bigmap.status = 1;
    
                bigmap.timer = setTimeout(() => {
                    mp.game.ui.setCustomRadarBigmapEnabled(false, true);
                    mp.game.ui.setRadarZoom(1.0);
    
                    bigmap.status = 0;
                    bigmap.timer = null;
                }, bm_hide_time);
            } else if (bigmap.status === 1) {
                if (bigmap.timer != null) {
                    clearTimeout(bigmap.timer);
                    bigmap.timer = null;
                }
    
                mp.game.ui.setCustomRadarBigmapEnabled(true, false);
                mp.game.ui.setRadarZoom(0.0);
                bigmap.status = 2; 
    
                bigmap.timer = setTimeout(() => {
                    mp.game.ui.setCustomRadarBigmapEnabled(false, true);
                    mp.game.ui.setRadarZoom(1.0);
    
                    bigmap.status = 0;
                    bigmap.timer = null; 
                }, bm_hide_time);
            } else {
                if (bigmap.timer != null) {
                    clearTimeout(bigmap.timer);
                    bigmap.timer = null;
                }
    
                mp.game.ui.setCustomRadarBigmapEnabled(false, false);
                mp.game.ui.setRadarZoom(1.0);
                bigmap.status = 0; 
            }
        }

    } 
    catch (err) {
        chatDebug(`error: ${err}`)
    }
});
}; a; }
{let a = function scriptEntryPoint(mp) {
class CbHelper {
  constructor() {
    this.RED_COLOUR = { r: 188, g: 49, b: 43 };
    this.GREEN_COLOUR = { r: 45, g: 203, b: 134 };
  }
  getMinimum(numbers) {
    return Math.min(...numbers);
  }
  getMaximum(numbers) {
    return Math.max(...numbers);
  }
  getDistance(startPos, endPos) {
    return Math.sqrt(Math.pow(startPos.x - endPos.x, 2) + Math.pow(startPos.y - endPos.y, 2));
  }
  isInPoly(poly, point) {
    const minX = this.getMinimum(poly.map(p => p.x));
    const minY = this.getMinimum(poly.map(p => p.y));
    const maxX = this.getMaximum(poly.map(p => p.x));
    const maxY = this.getMaximum(poly.map(p => p.y));
    if (point.x < minX || point.x > maxX || point.y < minY || point.y > maxY)
      return false;
    let i = 0;
    let j = poly.length - 1;
    let isMatch = false;
    for (; i < poly.length; j = i++) {
      if (poly[i].x === point.x && poly[i].y === point.y)
        return true;
      if (poly[j].x === point.x && poly[j].y === point.y)
        return true;
      if (poly[i].x == poly[j].x &&
        point.x == poly[i].x &&
        point.y >= Math.min(poly[i].y, poly[j].y) &&
        point.y <= Math.max(poly[i].y, poly[j].y))
        return true;
      if (poly[i].y == poly[j].y &&
        point.y == poly[i].y &&
        point.x >= Math.min(poly[i].x, poly[j].x) &&
        point.x <= Math.max(poly[i].x, poly[j].x))
        return true;
      if (poly[i].y > point.y != poly[j].y > point.y &&
        point.x < ((poly[j].x - poly[i].x) * (point.y - poly[i].y)) / (poly[j].y - poly[i].y) + poly[i].x)
        isMatch = !isMatch;
    }
    return isMatch;
  }
  getOffsetPosition(startPosition, magnitude, heading, multiplier) {
    const cosx = multiplier * Math.cos(heading * (Math.PI / 180));
    const siny = multiplier * Math.sin(heading * (Math.PI / 180));
    return {
      x: startPosition.x + cosx * magnitude,
      y: startPosition.y + siny * magnitude
    };
  }
}
exports.cbHelper = new CbHelper();
}; a; }
{let a = function scriptEntryPoint(mp) {
const { cbHelper } = require("gamemode/scripts/AtmCriminal/CbHelper");

class CbPortLights {
  constructor(position, heading, portType) {
    this.position = position;
    this.heading = heading;
    this.portType = portType;
    this.alpha = 255;
    this.lastBlink = 0;
    this.lightZeroPosition = this.getLightPosition(this.position, this.heading, 0);
    this.lightOnePosition = this.getLightPosition(this.position, this.heading, 1);
  }
  drawLights() {
    if (this.portType === 'START') {
      this.drawLightSprite(this.lightZeroPosition, cbHelper.GREEN_COLOUR.r, cbHelper.GREEN_COLOUR.g, cbHelper.GREEN_COLOUR.b);
      this.drawLightSprite(this.lightOnePosition, cbHelper.GREEN_COLOUR.r, cbHelper.GREEN_COLOUR.g, cbHelper.GREEN_COLOUR.b);
      return;
    }
    if (this.lastBlink + 500 >= Date.now()) {
      this.alpha = this.alpha === 255 ? 0 : 255;
      this.lastBlink = Date.now();
    }
    this.drawLightSprite(this.lightZeroPosition, cbHelper.RED_COLOUR.r, cbHelper.RED_COLOUR.g, cbHelper.RED_COLOUR.b, this.alpha);
    this.drawLightSprite(this.lightOnePosition, cbHelper.RED_COLOUR.r, cbHelper.RED_COLOUR.g, cbHelper.RED_COLOUR.b, this.alpha);
  }
  drawLightSprite(position, red, green, blue, alpha = 255) {
    mp.game1.graphics.drawSprite('MPCircuitHack', 'light', position.x, position.y, 0.00775, 0.00775, 0, red, green, blue, alpha);
  }
  getAngleOffset(heading, lightNum) {
    if (heading === 90 || heading === 270) {
      return lightNum > 0 ? 128.75 : 232;
    }
    return lightNum > 0 ? 73 : 287.25;
  }
  getLightPosition(portPos, portHeading, lightNum) {
    const magnitude = portHeading === 90 || portHeading === 270 ? 0.0164 : 0.0228;
    const angleOffset = this.getAngleOffset(portHeading, lightNum);
    const multiplier = portHeading === 90 || portHeading === 270 ? -1 : 1;
    return cbHelper.getOffsetPosition(portPos, magnitude, (angleOffset + portHeading) % 360, multiplier);
  }
}

exports.CbPortLights = CbPortLights;
}; a; }
{let a = function scriptEntryPoint(mp) {
class Scaleform {
  constructor(scaleformStr) {
    this.handle = mp.game1.graphics.requestScaleformMovie(scaleformStr);
    this.queueCallFunction = new Map();
  }
  isLoaded() {
    return !!mp.game1.graphics.hasScaleformMovieLoaded(this.handle);
  }
  isValid() {
    return this.handle !== 0;
  }
  callFunction(strFunction, ...args) {
    if (this.isLoaded() && this.isValid()) {
      const graphics = mp.game.graphics;
      graphics.pushScaleformMovieFunction(this.handle, strFunction);
      args.forEach(arg => {
        switch (typeof arg) {
          case 'string': {
            graphics.pushScaleformMovieFunctionParameterString(arg);
            break;
          }
          case 'boolean': {
            graphics.pushScaleformMovieFunctionParameterBool(arg);
            break;
          }
          case 'number': {
            if (Number(arg) === arg && arg % 1 !== 0) {
              graphics.pushScaleformMovieFunctionParameterFloat(arg);
            }
            else {
              graphics.pushScaleformMovieFunctionParameterInt(arg);
            }
          }
        }
      });
      graphics.popScaleformMovieFunctionVoid();
    }
    else {
      this.queueCallFunction.set(strFunction, args);
    }
  }
  onUpdate() {
    if (this.isLoaded() && this.isValid()) {
      this.queueCallFunction.forEach((args, strFunction) => {
        this.callFunction(strFunction, ...args);
        this.queueCallFunction.delete(strFunction);
      });
    }
  }
  render2D(x, y, width, height) {
    this.onUpdate();
    if (this.isLoaded() && this.isValid()) {
      const graphics = mp.game.graphics;
      if (typeof x !== 'undefined' &&
        typeof y !== 'undefined' &&
        typeof width !== 'undefined' &&
        typeof height !== 'undefined') {
        graphics.drawScaleformMovie(this.handle, x, y, width, height, 255, 255, 255, 255, 0);
      }
      else {
        graphics.drawScaleformMovieFullscreen(this.handle, 255, 255, 255, 255, false);
      }
    }
  }
  render3D(position, rotation, scale) {
    this.onUpdate();
    if (this.isLoaded() && this.isValid()) {
      mp.game.graphics.drawScaleformMovie3dNonAdditive(this.handle, position.x, position.y, position.z, rotation.x, rotation.y, rotation.z, 2, 2, 1, scale.x, scale.y, scale.z, 2);
    }
  }
  render3DAdditive(position, rotation, scale) {
    this.onUpdate();
    if (this.isLoaded() && this.isValid()) {
      mp.game.graphics.drawScaleformMovie3d(this.handle, position.x, position.y, position.z, rotation.x, rotation.y, rotation.z, 2, 2, 1, scale.x, scale.y, scale.z, 2);
    }
  }
  dispose() {
    mp.game1.graphics.setScaleformMovieAsNoLongerNeeded(this.handle);
    this.handle = 0;
  }
}
exports.Scaleform = Scaleform;
}; a; }
{let a = function scriptEntryPoint(mp) {
const cinema_camera_pos = [-1426.763427734375, -230.83377075195312, 21.75];
const cinema_camera_lookat = [-1426.56396484375, -258.2504577636719, 21.75];
mp.cinemaActive = false
const localplayer = mp.players.local;
let cinema = {
	open: false,
	camera: null,
}
mp.events.add('client::cinema:open', (url, time, urls, playing, admin, votes, maxvotes) => {
	mp.cinemaActive = true
	setCursor(true)
	browserMenu.call(`cinema`, `opencinema`, url, time, urls, playing, admin, votes, maxvotes);
	cinema.open = true;
	// mp.gui.chat.push(`URL: ${url} Time: ${time} Urls: ${urls} Playing ${playing} Admin: ${admin} Vote: ${votes} MaxVotes: ${maxvotes}`)

	cinema.camera = mp.cameras.new("default", new mp.Vector3(cinema_camera_pos[0], cinema_camera_pos[1], cinema_camera_pos[2]), new mp.Vector3(0, 0, 0), 40);
	cinema.camera.pointAtCoord(cinema_camera_lookat[0], cinema_camera_lookat[1], cinema_camera_lookat[2]);
	cinema.camera.setActive(true);
	mp.game.cam.renderScriptCams(true, false, 0, true, false);
	localplayer.setVelocity(0.0, 0.0, 0.0);
});

mp.events.add('client::cinema:sendinfo', (time, url, urls, votes, maxvotes) => {
	browserMenu.call(`cinema`, `sendinfo`, time, url, urls, votes, maxvotes);
});

mp.events.add('client::cinema:sendvote', (votes, maxvotes) => {
	browserMenu.call(`cinema`, `setvote`, votes, maxvotes);
});

mp.events.add('client::cinema:skipvideo', (time, url, urls, vote, votesm) => {
	browserMenu.call(`cinema`, `skipvideo`, time, url, urls, vote, votesm);
});

mp.events.add('client::cinema:btnurl', (url) => {
	mp.events.callRemote('server::cinema:seturl', url);
});

mp.events.add('client::cinema:skip', () => {
	mp.events.callRemote('server::cinema:skip');
});

mp.events.add('client::cinema:close', () => {
	cinema.open = false;
	mp.cinemaActive = false
	setCursor(false)
	mp.events.callRemote('server::cinema:close');
	setTimeout(() => {
		if (cinema.camera != null) {
			cinema.camera.setActive(false);
			cinema.camera.destroy();
			cinema.camera = null;
			mp.game.cam.renderScriptCams(false, false, 0, true, false);
		}
	}, 600);
});
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.duelsActive = false

mp.events.add("client::displayDuelsInterface", (data) => {
    if (!data) data = null
    if (data) mp.duelsActive = true
    else mp.duelsActive = false
    browserMenu.call(`duelsAPI`, `setDisplay`, data)
})
mp.events.add("client::setKillsDuelsInterface", (data) => { 
    browserMenu.call(`duelsAPI`, `setKills`, data)
}) 

mp.events.add("selectMenu.backspacePressed", (menuName, itemName, itemValue, itemIndex) => {
    if (menuName == "duel") mp.events.call("setBlockControl", false)
});
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.familiars = {}
mp.familiars.params = []

mp.events.add("familiar.add", (familiar) => {
    mp.familiars.params.push(familiar)
    mp.events.call("playersOnline.refresh")
});

mp.events.add("familiar.remove", (familiar) => {
    if (mp.familiars.params.includes(familiar)) mp.familiars.params.splice(mp.familiars.params.indexOf(familiar), 1)
    mp.events.call("playersOnline.refresh")
});

mp.events.add("familiar.removeAll", () => {
    mp.familiars.params = []
    mp.events.call("playersOnline.refresh")
});

mp.events.add("familiar.set", (data) => {
    mp.familiars.params = data
});

mp.familiars.isFamiliar = (sqlId) => {
    return mp.familiars.params.includes(sqlId)
}
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.shopActive = false

function getWeaponHudStats(weaponHash) {
    let buffer = [new ArrayBuffer(40)];
    if (!mp.game.invoke('0xD92C739EE34C9EBA', weaponHash >> 0, buffer)) {
        return null;
    }

    const { 0: hudDamage, 2: hudSpeed, 4: hudCapacity, 6: hudAccuracy, 8: hudRange } = new Uint32Array(buffer[0]);
    return {
        hudDamage,
        hudSpeed,
        hudCapacity,
        hudAccuracy,
        hudRange
    };
}

mp.events.add("setShopMenu", (items) => {
    if (items.bizType == 8) {
        for (let key in items.items) {
            for (let weap in items.items[key]) {
                if (items.items[key][weap].hash) {
                    items.items[key][weap].stats = getWeaponHudStats(items.items[key][weap].hash >> 0)
                    delete items.items[key][weap].hash
                }
            }
        }
    }

    if (items) mp.shopActive = true
    else mp.shopActive = false

    browserMenu.call(`shopAPI`, `set`, items)
});

mp.events.add("clearShoppingBasket", () => {
    browserMenu.call(`shopAPI`, `clear`)
});
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.attachmentMngr = 
{
	attachments: {},
	
	addFor: async function(entity, id)
	{
		if(this.attachments.hasOwnProperty(id))
		{
			if (!entity.__attachmentObjects) entity.__attachmentObjects = {}

			if(!entity.__attachmentObjects.hasOwnProperty(id))
			{
				let attInfo = this.attachments[id];
				
				let object = mp.objects.new(attInfo.model, entity.position, {
					dimension: -1
				});

				object.__attMgrData = {
					targetEntity: entity.handle,
					bone: (typeof(attInfo.boneName) === 'string') ? entity.getBoneIndexByName(attInfo.boneName) : entity.getBoneIndex(attInfo.boneName),
					offset: attInfo.offset,
					rotation: attInfo.rotation
				};

				try
				{
					object.notifyStreaming = true;
					entity.__attachmentObjects[id] = object;
				}
				catch(err)
				{
					object.destroy();
				}

			}
		}
		else
		{
			mp.game.graphics.notify(`Static Attachments Error: ~r~Unknown Attachment Used: ~w~0x${id.toString(16)}`);
		}
	},
	
	removeFor: function(entity, id)
	{
		if(entity.__attachmentObjects && entity.__attachmentObjects.hasOwnProperty(id))
		{
			let obj = entity.__attachmentObjects[id];
			delete entity.__attachmentObjects[id];
			
			if(mp.objects.exists(obj))
			{
				obj.detach(false, true);
				obj.destroy();
			}
		}
	},
	
	initFor: function(entity)
	{
		for(let attachment of entity.__attachments)
		{
			mp.attachmentMngr.addFor(entity, attachment);
		}
	},
	
	shutdownFor: function(entity)
	{
		for(let attachment in entity.__attachmentObjects)
		{
			mp.attachmentMngr.removeFor(entity, attachment);
		}
	},

	hideAllFor: function(entity, hide)
	{
		for(let attachment in entity.__attachmentObjects)
		{
			let obj = entity.__attachmentObjects[attachment];

			if(mp.objects.exists(obj))
			{
				if (hide) obj.setVisible(false, false);
				else obj.setVisible(true, false);
			}
		}
	},

	hideFor: function(entity, id, hide)
	{
		if(entity.__attachmentObjects && entity.__attachmentObjects.hasOwnProperty(id))
		{
			let obj = entity.__attachmentObjects[id];
			
			if(mp.objects.exists(obj))
			{
				if (hide) obj.setVisible(false, false);
				else obj.setVisible(true, false); 
			}
		}
	},
	
	register: function(id, model, boneName, offset, rotation)
	{
		if(typeof(id) === 'string')
		{
			id = mp.game.joaat(id);
		}
		
		if(typeof(model) === 'string')
		{
			model = mp.game.joaat(model);
		}
		
		if(!this.attachments.hasOwnProperty(id))
		{
			if(mp.game.streaming.isModelInCdimage(model))
			{
				this.attachments[id] =
				{
					id: id,
					model: model,
					offset: offset,
					rotation: rotation,
					boneName: boneName
				};
			}
			else
			{
				mp.game.graphics.notify(`Static Attachments Error: ~r~Invalid Model (0x${model.toString(16)})`);
			}
		}
		else
		{
			mp.game.graphics.notify("Static Attachments Error: ~r~Duplicate Entry");
		}
	},
	
	unregister: function(id) 
	{
		if(typeof(id) === 'string')
		{
			id = mp.game.joaat(id);
		}
		
		if(this.attachments.hasOwnProperty(id))
		{
			this.attachments[id] = undefined;
		}
	},
	
	addLocal: function(attachmentName)
	{
		if(typeof(attachmentName) === 'string')
		{
			attachmentName = mp.game.joaat(attachmentName);
		}
		
		let entity = mp.players.local;
		
		if(!entity.__attachments || entity.__attachments.indexOf(attachmentName) === -1)
		{
			mp.events.callRemote("staticAttachments.Add", attachmentName.toString(36));
		}
	},
	
	removeLocal: function(attachmentName)
	{
		if(typeof(attachmentName) === 'string')
		{
			attachmentName = mp.game.joaat(attachmentName);
		}
		
		let entity = mp.players.local;
		
		if(entity.__attachments && entity.__attachments.indexOf(attachmentName) !== -1)
		{
			mp.events.callRemote("staticAttachments.Remove", attachmentName.toString(36));
		}
	},
	
	getAttachments: function()
	{
		return Object.assign({}, this.attachments);
	}
};

mp.events.add("entityStreamIn", (entity) =>
{
	try {
		let data = entity.getVariable("attachmentsData");
			
		if(data && data.length > 0)
		{
			let atts = data.split('|').map(att => parseInt(att, 36));
			entity.__attachments = atts;
			entity.__attachmentObjects = {};
		}

		if(entity.__attachments)
		{
			mp.attachmentMngr.initFor(entity);
		}

		if(entity.__attMgrData)
		{
			const { targetEntity, bone, offset, rotation } = entity.__attMgrData;

			const player = mp.players.atHandle(targetEntity)
			if (player && player.variable_invisible || player.variable_hideAttachments) entity.setVisible(false, false)
	
			entity.attachTo(
				targetEntity, bone,
				offset.x, offset.y, offset.z,
				rotation.x, rotation.y, rotation.z,
				false, false, false, false, 2, true
			);
		}

	} catch (err) {
		mp.events.callRemote("log", `Error client gamemode\scripts\WeaponDisplay\index.js entityStreamIn: ${err}`)
	}
});

mp.events.add("entityStreamOut", (entity) =>
{
	try {
		if(entity.__attachmentObjects)
		{
			mp.attachmentMngr.shutdownFor(entity);
		}
	} catch (err) {
		mp.events.callRemote("log", `Error entityStreamOut: ${err}`)
	}
});

mp.events.add("playerQuit", (entity) =>
{
	if(entity.__attachmentObjects)
	{
		mp.attachmentMngr.shutdownFor(entity);
	}
});

mp.events.addDataHandler("attachmentsData", (entity, data) =>
{
	let newAttachments = (data.length > 0) ? data.split('|').map(att => parseInt(att, 36)) : [];
	
	if(entity.handle !== 0)
	{
		let oldAttachments = entity.__attachments;	

		
		if(!oldAttachments)
		{
			oldAttachments = [];
			entity.__attachmentObjects = {}
		}
		
		// process outdated first
		for(let attachment of oldAttachments)
		{
			if(newAttachments.indexOf(attachment) === -1)
			{
				mp.attachmentMngr.removeFor(entity, attachment);
			}
		}
		
		// then new attachments
		for(let attachment of newAttachments)
		{
			if(oldAttachments.indexOf(attachment) === -1)
			{
				mp.attachmentMngr.addFor(entity, attachment);
			}
		}
	}
	
	entity.__attachments = newAttachments;
});

mp.events.add("setRadiusVariable", (entity, name, data) => {
	if (!isEntityExists(entity)) return
	if (name === "hideAttachments") {
		if (!isEntityExists(entity)) return
		if (entity.type != "player") return
		if (entity.handle !== 0) {
			mp.attachmentMngr.hideAllFor(entity, data)
		}
	}
	else if (name == "hideAttachment") {
		if (!isEntityExists(entity)) return
		if (entity.type != "player") return
		if (entity.handle !== 0) {
			mp.attachmentMngr.hideFor(entity, mp.game.joaat(data.model), data.hide)
		}
	}
})

mp.events.add("entityStreamInCustom", (entity) => {
	if (entity.type === "player") {
		let data = entity.variable_hideAttachment
		if (data) {
			mp.attachmentMngr.hideFor(entity, mp.game.joaat(data.model), data.hide)
		}
	}
})

mp.events.add("registerWeaponAttachments", (json) => {
    let data = JSON.parse(json);
    for (let weapon in data) mp.attachmentMngr.register(data[weapon].AttachName, data[weapon].AttachModel, data[weapon].AttachBone, data[weapon].AttachPosition, data[weapon].AttachRotation);
});
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.passportActive = false

mp.events.add("client::displayPassportInterface", (data) => {
    if (!data) data = null
    if (data) mp.passportActive = true
    else mp.passportActive = false
	mp.events.call('setBlockControl', mp.passportActive)
    mp.events.call("displayChat", !mp.passportActive)
	mp.events.call("hudControl.enable", !mp.passportActive)

    browserMenu.call(`documents`, `setDisplay`, data)
})

mp.events.add("showPassportCreate", (data) => {
    if (data) mp.interfaceActive = "passportCreate"
    else mp.interfaceActive = false
    browserMenu.call(`passportCreate`, `set`, data)
})

mp.events.add("setPagePassportCreate", (data) => {
    if (mp.interfaceActive && mp.interfaceActive == "passportCreate") browserMenu.call(`passportCreate`, `setPage`, data)
})

mp.events.add("showID", (data) => {
    if (!data) data = null
    if (data) mp.passportActive = true
    else mp.passportActive = false
    mp.events.call('setBlockControl', mp.passportActive)
    mp.events.call("displayChat", !mp.passportActive)
	mp.events.call("hudControl.enable", !mp.passportActive)
    setCursor(mp.passportActive)

    browserMenu.call(`docs`, `set`, data)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.sellerActive = false

mp.events.add("setSeller", (params, data) => {
    if (!params) params = null
    if (params) mp.sellerActive = true
    else mp.sellerActive = false
    browserMenu.call(`seller`, `setSeller`, params, data);
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.craftActive = false

function getWeaponHudStats(weaponHash) {
    let buffer = [new ArrayBuffer(40)];
    if (!mp.game.invoke('0xD92C739EE34C9EBA', weaponHash >> 0, buffer)) {
        return null;
    }

    const { 0: hudDamage, 2: hudSpeed, 4: hudCapacity, 6: hudAccuracy, 8: hudRange } = new Uint32Array(buffer[0]);
    return {
        hudDamage,
        hudSpeed,
        hudCapacity,
        hudAccuracy,
        hudRange
    };
}

mp.events.add("showCraft", (data) => {
    mp.craftActive = !!data
    for (let key in data.params) {
        for (let weap in data.params[key]) {
            if (data.params[key][weap].clientHash) {
                data.params[key][weap].stats = getWeaponHudStats(data.params[key][weap].clientHash >> 0)
                delete data.params[key][weap].clientHash
            }
        }
    }

    browserMenu.call(`craft`, `show`, data)
})

mp.events.add("setCrafted", () => {
    browserMenu.call(`craft`, `setCrafted`)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("showLottery", (data) => {
    if (data) mp.interfaceActive = "lottery"
    else mp.interfaceActive = false
    browserMenu.call(`lottery`, `show`, data)
})

mp.events.add("updateLotteryParams", () => {
    browserMenu.call(`lottery`, `getLotteryParams`)
})


}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("showMarriage", (data) => {
    if (data) mp.interfaceActive = "marriage"
    else mp.interfaceActive = false
    browserMenu.call(`marriageAPI`, `set`, data)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
let crosshairParams = null
mp.crosshairDisabled = false

mp.events.add("updateCrosshairParams", async (crosshairUpdate) => {
    crosshairParams = await rpc.callServer("getCrosshairParams")

    if (!crosshairUpdate) browserMenu.call(`mainMenuAPI`, `setCrosshairParams`, crosshairParams)
    browserMenu.call(`crosshair`, `setCrosshairParams`, crosshairParams)
})

const localPlayer = mp.players.local;

let showed = false
let aimingAt = false

mp.events.add("authCharacter.success", () => {
    try {
        browserMenu.call(`crosshair`, `init`)

        mp.events.add("render", () => {
            if (!crosshairParams) return
            if (!crosshairParams.data.cl_crosshairshow || mp.crosshairDisabled) {
                if (showed) {
                    browserMenu.call(`crosshair`, `set`, false)
                    showed = false
                }
                return
            }

            let groupHash = mp.game.weapon.getWeapontypeGroup(localPlayer.weapon)

            if (groupHash !== 3082541095) {
                mp.game.ui.hideHudComponentThisFrame(14)
                if((mp.game.weapon.isPedArmed(mp.players.local.handle, 6) && mp.players.local.getIsTaskActive(4/*CTaskAimGunOnFoot*/) && localPlayer.weapon != -1569615261) || crosshairParams.data.cl_crosshair_always_show) {
                    if (!showed) {
                        browserMenu.call(`crosshair`, `set`, true)
                        showed = true
                    }
                
                    let entity = mp.game.player.getEntityIsFreeAimingAt()

                    if (entity) {
                        if ((entity.type && entity.type == "player" && !entity.vehicle) || mp.peds.atHandle(entity)) {
                            if (!aimingAt) {
                                browserMenu.call(`crosshair`, `setAiming`, true)
                                aimingAt = true
                            }
                        }
                        else if (aimingAt) {
                            browserMenu.call(`crosshair`, `setAiming`, false)
                            aimingAt = false
                        }
                    } else if (aimingAt) {
                        browserMenu.call(`crosshair`, `setAiming`, false)
                        aimingAt = false
                    }
                    
                }
                else if (showed) {
                    browserMenu.call(`crosshair`, `set`, false)
                    showed = false
                }
            }
        })
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\Crosshair.js authCharacter.success: ${err}`)
    }
}) 
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("setContainers", (data) => {
    browserMenu.call(`containerMenuAPI`, `set`, data)
    if (data) mp.interfaceActive = "containers"
    else mp.interfaceActive = false
})

mp.events.add("setContainersReward", (data) => {
    browserMenu.call(`containerRewardMenuAPI`, `set`, data)
    if (data) mp.interfaceActive = "containersReward"
    else mp.interfaceActive = false
})
}; a; }
{let a = function scriptEntryPoint(mp) {
const { cbHelper } = require("gamemode/scripts/AtmCriminal/CbHelper");
const { CbPortLights } = require("gamemode/scripts/AtmCriminal/CbPortLights");

class CbGenericPorts {
  constructor() {
    this.startPortPos = { x: 0, y: 0 };
    this.finishPortPos = { x: 0, y: 0 };
    this.startPortHeading = -1;
    this.finishPortHeading = -1;
    this.startPortLights = null;
    this.finishPortLights = null;
    this.startPortBounds = [];
    this.finishPortBounds = [];
    this.winBounds = [];
  }
  isVectorZero(vector) {
    return vector.x === 0 && vector.y === 0;
  }
  initialize(level) {
    this.startPortPos = this.getStartPortPosition(level);
    this.finishPortPos = this.getFinishPortPosition(level, this.startPortPos);
    this.startPortHeading = this.getPortHeading(this.startPortPos);
    this.finishPortHeading = this.getPortHeading(this.finishPortPos);
    this.startPortLights = new CbPortLights(this.startPortPos, this.startPortHeading, 'START');
    this.finishPortLights = new CbPortLights(this.finishPortPos, this.finishPortHeading, 'FINISH');
    this.startPortBounds = this.getPortCollisionBounds(this.startPortPos, this.startPortHeading, true);
    this.finishPortBounds = this.getPortCollisionBounds(this.finishPortPos, this.finishPortHeading, false);
    this.winBounds = this.getWinBounds();
  }
  getRandom(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
  }
  drawPorts() {
    if (this.isVectorZero(this.startPortPos) ||
      this.isVectorZero(this.finishPortPos) ||
      this.startPortHeading === -1 ||
      this.finishPortHeading === -1) {
      return;
    }
    this.drawPortSprite(this.startPortPos, this.startPortHeading);
    this.drawPortSprite(this.finishPortPos, this.finishPortHeading);
    if (this.startPortLights)
      this.startPortLights.drawLights();
    if (this.finishPortLights)
      this.finishPortLights.drawLights();
  }
  isCollidingWithPort(pointPosition) {
    return ((cbHelper.isInPoly(this.startPortBounds, pointPosition) ||
      cbHelper.isInPoly(this.finishPortBounds, pointPosition)) &&
      !this.isPointInGameWinningPosition(pointPosition));
  }
  isPointInGameWinningPosition(pointPosition) {
    return cbHelper.isInPoly(this.winBounds, pointPosition);
  }
  drawPortSprite(position, heading) {
    const portHeight = heading === 0 || heading === 180 ? 0.055 : 0.0325;
    const portWidth = heading === 0 || heading === 180 ? 0.02 : 0.0325;
    mp.game1.graphics.drawSprite('MPCircuitHack', 'genericport', position.x, position.y, portWidth, portHeight, heading, 255, 255, 255, 255);
  }
  getMagnitude(heading, isStartPort) {
    if (heading === 0 || heading === 180) {
      return isStartPort ? 0.0279 : 0.0266;
    }
    return isStartPort ? 0.0211 : 0.0173;
  }
  getAngles(heading, isStartPort) {
    if (heading === 0 || heading === 180) {
      return isStartPort ? [289.75, 250.75, 109.75, 70] : [277.75, 259.25, 100.75, 82.5];
    }
    return isStartPort ? [313.25, 227.75, 132.25, 48.5] : [111, 66.5, 293.25, 249.25];
  }
  getPortCollisionBounds(position, heading, isStartPort) {
    const magnitude = this.getMagnitude(heading, isStartPort);
    const mult = heading === 0 || heading === 180 ? 1 : -1;
    const angles = this.getAngles(heading, isStartPort);
    const portBounds = [];
    for (const angle of angles) {
      portBounds.push(cbHelper.getOffsetPosition(position, magnitude, (heading + angle) % 360, mult));
    }
    return portBounds;
  }
  getMagnitudeAngleOffsetPairs(heading) {
    return heading === 0 || heading === 180
      ? [
        [0.0278, 70.25],
        [0.02807, 289.5],
        [0.02708, 282],
        [0.02665, 77.75]
      ]
      : [
        [0.02088, 228.5],
        [0.01827, 238.75],
        [0.01806, 121.75],
        [0.02061, 131.75]
      ];
  }
  getWinBounds() {
    const mult = this.finishPortHeading === 0 || this.finishPortHeading === 180 ? 1 : -1;
    const magnitudeAngleOffsetPairs = this.getMagnitudeAngleOffsetPairs(this.finishPortHeading);
    const portBounds = [];
    for (const pair of magnitudeAngleOffsetPairs) {
      portBounds.push(cbHelper.getOffsetPosition(this.finishPortPos, pair[0], (this.finishPortHeading + pair[1]) % 360, mult));
    }
    return portBounds;
  }
  getStartPortPosition(level) {
    const potentialPortBounds = this.getPortPositionBounds(level);
    if (potentialPortBounds.some(e => this.isVectorZero(e[0]) || this.isVectorZero(e[1]))) {
      return { x: 0, y: 0 };
    }
    const startPortBounds = potentialPortBounds[this.getRandom(0, potentialPortBounds.length - 1)];
    let startPos = { x: 0, y: 0 };
    let attempts = 20;
    while (this.isVectorZero(startPos) && attempts > 0) {
      startPos = this.getRandomPortPosition(startPortBounds);
      attempts--;
    }
    return startPos;
  }
  getFinishPortPosition(level, startPortPosition) {
    const potentialPortBounds = this.getPortPositionBounds(level);
    let maxDist = 0;
    let endPos = { x: 0, y: 0 };
    for (const bounds of potentialPortBounds) {
      let potentialPos = { x: 0, y: 0 };
      while (this.isVectorZero(potentialPos)) {
        potentialPos = this.getRandomPortPosition(bounds);
      }
      const startEndDist = cbHelper.getDistance(startPortPosition, potentialPos);
      if (startEndDist > maxDist) {
        maxDist = startEndDist;
        endPos = potentialPos;
      }
    }
    return endPos;
  }
  getPortHeading(portPosition) {
    const minX = 0.159;
    const maxX = 0.841;
    const minY = 0.153;
    const maxY = 0.848;
    const xBounds = [minX, maxX];
    const yBounds = [minY, maxY];
    const closestX = xBounds.sort((a, b) => Math.abs(a - portPosition.x) - Math.abs(b - portPosition.x))[0];
    const closestY = yBounds.sort((a, b) => Math.abs(a - portPosition.y) - Math.abs(b - portPosition.y))[0];
    if (Math.abs(portPosition.x - closestX) < Math.abs(portPosition.y - closestY)) {
      if (Math.abs(closestX - minX) < Math.abs(closestX - maxX)) {
        return 0;
      }
      return 180;
    }
    if (Math.abs(closestY - minY) < Math.abs(closestY - maxY)) {
      return 90;
    }
    return 270;
  }
  getRandomPortPosition(portBounds) {
    if (portBounds.length < 2)
      return { x: 0, y: 0 };
    const portX = this.getRandom(portBounds[0].x * 1000, portBounds[1].x * 1000) / 1000;
    const portY = this.getRandom(portBounds[0].y * 1000, portBounds[1].y * 1000) / 1000;
    return { x: portX, y: portY };
  }
  getPortPositionBounds(level) {
    switch (level) {
      case 1:
        return [
          [
            { x: 0.169, y: 0.613 },
            { x: 0.169, y: 0.816 }
          ],
          [
            { x: 0.179, y: 0.837 },
            { x: 0.284, y: 0.837 }
          ],
          [
            { x: 0.833, y: 0.181 },
            { x: 0.833, y: 0.277 }
          ],
          [
            { x: 0.751, y: 0.163 },
            { x: 0.823, y: 0.163 }
          ]
        ];
      case 2:
        return [
          [
            { x: 0.169, y: 0.673 },
            { x: 0.169, y: 0.818 }
          ],
          [
            { x: 0.18, y: 0.838 },
            { x: 0.297, y: 0.838 }
          ],
          [
            { x: 0.832, y: 0.181 },
            { x: 0.832, y: 0.324 }
          ],
          [
            { x: 0.778, y: 0.16 },
            { x: 0.821, y: 0.16 }
          ]
        ];
      case 3:
        return [
          [
            { x: 0.166, y: 0.182 },
            { x: 0.166, y: 0.263 }
          ],
          [
            { x: 0.166, y: 0.745 },
            { x: 0.166, y: 0.816 }
          ],
          [
            { x: 0.18, y: 0.837 },
            { x: 0.31, y: 0.837 }
          ],
          [
            { x: 0.184, y: 0.164 },
            { x: 0.277, y: 0.164 }
          ]
        ];
      case 4:
        return [
          [
            { x: 0.169, y: 0.628 },
            { x: 0.169, y: 0.817 }
          ],
          [
            { x: 0.183, y: 0.838 },
            { x: 0.259, y: 0.838 }
          ],
          [
            { x: 0.833, y: 0.186 },
            { x: 0.833, y: 0.359 }
          ],
          [
            { x: 0.797, y: 0.161 },
            { x: 0.819, y: 0.161 }
          ]
        ];
      case 5:
        return [
          [
            { x: 0.832, y: 0.742 },
            { x: 0.832, y: 0.811 }
          ],
          [
            { x: 0.761, y: 0.839 },
            { x: 0.821, y: 0.839 }
          ],
          [
            { x: 0.169, y: 0.184 },
            { x: 0.169, y: 0.383 }
          ],
          [
            { x: 0.184, y: 0.162 },
            { x: 0.234, y: 0.162 }
          ]
        ];
      case 6:
        return [
          [
            { x: 0.167, y: 0.183 },
            { x: 0.167, y: 0.3 }
          ],
          [
            { x: 0.18, y: 0.162 },
            { x: 0.214, y: 0.162 }
          ],
          [
            { x: 0.833, y: 0.186 },
            { x: 0.833, y: 0.282 }
          ],
          [
            { x: 0.768, y: 0.161 },
            { x: 0.82, y: 0.161 }
          ]
        ];
      default:
        return []; // Not possible
    }
  }
}

exports.cbGenericPorts = new CbGenericPorts();
}; a; }
{let a = function scriptEntryPoint(mp) {
class CbMapBoundaries {
  getBoxBounds(mapNumber) {
    switch (mapNumber) {
      case 1:
        return [
          [
            { x: 0.18, y: 0.155 },
            { x: 0.18, y: 0.583 },
            { x: 0.307, y: 0.583 },
            { x: 0.307, y: 0.154 }
          ],
          [
            { x: 0.321, y: 0.154 },
            { x: 0.321, y: 0.477 },
            { x: 0.382, y: 0.477 },
            { x: 0.382, y: 0.154 }
          ],
          [
            { x: 0.396, y: 0.154 },
            { x: 0.396, y: 0.379 },
            { x: 0.429, y: 0.379 },
            { x: 0.429, y: 0.155 }
          ],
          [
            { x: 0.443, y: 0.155 },
            { x: 0.443, y: 0.378 },
            { x: 0.477, y: 0.378 },
            { x: 0.477, y: 0.154 }
          ],
          [
            { x: 0.491, y: 0.154 },
            { x: 0.491, y: 0.379 },
            { x: 0.525, y: 0.379 },
            { x: 0.525, y: 0.155 }
          ],
          [
            { x: 0.538, y: 0.155 },
            { x: 0.538, y: 0.308 },
            { x: 0.585, y: 0.308 },
            { x: 0.585, y: 0.155 }
          ],
          [
            { x: 0.597, y: 0.155 },
            { x: 0.597, y: 0.308 },
            { x: 0.645, y: 0.308 },
            { x: 0.645, y: 0.155 }
          ],
          [
            { x: 0.66, y: 0.155 },
            { x: 0.66, y: 0.255 },
            { x: 0.73, y: 0.255 },
            { x: 0.73, y: 0.154 }
          ],
          [
            { x: 0.692, y: 0.311 },
            { x: 0.692, y: 0.373 },
            { x: 0.584, y: 0.376 },
            { x: 0.584, y: 0.452 },
            { x: 0.838, y: 0.452 },
            { x: 0.838, y: 0.31 }
          ],
          [
            { x: 0.343, y: 0.544 },
            { x: 0.343, y: 0.639 },
            { x: 0.398, y: 0.639 },
            { x: 0.398, y: 0.544 }
          ],
          [
            { x: 0.302, y: 0.7 },
            { x: 0.302, y: 0.846 },
            { x: 0.434, y: 0.846 },
            { x: 0.434, y: 0.7 }
          ],
          [
            { x: 0.451, y: 0.435 },
            { x: 0.451, y: 0.847 },
            { x: 0.569, y: 0.847 },
            { x: 0.569, y: 0.436 }
          ],
          [
            { x: 0.587, y: 0.477 },
            { x: 0.587, y: 0.846 },
            { x: 0.705, y: 0.846 },
            { x: 0.705, y: 0.477 }
          ],
          [
            { x: 0.721, y: 0.477 },
            { x: 0.721, y: 0.846 },
            { x: 0.838, y: 0.846 },
            { x: 0.838, y: 0.475 }
          ]
        ];
      case 2:
        return [
          [
            { x: 0.162, y: 0.152 },
            { x: 0.163, y: 0.645 },
            { x: 0.249, y: 0.643 },
            { x: 0.252, y: 0.275 },
            { x: 0.375, y: 0.275 },
            { x: 0.375, y: 0.35 },
            { x: 0.416, y: 0.35 },
            { x: 0.416, y: 0.157 }
          ],
          [
            { x: 0.313, y: 0.36 },
            { x: 0.313, y: 0.844 },
            { x: 0.442, y: 0.844 },
            { x: 0.442, y: 0.419 },
            { x: 0.349, y: 0.415 },
            { x: 0.348, y: 0.36 }
          ],
          [
            { x: 0.458, y: 0.238 },
            { x: 0.458, y: 0.844 },
            { x: 0.515, y: 0.844 },
            { x: 0.515, y: 0.238 }
          ],
          [
            { x: 0.555, y: 0.156 },
            { x: 0.555, y: 0.454 },
            { x: 0.541, y: 0.458 },
            { x: 0.538, y: 0.551 },
            { x: 0.685, y: 0.551 },
            { x: 0.688, y: 0.46 },
            { x: 0.725, y: 0.456 },
            { x: 0.728, y: 0.309 },
            { x: 0.757, y: 0.303 },
            { x: 0.759, y: 0.157 }
          ],
          [
            { x: 0.552, y: 0.635 },
            { x: 0.552, y: 0.786 },
            { x: 0.695, y: 0.787 },
            { x: 0.695, y: 0.633 }
          ],
          [
            { x: 0.776, y: 0.36 },
            { x: 0.776, y: 0.455 },
            { x: 0.839, y: 0.455 },
            { x: 0.839, y: 0.358 }
          ],
          [
            { x: 0.739, y: 0.517 },
            { x: 0.739, y: 0.679 },
            { x: 0.801, y: 0.681 },
            { x: 0.801, y: 0.514 }
          ],
          [
            { x: 0.739, y: 0.749 },
            { x: 0.739, y: 0.846 },
            { x: 0.839, y: 0.846 },
            { x: 0.838, y: 0.747 }
          ]
        ];
      case 3:
        return [
          [
            { x: 0.299, y: 0.153 },
            { x: 0.299, y: 0.245 },
            { x: 0.372, y: 0.249 },
            { x: 0.375, y: 0.343 },
            { x: 0.465, y: 0.344 },
            { x: 0.465, y: 0.247 },
            { x: 0.448, y: 0.242 },
            { x: 0.446, y: 0.154 }
          ],
          [
            { x: 0.163, y: 0.298 },
            { x: 0.163, y: 0.715 },
            { x: 0.328, y: 0.715 },
            { x: 0.331, y: 0.578 },
            { x: 0.499, y: 0.578 },
            { x: 0.502, y: 0.771 },
            { x: 0.567, y: 0.771 },
            { x: 0.568, y: 0.564 },
            { x: 0.649, y: 0.564 },
            { x: 0.649, y: 0.473 },
            { x: 0.574, y: 0.468 },
            { x: 0.572, y: 0.247 },
            { x: 0.501, y: 0.247 },
            { x: 0.501, y: 0.403 },
            { x: 0.329, y: 0.403 },
            { x: 0.328, y: 0.299 }
          ],
          [
            { x: 0.365, y: 0.674 },
            { x: 0.365, y: 0.846 },
            { x: 0.436, y: 0.846 },
            { x: 0.436, y: 0.674 }
          ],
          [
            { x: 0.615, y: 0.154 },
            { x: 0.615, y: 0.383 },
            { x: 0.839, y: 0.383 },
            { x: 0.839, y: 0.155 }
          ],
          [
            { x: 0.698, y: 0.429 },
            { x: 0.698, y: 0.561 },
            { x: 0.839, y: 0.561 },
            { x: 0.839, y: 0.43 }
          ],
          [
            { x: 0.613, y: 0.649 },
            { x: 0.613, y: 0.845 },
            { x: 0.839, y: 0.845 },
            { x: 0.839, y: 0.649 }
          ]
        ];
      case 4:
        return [
          [
            { x: 0.162, y: 0.154 },
            { x: 0.162, y: 0.593 },
            { x: 0.305, y: 0.595 },
            { x: 0.307, y: 0.654 },
            { x: 0.419, y: 0.658 },
            { x: 0.421, y: 0.78 },
            { x: 0.54, y: 0.78 },
            { x: 0.542, y: 0.658 },
            { x: 0.69, y: 0.653 },
            { x: 0.69, y: 0.559 },
            { x: 0.542, y: 0.552 },
            { x: 0.54, y: 0.489 },
            { x: 0.324, y: 0.484 },
            { x: 0.322, y: 0.154 }
          ],
          [
            { x: 0.276, y: 0.728 },
            { x: 0.276, y: 0.846 },
            { x: 0.381, y: 0.846 },
            { x: 0.381, y: 0.73 }
          ],
          [
            { x: 0.352, y: 0.22 },
            { x: 0.352, y: 0.298 },
            { x: 0.368, y: 0.302 },
            { x: 0.369, y: 0.434 },
            { x: 0.421, y: 0.434 },
            { x: 0.422, y: 0.41 },
            { x: 0.576, y: 0.41 },
            { x: 0.576, y: 0.478 },
            { x: 0.735, y: 0.48 },
            { x: 0.736, y: 0.715 },
            { x: 0.578, y: 0.718 },
            { x: 0.578, y: 0.847 },
            { x: 0.837, y: 0.847 },
            { x: 0.837, y: 0.397 },
            { x: 0.78, y: 0.397 },
            { x: 0.779, y: 0.427 },
            { x: 0.763, y: 0.427 },
            { x: 0.761, y: 0.374 },
            { x: 0.687, y: 0.369 },
            { x: 0.687, y: 0.23 },
            { x: 0.643, y: 0.23 },
            { x: 0.643, y: 0.371 },
            { x: 0.624, y: 0.371 },
            { x: 0.623, y: 0.315 },
            { x: 0.422, y: 0.313 },
            { x: 0.421, y: 0.22 }
          ],
          [
            { x: 0.46, y: 0.154 },
            { x: 0.46, y: 0.263 },
            { x: 0.596, y: 0.261 },
            { x: 0.597, y: 0.154 }
          ],
          [
            { x: 0.723, y: 0.154 },
            { x: 0.723, y: 0.262 },
            { x: 0.778, y: 0.262 },
            { x: 0.778, y: 0.155 }
          ]
        ];
      case 5:
        return [
          [
            { x: 0.254, y: 0.156 },
            { x: 0.253, y: 0.436 },
            { x: 0.195, y: 0.439 },
            { x: 0.195, y: 0.514 },
            { x: 0.253, y: 0.515 },
            { x: 0.255, y: 0.701 },
            { x: 0.337, y: 0.704 },
            { x: 0.339, y: 0.788 },
            { x: 0.372, y: 0.787 },
            { x: 0.372, y: 0.636 },
            { x: 0.401, y: 0.636 },
            { x: 0.401, y: 0.673 },
            { x: 0.471, y: 0.672 },
            { x: 0.471, y: 0.637 },
            { x: 0.606, y: 0.637 },
            { x: 0.606, y: 0.682 },
            { x: 0.652, y: 0.682 },
            { x: 0.652, y: 0.483 },
            { x: 0.497, y: 0.483 },
            { x: 0.496, y: 0.53 },
            { x: 0.328, y: 0.53 },
            { x: 0.328, y: 0.261 },
            { x: 0.409, y: 0.261 },
            { x: 0.41, y: 0.359 },
            { x: 0.441, y: 0.359 },
            { x: 0.441, y: 0.244 },
            { x: 0.531, y: 0.244 },
            { x: 0.532, y: 0.305 },
            { x: 0.577, y: 0.305 },
            { x: 0.577, y: 0.255 },
            { x: 0.605, y: 0.253 },
            { x: 0.605, y: 0.154 }
          ],
          [
            { x: 0.163, y: 0.58 },
            { x: 0.163, y: 0.635 },
            { x: 0.219, y: 0.635 },
            { x: 0.219, y: 0.581 }
          ],
          [
            { x: 0.232, y: 0.761 },
            { x: 0.232, y: 0.844 },
            { x: 0.305, y: 0.846 },
            { x: 0.305, y: 0.761 }
          ],
          [
            { x: 0.383, y: 0.413 },
            { x: 0.383, y: 0.493 },
            { x: 0.461, y: 0.493 },
            { x: 0.461, y: 0.414 }
          ],
          [
            { x: 0.417, y: 0.744 },
            { x: 0.417, y: 0.846 },
            { x: 0.654, y: 0.846 },
            { x: 0.654, y: 0.744 },
            { x: 0.552, y: 0.743 },
            { x: 0.55, y: 0.704 },
            { x: 0.497, y: 0.704 },
            { x: 0.495, y: 0.742 },
            { x: 0.417, y: 0.745 }
          ],
          [
            { x: 0.482, y: 0.301 },
            { x: 0.482, y: 0.431 },
            { x: 0.561, y: 0.431 },
            { x: 0.561, y: 0.368 },
            { x: 0.511, y: 0.364 },
            { x: 0.509, y: 0.302 }
          ],
          [
            { x: 0.658, y: 0.199 },
            { x: 0.657, y: 0.366 },
            { x: 0.578, y: 0.368 },
            { x: 0.578, y: 0.432 },
            { x: 0.75, y: 0.434 },
            { x: 0.75, y: 0.495 },
            { x: 0.694, y: 0.496 },
            { x: 0.694, y: 0.845 },
            { x: 0.742, y: 0.845 },
            { x: 0.743, y: 0.646 },
            { x: 0.763, y: 0.644 },
            { x: 0.764, y: 0.555 },
            { x: 0.805, y: 0.554 },
            { x: 0.805, y: 0.435 },
            { x: 0.788, y: 0.432 },
            { x: 0.787, y: 0.368 },
            { x: 0.707, y: 0.367 },
            { x: 0.706, y: 0.199 }
          ],
          [
            { x: 0.754, y: 0.155 },
            { x: 0.753, y: 0.22 },
            { x: 0.775, y: 0.22 },
            { x: 0.775, y: 0.155 }
          ],
          [
            { x: 0.818, y: 0.259 },
            { x: 0.818, y: 0.327 },
            { x: 0.838, y: 0.325 },
            { x: 0.838, y: 0.258 }
          ],
          [
            { x: 0.808, y: 0.616 },
            { x: 0.809, y: 0.707 },
            { x: 0.838, y: 0.706 },
            { x: 0.838, y: 0.616 }
          ]
        ];
      case 6:
        return [
          [
            { x: 0.232, y: 0.155 },
            { x: 0.232, y: 0.218 },
            { x: 0.254, y: 0.218 },
            { x: 0.254, y: 0.154 }
          ],
          [
            { x: 0.225, y: 0.281 },
            { x: 0.224, y: 0.328 },
            { x: 0.162, y: 0.331 },
            { x: 0.162, y: 0.515 },
            { x: 0.214, y: 0.515 },
            { x: 0.214, y: 0.425 },
            { x: 0.247, y: 0.422 },
            { x: 0.247, y: 0.281 }
          ],
          [
            { x: 0.163, y: 0.572 },
            { x: 0.163, y: 0.847 },
            { x: 0.273, y: 0.847 },
            { x: 0.273, y: 0.758 },
            { x: 0.205, y: 0.757 },
            { x: 0.205, y: 0.622 },
            { x: 0.216, y: 0.621 },
            { x: 0.216, y: 0.572 }
          ],
          [
            { x: 0.24, y: 0.648 },
            { x: 0.24, y: 0.715 },
            { x: 0.261, y: 0.715 },
            { x: 0.261, y: 0.649 }
          ],
          [
            { x: 0.301, y: 0.154 },
            { x: 0.3, y: 0.249 },
            { x: 0.284, y: 0.251 },
            { x: 0.284, y: 0.327 },
            { x: 0.3, y: 0.331 },
            { x: 0.3, y: 0.47 },
            { x: 0.251, y: 0.472 },
            { x: 0.251, y: 0.563 },
            { x: 0.299, y: 0.563 },
            { x: 0.3, y: 0.537 },
            { x: 0.324, y: 0.539 },
            { x: 0.324, y: 0.603 },
            { x: 0.298, y: 0.605 },
            { x: 0.298, y: 0.697 },
            { x: 0.324, y: 0.7 },
            { x: 0.325, y: 0.806 },
            { x: 0.499, y: 0.806 },
            { x: 0.499, y: 0.758 },
            { x: 0.377, y: 0.755 },
            { x: 0.377, y: 0.598 },
            { x: 0.425, y: 0.596 },
            { x: 0.425, y: 0.543 },
            { x: 0.377, y: 0.541 },
            { x: 0.375, y: 0.458 },
            { x: 0.354, y: 0.455 },
            { x: 0.354, y: 0.253 },
            { x: 0.392, y: 0.25 },
            { x: 0.392, y: 0.155 }
          ],
          [
            { x: 0.375, y: 0.339 },
            { x: 0.375, y: 0.407 },
            { x: 0.396, y: 0.407 },
            { x: 0.396, y: 0.339 }
          ],
          [
            { x: 0.453, y: 0.154 },
            { x: 0.453, y: 0.225 },
            { x: 0.474, y: 0.223 },
            { x: 0.474, y: 0.155 }
          ],
          [
            { x: 0.454, y: 0.282 },
            { x: 0.452, y: 0.341 },
            { x: 0.425, y: 0.344 },
            { x: 0.425, y: 0.423 },
            { x: 0.599, y: 0.426 },
            { x: 0.599, y: 0.511 },
            { x: 0.525, y: 0.514 },
            { x: 0.524, y: 0.65 },
            { x: 0.422, y: 0.653 },
            { x: 0.422, y: 0.71 },
            { x: 0.536, y: 0.713 },
            { x: 0.537, y: 0.846 },
            { x: 0.838, y: 0.846 },
            { x: 0.838, y: 0.747 },
            { x: 0.755, y: 0.746 },
            { x: 0.754, y: 0.696 },
            { x: 0.647, y: 0.695 },
            { x: 0.646, y: 0.745 },
            { x: 0.591, y: 0.745 },
            { x: 0.59, y: 0.653 },
            { x: 0.57, y: 0.65 },
            { x: 0.57, y: 0.598 },
            { x: 0.651, y: 0.596 },
            { x: 0.653, y: 0.342 },
            { x: 0.666, y: 0.34 },
            { x: 0.665, y: 0.216 },
            { x: 0.629, y: 0.216 },
            { x: 0.628, y: 0.342 },
            { x: 0.478, y: 0.342 },
            { x: 0.477, y: 0.282 }
          ],
          [
            { x: 0.464, y: 0.477 },
            { x: 0.464, y: 0.616 },
            { x: 0.485, y: 0.615 },
            { x: 0.485, y: 0.477 }
          ],
          [
            { x: 0.51, y: 0.164 },
            { x: 0.51, y: 0.286 },
            { x: 0.589, y: 0.286 },
            { x: 0.589, y: 0.165 }
          ],
          [
            { x: 0.698, y: 0.155 },
            { x: 0.697, y: 0.577 },
            { x: 0.681, y: 0.58 },
            { x: 0.681, y: 0.629 },
            { x: 0.747, y: 0.627 },
            { x: 0.749, y: 0.559 },
            { x: 0.796, y: 0.556 },
            { x: 0.797, y: 0.458 },
            { x: 0.749, y: 0.456 },
            { x: 0.749, y: 0.154 }
          ],
          [
            { x: 0.779, y: 0.319 },
            { x: 0.779, y: 0.402 },
            { x: 0.838, y: 0.401 },
            { x: 0.838, y: 0.319 }
          ],
          [
            { x: 0.784, y: 0.615 },
            { x: 0.784, y: 0.696 },
            { x: 0.837, y: 0.695 },
            { x: 0.837, y: 0.615 }
          ]
        ];
      default:
        return [];
    }
  }
}
exports.cbMapBoundaries = new CbMapBoundaries();
}; a; }
{let a = function scriptEntryPoint(mp) {
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const { cbGenericPorts } = require("gamemode/scripts/AtmCriminal/CbGenericPorts");
const { cbHelper } = require("gamemode/scripts/AtmCriminal/CbHelper");

class CbPoint {
  constructor() {
    this.pointHeadSize = 0.0125;
    this.history = [];
    this.alpha = 255;
    this.isAlive = true;
    this.isVisible = true;
    this.lastDirection = 'NONE';
    this.position = { x: 0, y: 0 };
  }
  resetData() {
    this.alpha = 255;
    this.isAlive = true;
    this.isVisible = true;
  }
  initialize() {
    this.resetData();
    this.history = [];
    this.setPointStartPosition();
    this.history.push(cbGenericPorts.startPortPos);
    this.setStartDirection(cbGenericPorts.startPortHeading);
  }
  drawPoint(status) {
    if (!this.isAlive) {
      mp.game1.graphics.drawSprite('MPCircuitHack', 'spark', this.position.x, this.position.y, 0.0125, 0.0125, 0, 255, 255, 255, this.alpha);
    }
    switch (status) {
      case 'STARTING':
      case 'INPROGRESS':
      case 'SUCCESS':
        mp.game1.graphics.drawSprite('MPCircuitHack', 'head', this.position.x, this.position.y, this.pointHeadSize, this.pointHeadSize, 0, cbHelper.GREEN_COLOUR.r, cbHelper.GREEN_COLOUR.g, cbHelper.GREEN_COLOUR.b, this.alpha);
        return;
      default:
        mp.game1.graphics.drawSprite('MPCircuitHack', 'head', this.position.x, this.position.y, this.pointHeadSize, this.pointHeadSize, 0, cbHelper.RED_COLOUR.r, cbHelper.RED_COLOUR.g, cbHelper.RED_COLOUR.b, this.alpha);
        return;
    }
  }
  getCenterPoint(pos, xDeltaOverYDelta, xDelta, yDelta, distance) {
    if (xDeltaOverYDelta) {
      return xDelta < 0 ? { x: pos.x + distance / 2, y: pos.y } : { x: pos.x - distance / 2, y: pos.y };
    }
    return yDelta < 0 ? { x: pos.x, y: pos.y + distance / 2 } : { x: pos.x, y: pos.y - distance / 2 };
  }
  drawTailSpriteWidth(status, center, distance) {
    switch (status) {
      case 'STARTING':
      case 'INPROGRESS':
      case 'SUCCESS':
        mp.game1.graphics.drawSprite('MPCircuitHack', 'tail', center.x, center.y, distance + 0.0018, 0.003, 0, cbHelper.GREEN_COLOUR.r, cbHelper.GREEN_COLOUR.g, cbHelper.GREEN_COLOUR.b, this.alpha);
        return;
      default:
        mp.game1.graphics.drawSprite('MPCircuitHack', 'tail', center.x, center.y, distance + 0.0018, 0.003, 0, cbHelper.RED_COLOUR.r, cbHelper.RED_COLOUR.g, cbHelper.RED_COLOUR.b, this.alpha);
        return;
    }
  }
  drawTailSpriteHeight(status, center, distance) {
    switch (status) {
      case 'STARTING':
      case 'INPROGRESS':
      case 'SUCCESS':
        mp.game1.graphics.drawSprite('MPCircuitHack', 'tail', center.x, center.y, 0.0018, distance + 0.003, 0, cbHelper.GREEN_COLOUR.r, cbHelper.GREEN_COLOUR.g, cbHelper.GREEN_COLOUR.b, this.alpha);
        return;
      default:
        mp.game1.graphics.drawSprite('MPCircuitHack', 'tail', center.x, center.y, 0.0018, distance + 0.003, 0, cbHelper.RED_COLOUR.r, cbHelper.RED_COLOUR.g, cbHelper.RED_COLOUR.b, this.alpha);
        return;
    }
  }
  checkForCollision(xDeltaOverYDelta, center, distance) {
    function toNDp(input, dp) {
      return parseFloat(input.toFixed(dp));
    }
    const distance2 = distance / 2;
    if (xDeltaOverYDelta) {
      const roundedX = toNDp(this.position.x, 3);
      if (roundedX <= toNDp(center.x - distance2, 3))
        return false;
      if (roundedX >= toNDp(center.x + distance2, 3))
        return false;
      if (Math.abs(this.position.y - center.y) > 0.003)
        return false;
      return true;
    }
    const roundedY = toNDp(this.position.y, 3);
    if (roundedY <= toNDp(center.y - distance2, 3))
      return false;
    if (roundedY >= toNDp(center.y + distance2, 3))
      return false;
    if (Math.abs(this.position.x - center.x) > 0.003)
      return false;
    return true;
  }
  drawTailHistoryAndCheckCollisions(status) {
    if (this.history.length === 0)
      return false;
    let distance;
    let xDelta;
    let yDelta;
    let centerPoint;
    let historyPoint;
    let historyNextPoint;
    let xDeltaOverYDelta;
    const historyClone = [...this.history];
    for (let i = 0; i < historyClone.length; i++) {
      historyPoint = historyClone[i];
      if (i + 1 === historyClone.length)
        historyNextPoint = { x: this.position.x, y: this.position.y };
      else
        historyNextPoint = historyClone[i + 1];
      distance = cbHelper.getDistance(historyNextPoint, historyPoint);
      xDelta = historyNextPoint.x - historyPoint.x;
      yDelta = historyNextPoint.y - historyPoint.y;
      xDeltaOverYDelta = Math.abs(xDelta) > Math.abs(yDelta);
      centerPoint = this.getCenterPoint(historyNextPoint, xDeltaOverYDelta, xDelta, yDelta, distance);
      if (this.checkForCollision(xDeltaOverYDelta, centerPoint, distance))
        return true;
      this.drawTail(status, centerPoint, xDeltaOverYDelta, distance);
    }
    return false;
  }
  drawTail(status, center, xDeltaOverYDelta, distance) {
    if (xDeltaOverYDelta) {
      this.drawTailSpriteWidth(status, center, distance);
    }
    else {
      this.drawTailSpriteHeight(status, center, distance);
    }
  }
  movePoint(speed) {
    this.setPosition(this.lastDirection, speed);
  }
  addToTailHistory(directionChangePoint) {
    if (!this.history.some(e => e.x === directionChangePoint.x && e.y === directionChangePoint.y)) {
      this.history.push(directionChangePoint);
    }
  }
  setStartDirection(heading) {
    switch (heading) {
      case 0:
        this.lastDirection = 'RIGHT';
        break;
      case 90:
        this.lastDirection = 'DOWN';
        break;
      case 180:
        this.lastDirection = 'LEFT';
        break;
      default:
        this.lastDirection = 'UP';
        break;
    }
  }
  getDirectionFromInput() {
    if (mp.game1.controls.isDisabledControlPressed(0, 34))
      return 'LEFT';
    if (mp.game1.controls.isDisabledControlPressed(0, 35))
      return 'RIGHT';
    if (mp.game1.controls.isDisabledControlPressed(0, 32))
      return 'UP';
    if (mp.game1.controls.isDisabledControlPressed(0, 33))
      return 'DOWN';
    return this.lastDirection;
  }
  isOppositeOfCurrentDirection(direction) {
    return ((this.lastDirection === 'LEFT' && direction === 'RIGHT') ||
      (this.lastDirection === 'RIGHT' && direction === 'LEFT') ||
      (this.lastDirection === 'UP' && direction === 'DOWN') ||
      (this.lastDirection === 'DOWN' && direction === 'UP'));
  }
  getPointInputFromPlayer() {
    const newDirection = this.getDirectionFromInput();
    const lastPos = { x: this.position.x, y: this.position.y };
    if (newDirection === this.lastDirection || this.isOppositeOfCurrentDirection(newDirection)) {
      return;
    }
    this.lastDirection = newDirection;
    this.addToTailHistory(lastPos);
    mp.game1.audio.playSoundFrontend(-1, 'Click', 'DLC_HEIST_HACKING_SNAKE_SOUNDS', true);
  }
  startPointDeathAnimation() {
    return __awaiter(this, void 0, void 0, function* () {
      if (!this.isAlive)
        return;
      this.isAlive = false;
      while (this.alpha > 0) {
        this.updateAlpha();
        yield mp.game1.waitAsync(0);
      }
    });
  }
  updateAlpha() {
    if (this.isAlive)
      return;
    let newAlpha = this.alpha - 5;
    if (newAlpha < 0)
      newAlpha = 0;
    if (newAlpha > 255)
      newAlpha = 255;
    this.alpha = newAlpha;
    if (this.alpha <= 0)
      this.isVisible = false;
  }
  setPointStartPosition() {
    const magnitude = cbGenericPorts.startPortHeading === 0 || cbGenericPorts.startPortHeading === 180 ? 0.0144 : 0.021;
    this.position = cbHelper.getOffsetPosition(cbGenericPorts.startPortPos, magnitude, cbGenericPorts.startPortHeading, 1);
  }
  setPosition(direction, speed) {
    switch (direction) {
      case 'UP':
        this.position.y -= speed;
        break;
      case 'DOWN':
        this.position.y += speed;
        break;
      case 'LEFT':
        this.position.x -= speed;
        break;
      case 'RIGHT':
        this.position.x += speed;
        break;
      default:
        break;
    }
    if (this.position.x < 0)
      this.position.x = 0;
    if (this.position.x > 1)
      this.position.x = 1;
    if (this.position.y < 0)
      this.position.y = 0;
    if (this.position.y > 1)
      this.position.y = 1;
  }
}

exports.cbPoint = new CbPoint();
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.createFamilyActive = false

mp.events.add("showCreateFamily", (bool) => {
    if (bool) mp.createFamilyActive = true
    else mp.createFamilyActive = false
    browserMenu.call(`familiesCreate`, `show`, bool)
})

mp.events.add("showFamiliesTablet", (data) => {
    mp.createFamilyActive = !!data
    if (mp.createFamilyActive) {
        mp.events.call("client::setPhoneStatus", false)
        if (data.housePos) {
            let street = mp.game.ui.getStreetNameFromHashKey(mp.game.pathfind.getStreetNameAtCoord(data.housePos.x, data.housePos.y, data.housePos.z, 0, 0)["streetName"]) 
            data.housePos = `${street}, #${data.house}`
        }
    }
    browserMenu.call(`familiesTablet`, `show`, data)
})

mp.events.add("familiesTablet.forceClose", () => {
    if (mp.createFamilyActive) {
        mp.events.call("showCreateFamily", false)
        mp.events.call("showFamiliesTablet", false)
    }
})

mp.events.add("setFamilyInfo", (data) => {
    if (mp.createFamilyActive) {
        if (data.housePos) {
            let street = mp.game.ui.getStreetNameFromHashKey(mp.game.pathfind.getStreetNameAtCoord(data.housePos.x, data.housePos.y, data.housePos.z, 0, 0)["streetName"]) 
            data.housePos = `${street}, #${data.house}`
        }
        browserMenu.call(`familiesTablet`, `initData`, data)
    }
}) 

mp.events.add("updateFamilyMenuData", () => {
    if (mp.createFamilyActive) {
        mp.events.callRemote("getFamilyInfo")
    }
}) 

mp.events.add("updateFamilyAchievementsParams", () => {
    browserMenu.call(`familiesTablet`, `getAchievementsParams`)
})

mp.events.add("updateFamilyUpgradesParams", () => {
    browserMenu.call(`familiesTablet`, `getUpgradesParams`)
})

mp.events.add("updateFamilyQuestParams", () => {
    browserMenu.call(`familiesTablet`, `getQuestsParams`)
})

mp.events.add("updateFamilyCapturesParams", () => {
    browserMenu.call(`familiesTablet`, `getCapturesParams`)
})

let garage = {
    marker: null,
    colshape: null,
    label: null,
    labelForVehicleEntrance: null
}
mp.events.add("client::setPlayerFamilyAssets", (type, pos, show) => {
    if(show){
        if(!pos.x || !pos.y) return  
        if(type == "garageMarker"){
            if(mp.markers.exists(garage.marker)){
                garage.marker.destroy()
            }
            if(mp.colshapes.exists(garage.colshape)){
                garage.colshape.destroy()
            }
            if(mp.labels.exists(garage.label)){
                garage.label.destroy()
            }
            garage.marker = mp.markers.new(1, pos, 1, {
                color: [255, 165, 0, 100], // Config.primaryMarkerColor
                visible: true
            });
            garage.colshape = mp.colshapes.newCircle(pos.x, pos.y, 10); 
            garage.label = mp.labels.new(`E`, new mp.Vector3(pos.x, pos.y, pos.z + 0.5),
            {
                los: false,
                font: 0,
                drawDistance: 10,
            })
        }
        if (type == "garageVehicleMarker"){
            if(mp.labels.exists(garage.labelForVehicleEntrance)){
                garage.labelForVehicleEntrance.destroy()
            }
            garage.labelForVehicleEntrance = mp.labels.new(`Гараж \n[H]`, pos,
            {
                los: false,
                font: 0,
                drawDistance: 10,
            })
        }
    }
    else{ 
        if(mp.markers.exists(garage.marker)){
            garage.marker.destroy()
        }
        if(mp.colshapes.exists(garage.colshape)){
            garage.colshape.destroy()
        }
        if(mp.labels.exists(garage.label)){
            garage.label.destroy()
        }
        if(mp.labels.exists(garage.labelForVehicleEntrance)){
            garage.labelForVehicleEntrance.destroy()
        }
    }
})

mp.events.add("playerEnterColshape", (colshape) => {
    if(mp.colshapes.exists(garage.colshape) && mp.markers.exists(garage.marker) && colshape == garage.colshape){
        garage.marker.visible = true
    }
})

mp.events.add("playerExitColshape", (colshape) => {
    if(mp.colshapes.exists(garage.colshape) && mp.markers.exists(garage.marker) && colshape == garage.colshape){
        garage.marker.visible = false
    }
})


mp.keys.bindEx(0x48, true, function() { // H key
    if (mp.bindBlocker()) return;
    if(mp.players.local.vehicle){
        mp.events.callRemote("enterGarageWithVehicleFamily");
    }
}, "Поставити у гараж");


let marker

mp.events.add("client::addFamilyCaptureMarker", (x, y, z, r) => {
    try {
        if (marker && isEntityExists(marker)) marker.destroy()
        marker = mp.markers.new(28, new mp.Vector3(x, y, z - 1.0), r, {
            visible: true,
            color: [255, 165, 0, 100],
            rotation: 180,
            dimension: -1
        });
    } catch (err) {
        chatDebug(`family capture gangzone error: ${err}`)
    }
})

mp.events.add("client::removeFamilyCaptureMarker", () => {
    if (marker && isEntityExists(marker)) marker.destroy()
}) 

mp.events.add("setFamilyLogs", (data) => {
    browserMenu.call(`familiesTablet`, `_initFamilyLogs`, data)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
const localPlayer = mp.players.local
const camera = mp.cameras.new("gameplay")

class Sound {
    constructor() {
        this.objects = []

        mp.events.add("setRadiusVariable", (entity, name, value) => {
            if (name === "soundObject") {
                if (value) this.addSound(entity, value, Date.now())
                else {
                    let soundObject = this.findSound(entity.type, entity.remoteId)
                    if (soundObject) this.removeSound(soundObject)
                }
            }
        })

        mp.events.add("entityStreamInCustom", (entity) => {
            let soundObject = entity.variable_soundObject
            if (soundObject) this.addSound(entity, soundObject)
        })

        mp.events.add("entityStreamOut", (entity) => {
            let soundObject = this.findSound(entity.type, entity.remoteId)
            if (soundObject) this.removeSound(soundObject)
        })

        mp.events.add("removeSoundObject", (type, id) => {
            let soundObject = this.findSound(type, id)
            if (soundObject) this.removeSound(soundObject)
        })

        mp.events.add("setBoombox", (data) => {
            if (data) mp.interfaceActive = "boombox"
            else mp.interfaceActive = false
            browserMenu.call(`boombox`, `set`, data)
        })
    }

    addSound(entity, value, startedAt) {
        let soundObject = this.findSound(entity.type, entity.remoteId)
        if (soundObject) {
            if (entity.type === "object" && entity.model == mp.game.joaat("prop_boombox_01")) return this.updateBoombox(soundObject, value)
            else if (entity.type === "vehicle" && value.vehicleBoombox) return this.updateBoombox(soundObject, value)
            else if (entity.type === "object" && entity.model == mp.game.joaat("prop_dummy_light")) return

            this.removeSound(soundObject)
        }

        let obj = entity.type == "dummy" ? mp.dummies.atRemoteId(entity.remoteId) : mp[`${entity.type}s`].atRemoteId(entity.remoteId)

        if (isEntityExists(obj)) {
            this.objects.push({ type: entity.type, id: entity.remoteId, url: value.url, obj, volume: value.volume, dimension: value.dimension, maxRange: value.range, startedAt: startedAt || value.startedAt, soundStarted: false, isStopped: value.isStopped || false, isCycle: value.isCycle || false, maxVehicleSpeedCheck: value.maxVehicleSpeedCheck })
        }
    }

    updateBoombox(soundObject, value) {
        if (soundObject.startedAt !== value.startedAt) {
            soundObject.startedAt = value.startedAt
        }

        if (soundObject.isStopped !== value.isStopped) {
            soundObject.isStopped = value.isStopped
            if (soundObject.soundStarted) browserMenu.call(`qSound`, `setPaused`, soundObject.id, soundObject.isStopped, Date.now() - soundObject.startedAt)
        }

        if (soundObject.isCycle !== value.isCycle) {
            soundObject.isCycle = value.isCycle
            if (soundObject.soundStarted) browserMenu.call(`qSound`, `setCycle`, soundObject.id, soundObject.isCycle)
        }

        if (soundObject.volume !== value.volume) {
            soundObject.volume = value.volume
        }

        if (soundObject.url !== value.url) {
            if (soundObject.soundStarted) {
                delete soundObject.soundStarted
                browserMenu.call(`qSound`, `stopAudio`, soundObject.id)
            }

            soundObject.url = value.url
        }
    }

    removeSound(object) {
        if (object.soundStarted) browserMenu.call(`qSound`, `stopAudio`, object.id)
        this.objects.splice(this.objects.indexOf(object), 1)
    }

    findSound(type, remoteId) {
        return this.objects.find(val => val.type == type && val.id == remoteId)
    }

    render() {
        if (!sound.objects.length) return

        sound.objects.forEach((data) => {
            if (isEntityExists(data.obj)) {
                if (!data.url) return

                let dist = vdist(data.obj.position || data.obj.getVariable("position"), localPlayer.position)

                if (dist < data.maxRange && data.dimension == mp.players.local.dimension) {
                    let maxValueSettings = data.obj.model == mp.game.joaat("prop_boombox_01") && mp.settings.boomboxVolume !== undefined ? mp.settings.boomboxVolume / 100 : data.maxVehicleSpeedCheck && mp.settings.boomboxCarVolume !== undefined ? mp.settings.boomboxCarVolume / 100 : null
                    let maxValue = maxValueSettings != undefined && maxValueSettings < data.volume ? maxValueSettings : data.volume
                    let volume = maxValue * (1 - (dist / data.maxRange))
                    volume = volume < 0 ? 0 : volume

                    let cam_pos = camera.getCoord(),
                        cam_vector = camera.getDirection(),
                        car_pos = data.obj.position || data.obj.getVariable("position"),  // can use any coords here(not only veh position)
                        car_vector = { x: car_pos.x - cam_pos.x, y: car_pos.y - cam_pos.y },
                        dx = car_vector.x * cam_vector.x + car_vector.y * cam_vector.y,
                        dy = mp.game.system.sqrt(cam_vector.x * cam_vector.x + cam_vector.y * cam_vector.y) * mp.game.system.sqrt(car_vector.x * car_vector.x + car_vector.y * car_vector.y);
                    // calculates where point is left/right
                    let s = cam_vector.x * (car_pos.y - cam_pos.y) - cam_vector.y * (car_pos.x - cam_pos.x),
                        a = 1;
                    if (s > 0) a = -1
                    else if (s < 0) a = 1
                    else a = 0;
                    let pan = Math.sqrt(1 - (dx / dy).toFixed(3) * (dx / dy).toFixed(3)) * a;

                    if (data.maxVehicleSpeedCheck && data.obj) {
                        let speed = data.obj.getSpeed() * 3.6
                        if (speed > 20) {
                            data.maxRange = 10
                        }
                        else if (speed > 40) {
                            data.maxRange = 5
                        }
                        else if (speed > 60) {
                            data.maxRange = 2
                        }
                    }

                    if (!data.soundStarted) {
                        data.soundStarted = true
                        rpc.callBrowser(browserMenu, "playBoomBox", { id: data.id, url: data.url, date: Date.now() - data.startedAt, volume, type: data.type, isStopped: data.isStopped, isCycle: data.isCycle })
                    }
                    else {
                        browserMenu.call(`qSound`, `setVolume`, data.id, volume, pan)
                    }
                }
                else {
                    if (data.soundStarted) {
                        delete data.soundStarted
                        browserMenu.call(`qSound`, `stopAudio`, data.id)
                    }

                }
            }
            else mp.events.call(`removeSoundObject`, data.type, data.id)
        })
    }
}

const sound = new Sound()

setInterval(sound.render, 50);


}; a; }
{let a = function scriptEntryPoint(mp) {
class CarryPlayer {
    constructor(remoteId, carryRemoteId) {
        this.remoteId = remoteId
        this.carryRemoteId = carryRemoteId
        this.ped
    }
}


class CarryManager {
    constructor() {
        this.carryPlayers = []

        mp.events.add("playerQuit", (entity) => {
            var value = entity.getVariable("carry");

            if (value != undefined) {
                var carry = this.getCarry(entity.remoteId);

                if (carry) this.removeCarry(entity.remoteId);
            }
        })

        mp.events.addDataHandler("carry", (entity, value) => {
            if (entity.type != "player") return

            if (value != undefined) {
                var carry = this.getCarry(value)

                if (!carry) this.addCarry(entity.remoteId, value)
            }
            else {
                var carry = this.getCarry(entity.remoteId)

                if (carry) this.removeCarry(entity.remoteId)
            }
        });

        mp.events.add("entityStreamIn", (entity) => {
            try {
                if (entity.type != "player") return
                chatDebug("entityStreamIn Carry")

                var value = entity.getVariable("carry");

                if (value != undefined) {
                    var carry = this.getCarry(value);

                    if (!carry) this.addCarry(entity.remoteId, value);
                }
            }
            catch (err) {
                mp.events.callRemote("log", `Error client gamemode\scripts\Carry.js entityStreamIn: ${err}`)
            }
        });

        mp.events.add("entityStreamOut", (entity, value) => {
            try {
                if (entity.type != "player") return

                var value = entity.getVariable("carry");

                if (value != undefined) {
                    var carry = this.getCarry(entity.remoteId);

                    if (carry) this.removeCarry(entity.remoteId);
                }
            } catch (err) {
                mp.events.callRemote("log", `Error entityStreamOut: ${err}`)
            }
        });

        setInterval(() => {
            this.carryPlayers.forEach((element) => {
                if (mp.peds.exists(element.ped)) return false

                var player = mp.players.atRemoteId(element.remoteId)
                var carried = mp.players.atRemoteId(element.carryRemoteId)

                if (isEntityExists(player) && isEntityExists(carried)) {
                    player.taskPlayAnim("missfinale_c2mcs_1", "fin_c2_mcs_1_camman", 8.0, 0, -1, 49, 0, false, false, false)
                    carried.taskPlayAnim("nm", "firemans_carry", 8.0, 0, -1, 33, 0, false, false, false)
    
                    carried.attachTo(player.handle, 0, 0.15, 0.27, 0.63, 0.5, 0.5, 0.0, false, false, false, false, 2, false);
    
                    element.ped = mp.peds.new(carried.model, player.position, 0);
                    mp.game.invoke("0xE952D6431689AD9A", carried.handle, element.ped.handle);
                    element.ped.taskPlayAnim("nm", "firemans_carry", 8.0, 1.0, -1, 33, 0.0, true, true, true);
                    element.ped.attachTo(player.handle, 0, 0.25, 0.07, 0.63, 0.5, 0.5, 0.0, false, false, false, false, 2, false);
                }
            });
        }, 500);
    }

    addCarry(remoteId, carryRemoteId) {
        this.carryPlayers.push(new CarryPlayer(remoteId, carryRemoteId));
    }

    getCarry(remoteId) {
        var found = this.carryPlayers.find((element => element.remoteId == remoteId));

        if (found) return found;
        else return undefined;
    }

    removeCarry(remoteId) {
        var found = this.carryPlayers.find(element => element.remoteId == remoteId);

        if (found) {
            if (mp.peds.exists(found.ped)) found.ped.destroy();

            var carry = mp.players.atRemoteId(found.carryRemoteId);

            if (carry) carry.detach(true, false);
        }

        var findIndex = this.carryPlayers.findIndex(element => element.remoteId == remoteId);

        if (findIndex != -1) this.carryPlayers.splice(findIndex, 1);
    }
}

const Carry = new CarryManager
}; a; }
{let a = function scriptEntryPoint(mp) {
let localplayer = mp.players.local,
    spectatecamera = null,
    spectatetarget = null,
    savedposition = null;

function renderCam() {
    if (spectatecamera && spectatetarget && isEntityExists(spectatetarget)) {
        let targetpos = spectatetarget.position
        let targetforward = spectatetarget.getForwardVector();
        mp.players.local.position = new mp.Vector3(targetpos.x, targetpos.y, targetpos.z - 3);
        spectatecamera.setCoord(targetpos.x - targetforward.x * 2, targetpos.y - targetforward.y * 2, targetpos.z + 1);
    }
}

function stopSpectate() {
    mp.events.remove("render", renderCam)
    localplayer.freezePosition(false);
    localplayer.resetAlpha();
    mp.game.cam.renderScriptCams(false, false, 0, true, true);
    if (spectatecamera) {
        spectatecamera.setActive(false);
        spectatecamera.destroy();
        spectatecamera = null;
    }
    mp.game.cam.destroyAllCams(true);
    spectatetarget = null
    mp.game.ui.displayRadar(true);
    mp.players.local.position = savedposition;
    savedposition = null;
}

mp.events.add("startSpectate", async (spectate, targetplayer, targetpos) => {
    if (spectate) {
        if (targetplayer) {
            if (spectatetarget) stopSpectate()

            spectatetarget = targetplayer;
            localplayer.setAlpha(0);
            localplayer.freezePosition(true);
            mp.game.ui.displayRadar(false);
            savedposition = mp.players.local.position;

            mp.players.local.position = new mp.Vector3(targetpos.x, targetpos.y, targetpos.z)
            let target = await waitEntity(targetplayer)
            if (!target) return chatDebug(`startSpectate error`)
            if (!spectatetarget) return chatDebug(`startSpectate stopped`)

            let targetforward = targetplayer.getForwardVector();
            spectatecamera = mp.cameras.new("spectatecam", new mp.Vector3(targetpos.x - targetforward.x * 2, targetpos.y - targetforward.y * 2, targetpos.z + 1), new mp.Vector3(0, 0, 0), 110);
            spectatecamera.pointAt(targetplayer.handle, 0, 0, 0, false);
            spectatecamera.setActive(true);
            mp.game.cam.renderScriptCams(true, false, 0, true, false);
            mp.events.add("render", renderCam)
        }
    } 
    else stopSpectate()
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("showDailyReward", (data) => {
    if (data) mp.interfaceActive = "dailyReward"
    else mp.interfaceActive = false
    browserMenu.call(`dailyRewardAPI`, `show`, data)
})

mp.events.add("updateDailyRewardParams", () => {
    browserMenu.call(`dailyRewardAPI`, `getDailyRewardParams`)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
require('gamemode/scripts/Arena/races.js')
require('gamemode/scripts/Arena/ArenaP.js')
require('gamemode/scripts/Arena/MazeBankArena')

mp.events.add("showArena", (data) => {
    if (data) mp.interfaceActive = "arena"
    else mp.interfaceActive = false
    if (data == "hideCreateArenaLobby") return browserMenu.call(`arenaAPI`, `show`, data);
    browserMenu.call(`arenaAPI`, `show`, data);
})

mp.events.add("updateArenaParams", () => {
    if (mp.interfaceActive && mp.interfaceActive == "arena") browserMenu.call(`arenaAPI`, `getArenaParams`);
})

mp.events.add("updateArenaLobbyParams", () => {
    browserMenu.call(`arenaAPI`, `getArenaLobbyParams`);
})

}; a; }
{let a = function scriptEntryPoint(mp) {
require('gamemode/scripts/Arena/MazeBankArena/systems/arena')
require('gamemode/scripts/Arena/MazeBankArena/systems/local-player')
require('gamemode/scripts/Arena/MazeBankArena/systems/big-screens')
require('gamemode/scripts/Arena/MazeBankArena/systems/hud')
require('gamemode/scripts/Arena/MazeBankArena/systems/powerups')
require('gamemode/scripts/Arena/MazeBankArena/systems/scoreboard')
}; a; }
{let a = function scriptEntryPoint(mp) {
const DUMMY_TYPE_ARENA = 1000;
const DUMMY_TYPE_POWERUP = 1001;

exports = {
    DUMMY_TYPE_ARENA,
    DUMMY_TYPE_POWERUP
};

}; a; }
{let a = function scriptEntryPoint(mp) {
async function waitFor(checkFn, waitMs = 100, maxTries = 50) {
    for (let i = 0; !checkFn() && i < maxTries; i++) {
        await mp.game.waitAsync(waitMs);
    }
}

function callScaleformMethod(scaleformHandle, methodName, ...args) {
    if (mp.game.graphics.beginScaleformMovieMethod(scaleformHandle, methodName)) {
        for (const arg of args) {
            switch (typeof arg) {
                case "boolean":
                    mp.game.graphics.scaleformMovieMethodAddParamBool(arg);
                    break;

                case "string":
                    mp.game.graphics.scaleformMovieMethodAddParamPlayerNameString(arg);
                    break;

                case "number":
                    if (Number.isInteger(arg)) {
                        mp.game.graphics.scaleformMovieMethodAddParamInt(arg);
                    } else {
                        mp.game.graphics.scaleformMovieMethodAddParamFloat(arg);
                    }

                    break;

                default:
                    mp.game.graphics.scaleformMovieMethodAddParamInt(11111)
            }
        }

        mp.game.graphics.endScaleformMovieMethod();
    }
}

function makeAnnouncement(speechName, voiceName = "ARENA_ANNOUNCE1") {
    mp.game.audio.playAmbientSpeechFromPositionNative(speechName, voiceName, 2800.0, -3800.2, 179.5, "SPEECH_PARAMS_FORCE_FRONTEND");
}

exports = {
    waitFor,
    callScaleformMethod,
    makeAnnouncement,
};

}; a; }
{let a = function scriptEntryPoint(mp) {
const ArenaLighting = require("gamemode/scripts/Arena/MazeBankArena/shared/ArenaLighting");

function getWeatherForLighting(lighting) {
    switch (lighting) {
        case ArenaLighting.LIGHTING_ATLANTIS:
        case ArenaLighting.LIGHTING_MORNING:
        case ArenaLighting.LIGHTING_SACCHARINE:
            return "CLOUDS";

        case ArenaLighting.LIGHTING_EVENING:
        case ArenaLighting.LIGHTING_NIGHT:
            return "SMOG";

        case ArenaLighting.LIGHTING_HELL:
            return "HALLOWEEN";

        case ArenaLighting.LIGHTING_MIDDAY:
            return "EXTRASUNNY";

        case ArenaLighting.LIGHTING_SANDSTORM:
        case ArenaLighting.LIGHTING_TOXIC:
            return "OVERCAST";

        case ArenaLighting.LIGHTING_STORM:
            return "CLEAR";

        default:
            return "CLOUDS";
    }
}

function getHourForLighting(lighting) {
    switch (lighting) {
        case ArenaLighting.LIGHTING_ATLANTIS:
            return 23;

        case ArenaLighting.LIGHTING_EVENING:
        case ArenaLighting.LIGHTING_SACCHARINE:
            return 18;

        case ArenaLighting.LIGHTING_HELL:
            return 7;

        case ArenaLighting.LIGHTING_MIDDAY:
            return 15;

        case ArenaLighting.LIGHTING_MORNING:
        case ArenaLighting.LIGHTING_SANDSTORM:
            return 10;

        case ArenaLighting.LIGHTING_NIGHT:
        case ArenaLighting.LIGHTING_STORM:
            return 0;

        case ArenaLighting.LIGHTING_TOXIC:
            return 12;

        default:
            return 10;
    }
}

function getEntitySetForVariation(variation) {
    if (variation >= 1 && variation <= 10) {
        // apocalypse theme
        return variation < 10 ? `set_dystopian_0${variation}` : `set_dystopian_${variation}`;
    } else if (variation >= 11 && variation <= 20) {
        // nightmare theme
        variation -= 10;
        return variation < 10 ? `set_wasteland_0${variation}` : `set_wasteland_${variation}`;
    } else if (variation >= 21 && variation <= 30) {
        // future shock theme
        variation -= 20;
        return variation < 10 ? `set_scifi_0${variation}` : `set_scifi_${variation}`;
    } else {
        // invalid variation
        return "set_dystopian_01";
    }
}

function getEntitySetForLighting(lighting, isFutureShock) {
    switch (lighting) {
        case ArenaLighting.LIGHTING_ATLANTIS:
            return "set_lights_atlantis";

        case ArenaLighting.LIGHTING_EVENING:
            return "set_lights_evening";

        case ArenaLighting.LIGHTING_HELL:
            return "set_lights_hell";

        case ArenaLighting.LIGHTING_MIDDAY:
            return "set_lights_midday";

        case ArenaLighting.LIGHTING_MORNING:
            return "set_lights_morning";

        case ArenaLighting.LIGHTING_NIGHT:
            return isFutureShock ? "set_lights_sfnight" : "set_lights_night";

        case ArenaLighting.LIGHTING_SACCHARINE:
            return "set_lights_saccharine";

        case ArenaLighting.LIGHTING_SANDSTORM:
            return "set_lights_sandstorm";

        case ArenaLighting.LIGHTING_STORM:
            return "set_lights_storm";

        case ArenaLighting.LIGHTING_TOXIC:
            return "set_lights_toxic";

        default:
            return "set_lights_morning";
    }
}

function getTimecycleModifierForLighting(lighting, isFutureShock) {
    switch (lighting) {
        case ArenaLighting.LIGHTING_ATLANTIS:
            return "MP_Arena_theme_atlantis";

        case ArenaLighting.LIGHTING_EVENING:
            return "MP_Arena_theme_evening";

        case ArenaLighting.LIGHTING_HELL:
            return "MP_Arena_theme_hell";

        case ArenaLighting.LIGHTING_MIDDAY:
            return "MP_Arena_theme_midday";

        case ArenaLighting.LIGHTING_MORNING:
            return "MP_Arena_theme_morning";

        case ArenaLighting.LIGHTING_NIGHT:
            return isFutureShock ? "MP_Arena_theme_scifi_night" : "MP_Arena_theme_night";

        case ArenaLighting.LIGHTING_SACCHARINE:
            return "MP_Arena_theme_saccharine";

        case ArenaLighting.LIGHTING_SANDSTORM:
            return "MP_Arena_theme_sandstorm";

        case ArenaLighting.LIGHTING_STORM:
            return "MP_Arena_theme_storm";

        case ArenaLighting.LIGHTING_TOXIC:
            return "MP_Arena_theme_toxic";

        default:
            return "MP_Arena_theme_morning";
    }
}

exports = {
    getWeatherForLighting,
    getHourForLighting,
    getEntitySetForVariation,
    getEntitySetForLighting,
    getTimecycleModifierForLighting
};

}; a; }
{let a = function scriptEntryPoint(mp) {
const LIGHTING_ATLANTIS = 0;
const LIGHTING_EVENING = 1;
const LIGHTING_HELL = 2;
const LIGHTING_MIDDAY = 3;
const LIGHTING_MORNING = 4;
const LIGHTING_NIGHT = 5;
const LIGHTING_SACCHARINE = 6;
const LIGHTING_SANDSTORM = 7;
const LIGHTING_STORM = 8;
const LIGHTING_TOXIC = 9;

exports = {
    LIGHTING_ATLANTIS,
    LIGHTING_EVENING,
    LIGHTING_HELL,
    LIGHTING_MIDDAY,
    LIGHTING_MORNING,
    LIGHTING_NIGHT,
    LIGHTING_SACCHARINE,
    LIGHTING_SANDSTORM,
    LIGHTING_STORM,
    LIGHTING_TOXIC
};
}; a; }
{let a = function scriptEntryPoint(mp) {
const { isBitSet } = require("gamemode/scripts/Arena/MazeBankArena/shared/bit-util");
const { POWERUP_JUMP } = require("gamemode/scripts/Arena/MazeBankArena/shared/PowerUpType");

const DEATH_EFFECT_TIME = 2000;

const STATS_TO_MAX = [
    mp.game.joaat("SP0_STAMINA"), mp.game.joaat("SP0_STRENGTH"), mp.game.joaat("SP0_LUNG_CAPACITY"), mp.game.joaat("SP0_WHEELIE_ABILITY"),
    mp.game.joaat("SP0_FLYING_ABILITY"), mp.game.joaat("SP0_STEALTH_ABILITY")
];

let staticSoundId = -1;

function disableStaticSound() {
    if (staticSoundId === -1) {
        return;
    }

    mp.game.audio.stopSound(staticSoundId);
    mp.game.audio.releaseSoundId(staticSoundId);
    staticSoundId = -1;
}

function pointingAt(position, direction, distance) {
    const target = {
      x: direction.x * distance + position.x,
      y: direction.y * distance + position.y,
      z: direction.z * distance + position.z,
    };
  
    return (mp.raycasting.testPointToPoint(position, new mp.Vector3(target.x, target.y, target.z), [1, 16]) || {}).position || null;
}

const miniguns = [1176362416, 231629074, 50118905, 4094131943, 749486726, 3293463361, 2786772340, 3670375085]

function projectile(sourcePlayer, weaponHash, ammoType, position, direction) {
    if (sourcePlayer == mp.players.local) { 
        let pointing = pointingAt(position, direction, 9999)
        if (pointing) {
            let vehicle = getClosestVehicle(5, pointing)
            if (vehicle) mp.events.callRemoteUnreliable(`arena::vehicleWeaponShot`, vehicle, false);
        }
    }
}

function playerWeaponShot(targetPosition, targetEntity) {
    let buffer = [new ArrayBuffer(4)];
    mp.game.invoke("0x1017582BCD3832DC", mp.players.local.handle, buffer);

    const test = parseInt(new Uint32Array(buffer[0]));
    let vehicle = getClosestVehicle(5, targetPosition)
    if (vehicle) {
        if (miniguns.includes(test)) {
            mp.events.callRemoteUnreliable(`arena::vehicleWeaponShot`, vehicle, true);
        }
        else {
            mp.events.callRemoteUnreliable(`arena::vehicleWeaponShot`, vehicle, false);
        }
    }
}

// sets the UI and map arrow color for the local player
function setLocalPlayerColors() {
    mp.events.add("render", handleControls);
    mp.events.add("entityStreamIn", handleLocalPlayerVehicleStreamIn);
    mp.events.add("playerDeath", handleLocalPlayerDeath);
    mp.events.add("playerQuit", cleanUpPlayerQuit);
    mp.events.add("playerWeaponShot", playerWeaponShot);
    mp.events.add("projectile", projectile);

    STATS_TO_MAX.forEach(statHash => mp.game.stats.statSetInt(statHash, 100, false));
}

let deathTimeout = null

// applies the static effect some time after death
function handleLocalPlayerDeath(player) {
    if (player != mp.players.local) return;

    deathTimeout = setTimeout(() => {
        mp.game.graphics.animpostfxPlay("RemixDrone", 10000, false);
        mp.game.ui.displayRadar(false);

        if (staticSoundId === -1) {
            staticSoundId = mp.game.audio.getSoundId();
            mp.game.audio.playSoundFrontend(staticSoundId, "HUD_Static_Loop", "DLC_Arena_Drone_Sounds", true);
        }

        deathTimeout = null;
    }, DEATH_EFFECT_TIME);
}

// puts the local player in their vehicle
function handleLocalPlayerVehicleStreamIn(entity) {
    if (entity.typeInt === 1 /* vehicle */ && entity.remoteId === mp.players.local.getVariable("iVehicle")) {
        // mp.game.invoke(0xD565F438137F0E10n, entity.handle, true); // VEHICLE::SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH
        entity.setVehicleRadioEnabled(false);

        // reset cam
        mp.game.cam.setGameplayCamRelativeHeading(0.0);
        mp.game.cam.setGameplayCamRelativePitch(0.0, 1.0);

        // disable death effect
        mp.game.graphics.animpostfxStopAll();
        mp.game.ui.displayRadar(true);

        // disable static sound
        disableStaticSound();
        mp.events.call("fadeIn", 500);
    }
    if (entity.typeInt === 1 && entity.getVariable("iPlayer") != null) {
        const rec = mp.players.atRemoteId(entity.getVariable("iPlayer"));
        if (rec) rec.setIntoVehicle(entity.handle, -1);
    } 
}

// disables certain controls for gameplay
function handleControls() {
    mp.game.pad.disableControlAction(0, 75, true); // INPUT_VEH_EXIT
    // mp.game.pad.disableControlAction(0, 99, true); // INPUT_VEH_SELECT_NEXT_WEAPON
    // mp.game.pad.disableControlAction(0, 100, true); // INPUT_VEH_SELECT_PREV_WEAPON

    // jump control is disabled only if the jump powerup isn't active
    const vehicle = mp.players.local.vehicle;
    if (vehicle && !isBitSet(vehicle.getVariable("iPowerUps"), POWERUP_JUMP)) {
        mp.game.pad.disableControlAction(0, 350, true); // INPUT_VEH_CAR_JUMP
    }
}

// frees the resources
function cleanUp() {
    mp.events.remove("render", handleControls);
    mp.events.remove("entityStreamIn", handleLocalPlayerVehicleStreamIn);
    mp.events.remove("playerDeath", handleLocalPlayerDeath);
    mp.events.remove("playerQuit", cleanUpPlayerQuit);
    mp.events.remove("playerWeaponShot", playerWeaponShot);
    mp.events.remove("projectile", projectile);

    STATS_TO_MAX.forEach(statHash => mp.game.stats.statSetInt(statHash, 0, false));

    if (deathTimeout != null) {
        clearTimeout(deathTimeout);
        deathTimeout = null;
    }

    // disable death effect
    mp.game.graphics.animpostfxStopAll();
    mp.game.ui.displayRadar(true);

    // disable static sound
    disableStaticSound();
}

function cleanUpPlayerQuit(player) {
    if (player !== mp.players.local) {
        return;
    }

    cleanUp()
}

// register event handlers
mp.events.add({
    "playerReadyMazeBankArena": setLocalPlayerColors,
    "playerQuitMazeBankArena": cleanUp
});

}; a; }
{let a = function scriptEntryPoint(mp) {
function setBit(num, position) {
    return num | (1 << position);
}

function clearBit(num, position) {
    return num & ~(1 << position);
}

function isBitSet(num, position) {
    return (num & (1 << position)) !== 0;
}

exports = {
    setBit,
    clearBit,
    isBitSet
};
}; a; }
{let a = function scriptEntryPoint(mp) {
const POWERUP_ARMOR = 0;
const POWERUP_GHOST = 1;
const POWERUP_JUMP = 2;
const POWERUP_REPAIR = 3;
const NUM_POWERUPS = 4;

exports = {
    POWERUP_ARMOR,
    POWERUP_GHOST,
    POWERUP_JUMP,
    POWERUP_REPAIR,
    NUM_POWERUPS
};

}; a; }
{let a = function scriptEntryPoint(mp) {
const { DUMMY_TYPE_ARENA } = require("gamemode/scripts/Arena/MazeBankArena/shared/DummyType");

let screenRtId = 0;
let screenTexture = "message_01";

// loads the screen content and registers the rendertarget
function init() {
    mp.events.add("render", renderBigScreens);
    mp.events.add("playerQuit", cleanUpPlayerQuit);

    mp.game.graphics.requestStreamedTextureDict("prop_screen_arena_giant", false);

    if (!mp.game.hud.isNamedRendertargetRegistered("bigscreen_01")) {
        mp.game.hud.registerNamedRendertarget("bigscreen_01", false);
    }

    const renderTargetModel = mp.game.joaat("xs_prop_arena_bigscreen_01");
    if (!mp.game.hud.isNamedRendertargetLinked(renderTargetModel)) {
        mp.game.hud.linkNamedRendertarget(renderTargetModel);
    }

    screenRtId = mp.game.hud.getNamedRendertargetRenderId("bigscreen_01");

    // get current screen data from the arena dummy (there should be only one dummy with DUMMY_TYPE_ARENA)
    mp.dummies.forEachByType(DUMMY_TYPE_ARENA, (dummy) => {
        const value = dummy.getVariable("iScreen");
        screenTexture = `message_${value < 10 ? `0${value}` : value}`;
    });
}

// draws the screen content
function renderBigScreens() {
    if (screenRtId === 0) {
        return;
    }

    mp.game.hud.setTextRenderId(screenRtId);
    mp.game.graphics.setScriptGfxDrawOrder(4);
    mp.game.graphics.setScriptGfxDrawBehindPausemenu(true);
    mp.game.graphics.drawInteractiveSprite("prop_screen_arena_giant", screenTexture, 0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
    mp.game.graphics.setScriptGfxDrawBehindPausemenu(false);
    mp.game.hud.setTextRenderId(mp.game.hud.getDefaultScriptRendertargetRenderId());
}

// frees the resources
function cleanUp() {
    mp.events.remove("render", renderBigScreens);
    mp.events.remove("playerQuit", cleanUpPlayerQuit);

    mp.game.hud.releaseNamedRendertarget("bigscreen_01");
    mp.game.graphics.setStreamedTextureDictAsNoLongerNeeded("prop_screen_arena_giant");

    screenRtId = 0;
    screenTexture = "message_01";
}

function cleanUpPlayerQuit(player) {
    if (player !== mp.players.local) {
        return;
    }

    cleanUp()
}

// register event handlers
mp.events.add({
    "playerReadyMazeBankArena": init,
    "playerQuitMazeBankArena": cleanUp
});

// changes the screen texture name
function handleScreenVariationChange(entity, newValue) {
    if (entity.typeInt !== 9 /* dummy */ || entity.dummyType !== DUMMY_TYPE_ARENA) {
        return;
    }

    screenTexture = `message_${newValue < 10 ? `0${newValue}` : newValue}`;
}

mp.events.addDataHandler("iScreen", handleScreenVariationChange);

}; a; }
{let a = function scriptEntryPoint(mp) {
const configRaceActivity = {
    "race": [{
        checkpoint_positions: [
            { pos: new mp.Vector3(-2193.498779296875, -345.71124267578125, 13.023457527160645) },
            { pos: new mp.Vector3(-2520.509033203125, -192.0824432373047, 18.962034225463867) },
            { pos: new mp.Vector3(-2761.700439453125, 22.000896453857422, 15.065628051757812) },
            { pos: new mp.Vector3(-3021.403564453125, 172.11717224121094, 15.556571006774902) },
            { pos: new mp.Vector3(-2993.322021484375, 598.9545288085938, 19.236083984375) },
            { pos: new mp.Vector3(-3147.71728515625, 977.0283813476562, 15.50943374633789) },
            { pos: new mp.Vector3(-3097.731201171875, 1183.9039306640625, 20.151012420654297) },
            { pos: new mp.Vector3(-2966.913330078125, 1327.4552001953125, 38.992637634277344) },
            { pos: new mp.Vector3(-2804.237548828125, 1305.52490234375, 71.71917724609375) },
            { pos: new mp.Vector3(-2713.520263671875, 1480.7164306640625, 102.5228042602539) },
            { pos: new mp.Vector3(-2640.781005859375, 1560.9788818359375, 120.86328125) },
            { pos: new mp.Vector3(-2595.546875, 1656.7801513671875, 139.56695556640625) },
            { pos: new mp.Vector3(-2469.3623046875, 1786.086181640625, 159.11915588378906) },
            { pos: new mp.Vector3(-2491.18310546875, 1948.7342529296875, 172.34597778320312) },
            { pos: new mp.Vector3(-2252.982421875, 1896.8787841796875, 185.3552093505859) },
            { pos: new mp.Vector3(-2042.4951171875, 2002.4730224609375, 189.82675170898438) },
            { pos: new mp.Vector3(-1979.9326171875, 1907.734619140625, 185.23426818847656) },
            { pos: new mp.Vector3(-1907.898681640625, 1770.873291015625, 171.03797912597656) },
            { pos: new mp.Vector3(-1801.8470458984375, 1892.08056640625, 147.72824096679688) },
            { pos: new mp.Vector3(-1834.05078125, 2033.90576171875, 132.97686767578125) },
            { pos: new mp.Vector3(-1687.57177734375, 2131.6767578125, 106.14111328125) },
            { pos: new mp.Vector3(-1692.626220703125, 2233.872802734375, 83.81952667236328) },
            { pos: new mp.Vector3(-1877.7017822265625, 2306.391357421875, 62.86641311645508) },
            { pos: new mp.Vector3(-2075.628173828125, 2282.07373046875, 39.47553634643555) },
            { pos: new mp.Vector3(-2196.655517578125, 2304.81103515625, 32.79298400878906) },
            { pos: new mp.Vector3(-2379.658203125, 2261.6044921875, 32.48867416381836) },
            { pos: new mp.Vector3(-2530.376708984375, 2342.797119140625, 32.49452209472656) }]
    },
    {
        checkpoint_positions: [
            { pos: new mp.Vector3(2.4455957412719727, 3244.1337890625, 42.97080612182617) },
            { pos: new mp.Vector3(-95.8582534790039, 3183.079345703125, 37.06370162963867) },
            { pos: new mp.Vector3(-346.4256591796875, 3074.3349609375, 32.96955490112305) },
            { pos: new mp.Vector3(-572.2376098632812, 3016.316650390625, 25.063949584960938) },
            { pos: new mp.Vector3(-765.0745849609375, 2922.046875, 24.928518295288086) },
            { pos: new mp.Vector3(-995.4862060546875, 2895.981201171875, 11.991310119628906) },
            { pos: new mp.Vector3(-1203.4068603515625, 2799.07373046875, 14.307476997375488) },
            { pos: new mp.Vector3(-1466.44775390625, 2684.14501953125, 3.2343544960021973) },
            { pos: new mp.Vector3(-1597.1240234375, 2730.391845703125, 5.128777027130127) },
            { pos: new mp.Vector3(-1721.45068359375, 2750.241943359375, 5.012030601501465) },
            { pos: new mp.Vector3(-1886.2034912109375, 2689.061767578125, 3.4674689769744873) },
            { pos: new mp.Vector3(-2096.694580078125, 2706.439697265625, 3.1159110069274902) },
            { pos: new mp.Vector3(-2266.887939453125, 2840.899658203125, 2.6576411724090576) },
            { pos: new mp.Vector3(-2532.72900390625, 2852.44970703125, 2.643953561782837) },
            { pos: new mp.Vector3(-2658.306640625, 2987.83544921875, 8.51624870300293) },
            { pos: new mp.Vector3(-2877.455322265625, 3174.546142578125, 10.40241813659668) },
            { pos: new mp.Vector3(-2966.64013671875, 3499.3017578125, 8.427014350891113) },
            { pos: new mp.Vector3(-2747.50390625, 3492.14404296875, 10.645502090454102) },
            { pos: new mp.Vector3(-2575.6953125, 3501.84814453125, 12.079705238342285) },
            { pos: new mp.Vector3(-2506.649169921875, 3666.318359375, 12.701129913330078) },
            { pos: new mp.Vector3(-2461.206298828125, 3734.921630859375, 16.123455047607422) },
            { pos: new mp.Vector3(-2385.109619140625, 3932.896240234375, 24.168712615966797) },
            { pos: new mp.Vector3(-2306.018798828125, 4154.6201171875, 37.97903823852539) },
            { pos: new mp.Vector3(-2249.08837890625, 4287.91796875, 46.3028564453125) },
            { pos: new mp.Vector3(-2257.861083984375, 4404.07080078125, 39.22718811035156) },
            { pos: new mp.Vector3(-2178.15283203125, 4513.80712890625, 34.73441696166992) },
            { pos: new mp.Vector3(-2044.3631591796875, 4525.03759765625, 27.936193466186523) },
            { pos: new mp.Vector3(-1894.9892578125, 4430.2060546875, 43.89921188354492) },
            { pos: new mp.Vector3(-1771.49462890625, 4366.970703125, 56.40396499633789) },
            { pos: new mp.Vector3(-1656.112548828125, 4213.55859375, 82.7470703125) },
            { pos: new mp.Vector3(-1548.5218505859375, 4208.8681640625, 73.18083190917969) },
            { pos: new mp.Vector3(-1404.517333984375, 4183.28515625, 47.726402282714844) },
            { pos: new mp.Vector3(-1331.494140625, 4151.86279296875, 62.75554656982422) },
            { pos: new mp.Vector3(-1298.2813720703125, 4247.63330078125, 61.420475006103516) },
            { pos: new mp.Vector3(-1154.147705078125, 4285.01806640625, 83.32648468017578) },
            { pos: new mp.Vector3(-1039.091064453125, 4242.814453125, 114.65843200683594) },
            { pos: new mp.Vector3(-964.1026000976562, 4148.3896484375, 131.81564331054688) },
            { pos: new mp.Vector3(-872.9022827148438, 4089.1845703125, 163.70260620117188) },
            { pos: new mp.Vector3(-743.7936401367188, 4034.344970703125, 144.9051513671875) },
            { pos: new mp.Vector3(-620.5977172851562, 3985.63720703125, 120.04146575927734) },
            { pos: new mp.Vector3(-522.474609375, 3958.713134765625, 90.2151107788086) },
            { pos: new mp.Vector3(-405.9997253417969, 3951.75244140625, 62.050331115722656) },
            { pos: new mp.Vector3(-302.0539855957031, 3983.34716796875, 42.93971252441406) },
            { pos: new mp.Vector3(-215.69668579101562, 3825.4091796875, 37.536834716796875) },
            { pos: new mp.Vector3(-162.8680419921875, 3661.58642578125, 45.16219711303711) },
            { pos: new mp.Vector3(4.217535495758057, 3604.963134765625, 40.249053955078125) },
            { pos: new mp.Vector3(40.592613220214844, 3674.746337890625, 39.1543083190918) },
            { pos: new mp.Vector3(66.06303405761719, 3738.2314453125, 39.206024169921875) }]
    },
    {
        checkpoint_positions: [
            { pos: new mp.Vector3(583.0028686523438, -1728.310302734375, 28.90625) },
            { pos: new mp.Vector3(740.5350952148438, -1747.65185546875, 28.849592208862305) },
            { pos: new mp.Vector3(943.8587036132812, -1765.757080078125, 30.73955726623535) },
            { pos: new mp.Vector3(941.012451171875, -1947.6549072265625, 30.160680770874023) },
            { pos: new mp.Vector3(933.8762817382812, -2079.612060546875, 30.016271591186523) },
            { pos: new mp.Vector3(1101.0888671875, -2082.800048828125, 36.78807830810547) },
            { pos: new mp.Vector3(1244.617919921875, -2054.08349609375, 43.82442092895508) },
            { pos: new mp.Vector3(1398.5240478515625, -1966.1669921875, 62.3009147644043) },
            { pos: new mp.Vector3(1415.65478515625, -1760.31591796875, 65.37750244140625) },
            { pos: new mp.Vector3(1300.6524658203125, -1548.4012451171875, 48.06056594848633) },
            { pos: new mp.Vector3(1247.0277099609375, -1342.04443359375, 34.7606315612793) },
            { pos: new mp.Vector3(1215.1197509765625, -1127.858154296875, 37.63839340209961) },
            { pos: new mp.Vector3(1172.95947265625, -860.497314453125, 53.67609786987305) },
            { pos: new mp.Vector3(1224.3524169921875, -761.3329467773438, 58.53023147583008) },
            { pos: new mp.Vector3(1294.1734619140625, -665.603759765625, 66.19780731201172) },
            { pos: new mp.Vector3(1274.791748046875, -506.20050048828125, 68.55908203125) },
            { pos: new mp.Vector3(1215.833251953125, -349.299560546875, 68.60575103759766) },
            { pos: new mp.Vector3(1256.260986328125, -280.2012939453125, 77.32941436767578) },
            { pos: new mp.Vector3(1281.1607666015625, -232.36016845703125, 97.3193588256836) },
            { pos: new mp.Vector3(1338.9288330078125, -119.27080535888672, 118.62516784667969) },
            { pos: new mp.Vector3(1463.6334228515625, -116.61924743652344, 140.0340576171875) },
            { pos: new mp.Vector3(1639.08935546875, -86.64661407470703, 167.49636840820312) },
            { pos: new mp.Vector3(1670.5069580078125, -30.586669921875, 173.24671936035156) },
            { pos: new mp.Vector3(1655.39208984375, 47.26291275024414, 171.84596252441406) },
            { pos: new mp.Vector3(1820.4866943359375, 139.27134704589844, 171.15809631347656) },
            { pos: new mp.Vector3(1803.044921875, 278.9939880371094, 172.2926483154297) },
            { pos: new mp.Vector3(1792.3577880859375, 459.5961608886719, 170.6907196044922) },
            { pos: new mp.Vector3(1912.336669921875, 526.8563842773438, 172.9145965576172) },
            { pos: new mp.Vector3(1940.441650390625, 670.6793823242188, 184.64013671875) },
            { pos: new mp.Vector3(1928.6199951171875, 870.3195190429688, 206.76702880859375) },
            { pos: new mp.Vector3(2019.6409912109375, 1022.9381103515625, 207.3509521484375) },
            { pos: new mp.Vector3(1991.5494384765625, 1201.07568359375, 183.24462890625) },
            { pos: new mp.Vector3(1936.992919921875, 1336.384765625, 158.32980346679688) },
            { pos: new mp.Vector3(1789.6781005859375, 1278.9730224609375, 138.79214477539062) },
            { pos: new mp.Vector3(1696.0533447265625, 1098.97412109375, 121.81208801269531) },
            { pos: new mp.Vector3(1608.9864501953125, 961.7698974609375, 91.99776458740234) },
            { pos: new mp.Vector3(1493.6910400390625, 770.1336059570312, 76.95014190673828) },
        ]
    },
    {
        checkpoint_positions: [
            { pos: new mp.Vector3(860.1832275390625, 1299.543701171875, 357.3106384277344) },
            { pos: new mp.Vector3(691.0873413085938, 1356.5748291015625, 329.78802490234375) },
            { pos: new mp.Vector3(554.4440307617188, 1369.409912109375, 299.7889099121094) },
            { pos: new mp.Vector3(411.5052795410156, 1260.582763671875, 259.8657531738281) },
            { pos: new mp.Vector3(498.4805908203125, 1099.9432373046875, 230.3627471923828) },
            { pos: new mp.Vector3(475.71917724609375, 924.6231079101562, 198.589599609375) },
            { pos: new mp.Vector3(394.01702880859375, 883.0665283203125, 198.16156005859375) },
            { pos: new mp.Vector3(258.1250915527344, 815.5846557617188, 194.2793731689453) },
            { pos: new mp.Vector3(113.53645324707031, 732.6033935546875, 209.0067901611328) },
            { pos: new mp.Vector3(2.9982614517211914, 626.574462890625, 206.9258575439453) },
            { pos: new mp.Vector3(-175.39328002929688, 685.2157592773438, 207.93182373046875) },
            { pos: new mp.Vector3(-364.02874755859375, 764.60302734375, 217.15509033203125) },
            { pos: new mp.Vector3(-343.2543640136719, 944.6279296875, 232.30288696289062) },
            { pos: new mp.Vector3(-220.77716064453125, 1052.6483154296875, 234.43679809570312) },
            { pos: new mp.Vector3(47.349365234375, 1033.698974609375, 217.73350524902344) },
            { pos: new mp.Vector3(251.9209747314453, 964.3220825195312, 210.20541381835938) },
            { pos: new mp.Vector3(484.80706787109375, 868.4119262695312, 197.65536499023438) },
            { pos: new mp.Vector3(779.8367919921875, 863.8455810546875, 216.61477661132812) },
            { pos: new mp.Vector3(993.1064453125, 907.2594604492188, 210.4334716796875) },
            { pos: new mp.Vector3(1044.7685546875, 718.1070556640625, 157.60923767089844) },
            { pos: new mp.Vector3(1201.9744873046875, 942.7727661132812, 145.56472778320312) },
            { pos: new mp.Vector3(1160.5640869140625, 1165.808349609375, 169.03466796875) },
            { pos: new mp.Vector3(1077.83251953125, 1458.9683837890625, 171.39663696289062) },
            { pos: new mp.Vector3(900.0739135742188, 1718.351806640625, 167.19252014160156) },
            { pos: new mp.Vector3(468.29315185546875, 1793.869384765625, 228.36476135253906) },
            { pos: new mp.Vector3(159.5867462158203, 1657.1993408203125, 228.71780395507812) },
            { pos: new mp.Vector3(81.76028442382812, 1696.3052978515625, 226.3340301513672) },
            { pos: new mp.Vector3(-95.072021484375, 1855.2889404296875, 198.63790893554688) },
            { pos: new mp.Vector3(-154.29391479492188, 1952.8782958984375, 193.4686737060547) },
            { pos: new mp.Vector3(229.44268798828125, 2098.92041015625, 115.22286224365234) },
            { pos: new mp.Vector3(734.7734985351562, 2200.9892578125, 56.29769515991211) },
            { pos: new mp.Vector3(1040.2557373046875, 2075.043701171875, 50.5662841796875) },
            { pos: new mp.Vector3(1269.5911865234375, 1640.6688232421875, 88.19422149658203) },
            { pos: new mp.Vector3(1290.034912109375, 1316.9864501953125, 106.4828109741211) },
            { pos: new mp.Vector3(1253.7667236328125, 747.7166748046875, 102.63632202148438) },
            { pos: new mp.Vector3(1010.8505859375, 471.82421875, 95.93270111083984) },
            { pos: new mp.Vector3(826.8328247070312, 207.63111877441406, 81.14300537109375) },
            { pos: new mp.Vector3(784.0742797851562, 219.1484832763672, 83.93896484375) },
        ]
    },
    {
        checkpoint_positions: [
            { pos: new mp.Vector3(-1858.525, 1954.85986, 143.544373) },
            { pos: new mp.Vector3(-1831.667, 1841.064, 158.048752) },
            { pos: new mp.Vector3(-1961.74866, 1763.3042, 175.631409) },
            { pos: new mp.Vector3(-1992.341, 1915.3175, 185.1082) },
            { pos: new mp.Vector3(-2042.30249, 1972.12854, 188.339417) },
            { pos: new mp.Vector3(-2100.87964, 2004.51111, 189.259033) },
            { pos: new mp.Vector3(-2225.87, 1919.86438, 186.743591) },
            { pos: new mp.Vector3(-2421.38525, 1951.39136, 176.6551) },
            { pos: new mp.Vector3(-2521.80127, 1846.00952, 164.655945) },
            { pos: new mp.Vector3(-2552.50537, 1673.26868, 144.325485) },
            { pos: new mp.Vector3(-2646.17554, 1575.38123, 120.815819) },
            { pos: new mp.Vector3(-2633.724, 1459.4386, 126.458954) },
            { pos: new mp.Vector3(-2634.33032, 1203.46558, 153.71843) },
            { pos: new mp.Vector3(-2563.47046, 1068.45337, 176.041122) },
            { pos: new mp.Vector3(-2288.4043, 1043.11157, 195.684082) },
            { pos: new mp.Vector3(-2155.99927, 990.757568, 186.0347) },
            { pos: new mp.Vector3(-2018.70569, 851.1899, 164.71199) },
            { pos: new mp.Vector3(-1967.97461, 704.4834, 141.085541) },
            { pos: new mp.Vector3(-1848.669, 795.2505, 138.799011) },
            { pos: new mp.Vector3(-1720.36865, 841.467041, 143.741562) },
            { pos: new mp.Vector3(-1607.33179, 974.8919, 153.416016) },
            { pos: new mp.Vector3(-1456.1499, 841.235046, 183.061462) },
            { pos: new mp.Vector3(-1298.09766, 794.719238, 187.794144) },
            { pos: new mp.Vector3(-1143.03369, 1045.43213, 206.55629) },
            { pos: new mp.Vector3(-908.0771, 1080.64526, 219.789429) },
            { pos: new mp.Vector3(-764.739563, 970.408936, 236.461655) },
            { pos: new mp.Vector3(-543.1787, 926.5229, 242.474) },
            { pos: new mp.Vector3(-361.4761, 956.7989, 232.47049) },
            { pos: new mp.Vector3(-260.416382, 1055.9397, 234.735916) },
            { pos: new mp.Vector3(-98.2425842, 1051.21838, 225.468124) },
            { pos: new mp.Vector3(72.82344, 1019.20673, 215.565582) },
            { pos: new mp.Vector3(248.877045, 950.2919, 209.675323) },
            { pos: new mp.Vector3(344.155, 1000.74884, 209.516144) },
            { pos: new mp.Vector3(392.7928, 931.232239, 201.381577) },
            { pos: new mp.Vector3(436.483215, 860.222351, 195.648163) },
            { pos: new mp.Vector3(359.291016, 760.6692, 181.095657) },
            { pos: new mp.Vector3(335.6778, 737.2764, 179.757523) }]
    },
    {
        checkpoint_positions: [
            { pos: new mp.Vector3(-2461.22729, 2291.80371, 30.07762) },
            { pos: new mp.Vector3(-2334.07446, 2242.87769, 31.9335022) },
            { pos: new mp.Vector3(-2122.5835, 2304.90918, 36.3762054) },
            { pos: new mp.Vector3(-2092.3667, 2290.11182, 37.47852) },
            { pos: new mp.Vector3(-1886.22327, 2303.7334, 61.4124146) },
            { pos: new mp.Vector3(-1742.07861, 2286.63647, 75.80862) },
            { pos: new mp.Vector3(-1643.41272, 2204.32764, 89.59288) },
            { pos: new mp.Vector3(-1803.74719, 2040.56152, 127.625732) },
            { pos: new mp.Vector3(-1871.45654, 2024.11755, 138.60788) },
            { pos: new mp.Vector3(-1880.17432, 1982.43921, 142.132568) },
            { pos: new mp.Vector3(-1792.796, 1852.45081, 151.793839) },
            { pos: new mp.Vector3(-1897.311, 1780.82739, 169.131668) },
            { pos: new mp.Vector3(-1995.41064, 1776.42334, 179.099548) },
            { pos: new mp.Vector3(-1962.00049, 1897.56775, 184.045181) },
            { pos: new mp.Vector3(-2048.421, 1932.3175, 186.632874) },
            { pos: new mp.Vector3(-2040.40771, 2006.6936, 189.430176) },
            { pos: new mp.Vector3(-2184.31421, 1939.77539, 188.56662) },
            { pos: new mp.Vector3(-2284.85718, 1869.7489, 180.971619) },
            { pos: new mp.Vector3(-2549.54834, 1895.586, 166.894348) },
            { pos: new mp.Vector3(-2467.4165, 1765.62988, 157.783325) },
            { pos: new mp.Vector3(-2513.43384, 1682.56641, 150.524872) },
            { pos: new mp.Vector3(-2611.43848, 1654.47046, 136.829132) },
            { pos: new mp.Vector3(-2649.707, 1523.32068, 116.673431) },
            { pos: new mp.Vector3(-2676.50244, 1510.49365, 112.526886) },
            { pos: new mp.Vector3(-2715.85156, 1485.75244, 102.391159) },
            { pos: new mp.Vector3(-2813.73413, 1301.35278, 69.11722) },
            { pos: new mp.Vector3(-2929.68213, 1337.88513, 43.1324844) },
            { pos: new mp.Vector3(-3071.61157, 1190.86267, 20.4937572) },
            { pos: new mp.Vector3(-3099.23535, 1214.92358, 19.2906227) },
            { pos: new mp.Vector3(-2975.38086, 1535.71631, 27.3268089) },
            { pos: new mp.Vector3(-3035.8147, 1757.029, 35.1965446) },
            { pos: new mp.Vector3(-2967.34546, 2078.15674, 39.7614326) },
            { pos: new mp.Vector3(-2738.162, 2248.86743, 20.4983826) },
            { pos: new mp.Vector3(-2691.427, 2278.64648, 18.98248) },
            { pos: new mp.Vector3(-2538.78833, 2285.68237, 31.8913326) }]
    },
    {
        checkpoint_positions: [
            { pos: new mp.Vector3(2033.586, 3304.576, 45.433) },
            { pos: new mp.Vector3(2134.422, 3263.982, 45.620) },
            { pos: new mp.Vector3(2243.161, 3228.858, 47.744) },
            { pos: new mp.Vector3(2298.575, 3058.289, 46.065) },
            { pos: new mp.Vector3(2177.180, 3012.635, 45.025) },
            { pos: new mp.Vector3(1986.672, 2984.804, 45.312) },
            { pos: new mp.Vector3(1682.230, 2871.008, 42.279) },
            { pos: new mp.Vector3(1398.974, 2700.488, 37.115) },
            { pos: new mp.Vector3(1126.280, 2687.019, 37.968) },
            { pos: new mp.Vector3(758.568, 2702.126, 39.655) },
            { pos: new mp.Vector3(369.042, 2661.986, 44.281) },
            { pos: new mp.Vector3(316.537, 2646.260, 44.137) },
            { pos: new mp.Vector3(154.834, 2655.016, 48.739) },
            { pos: new mp.Vector3(-26.912, 2803.130, 56.252) },
            { pos: new mp.Vector3(-20.121, 2825.809, 55.796) },
            { pos: new mp.Vector3(209.340, 2951.326, 43.108) },
            { pos: new mp.Vector3(238.067, 3318.459, 39.677) },
            { pos: new mp.Vector3(424.369, 3477.954, 34.172) },
            { pos: new mp.Vector3(806.221, 3529.686, 33.760) },
            { pos: new mp.Vector3(932.337, 3533.069, 34.033) },
            { pos: new mp.Vector3(1134.619, 3533.667, 34.781) },
            { pos: new mp.Vector3(1293.148, 3546.794, 35.193) },
            { pos: new mp.Vector3(1532.796, 3636.363, 34.678) },
            { pos: new mp.Vector3(1624.524, 3637.283, 35.227) },
            { pos: new mp.Vector3(1690.501, 3522.292, 36.269) },
            { pos: new mp.Vector3(1756.137, 3541.841, 36.077) },
            { pos: new mp.Vector3(1978.239, 3672.397, 33.326) },
            { pos: new mp.Vector3(2071.289, 3707.091, 33.099) },
            { pos: new mp.Vector3(2100.847, 3661.688, 38.321) },
            { pos: new mp.Vector3(2108.265, 3582.441, 41.544) },
            { pos: new mp.Vector3(2149.593, 3498.926, 45.447) },
            { pos: new mp.Vector3(2199.430, 3374.043, 45.547) },
            { pos: new mp.Vector3(2235.771, 3271.731, 47.753) },
            { pos: new mp.Vector3(2325.497, 3261.093, 47.396) }]
    },
    {
        checkpoint_positions: [
            { pos: new mp.Vector3(-2249.43896484375, 4295.2587890625, 46.75114822387695) },
            { pos: new mp.Vector3(-2259.004150390625, 4394.80126953125, 39.75299835205078) },
            { pos: new mp.Vector3(-2184.31689453125, 4507.37744140625, 34.4365119934082) },
            { pos: new mp.Vector3(-2072.960205078125, 4514.69677734375, 29.826210021972656) },
            { pos: new mp.Vector3(-1898.4837646484375, 4431.078125, 43.531551361083984) },
            { pos: new mp.Vector3(-1765.9857177734375, 4363.1171875, 57.58885192871094) },
            { pos: new mp.Vector3(-1655.1795654296875, 4213.1416015625, 82.94322967529297) },
            { pos: new mp.Vector3(-1485.917724609375, 4227.2109375, 55.89749526977539) },
            { pos: new mp.Vector3(-1374.762451171875, 4148.8232421875, 59.10652542114258) },
            { pos: new mp.Vector3(-1307.034423828125, 4219.79736328125, 60.71258544921875) },
            { pos: new mp.Vector3(-1151.4844970703125, 4286.0126953125, 83.63578033447266) },
            { pos: new mp.Vector3(-1055.737060546875, 4263.7890625, 108.49607849121094) },
            { pos: new mp.Vector3(-970.8624877929688, 4146.21826171875, 129.6845703125) },
            { pos: new mp.Vector3(-808.8670654296875, 4051.592041015625, 160.89913940429688) },
            { pos: new mp.Vector3(-682.8799438476562, 4013.5732421875, 130.16262817382812) },
            { pos: new mp.Vector3(-514.7718505859375, 3961.9677734375, 87.76824188232422) },
            { pos: new mp.Vector3(-349.7488708496094, 4008.567626953125, 47.33039855957031) },
            { pos: new mp.Vector3(-218.61231994628906, 3839.132080078125, 38.32001876831055) },
            { pos: new mp.Vector3(-160.3234100341797, 3660.41162109375, 45.38908386230469) },
            { pos: new mp.Vector3(103.33464050292969, 3559.35986328125, 39.36277770996094) },
            { pos: new mp.Vector3(162.9564208984375, 3405.33154296875, 38.610252380371094) }]
    },
    {
        checkpoint_positions: [
            { pos: new mp.Vector3(-268.45538330078125, -1829.5634765625, 27.447593688964844) },
            { pos: new mp.Vector3(-79.61148834228516, -1728.5400390625, 28.9263916015625) },
            { pos: new mp.Vector3(141.86895751953125, -1620.69970703125, 28.903076171875) },
            { pos: new mp.Vector3(411.875, -1465.9715576171875, 28.908615112304688) },
            { pos: new mp.Vector3(633.8237915039062, -1440.5418701171875, 30.03615379333496) },
            { pos: new mp.Vector3(858.0210571289062, -1431.86279296875, 28.364688873291016) },
            { pos: new mp.Vector3(1261.2044677734375, -1455.037353515625, 34.77670669555664) },
            { pos: new mp.Vector3(1375.20556640625, -1678.8516845703125, 58.58662414550781) },
            { pos: new mp.Vector3(1426.6549072265625, -1862.82763671875, 70.943115234375) },
            { pos: new mp.Vector3(1296.3204345703125, -2029.8555908203125, 44.67293167114258) },
            { pos: new mp.Vector3(949.3728637695312, -2081.057861328125, 30.278623580932617) },
            { pos: new mp.Vector3(688.288818359375, -2051.779052734375, 28.89388656616211) },
            { pos: new mp.Vector3(460.974853515625, -2024.3260498046875, 23.59757423400879) },
            { pos: new mp.Vector3(306.1548156738281, -1872.0596923828125, 26.594289779663086) },
            { pos: new mp.Vector3(-18.232980728149414, -1600.3233642578125, 28.89067268371582) },
            { pos: new mp.Vector3(-272.1080627441406, -1433.751220703125, 30.915693283081055) },
            { pos: new mp.Vector3(-521.6534423828125, -1335.7799072265625, 28.915498733520508) },
            { pos: new mp.Vector3(-533.4983520507812, -1091.7049560546875, 21.960973739624023) },
            { pos: new mp.Vector3(-499.29986572265625, -834.089599609375, 30.061092376708984) },
            { pos: new mp.Vector3(-528.1963500976562, -660.6748046875, 32.869178771972656) },
            { pos: new mp.Vector3(-349.39373779296875, -658.4398193359375, 31.584796905517578) },
            { pos: new mp.Vector3(-244.4964599609375, -635.3861694335938, 33.19675827026367) },
            { pos: new mp.Vector3(-157.73960876464844, -398.7253112792969, 33.30310821533203) },
            { pos: new mp.Vector3(-101.34451293945312, -271.40802001953125, 42.6247444152832) },
            { pos: new mp.Vector3(31.44687271118164, -270.6980285644531, 47.219200134277344) },
            { pos: new mp.Vector3(93.43905639648438, -110.7931900024414, 57.530357360839844) },
            { pos: new mp.Vector3(171.9732666015625, 90.90167999267578, 87.65802001953125) },
            { pos: new mp.Vector3(218.87249755859375, 187.07164001464844, 105.192138671875) },
            { pos: new mp.Vector3(362.3813171386719, 135.57278442382812, 102.66907501220703) }]
    },
    {
        checkpoint_positions: [
            { pos: new mp.Vector3(51.918, 250.407, 109.221) },
            { pos: new mp.Vector3(-251.999, 262.582, 91.358) },
            { pos: new mp.Vector3(-661.625, 280.383, 80.990) },
            { pos: new mp.Vector3(-853.687, 438.571, 86.749) },
            { pos: new mp.Vector3(-1080.439, 587.138, 102.659) },
            { pos: new mp.Vector3(-1240.933, 469.106, 92.174) },
            { pos: new mp.Vector3(-1075.501, 395.965, 68.578) },
            { pos: new mp.Vector3(-1093.525, 266.791, 63.514) },
            { pos: new mp.Vector3(-1427.722, 132.606, 52.790) },
            { pos: new mp.Vector3(-1454.948, -90.786, 50.515) },
            { pos: new mp.Vector3(-1626.258, -302.819, 51.143) },
            { pos: new mp.Vector3(-1741.791, -498.096, 38.646) },
            { pos: new mp.Vector3(-1290.487, -900.727, 10.971) },
            { pos: new mp.Vector3(-1220.116, -1156.851, 7.330) },
            { pos: new mp.Vector3(-1293.278, -1193.577, 4.520) },
            { pos: new mp.Vector3(-1226.133, -1371.305, 3.713) },
            { pos: new mp.Vector3(-660.764, -1039.222, 16.966) },
            { pos: new mp.Vector3(-633.861, -648.082, 31.299) },
            { pos: new mp.Vector3(-615.390, -373.761, 34.297) },
            { pos: new mp.Vector3(-290.199, -364.065, 29.497) },
            { pos: new mp.Vector3(-247.212, -62.347, 49.064) },
            { pos: new mp.Vector3(210.777, -218.897, 53.615) },
            { pos: new mp.Vector3(463.653, -308.546, 47.132) },
            { pos: new mp.Vector3(516.403, -128.039, 59.890) },
            { pos: new mp.Vector3(685.923, -2.488, 83.742) },
            { pos: new mp.Vector3(761.983, 160.650, 81.042) },
            { pos: new mp.Vector3(543.542, 252.113, 102.704) },
            { pos: new mp.Vector3(421.184, 290.388, 102.624) },
            { pos: new mp.Vector3(357.480, 140.791, 102.688) },
            { pos: new mp.Vector3(222.990, 190.201, 105.098) },
            { pos: new mp.Vector3(29.090, 256.432, 109.173) }]
    },
    {
        checkpoint_positions: [
            { pos: new mp.Vector3(176.711, -3195.336, 5.176) },
            { pos: new mp.Vector3(207.900, -2960.731, 5.536) },
            { pos: new mp.Vector3(262.914, -2672.239, 5.596) },
            { pos: new mp.Vector3(139.348, -2600.501, 5.581) },
            { pos: new mp.Vector3(329.606, -2501.514, 5.157) },
            { pos: new mp.Vector3(479.010, -2066.625, 24.075) },
            { pos: new mp.Vector3(755.873, -2045.167, 28.702) },
            { pos: new mp.Vector3(824.435, -1525.061, 28.552) },
            { pos: new mp.Vector3(808.007, -1321.815, 25.700) },
            { pos: new mp.Vector3(826.302, -1360.257, 25.692) },
            { pos: new mp.Vector3(849.109, -1344.120, 25.648) },
            { pos: new mp.Vector3(796.971, -1317.802, 25.831) },
            { pos: new mp.Vector3(771.988, -497.622, 35.638) },
            { pos: new mp.Vector3(611.527, -358.118, 43.210) },
            { pos: new mp.Vector3(860.136, 126.378, 70.914) },
            { pos: new mp.Vector3(1066.304, 426.845, 90.831) },
            { pos: new mp.Vector3(1113.145, 551.050, 96.403) },
            { pos: new mp.Vector3(1277.073, 838.830, 104.980) },
            { pos: new mp.Vector3(1285.536, 1584.350, 93.108) },
            { pos: new mp.Vector3(1166.628, 1808.825, 73.956) },
            { pos: new mp.Vector3(1247.528, 1860.084, 79.151) },
            { pos: new mp.Vector3(1270.858, 1911.215, 79.594) },
            { pos: new mp.Vector3(1206.370, 1867.674, 78.122) },
            { pos: new mp.Vector3(1163.735, 1810.923, 73.725) },
            { pos: new mp.Vector3(857.828, 2228.200, 48.106) },
            { pos: new mp.Vector3(333.620, 2088.512, 101.742) },
            { pos: new mp.Vector3(-97.359, 1988.907, 183.423) },
            { pos: new mp.Vector3(-162.926, 1889.079, 197.837) },
            { pos: new mp.Vector3(-53.204, 1880.037, 195.777) }]
    },
    /*{ 
        checkpoint_positions: [
            { pos: new mp.Vector3(-1027.799, -3321.593, 13.520) },
            { pos: new mp.Vector3(-1374.961, -3121.326, 13.521) },
            { pos: new mp.Vector3(-1731.256, -2898.480, 13.520) },
            { pos: new mp.Vector3(-1478.240, -2456.645, 13.521) },
            { pos: new mp.Vector3(-1284.411, -2185.112, 13.520) },
            { pos: new mp.Vector3(-1420.200, -2479.418, 13.523) },
            { pos: new mp.Vector3(-1603.323, -2794.809, 13.546) },
            { pos: new mp.Vector3(-1183.711, -3037.096, 13.520) },
            { pos: new mp.Vector3(-868.995, -3226.934, 13.520) },
            { pos: new mp.Vector3(-944.638, -3355.782, 13.521) },
            { pos: new mp.Vector3(-1319.392, -3153.340, 13.520) },
            { pos: new mp.Vector3(-1724.315, -2908.218, 13.520) },
            { pos: new mp.Vector3(-1477.410, -2455.258, 13.521) },
            { pos: new mp.Vector3(-1291.246, -2195.350, 13.521) },
            { pos: new mp.Vector3(-1471.922, -2569.216, 13.531) },
            { pos: new mp.Vector3(-1602.348, -2795.101, 13.544) },
            { pos: new mp.Vector3(-1205.988, -3024.030, 13.520) },
            { pos: new mp.Vector3(-869.353, -3228.523, 13.520) },
            { pos: new mp.Vector3(-946.172, -3352.731, 13.520) },
            { pos: new mp.Vector3(-1324.501, -3150.451, 13.520) },
            { pos: new mp.Vector3(-1727.831, -2900.831, 13.520) },
            { pos: new mp.Vector3(-1459.378, -2424.127, 13.519) },
            { pos: new mp.Vector3(-1289.652, -2199.118, 13.520) },
            { pos: new mp.Vector3(-1460.993, -2550.023, 13.530) },
            { pos: new mp.Vector3(-1599.047, -2796.973, 13.540) },
            { pos: new mp.Vector3(-1099.047, -3085.943, 13.520) },
            { pos: new mp.Vector3(-868.937, -3237.330, 13.520) }]
    },*/
    {
        checkpoint_positions: [{ pos: new mp.Vector3(502.296, 5545.134, 778.706) }, { pos: new mp.Vector3(406.222, 5504.216, 730.776) },
        { pos: new mp.Vector3(354.893, 5454.802, 684.723) }, { pos: new mp.Vector3(231.879, 5303.491, 620.460) },
        { pos: new mp.Vector3(226.595, 5249.903, 601.207) }, { pos: new mp.Vector3(153.102, 5190.644, 558.368) },
        { pos: new mp.Vector3(127.542, 5221.662, 542.211) }, { pos: new mp.Vector3(110.741, 5103.428, 509.449) },
        { pos: new mp.Vector3(91.489, 5019.408, 462.732) }, { pos: new mp.Vector3(35.408, 5052.230, 457.381) },
        { pos: new mp.Vector3(3.023, 5009.569, 444.248) }, { pos: new mp.Vector3(-62.951, 4963.473, 395.232) },
        { pos: new mp.Vector3(-169.332, 4903.870, 337.713) }, { pos: new mp.Vector3(-231.290, 4905.799, 309.443) },
        { pos: new mp.Vector3(-337.594, 4996.192, 222.279) }, { pos: new mp.Vector3(-365.463, 4924.228, 196.942) },
        { pos: new mp.Vector3(-388.433, 4907.845, 192.460) }, { pos: new mp.Vector3(-513.168, 5014.164, 137.381) },
        { pos: new mp.Vector3(-637.685, 5107.005, 129.035) }, { pos: new mp.Vector3(-734.956, 5186.755, 107.397) },
        { pos: new mp.Vector3(-759.792, 5261.347, 91.873) }, { pos: new mp.Vector3(-941.838, 5256.280, 82.184) },
        { pos: new mp.Vector3(-848.267, 5315.524, 77.414) }, { pos: new mp.Vector3(-675.513, 5315.672, 67.309) },
        { pos: new mp.Vector3(-703.269, 5429.072, 45.357) }, { pos: new mp.Vector3(-819.208, 5416.318, 33.888) }]
    },
    {
        checkpoint_positions: [{ pos: new mp.Vector3(1125.980, 2150.818, 52.893) }, { pos: new mp.Vector3(1167.505, 2180.574, 53.141) },
        { pos: new mp.Vector3(1125.371, 2227.969, 48.371) }, { pos: new mp.Vector3(1035.495, 2258.495, 43.340) },
        { pos: new mp.Vector3(940.976, 2286.505, 45.066) }, { pos: new mp.Vector3(981.816, 2330.562, 48.284) },
        { pos: new mp.Vector3(926.578, 2365.000, 46.445) }, { pos: new mp.Vector3(1000.972, 2408.228, 50.557) },
        { pos: new mp.Vector3(1127.356, 2454.307, 51.567) }, { pos: new mp.Vector3(1139.453, 2314.554, 48.609) },
        { pos: new mp.Vector3(1150.935, 2262.414, 48.193) }, { pos: new mp.Vector3(1165.743, 2376.355, 57.106) },
        { pos: new mp.Vector3(1135.251, 2480.652, 52.479) }, { pos: new mp.Vector3(914.982, 2479.577, 50.711) },
        { pos: new mp.Vector3(896.861, 2351.650, 51.129) }, { pos: new mp.Vector3(905.881, 2279.838, 44.850) },
        { pos: new mp.Vector3(992.257, 2214.450, 46.704) }, { pos: new mp.Vector3(1082.776, 2215.236, 48.096) },
        { pos: new mp.Vector3(1096.844, 2158.324, 52.930) }, { pos: new mp.Vector3(1125.980, 2150.818, 52.893) },
        { pos: new mp.Vector3(1167.505, 2180.574, 53.141) }, { pos: new mp.Vector3(1125.371, 2227.969, 48.371) },
        { pos: new mp.Vector3(1035.495, 2258.495, 43.340) }, { pos: new mp.Vector3(940.976, 2286.505, 45.066) },
        { pos: new mp.Vector3(981.816, 2330.562, 48.284) }, { pos: new mp.Vector3(926.578, 2365.000, 46.445) },
        { pos: new mp.Vector3(1000.972, 2408.228, 50.557) }, { pos: new mp.Vector3(1127.356, 2454.307, 51.567) },
        { pos: new mp.Vector3(1139.453, 2314.554, 48.609) }, { pos: new mp.Vector3(1150.935, 2262.414, 48.193) },
        { pos: new mp.Vector3(1165.743, 2376.355, 57.106) }, { pos: new mp.Vector3(1135.251, 2480.652, 52.479) },
        { pos: new mp.Vector3(914.982, 2479.577, 50.711) }, { pos: new mp.Vector3(896.861, 2351.650, 51.129) },
        { pos: new mp.Vector3(905.881, 2279.838, 44.850) }, { pos: new mp.Vector3(992.257, 2214.450, 46.704) },
        { pos: new mp.Vector3(1082.776, 2215.236, 48.096) }, { pos: new mp.Vector3(1096.844, 2158.324, 52.930) }]
    },
    {
        checkpoint_positions: [{ pos: new mp.Vector3(-378.455, -624.924, 36.856) }, { pos: new mp.Vector3(-183.549, -545.420, 27.372) },
        { pos: new mp.Vector3(-64.434, -540.587, 31.412) }, { pos: new mp.Vector3(5.825, -628.463, 15.309) },
        { pos: new mp.Vector3(17.570, -719.413, 16.162) }, { pos: new mp.Vector3(68.245, -775.537, 17.340) },
        { pos: new mp.Vector3(105.503, -621.412, 17.225) }, { pos: new mp.Vector3(164.591, -584.708, 18.334) },
        { pos: new mp.Vector3(180.873, -535.015, 21.544) }, { pos: new mp.Vector3(277.085, -459.644, 23.118) },
        { pos: new mp.Vector3(382.659, -455.947, 16.706) }, { pos: new mp.Vector3(422.275, -525.702, 8.483) },
        { pos: new mp.Vector3(467.139, -573.935, 2.068) }, { pos: new mp.Vector3(558.460, -511.422, -3.693) },
        { pos: new mp.Vector3(737.183, -327.306, 1.443) }, { pos: new mp.Vector3(869.631, -259.808, 11.459) },
        { pos: new mp.Vector3(916.000, -154.188, 24.512) }, { pos: new mp.Vector3(1025.584, -239.234, 43.462) },
        { pos: new mp.Vector3(1007.608, -327.799, 48.278) }, { pos: new mp.Vector3(863.882, -397.288, 30.442) },
        { pos: new mp.Vector3(574.872, -719.100, 11.959) }, { pos: new mp.Vector3(570.583, -1280.271, 9.318) },
        { pos: new mp.Vector3(640.058, -1505.213, 9.301) }, { pos: new mp.Vector3(675.226, -1475.557, 9.305) },
        { pos: new mp.Vector3(615.464, -1043.769, 9.939) }, { pos: new mp.Vector3(623.823, -664.890, 13.058) },
        { pos: new mp.Vector3(841.402, -429.385, 27.151) }, { pos: new mp.Vector3(1081.099, -259.342, 57.542) }]
    }],
    "halloween": [
        {
            checkpoint_positions: [
                { pos: new mp.Vector3(-1789.253, -628.697, 38.885) },
                { pos: new mp.Vector3(-1533.382, -893.006, 54.938) },
                { pos: new mp.Vector3(-1398.645, -1105.725, 63.043) },
                { pos: new mp.Vector3(-1270.238, -1307.271, 61.294) },
                { pos: new mp.Vector3(-1119.372, -1514.264, 53.287) },
                { pos: new mp.Vector3(-995.758, -1655.013, 51.409) },
                { pos: new mp.Vector3(-848.994, -1831.117, 54.727) },
                { pos: new mp.Vector3(-679.318, -2012.913, 57.839) },
                { pos: new mp.Vector3(-460.331, -2251.847, 50.290) },
                { pos: new mp.Vector3(-292.730, -2500.044, 45.573) },
                { pos: new mp.Vector3(-109.657, -2669.097, 62.936) },
                { pos: new mp.Vector3(242.826, -2810.841, 79.641) },
                { pos: new mp.Vector3(615.811, -2793.217, 67.634) },
                { pos: new mp.Vector3(909.244, -2653.314, 40.209) },
                { pos: new mp.Vector3(1236.944, -2506.753, 79.397) },
                { pos: new mp.Vector3(1308.858, -2331.879, 107.386) },
                { pos: new mp.Vector3(1241.102, -1964.739, 130.128) },
                { pos: new mp.Vector3(1071.110, -1591.722, 141.269) },
                { pos: new mp.Vector3(900.388, -1350.572, 143.213) },
                { pos: new mp.Vector3(730.265, -1131.408, 133.143) },
                { pos: new mp.Vector3(495.278, -911.069, 110.376) },
                { pos: new mp.Vector3(222.069, -829.807, 93.240) },
                { pos: new mp.Vector3(-71.350, -728.674, 64.780) },
                { pos: new mp.Vector3(-218.709, -676.038, 41.492) },
                { pos: new mp.Vector3(-376.971, -658.032, 30.916) }
            ]
        },
        {
            checkpoint_positions: [
                { pos: new mp.Vector3(2752.619, 4462.205, 91.036) },
                { pos: new mp.Vector3(2538.868, 4218.174, 100.330) },
                { pos: new mp.Vector3(2251.691, 3997.798, 131.796) },
                { pos: new mp.Vector3(1902.849, 4010.569, 141.840) },
                { pos: new mp.Vector3(1415.504, 4065.276, 120.373) },
                { pos: new mp.Vector3(1155.495, 4089.908, 59.391) },
                { pos: new mp.Vector3(926.021, 4107.342, 48.027) },
                { pos: new mp.Vector3(711.585, 4121.328, 52.126) },
                { pos: new mp.Vector3(404.792, 4140.366, 56.554) },
                { pos: new mp.Vector3(69.354, 4187.364, 78.827) },
                { pos: new mp.Vector3(-264.341, 4347.209, 99.565) },
                { pos: new mp.Vector3(-521.050, 4425.381, 61.946) },
                { pos: new mp.Vector3(-684.719, 4437.269, 50.117) },
                { pos: new mp.Vector3(-846.056, 4421.349, 52.971) },
                { pos: new mp.Vector3(-1033.455, 4385.260, 50.578) },
                { pos: new mp.Vector3(-1208.607, 4386.390, 49.991) },
                { pos: new mp.Vector3(-1493.670, 4343.211, 47.827) },
                { pos: new mp.Vector3(-1657.444, 4459.194, 50.763) },
                { pos: new mp.Vector3(-1862.208, 4669.350, 29.277) },
                { pos: new mp.Vector3(-2049.319, 4612.221, 57.603) },
                { pos: new mp.Vector3(-2157.439, 4452.650, 79.390) },
                { pos: new mp.Vector3(-2319.239, 4123.860, 45.707) },
                { pos: new mp.Vector3(-2415.682, 3873.273, 24.357) }
            ]
        },
        {
            checkpoint_positions: [
                { pos: new mp.Vector3(-1517.922, -2526.907, 29.042) },
                { pos: new mp.Vector3(-1363.171, -2264.166, 71.016) },
                { pos: new mp.Vector3(-1231.526, -1976.453, 72.053) },
                { pos: new mp.Vector3(-1030.382, -1723.962, 31.557) },
                { pos: new mp.Vector3(-892.438, -1578.512, 22.918) },
                { pos: new mp.Vector3(-774.055, -1408.226, 23.121) },
                { pos: new mp.Vector3(-583.312, -1227.016, 39.501) },
                { pos: new mp.Vector3(-478.073, -1132.170, 64.174) },
                { pos: new mp.Vector3(-375.713, -1010.546, 74.921) },
                { pos: new mp.Vector3(-221.134, -996.654, 69.223) },
                { pos: new mp.Vector3(-155.672, -817.829, 77.234) },
                { pos: new mp.Vector3(-93.405, -639.133, 88.788) },
                { pos: new mp.Vector3(-23.099, -434.144, 93.761) },
                { pos: new mp.Vector3(104.692, -290.335, 98.486) },
                { pos: new mp.Vector3(269.087, -200.723, 113.021) },
                { pos: new mp.Vector3(429.285, -76.262, 123.143) },
                { pos: new mp.Vector3(513.305, 86.684, 133.047) },
                { pos: new mp.Vector3(600.952, 290.231, 139.238) },
                { pos: new mp.Vector3(748.584, 465.001, 170.601) },
                { pos: new mp.Vector3(752.755, 707.012, 232.260) },
                { pos: new mp.Vector3(739.202, 966.741, 305.006) },
                { pos: new mp.Vector3(718.318, 1221.932, 357.942) },
                { pos: new mp.Vector3(683.919, 1307.603, 381.677) },
                { pos: new mp.Vector3(614.510, 1620.108, 365.640) },
                { pos: new mp.Vector3(508.255, 1961.600, 319.811) },
                { pos: new mp.Vector3(426.411, 2253.313, 262.876) },
                { pos: new mp.Vector3(347.848, 2499.298, 176.251) },
                { pos: new mp.Vector3(271.182, 2726.649, 89.477) },
                { pos: new mp.Vector3(243.948, 2861.573, 55.768) },
                { pos: new mp.Vector3(220.792, 3054.830, 42.289) }
            ]
        },
        {
            checkpoint_positions: [
                { pos: new mp.Vector3(1331.528, 3146.898, 69.014) },
                { pos: new mp.Vector3(1045.179, 3072.540, 92.128) },
                { pos: new mp.Vector3(726.574, 3097.823, 117.342) },
                { pos: new mp.Vector3(357.821, 3155.165, 130.765) },
                { pos: new mp.Vector3(-137.317, 3071.457, 72.951) },
                { pos: new mp.Vector3(-379.307, 3003.453, 46.779) },
                { pos: new mp.Vector3(-728.400, 2867.269, 38.818) },
                { pos: new mp.Vector3(-1012.021, 2828.212, 26.306) },
                { pos: new mp.Vector3(-1295.037, 2664.080, 14.638) },
                { pos: new mp.Vector3(-1428.132, 2631.009, 9.871) },
                { pos: new mp.Vector3(-1614.945, 2625.864, 18.863) },
                { pos: new mp.Vector3(-1918.700, 2603.410, 26.818) },
                { pos: new mp.Vector3(-2323.586, 2588.831, 25.389) },
                { pos: new mp.Vector3(-2594.126, 2585.452, 12.010) },
                { pos: new mp.Vector3(-2721.154, 2615.289, 12.278) },
                { pos: new mp.Vector3(-2810.207, 2786.438, 29.320) },
                { pos: new mp.Vector3(-2864.080, 3084.180, 65.643) },
                { pos: new mp.Vector3(-2831.680, 3499.799, 98.142) },
                { pos: new mp.Vector3(-2542.356, 3820.380, 127.950) },
                { pos: new mp.Vector3(-2058.721, 3940.885, 266.265) },
                { pos: new mp.Vector3(-1617.690, 3922.241, 392.181) },
                { pos: new mp.Vector3(-1268.703, 3943.698, 450.334) },
                { pos: new mp.Vector3(-999.705, 3876.747, 447.213) },
                { pos: new mp.Vector3(-688.333, 3799.318, 315.942) },
                { pos: new mp.Vector3(-342.304, 3743.539, 192.522) },
                { pos: new mp.Vector3(51.500, 3689.397, 115.698) },
                { pos: new mp.Vector3(220.565, 3473.019, 70.902) },
                { pos: new mp.Vector3(266.046, 2769.770, 150.957) },
                { pos: new mp.Vector3(408.651, 2357.766, 223.440) },
                { pos: new mp.Vector3(567.934, 1885.483, 308.327) },
                { pos: new mp.Vector3(683.967, 1491.691, 365.131) },
                { pos: new mp.Vector3(721.490, 1302.880, 390.618) },
                { pos: new mp.Vector3(718.966, 1186.214, 350.116) },
                { pos: new mp.Vector3(614.890, 807.359, 269.537) },
                { pos: new mp.Vector3(450.083, 361.205, 171.885) },
                { pos: new mp.Vector3(291.658, -57.323, 90.255) },
                { pos: new mp.Vector3(141.507, -456.716, 49.929) },
                { pos: new mp.Vector3(77.260, -622.836, 44.266) }
            ]
        }
    ]
}
let checkpoints = []
let currentCheckpoint = 0 
let backVehicleToLastCheckpointCooldown = null
mp.keys.bindEx(0x59, true, () => {
    if (mp.bindBlocker({ gungamecheck: true }) || !mp.players.local.vehicle) return
    let timeleft = Math.floor((1000 * 30 - (Date.now() - backVehicleToLastCheckpointCooldown)) / 1000) 
    if (checkpoints.length) {  
        if (backVehicleToLastCheckpointCooldown && timeleft > 0) return rpc.callBrowser(browserMenu, "nError", `Не так часто! Залишилось ${timeleft} секунд`)
        if (checkpoints[currentCheckpoint - 1] != undefined) {
            backVehicleToLastCheckpointCooldown = Date.now()
            mp.events.callRemote("server::setPlayerVehicleLastPositionOnArenaRaces", checkpoints[currentCheckpoint - 1].position.x, checkpoints[currentCheckpoint - 1].position.y, checkpoints[currentCheckpoint - 1].position.z + 1.5)
            mp.players.local.vehicle.setVelocity(0, 0, 0)
        }
    }
}, "На останню позицію у перегонах")  

mp.events.add("client::startArenaRacing", (track, dimension, type) => { 
    for(let i = 0; i < configRaceActivity[type][track].checkpoint_positions.length; i++){
        let pos = {...configRaceActivity[type][track].checkpoint_positions[i].pos}
        pos.z -= 1.25
        let destination, checkpoint
        if (type === "race") {
            checkpoint = mp.checkpoints.new(i + 1 >= configRaceActivity[type][track].checkpoint_positions.length ? 4 : 1, pos, 8, {
                color: [255, 165, 0, 100],
                visible: false,
                dimension: dimension
            });
        }
        else {
            checkpoint = mp.markers.new(i + 1 >= configRaceActivity[type][track].checkpoint_positions.length ? 5 : 6, pos, 12, {
                color: [255, 165, 0, 100],
                visible: false,
                dimension: dimension
            });
        }
 
        if(i + 1 >= configRaceActivity[type][track].checkpoint_positions.length){
            destination = configRaceActivity[type][track].checkpoint_positions[i].pos
            checkpoint.destination = new mp.Vector3(destination)
        }
        else{
            destination = configRaceActivity[type][track].checkpoint_positions[i+1].pos
            checkpoint.direction = destination        
        }
        // checkpoint.blip = mp.blips.new(1, configRaceActivity[type][track].checkpoint_positions[i].pos, {
        //     color: 81,
        //     name: "",
        //     shortRange: true,
        //     scale: 0.5,
        //     dimension: dimension
        // });
        checkpoint.owner = `arenaRace`
        if (type === "halloween") {
            let colshape = mp.colshapes.newSphere(pos.x,pos.y,pos.z, 15, dimension)
            colshape.marker = checkpoint
            checkpoint.colshape = colshape
        }
        checkpoints.push(checkpoint)
    }
    mp.game.invoke("0x7A6535691B477C48", mp.players.local.handle, 1)
    checkpoints[0].visible = true  
    mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[0].position.x, checkpoints[0].position.y, checkpoints[0].position.z));
})
mp.events.add("client::endArenaRacing", () => {
    for(var i = 0; i < checkpoints.length; i++){
        if(mp.checkpoints.exists(checkpoints[i]) || mp.markers.exists(checkpoints[i])){
            if (mp.colshapes.exists(checkpoints[i].colshape)) {
                checkpoints[i].colshape.destroy()
            }
            checkpoints[i].destroy();
            delete checkpoints[i]
        }
    }
    checkpoints = []
    currentCheckpoint = 0
    mp.game.invoke("0x7A6535691B477C48", mp.players.local.handle, 0)
})
mp.events.add("playerEnterCheckpoint", (checkpoint) => {
    if(checkpoint.owner == "arenaRace" && mp.players.local.vehicle){
        checkpoint.visible = false;
        //if(mp.blips.exists(checkpoints[currentCheckpoint].blip)) checkpoints[currentCheckpoint].blip.destroy()
        currentCheckpoint = currentCheckpoint + 1 == checkpoints.length ? currentCheckpoint : currentCheckpoint + 1
        checkpoints[currentCheckpoint].visible = currentCheckpoint == checkpoints.length ? false : true
        mp.events.call("resetNavigationMarker")
        if(checkpoint.destination){
            mp.events.callRemote("server::successfulCompletionOfArenaRace")
            mp.game.audio.playSoundFrontend(-1, "FIRST_PLACE", "HUD_MINI_GAME_SOUNDSET", true);
        }
        else {
            mp.game.audio.playSoundFrontend(-1, "CHECKPOINT_NORMAL", "HUD_MINI_GAME_SOUNDSET", true);
            mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[currentCheckpoint].position.x, checkpoints[currentCheckpoint].position.y, checkpoints[currentCheckpoint].position.z));
        }
    }
});

mp.events.add("playerEnterColshape", (colshape) => {
    if(colshape.marker && colshape.marker.owner && colshape.marker.visible && colshape.marker.owner == "arenaRace" && mp.players.local.vehicle){
        colshape.marker.visible = false;  
        //if(mp.blips.exists(checkpoints[currentCheckpoint].blip)) checkpoints[currentCheckpoint].blip.destroy()
        currentCheckpoint = currentCheckpoint + 1 == checkpoints.length ? currentCheckpoint : currentCheckpoint + 1
        checkpoints[currentCheckpoint].visible = currentCheckpoint == checkpoints.length ? false : true
        mp.events.call("resetNavigationMarker")
        if(colshape.marker.destination){
            mp.events.callRemote("server::successfulCompletionOfArenaRace")
            mp.game.audio.playSoundFrontend(-1, "FIRST_PLACE", "HUD_MINI_GAME_SOUNDSET", true);
        }
        else {
            mp.game.audio.playSoundFrontend(-1, "CHECKPOINT_NORMAL", "HUD_MINI_GAME_SOUNDSET", true);
            mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[currentCheckpoint].position.x, checkpoints[currentCheckpoint].position.y, checkpoints[currentCheckpoint].position.z));
        }

    }
});
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.game.graphics.setEntityOverlayPassEnabled(true);

const standartBatch = mp.game.graphics.createEntityOverlayBatch({
    enableDepth: true,
    deleteWhenUnused: false,
    keepNonBlurred: true,
    processAttachments: true,
    fill: { enable: false, color: 0xffffffff },
    noise: { enable: true, size: 0.5, speed: 1, intensity: 1 },
    outline: { enable: true, color: 0xffffffff, width: 2, blurRadius: 0.0, blurIntensity: 0.0 },
    wireframe: { enable: false },
});

const selectedBatch = mp.game.graphics.createEntityOverlayBatch({
    enableDepth: false,
    deleteWhenUnused: false,
    keepNonBlurred: true,
    processAttachments: true,
    fill: { enable: true, color: 0xffffff30 },
    noise: { enable: false, size: 1, speed: 1, intensity: 1 },
    outline: { enable: true, color: 0xffffffff, width: 2, blurRadius: 0.0, blurIntensity: 0.0 },
    wireframe: { enable: false },
});

const getDateTime = () => {
    return new Date().getTime();
};

const getRandomIntInRange = (min, max) => {
    return Math.floor(Math.random() * (max - min + 1) + min);
};

const getRandomItemInArray = (array) => {
    return array[getRandomIntInRange(0, array.length - 1)];
};

const ITEMS = [
    { id: 3, name: "Бронежилет", model: mp.game.joaat("prop_armour_pickup") },
    { id: 20, name: "Combat Pistol [9x19]", model: mp.game.joaat("w_pi_combatpistol") },
    { id: 24, name: "Аптечка", model: mp.game.joaat("prop_ld_health_pack") },
    { id: 30, name: "Газировка Coca-Cola", model: mp.game.joaat("prop_ecola_can") },
    { id: 31, name: "Шоколадка ROSHEN", model: mp.game.joaat("prop_choc_ego") },
    { id: 37, name: "9х19", model: mp.game.joaat("prop_ld_ammo_pack_01") },
    { id: 38, name: "12/70 Magnum buckshot", model: mp.game.joaat("prop_ld_ammo_pack_02") },
    { id: 39, name: "7.62x39", model: mp.game.joaat("prop_box_ammo07b") },
    { id: 40, name: "5.56x45", model: mp.game.joaat("prop_ld_ammo_pack_03") },
    { id: 41, name: "Бейсбольна бита", model: mp.game.joaat("w_me_bat") },
    { id: 44, name: "Пiстолет [9x19]", model: mp.game.joaat("w_pi_pistol") },
    { id: 45, name: "Бронебiйний пiстолет [9x19]", model: mp.game.joaat("w_pi_appistol") },
    { id: 46, name: "Важкий револьвер [.45 ACP]", model: mp.game.joaat("w_pi_pistol50") },
    { id: 47, name: "Мiкро-ПП [9x19]", model: mp.game.joaat("w_sb_microsmg") },
    { id: 48, name: "МП-5 [9x19]", model: mp.game.joaat("w_sb_smg") },
    { id: 49, name: "Дробовик-обрiз [12/70]", model: mp.game.joaat("w_sg_sawnoff") },
    { id: 51, name: "Гвинтiвка-буллпап [7.62x39]", model: mp.game.joaat("w_ar_bullpuprifle") },
    { id: 52, name: "Покращений карабiн [5.56x45]", model: mp.game.joaat("w_ar_specialcarbine") },
    { id: 53, name: "Полiпшена гвинтiвка [5.56x45]", model: mp.game.joaat("w_ar_advancedrifle") },
    { id: 65, name: "Пiгулки", model: mp.game.joaat("prop_stat_pack_01") },
    { id: 66, name: "Пиво Львiвське", model: mp.game.joaat("prop_beer_bottle") },
    { id: 67, name: "Вода Моршинська", model: mp.game.joaat("prop_ld_flow_bottle") },
    { id: 69, name: "Горiлка Хортиця", model: mp.game.joaat("prop_tequila_bottle") },
    { id: 70, name: "Вино TAIROVO", model: mp.game.joaat("prop_bottle_cognac") },
    { id: 75, name: "Пiца", model: mp.game.joaat("prop_food_chips") },
    { id: 76, name: "Бургер", model: mp.game.joaat("prop_cs_burger_01") },
    { id: 77, name: "Салат Цезар", model: mp.game.joaat("prop_plate_01") },
    { id: 79, name: "Ключка для гольфу", model: mp.game.joaat("prop_golf_pitcher_01") },
    { id: 80, name: "Молоток", model: mp.game.joaat("w_me_hammer") },
    { id: 102, name: "Пiстолет 50 [.45 ACP]", model: mp.game.joaat("w_pi_pistol50") },
    { id: 103, name: "Револьвер Double Action [9mm]", model: mp.game.joaat("w_pi_pistol50") },
    { id: 104, name: "Револьвер Mk.2 [.45 ACP]", model: mp.game.joaat("w_pi_pistol50") },
    { id: 107, name: "Короткоствольний пiстолет [9mm]", model: mp.game.joaat("w_pi_sns_pistol") },
    { id: 108, name: "Револьвер Navy [9mm]", model: mp.game.joaat("w_pi_pistol50") },
    { id: 109, name: "МП-5 Mk.2 [9x19]", model: mp.game.joaat("w_sb_smg") },
    { id: 110, name: "Штурмовий SMG [.45 ACP]", model: mp.game.joaat("w_sb_assaultsmg") },
    { id: 111, name: "Бойовий PDW [.45 ACP]", model: mp.game.joaat("w_sb_pdw") },
    { id: 112, name: "Пiстолет-кулемет [9x19]", model: mp.game.joaat("prop_paper_bag_small") },
    { id: 113, name: "Мiнi-SMG [9x19]", model: mp.game.joaat("prop_paper_bag_small") },
    { id: 114, name: "Помповий дробовик [12/70]", model: mp.game.joaat("w_sg_pumpshotgun") },
    { id: 116, name: "Буллпап-дробовик Mk.2 [12/70]", model: mp.game.joaat("w_sg_bullpupshotgun") },
    { id: 117, name: "Сайга [12/70]", model: mp.game.joaat("w_sg_heavyshotgun") },
    { id: 120, name: "Штурмова гвинтiвка [7.62x39]", model: mp.game.joaat("w_ar_assaultrifle") },
    { id: 122, name: "Карабiн Mk.2 [5.56x45]", model: mp.game.joaat("w_ar_carbinerifle") },
    { id: 123, name: "Особливий карабiн Mk.2 [5.56x45]", model: mp.game.joaat("w_ar_specialcarbine") },
    { id: 125, name: "Компактна гвинтiвка [7.62mm]", model: mp.game.joaat("w_sb_microsmg") },
    { id: 126, name: "Вiйськова гвинтiвка [7.62x39]", model: mp.game.joaat("w_ar_bullpuprifle") },
    { id: 134, name: "Косяк", model: mp.game.joaat("prop_drug_package_02") },
    { id: 135, name: "Амфетамiн", model: mp.game.joaat("prop_drug_package_02") },
    { id: 142, name: "Важкий пiстолет [9x19]", model: mp.game.joaat("w_pi_pistol") },
    { id: 143, name: "Штурмовий дробовик [12/70]", model: mp.game.joaat("w_sg_pumpshotgun") },
    { id: 144, name: "Пiстолет Mk.2 [9mm]", model: mp.game.joaat("w_pi_pistol") },
    { id: 145, name: "Карабiн [5.56x45]", model: mp.game.joaat("w_ar_carbinerifle") },
    { id: 155, name: ".45 ACP", model: mp.game.joaat("prop_ld_ammo_pack_01") },
    { id: 156, name: ".338 Lapua Magnum", model: mp.game.joaat("prop_ld_ammo_pack_01") },
    { id: 157, name: "Снайперська гвинтiвка [.338]", model: mp.game.joaat("w_sr_sniperrifle") },
    { id: 181, name: "Тактична гвинтiвка [5.56x45]", model: mp.game.joaat("w_sr_marksmanrifle") },
    { id: 182, name: "Важка гвинтiвка [5.56x45]", model: mp.game.joaat("w_sr_marksmanrifle") },
    { id: 183, name: "Кулемет Гусенберга [.45 ACP]", model: mp.game.joaat("w_sb_gusenberg") },
    { id: 184, name: "Precision гвинтiвка [.338]", model: mp.game.joaat("w_sr_sniperrifle") },
    { id: 185, name: "Бойовий дробовик [12/70]", model: mp.game.joaat("w_sg_pumpshotgun") }
];

class Pubg {
    static PLAYER_STATES = {
        LOBBY: "lobby",
        IN_AIRPLANE: "in_airplane",
        GAME: "game",
        NONE: "none",
    };

    constructor() {
        mp.events.add("entityStreamIn", this._entityStreamIn.bind(this));
        mp.events.add("render", this._render.bind(this));

        mp.events.add("Pubg::setZoneInstantly", this.setZoneInstantly.bind(this));
        mp.events.add("Pubg::startZoneTransition", this.startZoneTransition.bind(this));
        mp.events.add("Pubg::setNextZonePreview", this.setNextZonePreview.bind(this));

        mp.events.add("Pubg::onStartGame", this.onStartGame.bind(this));
        mp.events.add("Pubg::onLobbyJoin", this.onLobbyJoin.bind(this));
        mp.events.add("Pubg::onLobbyQuit", this.onLobbyQuit.bind(this));
        mp.events.add("Pubg::adminSetSpawnPoints", this.adminSetSpawnPoints.bind(this));

        mp.events.addDataHandler("pubgState", this.onPubgStateChange.bind(this));
        mp.events.addDataHandler("pubgItem", this.onPubgItemCreated.bind(this));

        mp.keys.bind(32, false, this._onSpacePressed.bind(this));
        mp.keys.bind(69, false, this._onEPressed.bind(this));

        this.airplane = null;
        this.state = Pubg.PLAYER_STATES.NONE;

        this.zone = null;
        this.isInZone = false;

        this.airplanePoints = {
            startPoint: null,
            endPoint: null,
        };

        this.lastExitTime = null;

        this.damageInterval = null;
        this.damageIntervalTime = 1500;

        this.targetZone = null;
        this.startZone = null;
        this.transitionDuration = 0;
        this.elapsedTime = 0;
        this.isTransitioning = false;

        this.takeItem = null;

        this.zoneBlip = null;
        this.nextZoneBlip = null;

        this.isInEvent = null;
    }

    get player() {
        return mp.players.local;
    }

    setZone(zone) {
        this.zone = zone;
        this.setZoneMapPreview(zone);
    }

    updateZoneRadius(radius) {
        this.zone.radius = radius;
    }

    updateZoneCenter(center) {
        this.zone.center = center;
    }

    setZoneMapPreview(zone) {
        if (this.zoneBlip) {
            mp.game.ui.removeBlip(this.zoneBlip);
        }

        this.zoneBlip = mp.game.ui.addBlipForRadius(zone.center.x, zone.center.y, zone.center.z, zone.radius);
        mp.game.invoke("0xDF735600A4696DAF", this.zoneBlip, 9); // SET_BLIP_SPRITE
        mp.game.invoke("0x03D7FB09E75D6B7E", this.zoneBlip, 81); // SET_BLIP_COLOUR
        mp.game.invoke("0x45FF974EEE1C8734", this.zoneBlip, 100); // SET_BLIP_ALPHA
    }

    setNextZonePreview(zone) {
        if (this.nextZoneBlip) {
            mp.game.ui.removeBlip(this.nextZoneBlip);
        }

        this.nextZoneBlip = mp.game.ui.addBlipForRadius(zone.center.x, zone.center.y, zone.center.z, zone.radius);
        mp.game.invoke("0xDF735600A4696DAF", this.nextZoneBlip, 10); // SET_BLIP_SPRITE
        mp.game.invoke("0x03D7FB09E75D6B7E", this.nextZoneBlip, 1); // SET_BLIP_COLOUR
        mp.game.invoke("0x45FF974EEE1C8734", this.nextZoneBlip, 155); // SET_BLIP_ALPHA
    }

    setZoneInstantly(zone) {
        this.setZone(zone);
    }

    onPubgItemCreated(entity, value, oldValue) {
        if (entity && entity.type === "object") {
            entity.notifyStreaming = true;
        }
    }

    onPubgStateChange(entity, value, oldValue) {
        if (entity === this.player) {
            this.setState(value);
        } else {
            this.handlePlayerState(entity, value);
        }
    }

    handlePlayerState(entity, value) {
        switch (value) {
            case Pubg.PLAYER_STATES.IN_AIRPLANE:
                entity.setAlpha(0);
                break;
            case Pubg.PLAYER_STATES.GAME:
                entity.setAlpha(255);
                break;
            default:
                break;
        }
    }

    setState(state) {
        this.state = state;
    }

    adminSetSpawnPoints(points) {
        this.points = points;
    }

    onStartGame(firstPoint, secondPoint, dimension) {
        this.airplanePoints.startPoint = firstPoint;
        this.airplanePoints.endPoint = secondPoint;

        this.player.setInvincible(false);
        this.player.setCanRagdoll(true);

        this.startAirplaneFly(firstPoint, secondPoint, dimension);
    }

    async startAirplaneFly(firstPoint, secondPoint, dimension) {
        if (this.airplane && mp.vehicles.exists(this.airplane)) {
            this.airplane.destroy();
        }

        const calculateHeading = (from, to) => {
            return Math.atan2(to.y - from.y, to.x - from.x) * (180 / Math.PI);
        };

        const heading = calculateHeading(firstPoint, secondPoint);

        this.airplane = mp.vehicles.new(mp.game.joaat("an225"), firstPoint, {
            heading: heading - 90,
            dimension: dimension,
        });
        this.airplaneDriver = mp.peds.new(mp.game.joaat("mp_m_freemode_01"), firstPoint, 0, dimension);

        await new Promise((resolve) => {
            const check = setInterval(async () => {
                if (
                    this.airplane &&
                    mp.vehicles.exists(this.airplane) &&
                    this.airplane.handle !== 0 &&
                    this.airplaneDriver &&
                    mp.peds.exists(this.airplaneDriver) &&
                    this.airplaneDriver.handle !== 0
                ) {
                    clearInterval(check);
                    resolve();

                    this.airplaneDriver.setAlpha(0, false);
                    this.airplane.setEngineOn(true, true, true);
                    this.airplane.freezePosition(true);
                    this.airplaneDriver.freezePosition(true);
                    this.airplaneDriver.setIntoVehicle(this.airplane.handle, -1);
                    this.player.setIntoVehicle(this.airplane.handle, 0);
                    this.airplane.setHeliBladesFullSpeed();
                    await mp.game.waitAsync(500);
                    this.airplaneDriver.taskVehicleDriveToCoord(this.airplane.handle, secondPoint.x, secondPoint.y, secondPoint.z, 150, 1, this.airplane.model, 16777216, 1, true);
                    this.airplane.freezePosition(false);
                    this.airplane.setForwardSpeed(150);
                    this.airplaneDriver.freezePosition(false);
                    this.player.freezePosition(false);

                    // this.airplane.setDoorOpen(4, false, false);
                }
            }, 50);
        });
    }

    onLobbyJoin() {
        this.player.setInvincible(true);
        this.player.setCanRagdoll(false);
        this.isInEvent = true;
    }

    onLobbyQuit() {
        this.onEnterZone()

        this.airplane = null;
        this.state = Pubg.PLAYER_STATES.NONE;

        this.zone = null;
        this.isInZone = false;

        this.airplanePoints = {
            startPoint: null,
            endPoint: null,
        };

        this.lastExitTime = null;

        this.damageInterval = null;
        this.damageIntervalTime = 1500;

        this.targetZone = null;
        this.startZone = null;
        this.transitionDuration = 0;
        this.elapsedTime = 0;
        this.isTransitioning = false;

        this.takeItem = null;

        this.isInEvent = null;
        this.points = null;

        if (this.nextZoneBlip) {
            mp.game.ui.removeBlip(this.nextZoneBlip);
            this.nextZoneBlip = null;
        }

        if (this.zoneBlip) {
            mp.game.ui.removeBlip(this.zoneBlip);
            this.zoneBlip = null;
        }
    }

    damagePlayerByZone() {
        mp.game.graphics.setTransitionTimecycleModifier("damage", 0.5);
        this.player.applyDamageTo(parseInt(this.zone.damage ?? 7), true);

        setTimeout(() => {
            if (!this.isInEvent) return
            mp.game.graphics.setTransitionTimecycleModifier("default", 0.5);
        }, 300);
    }

    onEnterZone() {
        mp.game.graphics.stopScreenEffect("Dont_tazeme_bro");

        if (this.damageInterval) {
            clearInterval(this.damageInterval);
            this.damageInterval = null;
        }
    }

    onExitZone() {
        if (this.state !== Pubg.PLAYER_STATES.IN_AIRPLANE) {
            mp.game.graphics.startScreenEffect("Dont_tazeme_bro", 0, true);

            if (!this.damageInterval) {
                this.damageInterval = setInterval(() => {
                    if (!this.isInEvent) return clearInterval(this.damageInterval)
                    this.damagePlayerByZone();
                }, this.damageIntervalTime);
            }
        }
    }

    exitFromAirplane() {
        mp.events.callRemote("Pubg::onExitFromAirplane");

        const currentPosition = this.player.getCoords(true);
        this.player.setCanRagdoll(false);
        this.player.clearTasksImmediately();
        this.player.setCoordsNoOffset(currentPosition.x, currentPosition.y, currentPosition.z - 10, false, false, false);
        this.player.taskParachute(true);
        this.player.setCanRagdoll(true);

        setTimeout(() => {
            if (this.airplane && mp.vehicles.exists(this.airplane)) {
                this.airplane.destroy();
            }
        }, 5000);
    }

    getDistToZoneCenter() {
        return mp.game.system.vdist(this.player.position.x, this.player.position.y, 0, this.zone.center.x, this.zone.center.y, 0);
    }

    startZoneTransition(newZone, duration) {
        this.startZone = { ...this.zone };
        this.targetZone = { center: newZone.center, radius: newZone.radius };

        this.zone.damage = newZone.damage;

        this.transitionDuration = duration;
        this.elapsedTime = 0;
        this.isTransitioning = true;
    }

    updateZoneTransition(deltaTime) {
        if (!this.isTransitioning) return;

        this.elapsedTime += deltaTime;
        const progress = Math.min(this.elapsedTime / this.transitionDuration, 1);

        const interpolate = (start, end, t) => start + (end - start) * t;

        const newCenter = {
            x: interpolate(this.startZone.center.x, this.targetZone.center.x, progress),
            y: interpolate(this.startZone.center.y, this.targetZone.center.y, progress),
            z: interpolate(this.startZone.center.z, this.targetZone.center.z, progress),
        };

        const newRadius = interpolate(this.startZone.radius, this.targetZone.radius, progress);

        this.updateZoneRadius(newRadius);
        this.updateZoneCenter(newCenter);

        if (progress >= 1) {
            this.setZoneMapPreview(this.zone);
            this.isTransitioning = false;
        }
    }

    _onSpacePressed() {
        if (this.state === Pubg.PLAYER_STATES.IN_AIRPLANE && this.isInZone) {
            const currentTime = getDateTime();
            if (this.lastExitTime === null || currentTime - this.lastExitTime >= 1000) {
                this.exitFromAirplane();
                this.lastExitTime = currentTime;
            }
        }
    }

    _onEPressed() {
        if (this.takeItem) {
            mp.events.callRemote("Pubg::onTakeItem", this.takeItem.remoteId);
        }
    }

    _drawZone(zone, color) {
        const { center, radius } = zone;
        mp.game.graphics.drawMarker(
            1,
            center.x,
            center.y,
            center.z,
            0,
            0,
            0,
            0,
            0,
            0,
            radius * 1.981,
            radius * 1.981,
            10000,
            color[0],
            color[1],
            color[2],
            color[3],
            false,
            true,
            2,
            false,
            null,
            null,
            false
        );
    }

    _entityStreamIn(entity) {
        switch (entity.type) {
            case "vehicle":
                const isLobbyAirplane = entity.getVariable("lobbyAirplane");
                if (isLobbyAirplane === true) {
                    entity.freezePosition(true);
                    entity.setInvincible(true);
                    entity.setUndriveable(true);

                    entity.setDoorOpen(0, false, false);
                    entity.setDoorsLocked(10);
                }
                break;
            case "player":
                const pubgState = entity.getVariable("pubgState");
                if (pubgState) {
                    this.handlePlayerState(entity, pubgState);
                }
                break;
            case "object":
                const pubgStateObject = entity.getVariable("pubgItem");
                if (pubgStateObject) {
                    entity.placeOnGroundProperly();
                }
                break;
        }
    }

    _calculateScreenDistance(coord1, coord2) {
        const dx = coord1.x - coord2.x;
        const dy = coord1.y - coord2.y;
        return Math.sqrt(dx * dx + dy * dy);
    }

    findClosestObject(streamedItems) {
        const screenCenter = { x: 0.5, y: 0.5 };
        let closestObject = null;
        let minDistance = Infinity;

        streamedItems.forEach((object) => {
            const { x, y, z } = object.getCoords(false);
            const screenCoords = mp.game.graphics.world3dToScreen2d(x, y, z);
            if (screenCoords) {
                const distance = this._calculateScreenDistance(screenCoords, screenCenter);
                if (distance < 0.1 && distance < minDistance) {
                    const distToPlayer = mp.game.system.vdist(this.player.position.x, this.player.position.y, this.player.position.z, x, y, z);
                    if (distToPlayer < 2) {
                        minDistance = distance;
                        closestObject = object;
                    }
                }
            }
        });

        return closestObject;
    }

    handleZone() {
        const distToZone = this.getDistToZoneCenter();
        if (distToZone < this.zone.radius) {
            if (!this.isInZone) {
                this.isInZone = true;
                this.onEnterZone();
            }
        } else {
            if (this.isInZone) {
                this.isInZone = false;
                this.onExitZone();
            }
        }

        if (this.state === Pubg.PLAYER_STATES.IN_AIRPLANE) {
            const distToEndPoint = mp.game.system.vdist(this.player.position.x, this.player.position.y, 0, this.airplanePoints.endPoint.x, this.airplanePoints.endPoint.y, 0);

            if (distToEndPoint < 350) {
                const currentTime = getDateTime();
                if (this.lastExitTime === null || currentTime - this.lastExitTime >= 1000) {
                    this.exitFromAirplane();
                    this.lastExitTime = currentTime;
                }
            }
        }
    }

    handleItems() {
        const streamedItems = mp.objects.streamed.filter((object) => object.getVariable("pubgItem") != null);
        this.takeItem = this.findClosestObject(streamedItems);

        streamedItems.forEach((object) => {
            const { x, y, z } = object.getCoords(false);

            const itemId = object.getVariable("pubgItem");
            const item = ITEMS.find((item) => item.id === itemId);

            const isClosestObject = object === this.takeItem;
            const color = object.getVariable("color");
            const [r, g, b] = color;

            mp.game.graphics.drawMarker(1, x, y, z, 0, 0, 0, 0, 0, 0, 0.04, 0.04, 0.7, r, g, b, 200, false, false, 2, false, null, null, false);
            mp.game.graphics.drawMarker(
                1,
                x,
                y,
                z,
                0,
                0,
                0,
                0,
                0,
                0,
                0.02,
                0.02,
                isClosestObject ? 2.1 : 1.2,
                r,
                g,
                b,
                220,
                isClosestObject,
                false,
                2,
                false,
                null,
                null,
                false
            );

            if (isClosestObject) {
                mp.game.graphics.drawText(`${item.name}`, [x, y, z], {
                    scale: [0.3, 0.3],
                    color: [255, 255, 255, 255],
                    font: 1,
                    outline: true,
                });
                selectedBatch.addThisFrame(object.handle);
            } else {
                standartBatch.addThisFrame(object.handle);
            }

            mp.game.graphics.drawLightWithRangeAndShadow(x, y, z + 1, r, g, b, 2, 60, 5);
        });
    }

    _render() {
        if (!this.isInEvent) return

        if (this.zone) {
            const deltaTime = mp.game.misc.getFrameTime() * 1000;

            this._drawZone(this.zone, [255, 165, 0, 100]);

            this.updateZoneTransition(deltaTime);
            this.handleZone();
        }

        this.handleItems();

        if (this.state === Pubg.PLAYER_STATES.IN_AIRPLANE) {
            mp.game.controls.disableControlAction(0, 75, true);
        }

        if (this.points) {
            this.points.forEach((point) => {
                mp.game.graphics.drawMarker(
                    1,
                    point.position.x,
                    point.position.y,
                    point.position.z,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    point.radius * 2,
                    point.radius * 2,
                    10000,
                    255,
                    165,
                    0,
                    100,
                    false,
                    false,
                    2,
                    false,
                    null,
                    null,
                    false
                );
            });
        }
    }
}

const pubg = new Pubg();

class ItemsCreator {
    constructor() {
        mp.events.add("render", this._render.bind(this));
        mp.keys.bind(69, false, this.EventKeyDownE.bind(this));
        mp.keys.bind(37, false, this.EventKeyDownLeftArrow.bind(this));
        mp.keys.bind(39, false, this.EventKeyDownRightArrow.bind(this));

        this.raycast = null;

        this.currentCircle = null;
        this.currentRadius = 3;
    }

    EventKeyDownE() {
        if (this.raycast) {
            this.currentCircle = this.raycast.position;
        }
    }

    EventKeyDownLeftArrow() {
        this.currentRadius -= 0.5;
    }

    EventKeyDownRightArrow() {
        this.currentRadius += 0.5;
    }

    getRaycastResult(distance) {
        const camera = mp.cameras.new("gameplay");
        const position = camera.getCoord();
        const direction = camera.getDirection();
        const farAway = new mp.Vector3(direction.x * distance + position.x, direction.y * distance + position.y, direction.z * distance + position.z);
        return mp.raycasting.testPointToPoint(position, farAway, null, 17);
    }

    _render() {
        this.raycast = this.getRaycastResult(9999);

        if (this.raycast) {
            const { x, y, z } = this.raycast.position;
            mp.game.graphics.drawSphere(x, y, z, 0.05, 255, 255, 255, 50);
        }

        if (this.currentCircle) {
            mp.game.graphics.drawMarker(
                1,
                this.currentCircle.x,
                this.currentCircle.y,
                this.currentCircle.z,
                0,
                0,
                0,
                0,
                0,
                0,
                this.currentRadius * 2,
                this.currentRadius * 2,
                10,
                255,
                255,
                255,
                100,
                false,
                true,
                2,
                false,
                null,
                null,
                false
            );
            mp.game.graphics.drawText(
                `Radius: ${this.currentRadius}\n Position: x: ${this.currentCircle.x.toFixed(2)} y: ${this.currentCircle.y.toFixed(2)} z: ${this.currentCircle.z.toFixed(2)}`,
                [0.5, 0.1],
                {
                    scale: [0.3, 0.3],
                    color: [255, 255, 255, 255],
                    font: 4,
                    outline: true,
                }
            );
        }
    }
}

// new ItemsCreator();

}; a; }
{let a = function scriptEntryPoint(mp) {
const { DUMMY_TYPE_ARENA } = require("gamemode/scripts/Arena/MazeBankArena/shared/DummyType");
const { waitFor } = require("gamemode/scripts/Arena/MazeBankArena/util");
const { getEntitySetForVariation, getEntitySetForLighting, getTimecycleModifierForLighting } = require("gamemode/scripts/Arena/MazeBankArena/shared/arena-util");


const ARENA_INTERIOR_HASH = mp.game.joaat("xs_x18_int_01");
const ARENA_ROOM_HASH = mp.game.joaat("Arena_Room");

const ALL_ENTITY_SETS = [
    "set_centreline_dystopian_05", "set_centreline_scifi_05", "set_centreline_wasteland_05",
    "set_crowd_a", "set_crowd_b", "set_crowd_c", "set_crowd_d",
    "set_dystopian_01", "set_dystopian_02", "set_dystopian_03", "set_dystopian_04", "set_dystopian_05",
    "set_dystopian_06", "set_dystopian_07", "set_dystopian_08", "set_dystopian_09", "set_dystopian_10",
    "set_dystopian_11", "set_dystopian_12", "set_dystopian_13", "set_dystopian_14", "set_dystopian_15",
    "set_dystopian_16", "set_dystopian_17",
    "set_lights_atlantis", "set_lights_evening", "set_lights_hell", "set_lights_midday",
    "set_lights_morning", "set_lights_night", "set_lights_saccharine", "set_lights_sandstorm",
    "set_lights_sfnight", "set_lights_storm", "set_lights_toxic",
    "set_pit_fence_closed", "set_pit_fence_demolition", "set_pit_fence_oval", "set_pit_fence_ovala",
    "set_pit_fence_ovalb", "set_pit_fence_wall", "set_wall_no_pit",
    "set_scifi_01", "set_scifi_02", "set_scifi_03", "set_scifi_04", "set_scifi_05",
    "set_scifi_06", "set_scifi_07", "set_scifi_08", "set_scifi_09", "set_scifi_10",
    "set_team_band_a", "set_team_band_b", "set_team_band_c", "set_team_band_d",
    "set_wasteland_01", "set_wasteland_02", "set_wasteland_03", "set_wasteland_04", "set_wasteland_05",
    "set_wasteland_06", "set_wasteland_07", "set_wasteland_08", "set_wasteland_09", "set_wasteland_10",
    "set_dystopian_scene", "set_scifi_scene", "set_wasteland_scene",
    "set_turrets", "set_turrets_scifi", "set_turrets_wasteland",
];

const REQUIRED_ENTITY_SETS = [
    "set_crowd_a", "set_crowd_b", "set_crowd_c", "set_crowd_d",
    "set_pit_fence_demolition"
];

function getArenaInteriorId() {
    return mp.game.interior.getAtCoordsWithTypehash(2800.0, -3800.0, 100.0, ARENA_INTERIOR_HASH);
}

function keepEntityInArena(entityHandle, interiorId) {
    mp.game.interior.forceRoomForEntity(entityHandle, interiorId, ARENA_ROOM_HASH);
    mp.game.interior.unk._0x82EBB79E258FA2B7(entityHandle, interiorId); // INTERIOR::RETAIN_ENTITY_IN_INTERIOR
}

function changeArenaStyle(variationIndex, lightingIndex, oldVariationIndex, oldLightingIndex) {
    const interiorId = getArenaInteriorId();

    // main entityset
    if (oldVariationIndex > -1) {
        mp.game.interior.deactivateEntitySet(interiorId, getEntitySetForVariation(oldVariationIndex));
    }

    mp.game.interior.activateEntitySet(interiorId, getEntitySetForVariation(variationIndex));

    // lighting entityset & timecycle modifier
    if (oldLightingIndex > -1) {
        const wasFutureShock = oldVariationIndex >= 21 && oldVariationIndex <= 30;
        mp.game.interior.deactivateEntitySet(interiorId, getEntitySetForLighting(oldLightingIndex, wasFutureShock));
    }

    const isFutureShock = variationIndex >= 21 && variationIndex <= 30;
    mp.game.interior.activateEntitySet(interiorId, getEntitySetForLighting(lightingIndex, isFutureShock));
    mp.game.graphics.setTimecycleModifier(getTimecycleModifierForLighting(lightingIndex, isFutureShock));
    mp.game.graphics.setTimecycleModifierStrength(1.0);

    // apply radar variation
    radarVariation = variationIndex;

    // apply the changes and place entities back inside
    mp.game.interior.refresh(interiorId);
    mp.players.streamed.forEach(player => keepEntityInArena(player.handle, interiorId));
    mp.vehicles.streamed.forEach(vehicle => keepEntityInArena(vehicle.handle, interiorId));
    mp.objects.streamed.forEach(object => keepEntityInArena(object.handle, interiorId));
}

function removeArenaStyle(oldVariationIndex, oldLightingIndex) {
    const interiorId = getArenaInteriorId();

    // main entityset
    if (oldVariationIndex > -1) {
        mp.game.interior.deactivateEntitySet(interiorId, getEntitySetForVariation(oldVariationIndex));
    }

    // lighting entityset & timecycle modifier
    if (oldLightingIndex > -1) {
        const wasFutureShock = oldVariationIndex >= 21 && oldVariationIndex <= 30;
        mp.game.interior.deactivateEntitySet(interiorId, getEntitySetForLighting(oldLightingIndex, wasFutureShock));
    }

    mp.game.graphics.clearTimecycleModifier()
    radarVariation = 0;

    mp.game.interior.refresh(interiorId);
}

let radarVariation = 0;

// loads the arena and applies the active arena style
async function init() {
    mp.events.add("render", renderArenaRadar);
    mp.events.add("entityStreamIn", entityStreamIn);
    mp.events.add("playerQuit", cleanUpPlayerQuit);

    mp.game.zone.setEnabled(mp.game.zone.getFromNameId("PrLog"), false);

    // load the arena IPL
    if (!mp.game.streaming.isIplActive("xs_arena_interior")) {
        mp.game.streaming.requestIpl("xs_arena_interior");
        await waitFor(() => mp.game.streaming.isIplActive("xs_arena_interior"));
    }

    // load the interior
    const interiorId = getArenaInteriorId();
    if (!mp.game.interior.isReady(interiorId)) {
        mp.game.interior.pinInMemory(interiorId);

        await waitFor(() => mp.game.interior.isReady(interiorId));

        mp.game.interior.disable(interiorId, false);
        mp.game.interior.cap(interiorId, false);
    }

    // clean up the interior
    ALL_ENTITY_SETS.forEach(entitySet => mp.game.interior.deactivateEntitySet(interiorId, entitySet));
    REQUIRED_ENTITY_SETS.forEach(entitySet => mp.game.interior.activateEntitySet(interiorId, entitySet));

    // get current style data from the arena dummy (there should be only one dummy with DUMMY_TYPE_ARENA)
    mp.dummies.forEachByType(DUMMY_TYPE_ARENA, (dummy) => {
        const styleBits = dummy.getVariable("iStyle");
        changeArenaStyle((styleBits >> 8) & 255, styleBits & 255, -1, -1);
    });

    // weapon damages
    mp.game.weapon.setDamageModifierThisFrame(mp.game.joaat("VEHICLE_WEAPON_RCTANK_ROCKET"), 20.0);

    // arena misc.
    mp.game.audio.setStaticEmitterEnabled("SE_DLC_AW_Arena_Crowd_Background_Main", true);
    // mp.game.invoke(0xAA6A6098851C396Fn, true); // PHYSICS::SET_IN_ARENA_MODE

    // let the server know the local player is ready
    mp.events.callRemote("arena::onPlayerPlayRequest");
}

// applies the new arena style
function handleArenaStyleChange(entity, newStyleBits, oldStyleBits) {
    if (entity.typeInt !== 9 /* dummy */ || entity.dummyType !== DUMMY_TYPE_ARENA) {
        return;
    }

    changeArenaStyle((newStyleBits >> 8) & 255, newStyleBits & 255, (oldStyleBits >> 8) & 255, oldStyleBits & 255);
}


//mp.events.addDataHandler("iStyle", handleArenaStyleChange);

function entityStreamIn(entity) {
    keepEntityInArena(entity.handle, getArenaInteriorId())
}

// draws the radar for the current arena
function renderArenaRadar() {
    mp.game.interior.unk._0x7ECDF98587E92DEC(1); // INTERIOR::ENABLE_STADIUM_PROBES_THIS_FRAME
    mp.game.hud.setRadarAsInteriorThisFrame(ARENA_INTERIOR_HASH, 2800.0, -3800.0, 0.0, radarVariation);
    mp.game.hud.hideMinimapExteriorMapThisFrame();
}

async function cleanUp() {
    mp.events.remove("render", renderArenaRadar);
    mp.events.remove("entityStreamIn", entityStreamIn);
    mp.events.remove("playerQuit", cleanUpPlayerQuit);

    mp.game.zone.setEnabled(mp.game.zone.getFromNameId("PrLog"), true);

    // load the arena IPL
    if (mp.game.streaming.isIplActive("xs_arena_interior")) {
        mp.game.streaming.removeIpl("xs_arena_interior");
        await waitFor(() => !mp.game.streaming.isIplActive("xs_arena_interior"));
    }

    const interiorId = getArenaInteriorId();
    if (mp.game.interior.isReady(interiorId)) {
        mp.game.interior.unpinInterior(interiorId);

        await waitFor(() => !mp.game.interior.isReady(interiorId));

        mp.game.interior.disable(interiorId, true);
        mp.game.interior.cap(interiorId, true);
    }

    // clean up the interior
    ALL_ENTITY_SETS.forEach(entitySet => mp.game.interior.activateEntitySet(interiorId, entitySet));
    REQUIRED_ENTITY_SETS.forEach(entitySet => mp.game.interior.deactivateEntitySet(interiorId, entitySet));

    // get current style data from the arena dummy (there should be only one dummy with DUMMY_TYPE_ARENA)
    mp.dummies.forEachByType(DUMMY_TYPE_ARENA, (dummy) => {
        const styleBits = dummy.getVariable("iStyle");
        removeArenaStyle((styleBits >> 8) & 255, styleBits & 255);
    });

    // weapon damages
    mp.game.weapon.setDamageModifierThisFrame(mp.game.joaat("VEHICLE_WEAPON_RCTANK_ROCKET"), 0);

    // arena misc.
    mp.game.audio.setStaticEmitterEnabled("SE_DLC_AW_Arena_Crowd_Background_Main", false);
    // mp.game.invoke(0xAA6A6098851C396Fn, false); // PHYSICS::SET_IN_ARENA_MODE
}

function cleanUpPlayerQuit(player) {
    if (player !== mp.players.local) {
        return;
    }

    cleanUp()
}

// register event handlers
mp.events.add({
    "playerReadyMazeBankArena": init,
    "playerSpawnMazeBankArena": () => keepEntityInArena(mp.players.local.handle, getArenaInteriorId()),
    "playerQuitMazeBankArena": cleanUp
});

}; a; }
{let a = function scriptEntryPoint(mp) {
const { DUMMY_TYPE_ARENA } = require("gamemode/scripts/Arena/MazeBankArena/shared/DummyType");
const { getUnixTimestamp } = require("gamemode/scripts/Arena/MazeBankArena/shared/util");
const { isBitSet } = require("gamemode/scripts/Arena/MazeBankArena/shared/bit-util");
const { callScaleformMethod, waitFor } = require("gamemode/scripts/Arena/MazeBankArena/util");
const PowerUpType = require("gamemode/scripts/Arena/MazeBankArena/shared/PowerUpType");

const HUD_INDEX_HEALTH = 0;
const HUD_INDEX_ARMOR = 1;
const HUD_INDEX_GHOST = 2;
const HUD_INDEX_JUMP = 3;
const HUD_INDEX_TIMER = 4;

let scaleformHandle = 0;
let gameStartedAt = 0;
let gameEndingAt = 0;
let lastVehicleHealth = 1000.0;
let lastRemainingTime = 0;

function getHudIndexForPowerUp(powerUp) {
    switch (powerUp) {
        case PowerUpType.POWERUP_ARMOR:
            return HUD_INDEX_ARMOR;

        case PowerUpType.POWERUP_GHOST:
            return HUD_INDEX_GHOST;

        case PowerUpType.POWERUP_JUMP:
            return HUD_INDEX_JUMP;

        default:
            return -1;
    }
}

// loads and sets up the hud scaleform
async function init() {
    mp.events.add("render", renderHud);
    mp.events.add("playerQuit", cleanUpPlayerQuit);

    scaleformHandle = mp.game.graphics.requestScaleformMovie("power_play_generic");
    await waitFor(() => mp.game.graphics.hasScaleformMovieLoaded(scaleformHandle));

    // add local player's color
    callScaleformMethod(scaleformHandle, "ADD_TEAM", 128);

    // add icons
    callScaleformMethod(scaleformHandle, "ADD_ICON", 18); // HUD_INDEX_HEALTH
    callScaleformMethod(scaleformHandle, "ADD_ICON", 2); // HUD_INDEX_ARMOR
    callScaleformMethod(scaleformHandle, "ADD_ICON", 10); // HUD_INDEX_GHOST
    callScaleformMethod(scaleformHandle, "ADD_ICON", 12); // HUD_INDEX_JUMP
    callScaleformMethod(scaleformHandle, "ADD_ICON", 22); // HUD_INDEX_TIMER

    // fill health and timer displays
    callScaleformMethod(scaleformHandle, "SET_ICON_METER", HUD_INDEX_HEALTH, 1.0);
    callScaleformMethod(scaleformHandle, "SET_ICON_TIMER", HUD_INDEX_TIMER, 1.0);

    // get current timestamps from the arena dummy (there should be only one dummy with DUMMY_TYPE_ARENA)
    mp.dummies.forEachByType(DUMMY_TYPE_ARENA, (dummy) => {
        gameStartedAt = dummy.getVariable("iGameStart");
        gameEndingAt = dummy.getVariable("iGameEnd");
    });
}

// draws the hud
function renderHud() {
    // not drawing if the local player isn't in a vehicle or is dead
    const vehicle = mp.players.local.vehicle;
    if (scaleformHandle === 0 || vehicle == null || mp.game.graphics.animpostfxIsRunning("RemixDrone")) {
        return;
    }

    // update health hud if the local player's vehicle had a health change
    const currentHealth = vehicle.getHealth();
    if (Math.abs(lastVehicleHealth - currentHealth) >= 1.0) {
        lastVehicleHealth = currentHealth;
        callScaleformMethod(scaleformHandle, "SET_ICON_METER", HUD_INDEX_HEALTH, currentHealth / 1000.0);
        callScaleformMethod(scaleformHandle, "PULSE_ICON", HUD_INDEX_HEALTH);
    }

    // update game timer hud
    const remainingTime = gameEndingAt - getUnixTimestamp();
    if (lastRemainingTime !== remainingTime) {
        lastRemainingTime = remainingTime;
        callScaleformMethod(scaleformHandle, "SET_ICON_TIMER", HUD_INDEX_TIMER, remainingTime / (gameEndingAt - gameStartedAt));
    }

    mp.game.graphics.drawScaleformMovieFullscreen(scaleformHandle, 255, 255, 255, 255, 0);
}

// applies powerup changes to the hud
function handlePowerUpChanges(entity, newPowerUpBits, oldPowerUpBits) {
    if (entity.typeInt !== 1 /* vehicle */ || entity.remoteId !== mp.players.local.getVariable("iVehicle")) {
        return;
    }

    // deactivate all icons if powerups are reset
    if (newPowerUpBits === 0) {
        callScaleformMethod(scaleformHandle, "DEACTIVATE_ALL_ICONS");
        callScaleformMethod(scaleformHandle, "ACTIVATE_ICON", HUD_INDEX_HEALTH);
        return;
    }

    // handle individual icons
    for (let i = 0; i < PowerUpType.NUM_POWERUPS; i++) {
        const hudIndex = getHudIndexForPowerUp(i);
        if (hudIndex === -1) {
            continue;
        }

        const isEnabled = isBitSet(newPowerUpBits, i);
        const wasEnabled = isBitSet(oldPowerUpBits, i);
        if (isEnabled && !wasEnabled) {
            callScaleformMethod(scaleformHandle, "PULSE_ICON", hudIndex);
        } else if (!isEnabled && wasEnabled) {
            callScaleformMethod(scaleformHandle, "DEACTIVATE_ICON", hudIndex);
        }
    }
}

// frees the resources
function cleanUp() {
    mp.events.remove("render", renderHud);
    mp.events.remove("playerQuit", cleanUpPlayerQuit);

    if (scaleformHandle === 0) {
        return;
    }

    mp.game.graphics.setScaleformMovieAsNoLongerNeeded(scaleformHandle);
    
    scaleformHandle = 0;
    gameStartedAt = 0;
    gameEndingAt = 0;
    lastVehicleHealth = 1000.0;
    lastRemainingTime = 0;
}

function cleanUpPlayerQuit(player) {
    if (player !== mp.players.local) {
        return;
    }

    cleanUp()
}

// register event handlers
mp.events.add({
    "playerReadyMazeBankArena": init,
    "playerQuitMazeBankArena": cleanUp
});

// register data change handlers
mp.events.addDataHandler("iPowerUps", handlePowerUpChanges);

}; a; }
{let a = function scriptEntryPoint(mp) {
function getUnixTimestamp() {
    return Math.floor(Date.now() / 1000);
}

function getRandomInt(min, max) {
    const minCeiled = Math.ceil(min);
    const maxFloored = Math.floor(max);
    return Math.floor(Math.random() * (maxFloored - minCeiled) + minCeiled);
}

exports = {
    getUnixTimestamp,
    getRandomInt
};
}; a; }
{let a = function scriptEntryPoint(mp) {
const { DUMMY_TYPE_POWERUP } = require("gamemode/scripts/Arena/MazeBankArena/shared/DummyType");
const { getModelForPowerUp, getBlipSpriteForPowerUp } = require("gamemode/scripts/Arena/MazeBankArena/shared/powerup-util");

const POWERUP_ROTATION_SPEED = 90.0;
const POWERUP_LIGHT_RED = 93;
const POWERUP_LIGHT_GREEN = 182;
const POWERUP_LIGHT_BLUE = 229;
const POWERUP_LIGHT_RANGE = 3.0;
const POWERUP_LIGHT_INTENSITY = 2.0;
const POWERUP_COLLECTION_RANGE = 2.0;

function createEntitiesForPowerUpDummy(dummy) {
    const type = dummy.getVariable("iType");
    const position = dummy.getVariable("vPosition");
    dummy._collision = mp.colshapes.newSphere(position.x, position.y, position.z, POWERUP_COLLECTION_RANGE, dummy.dimension);
    dummy._collision._dummyId = dummy.remoteId;

    dummy._prop = mp.objects.new(getModelForPowerUp(type), position,
    {
        dimension: dummy.dimension
    });
    if (dummy._prop) {
        dummy._prop._isRotating = true;
        dummy._prop.notifyStreaming = true;
    }

    dummy._blip = mp.blips.new(getBlipSpriteForPowerUp(type), position, {
        shortRange: true,
        dimension: dummy.dimension
    });
}

// creates entities (colshape, object and blip) for existing powerups
function init() {
    mp.events.add("render", rotatePowerUps);
    mp.events.add("playerQuit", cleanUpPlayerQuit);
    mp.dummies.forEachByType(DUMMY_TYPE_POWERUP, createEntitiesForPowerUpDummy);
}

// rotates powerup objects and draws a light at their location for visibility
function rotatePowerUps() {
    mp.objects.streamed.forEach((obj) => {
        if (!obj) return
        if (!obj._isRotating) {
            return;
        }

        const heading = obj.getHeading();
        obj.setHeading(heading + (POWERUP_ROTATION_SPEED * mp.game.system.timestep()));

        const position = obj.position;
        mp.game.graphics.drawLightWithRange(position.x, position.y, position.z, POWERUP_LIGHT_RED, POWERUP_LIGHT_BLUE, POWERUP_LIGHT_GREEN, POWERUP_LIGHT_RANGE, POWERUP_LIGHT_INTENSITY);
    });
}

// creates entities for new powerups
function handlePowerUpCreation(dummyType, dummy) {
    if (dummyType !== DUMMY_TYPE_POWERUP) {
        return;
    }

    createEntitiesForPowerUpDummy(dummy);
}

// reports powerup collections to the server
function handlePowerUpCollection(colshape) {
    const dummy = mp.dummies.atRemoteId(colshape._dummyId);
    if (dummy == null || dummy.dummyType !== DUMMY_TYPE_POWERUP || mp.players.local.isDead()) {
        return;
    }

    mp.events.callRemote("arena::collect_powerup", dummy.remoteId);
}

// plays a sound and screen effect upon collecting a powerup
function handlePowerUpFlash() {
    mp.game.audio.playSoundFrontend(-1, "PICK_UP", "HUD_FRONTEND_DEFAULT_SOUNDSET", true);
    mp.game.graphics.animpostfxPlay("MP_SmugglerCheckpoint", 0, false);
}

// removes entities of removed powerups
function handlePowerUpRemoval(dummyType, dummy) {
    if (dummyType !== DUMMY_TYPE_POWERUP) {
        return;
    }

    if (dummy._collision) {
        dummy._collision.destroy();
        dummy._collision = null;
    }

    if (dummy._prop) {
        dummy._prop.destroy();
        dummy._prop = null;
    }

    if (dummy._blip) {
        dummy._blip.destroy();
        dummy._blip = null;
    }
}

function cleanUp() {
    mp.events.remove("render", rotatePowerUps);
    mp.events.remove("playerQuit", cleanUpPlayerQuit);
}

function cleanUpPlayerQuit(player) {
    if (player !== mp.players.local) {
        return;
    }

    cleanUp()
}

// register event handlers
mp.events.add({
    "playerReadyMazeBankArena": init,
    "playerQuitMazeBankArena": cleanUp,
    "playerEnterColshape": handlePowerUpCollection,
    "dummyEntityCreated": handlePowerUpCreation,
    "dummyEntityDestroyed": handlePowerUpRemoval,
    "arena::powerup_flash": handlePowerUpFlash
});

}; a; }
{let a = function scriptEntryPoint(mp) {
const PowerUpType = require("gamemode/scripts/Arena/MazeBankArena/shared/PowerUpType");

function getModelForPowerUp(type) {
    switch (type) {
        case PowerUpType.POWERUP_ARMOR:
            return "prop_ic_arm_wh";

        case PowerUpType.POWERUP_GHOST:
            return "prop_ic_ghost_wh";

        case PowerUpType.POWERUP_JUMP:
            return "prop_ic_jump_wh";

        case PowerUpType.POWERUP_REPAIR:
            return "prop_ic_repair_wh";

        default:
            return "prop_ex_random_wh";
    }
}

function getBlipSpriteForPowerUp(type) {
    switch (type) {
        case PowerUpType.POWERUP_ARMOR:
            return 487;

        case PowerUpType.POWERUP_GHOST:
            return 484;

        case PowerUpType.POWERUP_JUMP:
            return 515;

        case PowerUpType.POWERUP_REPAIR:
            return 544;

        default:
            return 0;
    }
}

exports = {
    getModelForPowerUp,
    getBlipSpriteForPowerUp
};

}; a; }
{let a = function scriptEntryPoint(mp) {
const { waitFor, callScaleformMethod } = require("gamemode/scripts/Arena/MazeBankArena/util");

const NUM_SCOREBOARD_PLAYERS = 10;

let scaleformHandle = 0;
let isScoreboardOn = false;

// loads and sets up the scoreboard scaleform
async function init() {
    mp.events.add("render", renderScoreboard);
    mp.events.add("playerQuit", cleanUpPlayerQuit);

    scaleformHandle = mp.game.graphics.requestScaleformMovie("sc_leaderboard");
    await waitFor(() => mp.game.graphics.hasScaleformMovieLoaded(scaleformHandle));

    // apply default scoreboard setup
    callScaleformMethod(scaleformHandle, "SET_DISPLAY_TYPE", 1);
    callScaleformMethod(scaleformHandle, "SET_TITLE", "PLAYER", "KILLS", "DEATHS");
}

// draws the scoreboard
function renderScoreboard() {
    if (scaleformHandle === 0) {
        return;
    }

    const isOnNow = mp.game.pad.isControlPressed(2, 211);
    if (isScoreboardOn !== isOnNow) {
        isScoreboardOn = isOnNow;

        // play a little sound effect
        mp.game.audio.playSoundFrontend(-1, isOnNow ? "LEADER_BOARD" : "BACK", "HUD_FRONTEND_DEFAULT_SOUNDSET", true);

        // update values if the scoreboard became visible
        if (isOnNow) {
            mp.events.call("displayChat", false)
	        mp.events.call("hudControl.enable", false)

            let slotIndex = 0;
            callScaleformMethod(scaleformHandle, "CLEAR_ALL_SLOTS");

            // header for local player
            callScaleformMethod(scaleformHandle, "SET_SLOT", slotIndex++, 16, "YOUR STATS");

            // stats of local player
            callScaleformMethod(scaleformHandle, "SET_SLOT", slotIndex++, 1, "", mp.players.local.name, "", mp.players.local.getVariable("iKills"), mp.players.local.getVariable("iDeaths"));

            // header for top players
            callScaleformMethod(scaleformHandle, "SET_SLOT", slotIndex++, 32, "TOP PLAYERS");

            // stats of top players
            const topPlayers = mp.players.toArray().filter(p => p.hasVariable("iKills") && p.getVariable("iKills") != null).sort((a, b) => b.getVariable("iKills") - a.getVariable("iKills")).slice(0, NUM_SCOREBOARD_PLAYERS);
            topPlayers.forEach((player, place) => callScaleformMethod(scaleformHandle, "SET_SLOT", slotIndex++, 1, place + 1, player.name, "", player.getVariable("iKills") || 0, player.getVariable("iDeaths") || 0));
        }
        else {
            mp.events.call("displayChat", true)
	        mp.events.call("hudControl.enable", true)
        }
    }

    if (isScoreboardOn) {
        mp.game.graphics.drawScaleformMovieFullscreen(scaleformHandle, 255, 255, 255, 255, 0);
    }
}

function cleanUpPlayerQuit(player) {
    if (player !== mp.players.local) {
        return;
    }

    cleanUp()
}

// frees the resources
function cleanUp() {
    mp.events.remove("render", renderScoreboard);
    mp.events.remove("playerQuit", cleanUpPlayerQuit);

    if (scaleformHandle === 0) {
        return;
    }

    mp.game.graphics.setScaleformMovieAsNoLongerNeeded(scaleformHandle);
    scaleformHandle = 0;
}

// register event handlers
mp.events.add({
    "playerReadyMazeBankArena": init,
    "playerQuitMazeBankArena": cleanUp
});

}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("showVehicleSystem", (data) => {
    if (data) mp.interfaceActive = "vehicleSystem"
    else mp.interfaceActive = false
    browserMenu.call(`carSystem`, `show`, data)
})

}; a; }
{let a = function scriptEntryPoint(mp) {
function processCar(remoteId) {
    const vehicle = mp.vehicles.atRemoteId(remoteId)
    if (isEntityExists(vehicle)) {
        let maxSpeed = (mp.game.vehicle.getVehicleModelMaxSpeed(vehicle.model) * 3.6).toFixed(0)
        let angle = vehicle.getMod(11) + 1
        let suspension = vehicle.getMod(15) + 1
        let brakes = vehicle.getMod(12) + 1
        let transmission = vehicle.getMod(13) + 1

        return { maxSpeed, angle, suspension, brakes, transmission }
    }
    return null
}

function processLocation(position) {
    let street = mp.game.ui.getStreetNameFromHashKey(mp.game.pathfind.getStreetNameAtCoord(position.x, position.y, position.z, 0, 0)["streetName"])
    return street
}

rpc.register("getMarketCarData", (remoteId) => processCar(remoteId))
rpc.register("getMarketLocation", (position) => processLocation(position))

let fetchDataFromServer = false
let fetchDataFromServerUrl = false

mp.events.add("marketSetFetch", (toggle, url) => {
    fetchDataFromServer = toggle
    fetchDataFromServerUrl = url
})

mp.events.add("showMarket", (data, showLastCar, isDarknet) => {
    if (mp.clientStorage["level"] < 5) return rpc.callBrowser(browserMenu, "nError", `Маркетплейс доступний з 5-го рівня!`)
    if (isDarknet && mp.clientStorage["faction"] == 4) return rpc.callBrowser(browserMenu, "nError", `Недоступно працівнику NG.`)
    if (data) {
        mp.interfaceActive = "market"
        if (!fetchDataFromServer) mp.events.callRemote("setMarket")
        mp.events.call("client::setPhoneStatus", false)
        browserMenu.call(`market`, `show`, true, showLastCar, isDarknet)
        if (fetchDataFromServer) browserMenu.call(`market`, `getData`, fetchDataFromServerUrl)
    }
    else {
        mp.interfaceActive = false
        browserMenu.call(`market`, `show`, null)
    }
})

mp.events.add("updateMarket", (newTab) => {
    if (mp.interfaceActive && mp.interfaceActive == "market") mp.events.callRemote("setMarket", newTab)
})

mp.events.add("updateMarketParam", (data) => {
    if (mp.interfaceActive && mp.interfaceActive == "market") browserMenu.call(`market`, `updateMarketParam`, data)
})

mp.events.add("setMarket", (data) => {
    if (data && mp.interfaceActive && mp.interfaceActive == "market") browserMenu.call(`market`, `updateMarketData`, data)
})

mp.events.add("setMarketUserData", (data, newTab) => {
    if (data && mp.interfaceActive && mp.interfaceActive == "market") {
        if (newTab) browserMenu.call(`market`, `updateMarketUserData`, data, newTab)
        else browserMenu.call(`market`, `updateMarketUserData`, data)
    }
})

mp.events.add("updateStaticMarketItems", () => {
    browserMenu.call(`market`, `getStaticItems`)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
const compass = { cardinal: {}, intercardinal: {} };

// Configuration. Please be careful when editing. It does not check for errors.
compass.position = { x: 0.5, y: 0.02, centered: true };
compass.width = 0.25;
compass.fov = 180;
compass.followGameplayCam = true;

compass.ticksBetweenCardinals = 9.0;
compass.tickColour = {
    r: 255, g: 255, b: 255, a: 255,
};
compass.tickSize = { w: 0.001, h: 0.003 };

compass.cardinal.textSize = 0.25;
compass.cardinal.textOffset = 0.015;
compass.cardinal.textColour = [255, 255, 255, 185];

compass.cardinal.tickShow = true;
compass.cardinal.tickSize = { w: 0.001, h: 0.012 };
compass.cardinal.tickColour = {
    r: 255, g: 255, b: 255, a: 255,
};

compass.intercardinal.show = false;
compass.intercardinal.textShow = true;
compass.intercardinal.textSize = 0.01;
compass.intercardinal.textOffset = 0.015;
compass.intercardinal.textColour = [255, 255, 255, 185];

compass.intercardinal.tickShow = true;
compass.intercardinal.tickSize = { w: 0.001, h: 0.006 };
compass.intercardinal.tickColour = {
    r: 255, g: 255, b: 255, a: 255,
};

let bg = {};
bg.x = 0.125;
bg.width = 0.26;
bg.height = 0.025;
bg.color = {
    r: 0, g: 0, b: 0, a: 100,
};
// End of configuration

function degreesToIntercardinalDirection(dgr) {
    dgr %= 360.0;

    if ((dgr >= 0.0 && dgr < 22.5) || dgr >= 337.5) return 'N ';
    if (dgr >= 22.5 && dgr < 67.5) return 'NE ';
    if (dgr >= 67.5 && dgr < 112.5) return 'E ';
    if (dgr >= 157.5 && dgr < 202.5) return 'S ';
    if (dgr >= 112.5 && dgr < 157.5) return 'SE ';
    if ((dgr >= 202.5 && dgr < 247.5) || (dgr > -112.5 && dgr <= -65.7)) return 'SW ';
    if ((dgr >= 247.5 && dgr <= 292.5) || (dgr > -65.7 && dgr <= -22.5)) return 'W ';
    if ((dgr >= 292.5 && dgr < 337.5) || (dgr > -22.5 && dgr <= 0)) return 'NW ';
}

if (compass.position.centered) {
    compass.position.x = compass.position.x - compass.width / 2;
}

let authorized = false

mp.events.add("authCharacter.success", () => authorized = true)

mp.compassDisabled = false

mp.events.add('render', () => {
    if (!authorized) return
    if (!mp.settings.compass || mp.compassDisabled) return

    const pxDegree = compass.width / compass.fov;
    let playerHeadingDegrees = 0;
    if (compass.followGameplayCam) {
        const camRot = mp.cameras.new('gameplay').getRot(2);
        playerHeadingDegrees = 360.0 - ((camRot.z + 360.0) % 360.0);
    } else {
        playerHeadingDegrees = 360.0 - mp.players.local.getHeading();
    }
    let tickDegree = playerHeadingDegrees - compass.fov / 2;
    const tickDegreeRemainder = compass.ticksBetweenCardinals - (tickDegree % compass.ticksBetweenCardinals);
    let tickPosition = compass.position.x + tickDegreeRemainder * pxDegree;

    tickDegree += tickDegreeRemainder;
    mp.game.graphics.drawRect(compass.position.x + bg.x, compass.position.y, bg.width, bg.height, bg.color.r, bg.color.g, bg.color.b, bg.color.a);

    while (tickPosition < compass.position.x + compass.width) {
        if ((tickDegree % 90.0) === 0) {
            // Draw cardinal
            if (compass.cardinal.tickShow) {
                mp.game.graphics.drawRect(
                    tickPosition, compass.position.y,
                    compass.cardinal.tickSize.w, compass.cardinal.tickSize.h,
                    compass.cardinal.tickColour.r, compass.cardinal.tickColour.g, compass.cardinal.tickColour.b, compass.cardinal.tickColour.a,
                );
            }
            mp.game.graphics.drawText(degreesToIntercardinalDirection(tickDegree), [tickPosition, compass.position.y + compass.cardinal.textOffset], {
                font: 2,
                color: compass.cardinal.textColour,
                scale: compass.cardinal.textSize,
                outline: true,
            });
        } else if ((tickDegree % 45.0) === 0 || compass.intercardinal.show) {
            // Draw intercardinal
            if (compass.intercardinal.tickShow) {
                mp.game.graphics.drawRect(
                    tickPosition, compass.position.y,
                    compass.intercardinal.tickSize.w, compass.intercardinal.tickSize.h,
                    compass.intercardinal.tickColour.r, compass.intercardinal.tickColour.g, compass.intercardinal.tickColour.b, compass.intercardinal.tickColour.a,
                );
            }

            if (compass.intercardinal.textShow) {
                mp.game.graphics.drawText(degreesToIntercardinalDirection(tickDegree), [tickPosition, compass.position.y + compass.intercardinal.textOffset], {
                    font: 2,
                    color: compass.intercardinal.textColour,
                    scale: [0.3, 0.3],
                    outline: true,
                });
            }
        } else {
            mp.game.graphics.drawRect(tickPosition, compass.position.y, compass.tickSize.w, compass.tickSize.h, compass.tickColour.r, compass.tickColour.g, compass.tickColour.b, compass.tickColour.a);
        }
        // Advance to the next tick
        tickDegree += compass.ticksBetweenCardinals;
        tickPosition += pxDegree * compass.ticksBetweenCardinals;
    }

    mp.game.graphics.drawText(`${parseInt(playerHeadingDegrees)}`, [compass.position.x + bg.x, compass.position.y], {
        font: 2,
        color: [255, 255, 255, 255],
        scale: [0.5, 0.5],
        outline: true,
    });
});
}; a; }
{let a = function scriptEntryPoint(mp) {
let fov_max = 70.0
let fov_min = 5.0 // max zoom level (smaller fov is more zoom)
let zoomspeed = 10.0 // camera zoom speed
let speed_lr = 8.0 // speed by which the camera pans left-right
let speed_ud = 8.0 // speed by which the camera pans up-down

let fov = (fov_max + fov_min) * 0.5

let cam = null;
let new_z = 0

const ScaleForm = require('./gamemode/scripts/ScaleformMessages/Binoculars.js');
const myScaleForm = new ScaleForm('BINOCULARS');
myScaleForm.callFunction("SET_CAM_LOGO", 0);
const lPed = mp.players.local;
mp.binocularActive = false

mp.events.add({
    "toggleBinocular": async () => {
        if (!mp.binocularActive) {
            mp.events.callRemote("binocularAnim")
            await sleep(500)
            mp.events.call("displayChat", false)
            mp.events.call("hudControl.enable", false)
            mp.events.call("displayRadar", false)
            mp.binocularActive = !mp.binocularActive
            mp.players.local.setAlpha(0)
            mp.events.add("render", runBinocular);
            mp.events.callRemote("executeBattlePassDailyTask", JSON.stringify({ progress: 1, task: 113 })) 
        }
        else closeBinocular()
    },
    "binoculars.forceClose": () => {
        if (mp.binocularActive) closeBinocular(true)
    },
});

var closeBinocular = async function (forceClose) {
    mp.events.callRemote("cancelAnimation")
    mp.events.call("fadeOut", 500)
    await sleep(500)
    mp.binocularActive = false
    mp.events.call("displayChat", true)
    mp.events.call("hudControl.enable", true)
    mp.events.call("displayRadar", true)
    mp.players.local.setAlpha(255)
    mp.events.remove("render", runBinocular);
    if (cam) {
        if (forceClose) {
            setTimeout(() => {
                cam.destroy();
                cam = null;
                mp.game.cam.renderScriptCams(false, false, 0, true, false);
                mp.events.call("fadeIn", 500)
            }, 500); 
        }
        else {
            cam.destroy();
            cam = null;
            mp.game.cam.renderScriptCams(false, false, 0, true, false);
            lPed.setHeading(new_z)
            mp.events.call("fadeIn", 500)
        }
    }
}


var runBinocular = async function () {
    if (mp.binocularActive) {
        if (!lPed.isSittingInAnyVehicle(false)) {
            if (!cam) {
                cam = mp.cameras.new("DEFAULT_SCRIPTED_FLY_CAMERA", lPed.position, new mp.Vector3(0, 0, lPed.getHeading()), fov);
                cam.attachTo(lPed.handle, 0.0, 0.0, 1.0, true)
                // cam.setRot(fov);
                mp.game.cam.renderScriptCams(true, false, 0, true, false);
            }

            if (!mp.gui.cursor.visible) {
                let zoomvalue = (1.0 / (fov_max - fov_min)) * (fov - fov_min)
                checkInputRotation(cam, zoomvalue)
                handleZoom(cam)
            }
    
            myScaleForm.render2D();
        }
    }
}

var checkInputRotation = function (cam, zoomvalue) {
    let rightAxisX = mp.game.controls.getDisabledControlNormal(0, 220)
    let rightAxisY = mp.game.controls.getDisabledControlNormal(0, 221)
    let rotation = cam.getRot(2);
    if (rightAxisX != 0.0 || rightAxisY != 0.0) {
        new_z = rotation.z + rightAxisX * -1.0 * (speed_ud) * (zoomvalue + 0.1)
        new_x = Math.max(Math.min(20.0, rotation.x + rightAxisY * -1.0 * (speed_lr) * (zoomvalue + 0.1)), -89.5)
        cam.setRot(new_x, 0.0, new_z, 2);
    }
}

var handleZoom = function (cam) {
    const controls = mp.game.controls;
    if (!lPed.isSittingInAnyVehicle()) {

        if (controls.isControlJustPressed(0, 241)) {
            fov = Math.max(fov - zoomspeed, fov_min)
        }

        if (controls.isControlJustPressed(0, 242)) {
            fov = Math.min(fov + zoomspeed, fov_max)
        }

        let current_fov = cam.getFov();
        if (Math.abs(fov - current_fov) < 0.1) {
            fov = current_fov
        }
        cam.setFov(current_fov + (fov - current_fov) * 0.05);
    } else {
        if (controls.isControlJustPressed(0, 17)) {
            fov = Math.max(fov - zoomspeed, fov_min)
        }

        if (controls.isControlJustPressed(0, 16)) {
            fov = Math.min(fov + zoomspeed, fov_max)
        }

        let current_fov = cam.getFov(cam);
        if (Math.abs(fov - current_fov) < 0.1) {
            fov = current_fov
        }
        cam.setFov(current_fov + (fov - current_fov) * 0.05);
    }
}

}; a; }
{let a = function scriptEntryPoint(mp) {
const scale = [3, 5.5, 1.5]

function dirGenerator(theHeading) {
    if (typeof (theHeading) !== "undefined") {
        theHeading = theHeading / 180 * Math.PI + .5 * Math.PI;
        let dirX = -1.5 * Math.cos(theHeading);
        let dirY = -1.5 * Math.sin(theHeading);
        return [dirX, dirY];
    } else {
        return [0, 0];
    }
}

let refuelPoints = []

mp.events.add("createRefuelPoints", (positions) => {
    positions.forEach((biz, id) => {
        biz.forEach((pos, idx) => {
            pos.position.z -= 1
            refuelPoints.push({ ...pos, id, idx, dir: dirGenerator(pos.heading), color: [255, 165, 0, 125], drawColor: [0, 0, 0, 0] })
        })
    })
});

let currentPosition = false

mp.events.add("render", () => {
    if (!mp.players.local.vehicle) {
        if (currentPosition) currentPosition = false
        return
    }

    refuelPoints.forEach((pos) => {
        if (vdist(pos.position, mp.players.local.position) < 15) {
            let dist = vdist(pos.position, mp.players.local.vehicle.position)
            let rotv = mp.players.local.vehicle.getHeading()
            let rotz = pos.heading - rotv

            if (dist < scale[0]) {
                pos.color = [255, 0, 0, 125]

                if (rotz > -5 && rotz < 5) {
                    pos.color = [4, 36, 217, 125]

                    if (dist < 1.50 && mp.players.local.vehicle.getSpeed() < 1) {
                        pos.color = [0, 255, 0, 125]
                        if (currentPosition != pos) {
                            mp.events.call("promptSecondary.show", "Натисни <span>E</span> для взаємодії")
                            currentPosition = pos
                        }
                    } else if (currentPosition == pos) {
                        currentPosition = false
                        mp.events.callRemote("leaveRefuelPoint")
                        mp.events.call("promptSecondary.hide")
                    }
                } else if (currentPosition == pos) {
                    currentPosition = false
                    mp.events.callRemote("leaveRefuelPoint")
                    mp.events.call("promptSecondary.hide")
                }
            }
            else {
                pos.color = [255, 165, 0, 125]
                if (currentPosition == pos) {
                    currentPosition = false
                    mp.events.callRemote("leaveRefuelPoint")
                    mp.events.call("promptSecondary.hide")
                }
            }

            for (let i = 0; i < 4; i++) {
                pos.drawColor[i] += .03 * (pos.color[i] - pos.drawColor[i]);
            }

            mp.game.graphics.drawMarker(
                43,
                pos.position.x, pos.position.y, pos.position.z - 0.8,
                0, 0, 0,
                0, 0, pos.heading,
                scale[0], scale[1], scale[2],
                parseInt(pos.drawColor[0]), parseInt(pos.drawColor[1]), parseInt(pos.drawColor[2]), parseInt(pos.drawColor[3]),
                false, false, 2,
                false, null, null, false,
            )

            mp.game.graphics.drawMarker(
                22,
                pos.position.x, pos.position.y, pos.position.z + 0.1,
                pos.dir[0], pos.dir[1], 0,
                270, 0, 0,
                1, 1, 1,
                parseInt(pos.drawColor[0]), parseInt(pos.drawColor[1]), parseInt(pos.drawColor[2]), parseInt(pos.drawColor[3]),
                false, false, 2,
                false, null, null, false,
            )
        } else if (currentPosition == pos) {
            currentPosition = false
            mp.events.callRemote("leaveRefuelPoint")
            mp.events.call("promptSecondary.hide")
        }
    })
})

mp.keys.bindEx(0x45, false, () => {
	if (!currentPosition) return
    mp.events.callRemote("tryToRefuelVehicle", currentPosition.idx, currentPosition.id)
}, "Клавіша дії");

mp.events.add("openRefuel", (data) => {
    if (data) {
        if(mp.bindBlocker()) return
        mp.interfaceActive = "refuel"
    }
    else mp.interfaceActive = false
    browserMenu.call(`refuel`, `show`, data)
})

mp.events.add("updateRefuel", (data, name) => {
    if (mp.interfaceActive && mp.interfaceActive == "refuel") {
        if (name) browserMenu.call(`refuel`, `update`, data, name)
        else browserMenu.call(`refuel`, `update`, data)
    }
})
}; a; }
{let a = function scriptEntryPoint(mp) {
// Original source code: https://rage.mp/forums/topic/1054-class-for-working-with-scaleforms/

class Scalefrom {
    constructor(scaleformStr) {
        this._handle = mp.game.graphics.requestScaleformMovie(scaleformStr);
        this.queueCallFunction = new Map();
    }

    get isLoaded() {
        return !!mp.game.graphics.hasScaleformMovieLoaded(this._handle);
    }

    get isValid() {
        return this._handle !== 0;
    }

    get handle() {
        return this._handle;
    }

    callFunction(strFunction, ...args) {
        if (this.isLoaded && this.isValid) {
            const graphics = mp.game.graphics;
            graphics.pushScaleformMovieFunction(this._handle, strFunction);
            args.forEach(arg => {
                switch (typeof arg) {
                    case 'string': {
                        graphics.pushScaleformMovieFunctionParameterString(arg);
                        break;
                    }
                    case 'boolean': {
                        graphics.pushScaleformMovieFunctionParameterBool(arg);
                        break;
                    }
                    case 'number': {
                        if (Number(arg) === arg && arg % 1 !== 0) {
                            graphics.pushScaleformMovieFunctionParameterFloat(arg);
                        } else {
                            graphics.pushScaleformMovieFunctionParameterInt(arg);
                        }
                    }
                }
            });
            graphics.popScaleformMovieFunctionVoid();
        } else {
            this.queueCallFunction.set(strFunction, args);
        }
    }

    onUpdate() {
        if (this.isLoaded && this.isValid) {
            this.queueCallFunction.forEach((args, strFunction) => {
                this.callFunction(strFunction, ...args);
                this.queueCallFunction.delete(strFunction);
            });
        }
    }

    render2D(x, y, width, height) {
        this.onUpdate();
        if (this.isLoaded && this.isValid) {
            const graphics = mp.game.graphics;
            if (typeof x !== 'undefined' && typeof y !== 'undefined' && typeof width !== 'undefined' && typeof height !== 'undefined') {
                const activeResolution = graphics.getScreenActiveResolution(0, 0);

                graphics.drawScaleformMovie(this._handle, x, y, width, height, 255, 255, 255, 255, 0);
            } else {
                graphics.drawScaleformMovieFullscreen(this._handle, 255, 255, 255, 255, false);
            }
        }
    }

    render3D(position, rotation, scale) {
        this.onUpdate();
        if (this.isLoaded && this.isValid) {
            mp.game.graphics.drawScaleformMovie3dNonAdditive(this._handle, position.x, position.y, position.z, rotation.x, rotation.y, rotation.z, 2, 2, 1, scale.x, scale.y, scale.z, 2);
        }
    }

    render3DAdditive(position, rotation, scale) {
        this.onUpdate();
        if (this.isLoaded && this.isValid) {
            mp.game.graphics.drawScaleformMovie3d(this._handle, position.x, position.y, position.z, rotation.x, rotation.y, rotation.z, 2, 2, 1, scale.x, scale.y, scale.z, 2);
        }
    }
}

exports = Scalefrom;
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("showVehicleRent", (data, playerData, isParking) => {
    if (data) {
        mp.interfaceActive = "vehicleRent"
        if (playerData) playerData.maxSpeed = playerData.maxSpeed ? playerData.maxSpeed : ((mp.game.vehicle.getVehicleModelMaxSpeed(mp.game.joaat(playerData.model)) * 3.6).toFixed(0)) 
        else data.forEach((veh) => veh.maxSpeed = veh.maxSpeed ? veh.maxSpeed : ((mp.game.vehicle.getVehicleModelMaxSpeed(mp.game.joaat(veh.model)) * 3.6).toFixed(0)))
    }
    else mp.interfaceActive = false
    browserMenu.call(`vehicleRent`, `set`, data, playerData, isParking)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("toggleRadio", () => {
    if (mp.clientStorage["level"] < 5) return rpc.callBrowser(browserMenu, "nWarning", `Рація доступна з 5-го рівня!`)
    browserMenu.call(`radio`, `toggle`);
})

mp.events.add("radio.forceClose", () => {
    browserMenu.call(`radio`, `toggle`, true);
})

mp.events.add("radio.removeToChannel", () => {
    browserMenu.call(`radio`, `removeToChannel`);
})

mp.events.add("radio.setActive", (active) => {
    if (active) mp.interfaceActive = "radio"
    else mp.interfaceActive = false
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("showBattlePass", (data) => { 
    if (data) mp.interfaceActive = "battlePass"
    else mp.interfaceActive = false
    browserMenu.call(`battlePass`, `set`, data)
})

mp.events.add("updateBattlePassData", () => { 
    if (mp.interfaceActive && mp.interfaceActive == "battlePass") browserMenu.call(`battlepass`, `getBattlePassData`)
})

mp.events.add("updateBattlePassDailyTasks", () => { 
    if (mp.interfaceActive && mp.interfaceActive == "battlePass") browserMenu.call(`battlepass`, `getBattlePassDailyTasks`)
})

mp.events.add("updateBattlePassCases", () => { 
    browserMenu.call(`battlepass`, `getBattlePassCases`)
})

mp.events.add("updateBattlePassRatingParams", () => { 
    browserMenu.call(`battlepass`, `getBattlePassRatingParams`)
})

mp.events.add("updateBattlePassShopList", () => { 
    browserMenu.call(`battlepass`, `getBattlePassShopList`)
})

mp.events.add("updateBattlePassGetRewardModalData", () => { 
    browserMenu.call(`battlepass`, `setGetRewardModalData`, null)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.game.blackout = {
    _enabled: false,

    get enabled() {
        return this._enabled;
    },

    set enabled(newState) {
        this._enabled = newState;
        for (let i = 0; i <= 16; i++) mp.game.graphics.setLightsState(i, newState);
    }
};

mp.events.add("SetBlackoutState", (newState) => {
    mp.game.blackout.enabled = newState;
});
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("showNumberplate", (data) => {
    if (data) mp.interfaceActive = "numberplate"
    else mp.interfaceActive = false
    browserMenu.call(`numberplate`, `set`, data)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
function smoothstep(start, end, t) {
    t = Math.max(0, Math.min(1, t));
    t = t * t * (3 - 2 * t);
    return start + (end - start) * t;
}

class AmmoDisplay {
    maxAlpha = 200;

    constructor() {
        mp.events.add("render", this._render.bind(this));

        this.timeCounter = 0;
        this.targetPosition = null;
        this.currentPosition = null;

        this.targetAlpha = 0;
        this.currentAlpha = 0;

        this.lastTargetPosition = { x: 0.5, y: 0.5 };
    }

    get player() {
        return mp.players.local;
    }

    get weapon() {
        return this.player.weapon;
    }

    getPlayerGunBoneCoords() {
        const weaponEntity = mp.game.weapon.getCurrentPedEntityIndex(
            this.player.handle,
            true
        );

        if (!weaponEntity) {
            return null;
        }

        const boneIndex = mp.game.entity.getBoneIndexByName(
            weaponEntity,
            "gun_muzzle"
        );

        if (boneIndex === -1) {
            return null;
        }

        return mp.game.entity.getWorldPositionOfBone(weaponEntity, boneIndex);
    }

    getPlayerGunBondCoords2D(offsetX = 0, offsetY = 0) {
        const screenCoords = mp.game.graphics.world3dToScreen2d(
            this.getPlayerGunBoneCoords()
        );
        return screenCoords
            ? { x: screenCoords.x + offsetX, y: screenCoords.y + offsetY }
            : null;
    }

    isPlayerAiming() {
        return (
            mp.game.controls.isControlPressed(0, 25) ||
            mp.game.controls.isControlPressed(0, 24)
        );
    }

    getAmmoDisplayPosition() {
        const armPos3d = this.player.getBoneCoords(57005, 0, 0.1, 0.15);
        return armPos3d ? mp.game.graphics.world3dToScreen2d(armPos3d) : null;
    }

    getAmmoDisplayPositionTimed(currentFrameTime, maxSeconds = 0.05) {
        this.timeCounter += currentFrameTime;

        if (this.timeCounter >= maxSeconds) {
            this.lastTargetPosition = this.getPlayerGunBondCoords2D(0.025);
            this.timeCounter = 0;
        }

        return this.lastTargetPosition;
    }

    _render() {
        if (!mp.settings.ammoDisplay) return;

        this.targetPosition = this.getAmmoDisplayPositionTimed(
            mp.game.misc.getFrameTime()
        );

        const hideCondition =
            !this.targetPosition ||
            !this.isPlayerAiming() ||
            this.player.isInAnyVehicle(true) ||
            this.player.isReloading();

        const ammoInClip =
            mp.game.weapon.getAmmoInClip(this.player.handle, this.weapon) ?? 0;
        const maxAmmoInClip =
            mp.game.weapon.getMaxAmmoInClip(this.player.handle, this.weapon, true) ??
            0;

        this.targetAlpha = hideCondition ? 0 : this.maxAlpha;

        if (this.targetPosition) {
            if (!this.currentPosition) {
                this.currentPosition = {
                    x: this.targetPosition.x,
                    y: this.targetPosition.y,
                };
            }

            this.currentPosition = {
                x: smoothstep(this.currentPosition.x, this.targetPosition.x, 0.17),
                y: smoothstep(this.currentPosition.y, this.targetPosition.y, 0.17),
            };
        }

        this.currentAlpha = smoothstep(this.currentAlpha, this.targetAlpha, 0.14);
        const currentRoundedAlpha = Math.round(this.currentAlpha);

        if (currentRoundedAlpha > 0 && this.currentPosition) {
            mp.game.graphics.drawText(
                `${ammoInClip} / ${maxAmmoInClip}`,
                [this.currentPosition.x + 0.025, this.currentPosition.y],
                {
                    scale: [0.4, 0.4],
                    color: [255, 255, 255, currentRoundedAlpha],
                    font: 1,
                    outline: true,
                    centre: true,
                }
            );

            if (!mp.game.graphics.hasStreamedTextureDictLoaded("mphud")) {
                mp.game.graphics.requestStreamedTextureDict("mphud", true);
            }
            if (mp.game.graphics.hasStreamedTextureDictLoaded("mphud")) {
                mp.game.graphics.drawSprite(
                    "mphud",
                    "ammo_pickup",
                    this.currentPosition.x,
                    this.currentPosition.y + 0.011,
                    0.014,
                    0.025,
                    -90,
                    255,
                    255,
                    255,
                    currentRoundedAlpha,
                    false
                );
            }
        }
    }
}

const ammoDisplay = new AmmoDisplay();
}; a; }
{let a = function scriptEntryPoint(mp) {
// Parachute states:
// -1: Standing on a ground
// 0: Freefall with parachute on back
// 1: Parachute opening
// 2: Parachute open
// 3: Falling without parachute

// -1: no landing
// 0: landing on both feet
// 1: stumbling
// 2: rolling
// 3: ragdoll

class ParachuteSync {
    #lastParachuteState = -1;

    parahutes = new Map();

    constructor() {
        mp.events.add("render", this.#render.bind(this));
        mp.events.addDataHandler("parachuteData", this.#onParachuteDataChange.bind(this));

        mp.events.add("entityStreamIn", this.#onEntityStreamIn.bind(this));
        mp.events.add("entityStreamOut", this.#onEntityStreamOut.bind(this));
    }

    get player() {
        return mp.players.local;
    }

    #render() {
        const parachuteState = this.player.getParachuteState();
        if (this.#lastParachuteState !== parachuteState) {
            this.#lastParachuteState = parachuteState;
            this.onParachuteStateChanged(parachuteState);
        }

        // for (const [player, parachuteObject] of this.parahutes) {
        //     parachuteObject.attachTo(player.handle, 57717, 0, 0, 3, 0, 0, 0, true, true, true, false, 0, true);
        // }
    }

    #onEntityStreamIn(entity) {
        if (entity && entity.type === "player" && entity !== this.player) {
            const parachuteData = entity.getVariable("parachuteData");
            if (parachuteData) {
                this.#onParachuteDataChange(entity, parachuteData);
            }
        }
    }

    #onEntityStreamOut(entity) {
        if (entity && entity.type === "player" && entity !== this.player) {
            if (this.parahutes.has(entity)) {
                this.#detachParachuteFromPlayer(entity);
            }
        }
    }

    #onParachuteDataChange(entity, value, oldValue) {
        if (entity && entity.type === "player" && entity !== this.player) {
            const state = value;

            if (state != null) {
                if ([1, 2].includes(state)) {
                    if (!this.parahutes.has(entity)) {
                        this.#attachParachuteToPlayer(entity);
                    }
                } else if ([-1, 3].includes(state)) {
                    if (this.parahutes.has(entity)) {
                        this.#detachParachuteFromPlayer(entity);
                    }
                }
            }
        }
    }

    #attachParachuteToPlayer(player) {
        if (player.type !== "player") return;

        const parachuteObject = mp.objects.new("p_parachute1_mp_s", new mp.Vector3(player.position.x, player.position.y, player.position.z + 5), {
            rotation: player.getRotation(2),
            dimension: player?.dimension ?? 0,
            alpha: 0,
        });

        setTimeout(() => {
            if (isEntityExists(parachuteObject)) {
                parachuteObject.setAlpha(255);
                parachuteObject.setCollision(false, false);
                parachuteObject.attachTo(player.handle, 57717, 0, 0, 3.5, 0, 0, 0, true, true, true, false, 0, true);
            }
        }, 200);

        for (let i = 0; i < 10; i++) {
            setTimeout(() => {
                mp.game.object.setTextureVariation(parachuteObject.handle, i);
            }, i * 1000);
        }

        this.parahutes.set(player, parachuteObject);
        return parachuteObject;
    }

    #detachParachuteFromPlayer(player) {
        if (player.type !== "player") return;

        const parachuteObject = this.parahutes.get(player);
        if (parachuteObject) {
            parachuteObject.destroy();
            this.parahutes.delete(player);
        }
    }

    shareParachuteState(state) {
        mp.events.callRemote("parachute:sync", state);
    }

    onParachuteStateChanged(state) {
        if (state == null) return;

        this.shareParachuteState(state);
    }

    getParachuteData() {
        return {
            tintIndex: this.player.getParachuteTintIndex(),
            landingType: this.player.getParachuteLandingType(),
        };
    }
}
new ParachuteSync();

}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.addDataHandler("trainBomb", (object, value) => {
    if (value) object.notifyStreaming = true;
    else object.notifyStreaming = false;
});

mp.events.add("entityStreamIn", (entity) => {
    if (entity.getVariable("trainBomb")) {
        mp.game.object.placeOnGroundProperly(entity.handle);
    }
});

}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("showArrest", (data) => { 
    if (data) mp.interfaceActive = "arrest"
    else mp.interfaceActive = false
    browserMenu.call(`arrest`, `set`, data)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
const movementClipSet = "move_ped_crouched";
const strafeClipSet = "move_ped_crouched_strafing";
const clipSetSwitchTime = 0.25;

mp.game.streaming.loadClipSet(movementClipSet);
mp.game.streaming.loadClipSet(strafeClipSet);

// apply clip sets if streamed player is crouching
mp.events.add("entityStreamInCustom", (entity) => {
    if (entity.type === "player" && entity.variable_isCrouched) {
        entity.setMovementClipset(movementClipSet, clipSetSwitchTime);
        entity.setStrafeClipset(strafeClipSet);
    }
})

// apply/reset clip sets when isCrouched changes for a streamed player
mp.events.add("setRadiusVariable", (entity, name, value) => {
    if (name === "isCrouched") {
        if (entity.type === "player") {
            if (value) {
                entity.setMovementClipset(movementClipSet, clipSetSwitchTime);
                entity.setStrafeClipset(strafeClipSet);
            } else {
                entity.resetMovementClipset(clipSetSwitchTime);
                entity.resetStrafeClipset();
            }
        }
    }
})

let renderInteractionMenu = undefined
let isCrouched = false

// CTRL key to toggle crouching
mp.keys.bind(0x11, true, () => {
    if (mp.bindBlocker() || mp.players.local.vehicle) return;
    let startDate = Date.now()
    if (renderInteractionMenu) {
        renderInteractionMenu.destroy()
        renderInteractionMenu = undefined
    }
    renderInteractionMenu = new mp.Event("render", () => {
        if (Date.now() - startDate > 1 * 200) {
            startDate = 0
            if (renderInteractionMenu) {
                renderInteractionMenu.destroy()
                renderInteractionMenu = undefined
            }
            if (!mp.keys.isDown(0x11) || mp.keys.isDown(0x11) == false) return
            isCrouched = true
            mp.events.callRemote("toggleCrouch", true);
        }
    })
});

mp.keys.bind(0x11, false, () => {
    if (isCrouched) {
        isCrouched = false
        mp.events.callRemote("toggleCrouch", false);
    }
});
}; a; }
{let a = function scriptEntryPoint(mp) {
let currentCamera = null;
let nextCamera = null;
let activeVehicle = null;
let activeInterval = null;
let active = false;

const cameraList = [
    { distance: 4.0, fovFrom: 20.0, fovTo: 35.0, from: "front-middle", to: "front-left" },
    { distance: 5.0, fovFrom: 30.0, fovTo: 40.0, from: "front-left", to: "left" },
    { distance: 6.0, fovFrom: 40.0, fovTo: 35.0, from: "back-middle", to: "back-right" },
    { distance: 5.0, fovFrom: 30.0, fovTo: 30.0, from: "back-right", to: "right" },
    { distance: 5.0, fovFrom: 35.0, fovTo: 40.0, from: "right", to: "front-right" },
    { distance: 8.0, fovFrom: 50.0, fovTo: 50.0, from: "top-middle", to: "front-middle" },
];

function startCameraTransition(fromPos, toPos, fovFrom, fovTo, duration) {
    if (!currentCamera) {
        currentCamera = mp.cameras.new("default", fromPos, new mp.Vector3(0, 0, 0), fovFrom);
    }
    if (!nextCamera) {
        nextCamera = mp.cameras.new("default", toPos, new mp.Vector3(0, 0, 0), fovTo);
    }

    currentCamera.setCoord(fromPos.x, fromPos.y, fromPos.z);
    nextCamera.setCoord(toPos.x, toPos.y, toPos.z);

    currentCamera.setFov(fovFrom);
    nextCamera.setFov(fovTo);

    currentCamera.setActive(true);
    mp.game.cam.renderScriptCams(true, false, 0, true, false, 0);

    nextCamera.setActiveWithInterp(currentCamera.handle, duration, 100, 100);

    mp.events.add("render", pointCamerasAtVehicle);
}

function pointCamerasAtVehicle() {
    if (currentCamera && activeVehicle) {
        currentCamera.pointAt(activeVehicle.handle, 0, 0, 0, false);
    }
    if (nextCamera && activeVehicle) {
        nextCamera.pointAt(activeVehicle.handle, 0, 0, 0, false);
    }
}

function getRelativePosition(vehicle, position, distance) {
    const coords = new mp.Vector3(vehicle.position.x, vehicle.position.y, vehicle.position.z + 0.2);
    const forward = vehicle.getForwardVector();
    const up = new mp.Vector3(0, 0, 1);
    const right = new mp.Vector3(-forward.y, forward.x, 0);

    const multiplyVector = (vec, scalar) => new mp.Vector3(vec.x * scalar, vec.y * scalar, vec.z * scalar);
    const addVectors = (vec1, vec2) => new mp.Vector3(vec1.x + vec2.x, vec1.y + vec2.y, vec1.z + vec2.z);
    const subtractVectors = (vec1, vec2) => new mp.Vector3(vec1.x - vec2.x, vec1.y - vec2.y, vec1.z - vec2.z);

    const offsets = {
        "front-middle": addVectors(coords, multiplyVector(forward, distance)),
        "front-left": addVectors(coords, subtractVectors(multiplyVector(forward, distance), multiplyVector(right, distance * 0.5))),
        "front-right": addVectors(coords, addVectors(multiplyVector(forward, distance), multiplyVector(right, distance * 0.5))),
        "back-middle": addVectors(coords, multiplyVector(forward, -distance)),
        "back-left": addVectors(coords, subtractVectors(multiplyVector(forward, -distance), multiplyVector(right, distance * 0.5))),
        "back-right": addVectors(coords, addVectors(multiplyVector(forward, -distance), multiplyVector(right, distance * 0.5))),
        "left": addVectors(coords, multiplyVector(right, -distance)),
        "right": addVectors(coords, multiplyVector(right, distance)),
        "top-middle": addVectors(coords, multiplyVector(up, distance)),
    };

    return offsets[position] || coords;
}

function stopCamera(force) {
    if (currentCamera) {
        currentCamera.destroy();
        currentCamera = null;
    }
    if (nextCamera) {
        nextCamera.destroy();
        nextCamera = null;
    }
    if (activeInterval) {
        clearInterval(activeInterval);
        activeInterval = null;
    }

    mp.events.remove("render", pointCamerasAtVehicle);

    if (force) {
        mp.game.cam.renderScriptCams(false, false, 0, true, false);
    }
    else {
        mp.game.cam.renderScriptCams(false, true, 1500, true, false, 0);
    }
}

function startIdleCamera(vehicle, randomPositions, duration) {
    if (cameraList.length < 2) {
        mp.console.logError("At least two camera configurations are required.");
        return;
    }

    active = true;
    activeVehicle = vehicle;

    let cameraIndex = randomPositions ? Math.floor(Math.random() * cameraList.length) : 0;

    const loopCameras = () => {
        if (!active) {
            stopCamera();
            return;
        }

        const camConfig = cameraList[cameraIndex];
        const fromPos = getRelativePosition(vehicle, camConfig.from, camConfig.distance);
        const toPos = getRelativePosition(vehicle, camConfig.to, camConfig.distance);

        // chatDebug(`startIdleCamera ${JSON.stringify(fromPos)} ${JSON.stringify(toPos)} ${JSON.stringify(vehicle.position)}`)

        startCameraTransition(fromPos, toPos, camConfig.fovFrom, camConfig.fovTo, duration);

        cameraIndex = (cameraIndex + 1) % cameraList.length;
        if (randomPositions) {
            cameraIndex = Math.floor(Math.random() * cameraList.length);
        }
    };

    if (activeInterval) clearInterval(activeInterval);
    activeInterval = setInterval(() => {
        loopCameras();
    }, duration);

    loopCameras();
}

mp.events.add('startIdleCamera', (vehicle_id) => {
    if (active) return;
    const vehicle = mp.vehicles.at(vehicle_id);
    if (vehicle) startIdleCamera(vehicle, false, 4000);
});

mp.events.add('stopIdleCamera', () => {
    active = false;
});

mp.events.add('stopIdleCameraForce', () => {
    if (active) {
        active = false;
        stopCamera(true);
    };
});

mp.keys.bind(0x56, false, () => {
    if (active) active = false;
});
}; a; }
{let a = function scriptEntryPoint(mp) {
const MARKER_TYPE = Object.freeze({
    STAR: 0,
    WARNING: 1,
    PLAYER: 2,
    TARGET: 3,
    DEATH: 4,
    QUESTION: 5
});

const MARKER_CREATE_COOLDOWN = 2000; // in ms

const MARKER_DATA = {
    [MARKER_TYPE.STAR]: { dict: "mpinventory", name: "custom_mission", size: 0.025, color: [240, 203, 88, 255], blip: { sprite: 304, color: 5 } },
    [MARKER_TYPE.WARNING]: {
        dict: "commonmenu",
        name: "mp_alerttriangle",
        size: 0.025,
        color: [254, 153, 23, 255],
        blip: { sprite: 864, color: 47 },
    },
    [MARKER_TYPE.PLAYER]: {
        dict: "mpinventory",
        name: "mp_specitem_ped",
        size: 0.025,
        color: [50, 205, 50, 255],
        blip: { sprite: 480, color: 2 },
    },
    [MARKER_TYPE.TARGET]: { dict: "mpinventory", name: "darts", size: 0.025, color: [239, 33, 33, 255], blip: { sprite: 270, color: 1 } },
    [MARKER_TYPE.DEATH]: { dict: "mpinventory", name: "deathmatch", size: 0.025, color: [255, 255, 255, 255], blip: { sprite: 630, color: 4 } },
    [MARKER_TYPE.QUESTION]: { dict: "mpinventory", name: "mp_specitem_randomobject", size: 0.025, color: [255, 255, 255, 255], blip: { sprite: 66, color: 4 } },
};

const loadedTextureDicts = new Set();

async function loadDictionary(dict) {
    if (loadedTextureDicts.has(dict)) return;

    if (!mp.game.graphics.hasStreamedTextureDictLoaded(dict)) {
        mp.game.graphics.requestStreamedTextureDict(dict, true);
    }
    while (!mp.game.graphics.hasStreamedTextureDictLoaded(dict)) {
        await mp.game.waitAsync(50);
    }
    loadedTextureDicts.add(dict);
}

const easeInOutSine = (x) => -(Math.cos(Math.PI * x) - 1) / 2;

class Marker {
    static pool = new Set();

    static processMarkers() {
        const frameTime = mp.game.misc.getFrameTime();
        const { x: screenWidth, y: screenHeight } = mp.game.graphics.getScreenResolution(0, 0);

        for (const marker of Marker.pool) {
            marker.update(frameTime);

            if (marker.elapsedTime >= marker.duration) {
                marker.destroy();
                continue;
            }
            marker.render(screenWidth, screenHeight);
        }
    }

    constructor(type, position, duration, serverCreationTime) {
        const { dict, name, size, color, blip } = MARKER_DATA[type];

        this.type = type;
        this.position = position;
        this.serverCreationTime = serverCreationTime;
        this.elapsedTime = 0;
        this.duration = duration / 1000; // convert ms to seconds

        this.spriteDict = dict;
        this.spriteName = name;
        this.size = size;
        this.color = color;

        this.blip = mp.blips.new(blip.sprite, this.position, {
            color: blip.color,
            scale: 0.8,
            shortRange: false,
        });
        Marker.pool.add(this);
    }

    update(frameTime) {
        this.elapsedTime += frameTime;
    }

    async render(screenWidth, screenHeight) {
        const screenPosition = mp.game.graphics.getScreenCoordFromWorldCoord(this.position.x, this.position.y, this.position.z);

        if (!screenPosition || screenPosition.screenX === 0 || screenPosition.screenY === 0) return;

        let alpha = this.color[3];
        if (this.elapsedTime < 0.5) {
            alpha = easeInOutSine(this.elapsedTime / 0.5) * this.color[3];
        } else if (this.duration - this.elapsedTime < 1.0) {
            alpha = easeInOutSine((this.duration - this.elapsedTime) / 1.0) * this.color[3];
        }

        await loadDictionary(this.spriteDict);

        const normalizedHeight = this.size;
        const normalizedWidth = this.size * (screenHeight / screenWidth);

        mp.game.graphics.drawSprite(
            this.spriteDict,
            this.spriteName,
            screenPosition.screenX - normalizedWidth / 2,
            screenPosition.screenY - normalizedHeight / 2,
            normalizedWidth,
            normalizedHeight,
            0,
            this.color[0],
            this.color[1],
            this.color[2],
            Math.round(alpha),
            false
        );
    }

    destroy() {
        if (mp.blips.exists(this.blip)) this.blip.destroy();
        Marker.pool.delete(this);
    }
}

mp.events.add("c:marker:create", (type, position, duration, creationTime) => {
    mp.console.logInfo(`Creating marker at: ${JSON.stringify(position)}`);
    new Marker(type, position, duration, creationTime);
    mp.game.audio.playSound(-1, "NAV_UP_DOWN", "HUD_FRONTEND_DEFAULT_SOUNDSET", true, 0, true);
});

mp.events.add("render", Marker.processMarkers);

function getPointingPosition(distance) {
    const camera = mp.cameras.new("gameplay");
    const cameraCoord = camera.getCoord();
    const direction = camera.getDirection();

    const farPoint = new mp.Vector3(cameraCoord.x + direction.x * distance, cameraCoord.y + direction.y * distance, cameraCoord.z + direction.z * distance);
    return mp.raycasting.testPointToPoint(cameraCoord, farPoint, null, 17);
}

function createSharedMarker(type) {
    const currentTime = Date.now();
    if (currentTime - lastMarkerCreateTime < MARKER_CREATE_COOLDOWN) return false;

    const result = getPointingPosition(1000);
    if (!result || !result.position) return false;

    lastMarkerCreateTime = currentTime;
    mp.events.callRemote("s:marker:create", type, result.position);
    return true;
}

mp.events.add("c:marker:createSharedMarker", createSharedMarker);

let lastMarkerCreateTime = 0;
let holdStartTime = 0;
let hasShownHoldMessage = false;

mp.events.add("render", () => {
    const currentTime = Date.now();
    const isKeyBindActive = mp.game.controls.isControlPressed(0, 348); // key bind mouse wheel click

    if (isKeyBindActive && holdStartTime === 0) {
        if (currentTime - lastMarkerCreateTime < MARKER_CREATE_COOLDOWN) return;
        holdStartTime = currentTime;
        hasShownHoldMessage = false;
    } else if (isKeyBindActive && holdStartTime > 0) {
        const holdDuration = currentTime - holdStartTime;
        if (holdDuration >= 250 && !hasShownHoldMessage) {
            // Show type selection window here.
            browserMenu.call(`radialMenu`, `set`, true);
            hasShownHoldMessage = true;
        }
    } else if (!isKeyBindActive && holdStartTime > 0) {
        const holdDuration = currentTime - holdStartTime;
        if (holdDuration < 250) {
            createSharedMarker(MARKER_TYPE.DEATH);
        } else if (hasShownHoldMessage) {
            // Close type selection window here.
            // mp.gui.chat.push("Circle closed");
        }
        holdStartTime = 0;
    }
});

mp.events.add("playerQuit", (player) => {
    if (player.id === 0) {
        for (const marker of Marker.pool) {
            marker.destroy();
        }
    }
});

}; a; }
{let a = function scriptEntryPoint(mp) {
const MODELS = {
    11: ["freight", "freightcar", "freightcont1"].map((a) => mp.game.joaat(a)),
    25: ["metrotrain"].map((a) => mp.game.joaat(a)),
};

const dummyId = 931;

class Train {
    static pool = new Map();

    constructor(dummy) {
        this.dummy = dummy;
        this.dummy.train = this;

        this.trainId = this.dummy.getVariable("trainId");

        this.variationId = this.dummy.getVariable("variationId");
        this.position = Train.extractPosition(this.dummy.getVariable("position"));
        this.direction = this.dummy.getVariable("direction");

        this.controllerId = this.dummy.getVariable("controllerId");
        this.controller = this.controllerId != null ? mp.players.atRemoteId(this.controllerId) : null;

        this.speed = this.dummy.getVariable("speed");
        this.cruiseSpeed = this.dummy.getVariable("cruiseSpeed");

        this.dimension = this.dummy.getVariable("dimension");
        this.locked = this.dummy.getVariable("locked");
        this.exploded = this.dummy.getVariable("exploded");

        this.streamDistance = this.dummy.getVariable("streamDistance");

        this.models = MODELS[this.variationId];

        Train.pool.set(this.trainId, this);
    }

    get trainPosition() {
        return this.isEntityReady() ? mp.game.entity.getCoords(this.trainHandle, false) : null;
    }

    get trainSpeed() {
        return this.isEntityReady() ? mp.game.entity.getSpeed(this.trainHandle) : null;
    }

    get isControlledByLocalPlayer() {
        return this.controller && this.controller === mp.players.local;
    }

    get isControlled() {
        return this.controller != null;
    }

    updateLockStatus() {
        if (this.variationId === 11 && this.isEntityReady()) {
            const carriageIds = [1, 3, 4, 5, 6, 7]
            for (const carriageId of carriageIds) {
                const trainCarriage = mp.game.vehicle.getTrainCarriage(this.trainHandle, carriageId);
                if (typeof trainCarriage === "number" && trainCarriage !== 0) {
                    if (this.locked) {
                        if (this.locked[carriageIds.indexOf(carriageId)]) {
                            mp.game.vehicle.setDoorShut(trainCarriage, 0, false, false);
                            mp.game.vehicle.setDoorShut(trainCarriage, 1, false, false);
                        }
                        else {
                            mp.game.vehicle.setDoorOpen(trainCarriage, 0, false, false);
                            mp.game.vehicle.setDoorOpen(trainCarriage, 1, false, false);
                        }
                    }
                }
            }
        }
    }

    sendSync(x, y, z) {
        mp.events.callRemoteUnreliable("s:trains:sync", this.trainId, x, y, z, this.speed, this.cruiseSpeed);
    }

    syncCheck(overwrite = false) {
        if (this.isEntityReady()) {
            const trainPos = this.trainPosition;
            const localPos = mp.players.local.position;

            const distance = dist(trainPos, localPos);
            if (distance > (this.isControlledByLocalPlayer ? 15 : 3.5) || overwrite) {
                mp.game.vehicle.setMissionTrainCoords(this.trainHandle, this.position.x, this.position.y, this.position.z);
            }
        }
    }

    requestController() {
        mp.events.callRemote("s:requestTrainController", this.trainId);
    }

    freeController() {
        mp.events.callRemote("s:freeTrainController", this.trainId);
    }

    async createEntity() {
        if (!this.created) {
            this.created = true;
            await Train.loadModels(this.models);
            this.trainHandle = mp.game.vehicle.createMissionTrain(this.variationId, this.position.x, this.position.y, this.position.z, this.direction);
            await Train.waitUntilExists(this.trainHandle);
            Train.markAsNoLongerNeeded(this.models);
            mp.game.entity.setInvincible(this.trainHandle, true);
            mp.game.vehicle.setTrainCruiseSpeed(this.trainHandle, 0);
            mp.game.vehicle.setTrainSpeed(this.trainHandle, 0);
            mp.game.vehicle.setMissionTrainCoords(this.trainHandle, this.position.x, this.position.y, this.position.z);

            mp.game.vehicle.setTrainCruiseSpeed(this.trainHandle, this.cruiseSpeed);
            mp.game.vehicle.setTrainSpeed(this.trainHandle, this.speed);

            this.isStreamed = true;
            this.created = false;
        }
    }

    destroyEntity() {
        this.trainHandle && mp.game.entity.doesExist(this.trainHandle) && mp.game.vehicle.deleteMissionTrain(this.trainHandle);

        this.trainHandle = 0;
        this.isStreamed = false;
    }

    isEntityReady() {
        return this.isStreamed && this.trainHandle !== 0 && mp.game.entity.doesExist(this.trainHandle);
    }

    static async waitUntilExists(handle) {
        do {
            await mp.game.waitAsync(0);
        } while (!mp.game.entity.doesExist(handle));
    }

    static async loadModels(models) {
        for (const model of models) {
            if (!mp.game.streaming.hasModelLoaded(model)) {
                mp.game.streaming.requestModel(model);
                do {
                    await mp.game.waitAsync(50);
                } while (!mp.game.streaming.hasModelLoaded(model));
            }
        }
    }

    static async markAsNoLongerNeeded(models) {
        for (const model of models) {
            mp.game.streaming.setModelAsNoLongerNeeded(model);
        }
    }

    static extractPosition(string) {
        if (!string || typeof string !== "string") {
            return null;
        }
        const coords = string.split("%").map((coord) => {
            const num = parseFloat(coord);
            return isNaN(num) ? null : num;
        });
        if (coords.includes(null)) {
            return null;
        }

        return new mp.Vector3(coords[0] || 0, coords[1] || 0, coords[2] || 0);
    }
}

[
    {
        key: "position",
        handler: (train, value) => {
            train.position = Train.extractPosition(value);

            // train.syncCheck();
        },
    },
    {
        key: "speed",
        handler: (train, value) => {
            train.speed = value;
            mp.console.logInfo(`Train ${train.trainId} speed set to ${train.speed}`);

            if (train.isEntityReady()) mp.game.vehicle.setTrainSpeed(train.trainHandle, train.speed);
        },
    },
    {
        key: "cruiseSpeed",
        handler: (train, value) => {
            train.cruiseSpeed = value;
            mp.console.logInfo(`Train ${train.trainId} cruiseSpeed set to ${train.cruiseSpeed}`);

            if (train.isEntityReady()) mp.game.vehicle.setTrainCruiseSpeed(train.trainHandle, train.cruiseSpeed);
        },
    },
    {
        key: "controllerId",
        handler: (train, value) => {
            train.controllerId = value;
            train.controller = value != null ? mp.players.atRemoteId(value) : null;
        },
    },
    {
        key: "locked",
        handler: (train, value) => {
            train.locked = value;
            train.updateLockStatus();
        },
    },
    {
        key: "exploded",
        handler: (train, value) => {
            train.exploded = value;
        },
    },
].forEach(({ key, handler }) => {
    mp.events.addDataHandler(key, (entity, value, oldValue) => {
        if (entity.train) handler(entity.train, value);
    });
});

function dist(a, b) {
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) + Math.pow(a.z - b.z, 2));
}

mp.events.add("c:robbery:train:explodeTrain", (trainId) => {
    const train = Train.pool.get(trainId);
    if (!train) return;

    if (train.isEntityReady()) {
        mp.game.audio.playSoundFromCoord(-1, "Jet_Explosions", train.trainPosition.x, train.trainPosition.y, train.trainPosition.z, "exile_1", false, 0, false);

        mp.game.graphics.setPtfxAssetNextCall("core");
        mp.game.graphics.startParticleFxNonLoopedAtCoord(
            "exp_air_rpg_plane",
            train.trainPosition.x,
            train.trainPosition.y,
            train.trainPosition.z,
            0.0,
            0.0,
            0.0,
            2.1,
            false,
            false,
            false,
            false
        );
        mp.game.cam.shakeGameplayCam("MEDIUM_EXPLOSION_SHAKE", 1.0);
    }
});

mp.events.add("c:trains:sync", (trainId, x, y, z, speed, cruiseSpeed) => {
    const train = Train.pool.get(trainId);
    if (!train || train.isControlledByLocalPlayer) return;

    const position = train.isEntityReady() ? train.trainPosition : train.position;
    if (!position) return;

    const distance = dist(position, { x, y, z });
    if (distance < 10) return;

    train.position = new mp.Vector3(x, y, z);
    train.speed = speed;
    train.cruiseSpeed = cruiseSpeed;

    if (train.isEntityReady() && Number.isInteger(train.trainHandle)) {
        if (typeof train.speed === 'number') {
            mp.game.vehicle.setTrainSpeed(train.trainHandle, train.speed);
        }

        if (typeof train.cruiseSpeed === 'number') {
            mp.game.vehicle.setTrainCruiseSpeed(train.trainHandle, train.cruiseSpeed);
        }
    }

    train.syncCheck(true);
});

setInterval(async () => {
    const { x, y, z } = mp.players.local.getCoords(true);
    for (const train of Train.pool.values()) {
        if (train.isStreamed) {
            const position = train.isEntityReady() ? train.trainPosition : train.position;

            if (!position) continue;
            const distance = dist(position, { x, y, z });

            if (distance > train.streamDistance || train.dimension !== mp.players.local.dimension) {
                if (train.isControlledByLocalPlayer) {
                    train.freeController();
                }

                train.lastStreamOutTime = Date.now();
                train.destroyEntity();

                train.markersCreated = false
            }

            if (train.isControlledByLocalPlayer) {
                const currentTime = Date.now();
                const syncInterval = train.speed === 0 ? 9000 : Math.min(1000, 200 + mp.players.streamed.length * 30);

                if (currentTime > (train.lastSyncSendTime || 0) + syncInterval) {
                    train.lastSyncSendTime = currentTime;
                    train.sendSync(position.x, position.y, position.z);
                }
            } else if (!train.isControlled) {
                const currentTime = Date.now();
                if (currentTime > (train.lastControllerRequestTime || 0) + 5000) {
                    train.lastControllerRequestTime = currentTime;
                    train.requestController();
                }
            }

            const carriageIds = [1, 3, 4, 5, 6, 7]

            if (train.exploded && !train.markersCreated) {
                for (const carriageId of carriageIds) {
                    if (!train.locked[carriageIds.indexOf(carriageId)]) {
                        const trainCarriage = mp.game.vehicle.getTrainCarriage(train.trainHandle, carriageId);
                        if (typeof trainCarriage === "number" && trainCarriage !== 0) {
                            for (const doorName of ["door_dside_f", "door_pside_f"]) {
                                const doorPos = mp.game.entity.getWorldPositionOfBone(trainCarriage, mp.game.entity.getBoneIndexByName(trainCarriage, doorName));
                                if (typeof doorPos !== "object") {
                                    continue;
                                }

                                mp.events.call("createDynamicMarkersByParams", { uniqName: `train${carriageIds.indexOf(carriageId)}`, position: new mp.Vector3(doorPos.x, doorPos.y, doorPos.z - 3), id: 1, scale: 2 });
                                mp.events.call("createDynamicColshapesByParams", { uniqName: `train${carriageIds.indexOf(carriageId)}`, position: new mp.Vector3(doorPos.x, doorPos.y, doorPos.z - 3), scale: 2, params: { catchEvent: "s:robbery:train:take", catchEventParams: { idx: carriageIds.indexOf(carriageId) } } });
                            }
                        }
                    }
                }

                train.markersCreated = true
            }
            else if (!train.exploded && train.markersCreated) {
                for (const carriageId of carriageIds) {
                    mp.events.call("removeDynamicMarkersByUniqName", `train${carriageIds.indexOf(carriageId)}`);
                    mp.events.call("removeDynamicColshapesByUniqName", `train${carriageIds.indexOf(carriageId)}`);
                }

                delete train.markersCreated
            }
        } else {
            const distance = dist(train.position, { x, y, z });
            if (!distance) continue;

            if (distance < train.streamDistance && train.dimension === mp.players.local.dimension && Date.now() > (train.lastStreamOutTime || 0) + 1500) {
                await train.createEntity();
                train.updateLockStatus();
            }
        }
    }
}, 125);

mp.events.add("playerReady", () => {
    mp.game.invoke("0x80D9F74197EA47D9", false);
    mp.game.invoke("0x736A718577F39C7D");

    mp.events.addDataHandler("trainId", (entity, value, oldValue) => {
        if (!entity.train) {
            new Train(entity);
        }
    });

    mp.dummies.forEachByType(dummyId, (dummy) => {
        if (!dummy.train) {
            new Train(dummy);
        }
    });
});

mp.events.add("playerQuit", (player) => {
    if (player.id === 0) {
        for (const train of Train.pool.values()) {
            train.isStreamed = true;
            train.destroyEntity();
        }
    }
});

// mp.events.add("render", () => {
//     if (mp.clientStorage["admin"] > 0) {
//         for (const train of Train.pool.values()) {
//             if (train.position)
//                 mp.game.graphics.drawText(`s:Train(${train.trainId})`, [train.position.x, train.position.y, train.position.z], {
//                     color: [255, 255, 255, 255],
//                     scale: [0.3, 0.3],
//                 });

//             if (train.isEntityReady()) {
//                 const position = train.trainPosition;
//                 mp.game.graphics.drawText(`c:Train(${train.trainId})`, [position.x, position.y, position.z], {
//                     color: [255, 255, 255, 255],
//                     scale: [0.3, 0.3],
//                 });
//             }
//         }
//     }
// });

}; a; }
{let a = function scriptEntryPoint(mp) {
try {
	const instructionButtonsDrawler = require("gamemode/scripts/helpers/instructionButtonsDrawler.js");
	const cameraRotator = require("gamemode/scripts/helpers/cameraRotator.js");

	const customNames = {
		1: { 0: "Гладка шкіра", 1: "Легка щетина", 3: "Кругла борода", 4: "Еспаньолка", 5: "Козляча борідка", 6: "Острівець", 7: "Тонка бородка", 8: "Коротка бородка", 10: "Уси", 
			11: "Підстрижена борода", 13: "Кругла борода", 14: "Борода-підкова", 15: "Вуса олівці і баки", 16: "Борода-ремінь", 17: "Бальбо і баки", 18: "Баки", 19: "Коротка бородка", 20: "Далі", 
			21: "Далі і борода", 22: "Велосипедний руль", 23: "Острівець з вусами", 24: "Англійські вуса з пеньком", 25: "Голлівудська борода", 27: "Острівець з баками", 28: "Широкі баки",
			29: "Борода Шірма" },
		2: { 0: "Немає", 1: "Акуратні", 2: "Модні", 4: "Іронічні", 5: "Жіночі", 6: "Спокусливі", 7: "Нахмурені", 8: "Чікса", 9: "Торжествуючі", 
			10: "Безтурботні", 11: "Дугою", 12: "Мишка", 13: "Подвійне висікання", 14: "Впалі", 15: "Намальовані олівцем", 16: "Вищіпані", 17: "Прямі і тонкі", 18: "Натуральні", 
			19: "Пишні", 20: "Неохайні", 21: "Широкі", 22: "Звичайні", 23: "Южноєвропейські", 24: "Доглянуті", 25: "Кущові", 26: "Перишки", 27: "Колючі", 28: "Зрощені", 29: "Крилаті",
			30: "Потрійна висічка", 31: "Висічка дугою", 32: "Підрізані", 33: "Сходячі на ні", 34: "Висічка" },
		4: { 0: "Зелені", 1: "Ізумрудні", 2: "Блакитні", 3: "Сині", 4: "Світлий шатен", 5: "Темно коричневий", 6: "Карій", 7: "Темно-сірий", 8: "Світло-сірий", 
			9: "Рожевий", 10: "Жовтий", 11: "Фіолетовий", 12: "Затемнення", 13: "Відтінки сірого", 14: "Текіла-санрайз", 16: "Спотворення", 
			18: "Космічний рейнджер", 19: "Інь-янь", 20: "Ціль", 21: "Ящірка", 23: "Інопланетянин", 26: "Одержимий", 28: "Заражений", 
			29: "Прибулець", 31: "Зомбі" },
		5: { 0: "Ні", 1: "Повний", 2: "Під кутом", 3: "Округлий", 4: "Горизонтальний", 5: "На вилицях", 6: "Красуня", 7: "У стилі 80-х", 8: "Світло-сірий", 
			9: "Рожевий", 10: "Жовтий", 11: "Фіолетовий", 12: "Затемнення", 13: "Відтінки сірого", 14: "Текіла-санрайз", 16: "Спотворення", 
			18: "Космічний рейнджер", 19: "Інь-янь", 20: "Ціль", 21: "Ящірка", 23: "Інопланетянин", 26: "Одержимий", 28: "Заражений", 
			29: "Прибулець", 31: "Зомбі" },
		6: { 0: "Ні", 1: "Димчасто-чорний", 2: "Бронзовий", 3: "М’який сірий", 4: "Ретро гламур", 5: "Натуральний", 6: "Котячі очі", 7: "Чікса", 9: "Вайнвудський гламур", 
			11: "Мрія про море", 12: "Пін-ап", 13: "Лілова пристрасть", 14: "Димчаті котячі очі", 15: "Вогняний рубін", 16: "Естрадна принцеса", 17: "Туш для очей", 
			18: "Кроваві сльози", 19: "Хеві-метал", 20: "Сум", 21: "Князь темряви", 25: "Скрушеність" },
		8: { 0: "Ні", 1: "Кольорові матові", 2: "Кольорові блискучі", 3: "Контур, матові", 4: "Контур блискучі", 5: "Жирний контур матові", 6: "Жирний контур блискучі", 7: "Некрашений контур матові",
			8: "Некрашений контур блискучі", 9: "Розмазана помада" },
		10: { 0: "Брита", 1: "Натуральні", 2: "Небагато волосся", 4: "Волосата", 5: "Заросла", 6: "Мавпа", 7: "Причесана мавпа", 8: "Бікіні", 9: "Блискавка", 
			10: "Зворотня блискавка", 11: "Сердечко", 12: "Уси", 15: "Стежка", 16: "Стежка та соски", 17: "Волосаті руки" },
		11: { 0: "Ні", 1: "Поцілуй мою сокиру", 2: "Чорний мім", 3: "Летюча миша", 4: "Червоний череп", 5: "Рептілія", 7: "Трайбл-лінії", 9: "Трайбл-помаранчевий", 10: "Трайбл-червоний", 
			11: "У коробці", 13: "Прапор США", 14: "Демон темряви", 15: "У вигляді зомбі", 16: "Демон з пошкодженнями", 17: "Сумний демон", 18: "Веселий демон", 19: "Потрісканий демон", 20: "Небезпечний череп", 
			21: "Злий череп", 22: "Грізний череп", 23: "Череп з кістлявою щелепою", 24: "Череп з червоним на роті", 26: "Череп-упир", 28: "Череп з осколками", 29: "Відкритий череп", 30: "Примарний череп",
			31: "Шалений череп", 32: "Напівчереп", 33: "Череп-виродок", 34: "Жахливий череп", 35: "Розрізаний череп", 36: "Цукрова калавера павутина", 37: "Цукрова калавера сеньор", 38: "Цукрова калавера Вихор", 39: "Цукрова квітка", 40: "Цукрова калавера Моно", 
			41: "Цукрова калавера Femme", 42: "Цукрова калавера Demi", 43: "Цукрова калавера напугана", 44: "Хвилі зліва", 45: "Хвилі справа", 47: "Полоси зліва", 48: "Полоси справа", 49: "Плями наліво", 50: "Плями направо",
			51: "З узорами ліворуч", 52: "З узорами праворуч", 53: "Смуги", 54: "Старійшина", 55: "Вертикальна смуга", 56: "Плімя", 57: "Патьоки справа", 58: "Патьоки зліва", 59: "Фенікс",
			61: "Бойове забарвлення", 62: "Симетрія", 63: "Вібитки пальців", 64: "Тотемне забарвлення", 66: "Смуги на щоках", 68: "У пів-обличчя" },
	}

	const barbershopCustomBeards = {
		29: { label: "Пишна борода", drawable: 223 },
		30: { label: "Довга борода", drawable: 224 },
		31: { label: "Дуже пишна борода", drawable: 225 },
		32: { label: "Вуса козака", drawable: 226 },
		33: { label: "Коротка борода", drawable: 227 },
		34: { label: "Вусач", drawable: 228 },
		35: { label: "Вуса з легкою щетиною", drawable: 229 },
		36: { label: "Довгі вуса з щетиною", drawable: 230 }
	}

	const barbershopCustomManicure = {
		0: { label: "Ні", drawable: 0 },
		1: { label: "Манікюр «Овал»", drawable: 158 },
		2: { label: "Манікюр «Овал» з візерунками", drawable: 159 },
		3: { label: "Манікюр «Стилет»", drawable: 160 },
		4: { label: "Манікюр «Стилет» з візерунками", drawable: 161 },
		5: { label: "Манікюр «Стилет» переливаючий", drawable: 162 },
		6: { label: "Короткий «Овал» ", drawable: 163 },
		7: { label: "Короткий «Овал» з візерунками", drawable: 164 }
	}

	// 1: Beard
	// 2: Eyebrows
	// 4: EyeColor
	// 5: Blush
	// 6: EyeMakeup
	// 8: Lipstick
	// 10: Torso hair
	// 11: facePaintings


	const localPlayer = mp.players.local;
	const hairColors = [];
	const lipstickColors = [];
	const makeupColors = [];
	const beardsColors = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];
	const manicureColors = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];
	const torsoHairComponentsToRemove = [ 3, 7, 8, 9, 11 ];
	let barberInfo = undefined;

	mp.events.add("customPlayerDeath", (player) => {
		if (isBarberStarted && player.remoteId === localPlayer.remoteId) {
			onBarberFinished();
		}
	});

	mp.events.add("barbershop::load_info", (rawInfo) => {
		barberInfo = JSON.parse(rawInfo);

		// Hair, Makeup
		const maxColors = Math.max(mp.game.invoke("0xE5C0CF872C2AD150"), mp.game.invoke("0xD1F7CA1535D22818"));

		for (let i = 0; i < maxColors; i++) {
				hairColors.push(i);
				lipstickColors.push(i);
				makeupColors.push(i);
		}

		browserMenu.call(`barbershop`, `setColorsData`, hairColors, lipstickColors, makeupColors, beardsColors, manicureColors);
	});

	let currentPlace = undefined;
	let bizAllowance = 0 
	let isBarberStarted = false;
	let playerPed;
	let camera = undefined;
	let stage = -1;
	let isHighlightingEnabled = false;
	let defaultHighlightingEnabled = false;
	let removedClothing = [];
	let currentEyeColor;

	mp.events.add("render", () => {
		if (barberInfo === undefined) {
			return;
		}

		if (isBarberStarted) {
			if (stage === 0 && playerPed && playerPed.hasAnimFinished(currentPlace.animDict, "player_enterchair", 3)) {
				onPedSeat();
			}

			if (stage === 2) {
					onCutFinished();
			}

			if (stage === 3 && playerPed && playerPed.hasAnimFinished(currentPlace.animDict, "player_exitchair", 3)) {
				onBarberFinished();
			}

			mp.game.invoke("0x719FF505F097FD20");

			return;
		}

		// const interior = getCurrentInterior();
		// let placeIndex;

		// if (interior === 0 || (placeIndex = barberInfo.interiors.indexOf(interior)) < 0) {
		// 	if (currentPlace !== undefined) {
		// 		onStopInteraction();
		// 	}

		// 	return;
		// }

		// const place = barberInfo.places[placeIndex];

		// if(!isLocalPlayerInAngledArea(place.interaction.origin, place.interaction.edge, place.interaction.angle)) {
		// 	onStopInteraction();
		// 	return;
		// }

		// if (currentPlace === undefined) {
		// 	onStartInteraction(place);
		// }
	});

	mp.events.add("barbershop::startBarber", async (hairColor, highlightColor, rawHeadOverlays, eyeColor, barberIndex, allowance) => {
		browserMenu.call(`barbershop`, `set`, null)
		// fadeScreen(true, 200);
		await mp.game.waitAsync(400);
		onStartInteraction(barberInfo.places[barberIndex]) 
		bizAllowance = allowance
		stage = 0;
		isBarberStarted = true;
		selectedMainMenuIndex = 0;

		mp.game.ui.requestAdditionalText("HAR_MNU", 9);
		mp.game.audio.requestAmbientAudioBank("SCRIPT\\Hair_Cut", false);

		instructionButtonsDrawler.init(); 


		const playerPos = localPlayer.position;
		const playerDimension = localPlayer.dimension;
		const chairInfo = currentPlace.chair;
		const exitPos = currentPlace.exit.position;

		currentHair.color = hairColor;
		currentHair.highlightColor = highlightColor;
		playerHeadOverlays = new Map(JSON.parse(rawHeadOverlays));
		currentEyeColor = eyeColor;

		playerPed = mp.peds.new(localPlayer.model, playerPos, 0, playerDimension);

		let playerPedHandle = await waitEntity(playerPed) 

		if (playerPedHandle) {
			localPlayer.cloneToTarget(playerPed.handle);
			localPlayer.position = new mp.Vector3(exitPos.x, exitPos.y, exitPos.z);
			localPlayer.setHeading(currentPlace.exit.heading);
			localPlayer.freezePosition(true);
			localPlayer.setAlpha(0);
			localPlayer.setCollision(false, false);
			mp.events.call("hudControl.enable", false) 

			//	playVoice("SHOP_HAIR_WHAT_WANT");

			camera = mp.cameras.new("default");
					
			fadeScreen(false, 200);
			
			if (await mp.game.streaming.loadAnimDict(currentPlace.animDict))
				playerPed.taskPlayAnimAdvanced(currentPlace.animDict, "player_enterchair", chairInfo.position.x, chairInfo.position.y, 
					chairInfo.position.z, 0, 0, chairInfo.heading, 1000, -1000, -1, 5642, 0, 2, 1);

			const camInfo = currentPlace.cam;	
			const camPos = mp.game.object.getObjectOffsetFromCoords(camInfo.position.x, camInfo.position.y, camInfo.position.z,
				camInfo.heading, camInfo.offset.x, camInfo.offset.y, camInfo.offset.z);

			camera.setCoord(camPos.x, camPos.y, camPos.z);
			camera.pointAtCoord(camInfo.position.x, camInfo.position.y, camInfo.position.z);
			camera.setFov(47);
			
			
			camera.setActive(true);
			mp.game.cam.renderScriptCams(true, false, 3000, true, false);
		}
	});

	function onStartInteraction(place) {
		currentPlace = place; 
		//mp.events.call("prompt.show", "Сделать прическу или нанести макияж", "Е");
	}

	function onStopInteraction () {
		currentPlace = undefined;
	}

	function onPedSeat() {
		stage = 1;
		showMainMenu();

		const camInfo = currentPlace.cam;

		cameraRotator.start(camera, camInfo.position, camInfo.position, camInfo.offset, camInfo.heading);
		cameraRotator.setXBound(150, 240);
		mp.gui.cursor.visible = true;
	}

	function onCutFinished() {
		stage = 1;
		mp.events.call("selectMenu.toggleTempHidden", false);

		instructionButtonsDrawler.setActive(true);

		if (currentMenu === 0) {
			camera.setFov(33);
		}

		cameraRotator.pause(false);
	}

	mp.events.add("barbershop.onMenuChanged", (key, idx) => {
		if (!isBarberStarted || currentMenu === -1 || stage !== 1) {
			return;
		}

		switch (key) {
			case "highlighting":
				if (currentMenu === 0) { // Hair
					isHighlightingEnabled = !isHighlightingEnabled;
					updateMenu(true);
					setHairColorByIndexes();
				}

				break;

			case "color":
				if (currentMenu === 0) { // Hair
					currentHair.selectedColorIndex = idx;
					setHairColorByIndexes();
				} else if (currentHeadOverlay.id !== -1 && currentHeadOverlay.colorIndex !== -1) {
					currentHeadOverlay.colorIndex = idx;
					
					setCurrentHeadOverlayColor();
				}
				break;

			case "opacity":
				if (currentMenu === 0 && isHighlightingEnabled) {
					currentHair.selectedHighlightColorIndex = idx;
					setHairColorByIndexes();
				} else if (currentHeadOverlay.id !== -1 && currentHeadOverlay.opacity !== -1) {
					currentHeadOverlay.opacity = idx / 100;

					if (currentHeadOverlay.opacity > 1) {
						currentHeadOverlay.opacity = 1;
					} else if (currentHeadOverlay.opacity < 0) {
						currentHeadOverlay.opacity = 0;
					} else if (currentHeadOverlay.opacity == 0) {
						currentHeadOverlay.opacity = 0.01;
					}

					setCurrentHeadOverlay();					
				}
				break;
		}
	})

	let selectedMainMenuIndex = 0;
	let currentMenu = -1;
	let currentHair = {
		drawable: -1,
		color: 0,
		highlightColor: 0,
		selectedColorIndex: 0,
		selectedHighlightColorIndex: 0
	};
	let playerHeadOverlays = new Map();
	let currentHeadOverlay = {
		id: 0,
		index: 0,
		opacity: 1,
		colorIndex: 0
	};

	mp.events.add("barbershop.itemSelected", async (menuName, itemName, itemIndex) => {
		if (!menuName.startsWith("barbershop_")) {
			return;
		}

		if (menuName === "barbershop_m_main" || menuName === "barbershop_f_main") { 

			selectedMainMenuIndex = itemIndex;

			if (itemName === "Макіяж") {
				let params = {
					name: `barbershop_makeupMenu_${localPlayer.isMale() ? "m" : "f"}`
				}
				browserMenu.call(`barbershop`, `set`, params)
				updateMenu(false)
				return;
			}

			showConcreteMenu(itemName);
		} else if (menuName === "barbershop_makeupMenu_m" || menuName === "barbershop_makeupMenu_f") {
			showConcreteMenu(itemName);
		} else if (menuName === "barbershop_concrete") {
			if (currentMenu === 0) { // Hair
				const hair = getHairDrawableByIndex(itemIndex);
				const { color, highlightColor } = getSelectedColors();

				if (hair === currentHair.drawable && color === currentHair.color && highlightColor === currentHair.highlightColor) {
					return;
				}

				let sale = hair === currentHair.drawable && (color !== currentHair.color || highlightColor !== currentHair.highlightColor) ? 2 : 0

				if (!await checkPrice(itemIndex, sale)) {
					return;
				}

				setCurrentHair();
				setCurrentHairColor();
				setHair(hair, color, highlightColor);
				playCutAnim(() => {
					setCurrentHair();
					setCurrentHairColor();
					showConcreteMenu();
				});
			} else if (currentMenu === 4) { // Eye color
				if (currentEyeColor === itemIndex) {
					return;
				}

				if (!await checkPrice(itemIndex)) {
					return;
				}
				playerPed.setEyeColor(currentEyeColor);
				currentEyeColor = itemIndex;
				mp.events.callRemote("barbershop::setEyeColor", currentEyeColor);
				playCutAnim(() => {
					playerPed.setEyeColor(currentEyeColor);
					showConcreteMenu();
				}, false);
			} else if(currentHeadOverlay.id !== -1) {
				const headOverlay = playerHeadOverlays.get(currentHeadOverlay.id);
				const overlayIndex = currentHeadOverlay.index;
				const overlayOpacity = currentHeadOverlay.opacity;
				const overlayColorIndex = currentHeadOverlay.colorIndex;

				if (currentHeadOverlay.id === 1 && (currentHeadOverlay.index >= 29 && currentHeadOverlay.index !== 255) && currentHeadOverlay.colorIndex > 25) return rpc.callBrowser(browserMenu, "nError", `Оберіть колір!`)

				let color = 0;

				if (overlayColorIndex !== -1) {
					color = getHeadOverlayColors(currentHeadOverlay.id)[overlayColorIndex];
				}
				

				if (
					headOverlay[0] === overlayIndex
					&& (headOverlay[1] === overlayOpacity || overlayOpacity === -1)
					&& (headOverlay[2] === color || overlayColorIndex === -1)
				) {
					return;
				}

				let sale = headOverlay[0] === overlayIndex && (headOverlay[1] !== overlayOpacity || headOverlay[2] !== color) ? 2 : 0

				if (!await checkPrice(itemIndex, sale)) {
					return;
				}

				const currentOverlay = currentHeadOverlay.id;
				let dependentOverlayId = undefined;

				resetCurrentHeadOverlay();

				if (currentMenu === 5) {
					dependentOverlayId = currentOverlay === 4 ? 5 : 4;

					const dependentOverlay = playerHeadOverlays.get(dependentOverlayId);

					if (dependentOverlay[0] !== 255) {
						currentHeadOverlay.id = dependentOverlayId;
						resetCurrentHeadOverlay();
						currentHeadOverlay.id = currentOverlay;
					}
				}
				
				setHeadOverlay(overlayIndex, overlayOpacity, color, overlayColorIndex, dependentOverlayId);

				playCutAnim(() => {
					setCurrentHeadOverlay();
					setCurrentHeadOverlayColor();

					if (dependentOverlayId) {
						currentHeadOverlay.id = dependentOverlayId;
						resetCurrentHeadOverlay();
						currentHeadOverlay.id = currentOverlay;
					}
					showConcreteMenu();
				}, currentMenu <= 3);
			}
		}
	});

	mp.events.add("barbershop.itemFocusChanged", (menuName, itemName, itemIndex, valueIndex) => {
		if (!menuName.startsWith("barbershop_")) {
			return;
		}

		if (menuName === "barbershop_concrete") {
			if (currentMenu === 0) { // Hair
				if (currentHair.defaultState) {
					mp.events.call("selectMenu.setItemName", "barbershop_concrete", currentHair.defaultState.index, JSON.stringify({text: currentHair.defaultState.name,values:[currentHair.defaultState.values]}), true);
					delete currentHair.defaultState
				}
				playerPed.setComponentVariation(2, getHairDrawableByIndex(itemIndex), 0, 2);
				setHairColorByIndexes();
			} else if (currentMenu === 4) { // Eye color
				playerPed.setEyeColor(itemIndex);
			} else if (currentHeadOverlay.id !== -1) {
				let value = itemIndex === 0 ? 255 : itemIndex - 1;

				if (currentMenu === 5) {
					const painting = barberInfo.facePaintings[itemIndex];

					if (painting.i !== currentHeadOverlay.id) {
						playerPed.setHeadOverlay(currentHeadOverlay.id, 255, 1);

						currentHeadOverlay.id = painting.i;

						// if (currentHeadOverlay.colorIndex === -1) {
							const overlayColors = getHeadOverlayColors(currentHeadOverlay.id);

							currentHeadOverlay.colorIndex = overlayColors.length > 0 ? overlayColors.indexOf(playerHeadOverlays.get(currentHeadOverlay.id)[2]) : -1;
						// }

						setCurrentHeadOverlayColor();
					}

					value = painting.v;
				} else if (currentMenu === 6) {
					// playerPed.setHeadOverlay(5, 255, 1);
					value = barberInfo.eyeMakeups[itemIndex].v;
				} else if (currentMenu === 8) {
					// playerPed.setHeadOverlay(4, 255, 1);
				} else if (currentMenu === 9) {
					value = itemIndex
				}

				currentHeadOverlay.index = value;
				setCurrentHeadOverlay();
				setCurrentHeadOverlayColor();
				updateMenu(true);
			}
		}
	});

	mp.events.add("barbershop.backspacePressed", (menuName) => {
		if (!menuName.startsWith("barbershop_")) {
			return;
		}

		if (menuName === "barbershop_concrete") {
			if(currentMenu === 0) { // Hair
				setCurrentHair();
				setCurrentHairColor();
			} else if (currentMenu === 4) { // Eye color
				playerPed.setEyeColor(currentEyeColor);
			} else if (currentHeadOverlay.id !== -1) {
				resetCurrentHeadOverlay();

				if (currentMenu === 5) {
					const dependentOverlayId = currentHeadOverlay.id === 4 ? 5 : 4;

					currentHeadOverlay.id = dependentOverlayId;
					resetCurrentHeadOverlay();
				}
			}

			if (currentMenu === 6 || currentMenu === 7 || currentMenu === 8) {
				let params = {
					name: `barbershop_makeupMenu_${localPlayer.isMale() ? "m" : "f"}`
				}
				browserMenu.call(`barbershop`, `set`, params)
				updateMenu(false)
			} else {
				showMainMenu();
			}

			cameraRotator.stopMoveCamZ(); 
			camera.setFov(47);
		} else if (menuName === "barbershop_makeupMenu_m" || menuName === "barbershop_makeupMenu_f") {
			showMainMenu();
		}
	});

	function getCurrentInterior() {
		return mp.game.invoke("0x2107BA504071A6BB", localPlayer.handle);
	}

	function isLocalPlayerInAngledArea(origin, edge, angle) {
		return localPlayer.isInAngledArea(origin.x, origin.y, origin.z, edge.x, edge.y, edge.z, angle, false, true, 0);
	}

	function fadeScreen(state, duration) {
		if (state) {
			mp.game.cam.doScreenFadeOut(duration);
		} else {
			mp.game.cam.doScreenFadeIn(duration);
		}
	}

	let sceneId = -1;

	function createScene(looped = false) {
		if (sceneId !== -1) {
			mp.game.ped.detachSynchronizedScene(sceneId);
			mp.game.ped.disposeSynchronizedScene(sceneId);
			sceneId = -1;
		}

		const chairInfo = currentPlace.chair;

		sceneId = mp.game.ped.createSynchronizedScene(chairInfo.position.x, chairInfo.position.y, chairInfo.position.z, 0, 0, chairInfo.heading, 2);

		mp.game.invoke("0x394B9CD12435C981", sceneId, true);
		mp.game.ped.setSynchronizedSceneLooped(sceneId, looped);

		return sceneId;
	}

	const mainInstructionButtons = [
		{ control: 24, label: "ITEM_MOV_CAM" }
	];

	function showMainMenu() {
		currentMenu = -1;
		currentHeadOverlay.id = -1;
		restoreClothes();
		let params = {
			name: `barbershop_${localPlayer.isMale() ? "m" : "f"}_main`
		}
		browserMenu.call(`barbershop`, `set`, params)
		instructionButtonsDrawler.setButtons(...mainInstructionButtons);
		instructionButtonsDrawler.setActive(true);
		updateMenu(false)
	}

	function showConcreteMenu(header) {
		let selectedIndex = 0;
		const items = [];

		if (header === undefined) header = getMenuHeaderByIndex(currentMenu);

		currentMenu = getUniqueMenuIndexByName(header);

		if (currentMenu === 0) { // Hair
			currentHair.drawable = playerPed.getDrawableVariation(2);
			currentHair.selectedColorIndex = hairColors.indexOf(currentHair.color);
			currentHair.selectedHighlightColorIndex = hairColors.indexOf(currentHair.highlightColor);

			if (currentHair.selectedColorIndex === -1) {
				currentHair.selectedColorIndex = 0;
			}

			if (currentHair.selectedHighlightColorIndex === -1) {
				currentHair.selectedHighlightColorIndex = 0;
			}

			selectedIndex = generateHairValues(items);
			isHighlightingEnabled = currentHair.color !== currentHair.highlightColor;
			defaultHighlightingEnabled = isHighlightingEnabled;
			updateMenu(true);
		} else if (currentMenu === 4) { // Eye color
			selectedIndex = generateEyeColorValues(items);
			updateMenu(true)
		} else { // Other overlays
			currentHeadOverlay.id = getOverlayIdByCurrentMenu();

			if (currentHeadOverlay.id === -1) {
				return;
			}

			if (currentMenu === 3 && removedClothing.length === 0) { // Torso hair
				for (const componentId of torsoHairComponentsToRemove) {
					const drawable = playerPed.getDrawableVariation(componentId);
					const texture = playerPed.getTextureVariation(componentId);
					const palette = playerPed.getPaletteVariation(componentId);

					removedClothing.push({ componentId, drawable, texture, palette });

					playerPed.setComponentVariation(componentId, getNakedClothes(componentId), 0, 0);
				}
			}

			resetCurrentHeadOverlay(false);

			if (currentMenu === 5) {
				selectedIndex = generateFacePaintingValues(items);
			} else if (currentMenu === 6) {
				selectedIndex = generateEyeMakeupValues(items);
			} else {
				selectedIndex = generateHeadOverlayValues(currentHeadOverlay.id, items);
			}

			updateMenu(true);
			setCurrentHeadOverlayColor();
		}

		if (currentMenu === 9) {
			cameraRotator.moveCamZ(0, currentPlace.animDict === "misshair_shop@hair_dressers" ? -0.6 : -0.4); 
		}

		if (currentMenu !== 3) {
			camera.setFov(33);
		}

		let params = {
			name: `barbershop_concrete`,
			items,
			type: currentMenu == 0 ? 3 : 2,
			currentMenu,
			selectedIndex
		}
		browserMenu.call(`barbershop`, `set`, params)
	}




	function generateHairValues(collection) {
		const hairValues = getHairValues();
		const isMale = playerPed.isMale();
		let selectedIndex = 0;

		var items = []

		for (let i = 0; i < hairValues.length; i++) {
			if (currentHair.drawable === hairValues[i]) {
				selectedIndex = i;
			}

			const label = getHairLabel(isMale, i);
			
			items.push({collection: collection, label: `${label}`, i: i})
			
		}
		
		for (let i = 0; i < items.length; i++) {
			addMenuItem(items[i].collection, items[i].label, items[i].i, selectedIndex == items[i].i);
		}

		return selectedIndex;
	}

	function generateHeadOverlayValues(overlayId, collection) {
		let selectedIndex = 0;

		const itemsCount = currentMenu === 8 ? 7 : currentMenu === 9 ? 7 : mp.game.ped.getNumHeadOverlayValues(overlayId);

		var items = []

		for (let i = 0; i < itemsCount + 1; i++) {
			if (overlayId === 100) {
				if (currentHeadOverlay.index === i) {
					selectedIndex = i;
				}
			}
			else {
				if (currentHeadOverlay.index === i - 1) {
					selectedIndex = i;
				}
			}
			
			if (customNames[overlayId] && customNames[overlayId][i]) {
				const text = stringHelper.escapeHtml(customNames[overlayId][i]);

				items.push({collection: collection, label: `${text}`, i: i})
			}
			else if (overlayId === 100) {
				const text = stringHelper.escapeHtml(barbershopCustomManicure[i].label);

				items.push({collection: collection, label: `${text}`, i: i})
			}
			else {
				const label = getHeadOverlayLabel(overlayId, i);
				const text = stringHelper.escapeHtml(mp.game.ui.getLabelText(label));
				
				items.push({collection: collection, label: `${text}`, i: i})
			}
		}

		if (overlayId === 1) {
			const customBeards = Object.values(barbershopCustomBeards)

			for (let i = 0; i < customBeards.length; i++) {
				if (currentHeadOverlay.index === items.length - 1) {
					selectedIndex = items.length;
				}

				items.push({ collection: collection, label: customBeards[i].label, i: items.length })
			}
		}
		
		for (let i = 0; i < items.length; i++) {
			addMenuItem(items[i].collection, items[i].label, items[i].i, selectedIndex == items[i].i);
		}

		return selectedIndex;
	}

	function generateEyeColorValues(collection) {
		let selectedIndex = 0;

		var items = []

		for (let i = 0; i < 32; i++) {
			if (currentEyeColor === i) {
				selectedIndex = i;
			}

			if (customNames[4] && customNames[4][i]) {
				const text = stringHelper.escapeHtml(customNames[4][i]);
				
				items.push({collection: collection, label: text, i: i})
			}
			else {
				const label = `FACE_E_C_${i}`;
				const text = stringHelper.escapeHtml(mp.game.ui.getLabelText(label));
				
				items.push({collection: collection, label: text, i: i})
			}
		}
		
		for (let i = 0; i < items.length; i++) {
			addMenuItem(items[i].collection, items[i].label, items[i].i, selectedIndex == items[i].i);
		}

		return selectedIndex;
	}


	function generateFacePaintingValues(collection) {
		let selectedIndex = 0;
		
		var items = []

		for (let i = 0; i < barberInfo.facePaintings.length; i++) {
			const facePainting = barberInfo.facePaintings[i];

			if (currentHeadOverlay.index === facePainting.v && currentHeadOverlay.id === facePainting.i) {
				selectedIndex = i;
			}

			if (customNames[11] && customNames[11][i]) {
				const text = stringHelper.escapeHtml(customNames[11][i]);
			
				items.push({collection: collection, label: text, i: i})
			}
			else {
				const text = stringHelper.escapeHtml(mp.game.ui.getLabelText(facePainting.l));
			
				items.push({collection: collection, label: text, i: i})
			}

			
		}
		
		for (let i = 0; i < items.length; i++) {
			addMenuItem(items[i].collection, items[i].label, items[i].i, selectedIndex == items[i].i);
		}

		return selectedIndex;
	}

	function generateEyeMakeupValues(collection) {
		let selectedIndex = 0;
		
		var items = []

		for (let i = 0; i < barberInfo.eyeMakeups.length; i++) {
			const eyeMakeup = barberInfo.eyeMakeups[i];

			if (currentHeadOverlay.index === eyeMakeup.v) {
				selectedIndex = i;
			}

			if (customNames[6] && customNames[6][i]) {
				const text = stringHelper.escapeHtml(customNames[6][i]);

				items.push({collection: collection, label: text, i: i})
			}
			else {
				const text = stringHelper.escapeHtml(mp.game.ui.getLabelText(eyeMakeup.l));

				items.push({collection: collection, label: text, i: i})
			}

			
		}
		
		for (let i = 0; i < items.length; i++) {
			addMenuItem(items[i].collection, items[i].label, items[i].i, selectedIndex == items[i].i);
		}

		return selectedIndex;
	}

	function getHeadOverlayDefaultOpacity(overlayId) {
		switch (overlayId) {
			case 1:
			case 2:
			case 4:
			case 5:
			case 8:
			case 10:
				return 1;
			default:
				return -1;
		}
	}

	function getHeadOverlayColors(overlayId) {
		switch (overlayId) {
			case 1:
			case 2:
			case 10:
				return hairColors;
			case 5:
				return makeupColors;
			case 8:
				return lipstickColors;
			case 100:
				return manicureColors;
			default:
				return [];
		}
	}

	const maleHairLabels = [ "Під нуль", "Коротко", "Яструб", "Хіпстер", "З проділом", "Півострів", "Байкер", "Хвіст", "Брейди", "Приліза", "Канадка", "Шипи", "Цезар", "Чоппі", "Дреди", "Боб", "Кудрі", "Серфінгіст", "Набік", "Зализ", "Довгі", "Хіпстер", "Маллет", "Косички", "Косички-Пальма", "Косички блискавки", "Косички зачесані нагору", "Косички зигзаги", "Косички равлики", "Хай-топ", "Розпатланий зачіс назад", "Підстрижений зачіс назад", "Підстрижений зачіс набік", "Шипастий ірокез", "Стиляга", "Стиляга із шарами", "Флет Топ", "Військова стрижка", "Безсила лють", "Афро вицвілий", "Вузол", "Великий чубчик", "Шеггі Маллет", "Ісус", "Залисини", "Афро", "Довга позаду", "Коротка модна", "Довгий хвіст", "Коротка необережна", "Дреди набік", "Довга монах", "Короткі дреди", "Кудрява зверху", "Кудрі", "Коротка гладка", "Хіпстер дреди", "Зализ назад", "Дреди у хвості", "Цвяхи", "Прилиза", "Модна з чубом", "Супер довга і пишна", "Локони назад", "Довга з проділом", "Коротка брутальна", "Пишна догори", "У формі панами", "Звисаючі дреди", "Дреди різної форми", "Зачіс набік", "Канадка", "Модна у різні сторони", "Афрокудрі у хвості", "Коротка недбала", "Довга недбала", "Дреди у хвості", "Царські дреди", "Раста дреди", "Звисаючі дреди", "Пальма дреди", "Короткі афрокудрі", "Хвіст з чубом", "Дреди у хвості набік", "Коротка яка стирчить", "Довгі афрокудрі", "Прилиза", "Довгі з дредами у хвості", "Коротка з волоссям на обличчі", "Середні з зачісом назад", "Рідкі афрокудрі", "Модна зачіс добоку", "Довга з звисаючим волоссям", "Коротка з косами", "Довгі багато кос", "Чубчик догори", "Довгі коси у бік", "Довгі з цікавим чубчиком", "Зачіс назад", "Довгі з хвостом та звисаючим волоссям на лобі", "Андеркат", "Коротка у різні сторони", "Дуже товсті дреди", "Звисаючі локони у різні сторони", "Дреди у різні сторони", "Андеркат 2", "Дуже довгі тонкі дреди", "Короткі з хвостом і звисаючим локоном на лобі", "Волосся у формі хвилі", "Афро дреди", "Довгі блейд", "Довгі дозаду", "Короткі неохайні", "Модні звисаючі", "Довгий андеркат", "Вологі у різні сторони", "Дреди середньої довжини", "У формі леді", "Середньої довжини у різні сторони", "Під горшок", "Пишний хвіст", "Дреди у хвості", "Прилизані дозаду", "Прилизані дозаду у хвіст", "Довгі гладкі", "Короткі", "Короткі з чубом"];
	const femaleHairLabels = [ "Під нуль", "Коротка", "Коротке каре", "Косички", "Хвостик", "Афрокудрі", "Афрокосички", "Каре", "Коротке", "Сноп", "Прилизане каре", "Хвіст кулька", "Дизайнерська", "Коротка зачісана", "Гулька", "Хвилястий Боб", "Губка", "Гулька з чубчиком", "Боб з пірьїною", "Зализана з чубчиком", "Афро", "Боб", "Афро Гулька", "Рокер", "Афрокосички", "Афрокосички Хвилясті", "Афрокосички зигзаги", "Косички з чубчиком", "Афрогульки", "Афрокоса", "Кінській хвіст", "Зализана", "Нефор", "Нефор зализана", "Ірокез", "Косички з бантиком", "Лисина з чубчиком", "Коротко", "Зализана з гулькою", "Оригінал", "Супер-вумен", "Афрокудрі", "Хвилясті короткі", "Каре набік", "Зализаний боб", "Коротка афро", "Каре з чубом", "Довге каре", "Набік", "На другий бік", "Хвіст косичка", "Довгі", "Короткі дреди", "Малет", "Довгі локони", "Розпатланий хвіст", "Довгі з чубом", "Довгі набік", "Локони з чубом", "Маленька гулька", "Харлі", "Довгі хвилясті", "Довгі дреди", "Карешка", "Дреди в кульці", "Оданго", "Хвостики довгі", "Хвіст кінський", "Відьмачка", "Довгі назад", "Дуже довгі", "Каре плечі", "Шевелюра", "Пишне каре", "Закручене каре", "Каре з косичкою", "Францужанка", "Хвіст наверх", "Довгі пишні", "Італьяночка", "Каре з маленькою гулькою", "Дві маленькі гульки", "Гулька середня", "Косий проділ", "Афро пишна", "Дві довгих косички", "Довгі з щапочкою", "Проділ косий", "Хвиляста клеопатра", "Шось", "Кінський хвіст з чубчиком", "Пишний боб", "Укладений боб", "Короткодовгі", "Боб хвилястий", "Каре з хвостиками", "Дуууже довгі", "Канадка", "Подвійні гульки", "Двокольорові з чубчиком", "Закручені кудрі у хвостику", "Довгі Харлі", "Боб з рівним зрізом", "Довгі позаду", "Довга заплетена коса", "Довгі з коротким", "Каре до плечей", "Хвіст позаду", "Заплетені з хвостиком", "Дреди косички", "Довгі з гулькою", "Чубчик за вухом", "Джолі", "Два пучки", "Обмотані хвостики", "Кілометрові", "Розпатлані", "Довгі з чубчиком", "Тимошенко", "Чудо", "Гулька бублик", "Три заплетені коси", "Мама", "Велика та маленька", "Аліса", "Миля", "Хвилясті довгі", "Прямі довгі позаду", "Вчителька", "Косички рибки", "Хвилясті розділені", "Двокольорові гульки",
	"Довгі на бік", "Чукча", "Італійські кудрі", "Девять косичок", "Локони з гулькою", "Венздей", "Дві переплетені коси", "Буйвол", "Косище", "Каре за вухом", "Рівне каре", "Гульки з локонами", "Школярка", "Гулька з локонами", "Еліс", "Гулька-квіточка", "Довгі дуже", "Довгі з гулькою", "Розпатлана гулька", "Кінський хвіст", "Колоски", "Закручений хвіст", "Тріс", "Кейра", "Коса привязана", "Боб з чубчиком набік", "Матір драконів", "Довгий каскад", "Гульки з довгим каскадом", "Гульки", "Йеніфер", "Мала"];

	function getHairLabel(isMale, index) {
		if (isMale) {
			var text = maleHairLabels[index];
			var label = mp.game.ui.getLabelText(text);
			if (label.includes('"')) {
				label = label.replace(/"/g, '');
			}
			if (label.includes('Темний шатен - ')) {
				label = label.replace(/Темний шатен - /g, '');
			}
			if (label.includes('Темні - ')) {
				label = label.replace(/Темні - /g, '');
			}
			if (label.includes('Темні  - ')) {
				label = label.replace(/Темні  - /g, '');
			}
			if (label.includes('Шатен - ')) {
				label = label.replace(/Шатен - /g, '');
			}
			if (label.includes(', Темний шатен')) {
				label = label.replace(/, Темний шатен/g, '');
			}
			label = label !== "NULL" ? (label[0].toUpperCase() + label.slice(1)) : text;
			return label;
		} else {
			var text = femaleHairLabels[index];
			var label = mp.game.ui.getLabelText(text);
			if (label.includes('"')) {
				label = label.replace(/"/g, '');
			}
			if (label.includes('Каштанові - ')) {
				label = label.replace(/Каштанові - /g, '');
			}
			if (label.includes('Чорні - ')) {
				label = label.replace(/Чорні - /g, '');
			}
			if (label.includes(', каштановий')) {
				label = label.replace(/, каштановий/g, '');
			}
			label = label !== "NULL" ? (label[0].toUpperCase() + label.slice(1)) : text;
			return label;
		}
	}

	function getHeadOverlayLabel(overlayId, index) {
		switch (overlayId) {
			case 1: // Beard
				return index <= 19 ? `HAIR_BEARD${index}` : `BRD_HP_${index-20}`;
			case 2: // Eyebrows
				return index === 0 ? "NONE" : `CC_EYEBRW_${index-1}`;
			case 5: // Blush
				return index === 0 ? "NONE" : `CC_BLUSH_${index-1}`;
			case 8: // Lipstick
				return index === 0 ? "NONE" : `CC_LIPSTICK_${index-1}`;
			case 10: // Torso hair
				return `CC_BODY_1_${index}`;
			default:
				return "NONE";
		}
	}

	function getUniqueMenuIndexByName(name) {
		switch (name) {
			case "Зачіски":
				return 0;
			case "Бороди":
				return 1;
			case "Брови":
				return 2;
			case "Груди":
				return 3;
			case "Лінзи":
				return 4;
			case "Розмальовка обличчя":
				return 5;
			case "Очі":
				return 6;
			case "Губи":
				return 7;
			case "Румяна":
				return 8;
			case "Манікюр":
				return 9;
			default:
				return -1;
		}
	}

	function getMenuHeaderByIndex(index) {
		switch (index) {
			case 0:
				return "Зачіски";
			case 1:
				return "Бороди";
			case 2:
				return "Брови";
			case 3:
				return "Груди";
			case 4:
				return "Лінзи";
			case 5:
				return "Розмальовка обличчя";
			case 6:
				return "Очі";
			case 7:
				return "Губи";
			case 8:
				return "Румяна";
			case 9:
				return "Манікюр";
			default:
				return "NONE";
		}
	}

	function getOverlayIdByCurrentMenu() {
		switch (currentMenu) {
			case 1:
				return 1;
			case 2:
				return 2;
			case 3:
				return 10;
			case 5:
				const makeupOverlay = playerHeadOverlays.get(4);

				if (makeupOverlay[0] !== 255) {
					return 4;
				}

				return playerHeadOverlays.get(5)[0] === 255 ? 4 : 5;
			case 6:
				return 4;
			case 7:
				return 8;
			case 8:
				return 5;
			case 9:
				return 100;
			default:
				return -1;
		}
	}

	function getHairDrawableByIndex(index) {
		return getHairValues()[index];
	}

	function getHairValues() {
		const genderIndex = playerPed.isMale() ? 0 : 1;

		return barberInfo.hairValues[genderIndex];
	}

	function updateMenu(show) {
		if (!show) return browserMenu.call(`barbershop`, `setMenuActive`, null)

		let showOpacity = selectedMainMenuIndex !== 0 && selectedMainMenuIndex !== 2 && currentHeadOverlay.opacity !== -1
		let showColor = selectedMainMenuIndex !== 2 && currentHeadOverlay.colorIndex !== -1

		if (selectedMainMenuIndex === 1 && (currentHeadOverlay.index >= 29 && currentHeadOverlay.index !== 255)) showOpacity = false
		if (selectedMainMenuIndex === 9) showOpacity = false

		if (selectedMainMenuIndex === 1) showColor = true

		const headOverlay = playerHeadOverlays.get(currentHeadOverlay.id);

		let params = {
			selectedMainMenuIndex,
			isHighlightingEnabled,
			color: currentHair.selectedColorIndex,
			highlightColor: isHighlightingEnabled ? currentHair.selectedHighlightColorIndex : currentHair.selectedColorIndex,
			showOpacity,
			showColor,
			opacity: currentHeadOverlay.opacity,
			headOverlayColor: currentHeadOverlay.colorIndex,
			headOverlayIndex: currentHeadOverlay.index,
			headOverlayColorDefault: headOverlay ? headOverlay[2] : null
		}

		browserMenu.call(`barbershop`, `setMenuActive`, params)
	}

	function setHairColorByIndexes() {
		const { color, highlightColor } = getSelectedColors();

		playerPed.setHairColor(color, highlightColor);
	}

	function setHair(hair, color, highlightColor) {
		currentHair.drawable = hair;
		currentHair.color = color;
		currentHair.highlightColor = highlightColor;

		mp.events.callRemote("barbershop::setHair", currentHair.drawable, currentHair.color, currentHair.highlightColor);
	}

	function setCurrentHair() {
		playerPed.setComponentVariation(2, currentHair.drawable, playerPed.getTextureVariation(2), 2);
	}

	function setCurrentHairColor() {
		playerPed.setHairColor(currentHair.color, currentHair.highlightColor);
	}

	function getSelectedColors() {
		const color = hairColors[currentHair.selectedColorIndex];
		const highlightColor = isHighlightingEnabled ? hairColors[currentHair.selectedHighlightColorIndex] : color;

		return { color, highlightColor };
	}

	function playCutAnim(acceptCallback = undefined, withScissors = true) {
		stage = 2;
		acceptCallback()
	}

	function setHeadOverlay(index, opacity, color, colorIndex, clearOverlayId) {
		const headOverlay = playerHeadOverlays.get(currentHeadOverlay.id);

		headOverlay[0] = index;
		headOverlay[1] = opacity;
		headOverlay[2] = color;

		currentHeadOverlay.index = index;
		currentHeadOverlay.opacity = opacity;
		currentHeadOverlay.colorIndex = colorIndex;

		if (clearOverlayId) {
			const clearOverlay = playerHeadOverlays.get(clearOverlayId);

			clearOverlay[0] = 255;
		}

		mp.events.callRemote("barbershop::setHeadOverlay", currentHeadOverlay.id, index, opacity, color || 0, clearOverlayId);
	}

	function setCurrentHeadOverlay() {
		if (currentHeadOverlay.id === 1 && (currentHeadOverlay.index >= 29 && currentHeadOverlay.index !== 255)) {
			playerPed.setHeadOverlay(currentHeadOverlay.id, 0, 0);
			playerPed.setComponentVariation(currentHeadOverlay.id, barbershopCustomBeards[currentHeadOverlay.index]?.drawable || 0, currentHeadOverlay.colorIndex > 25 ? 0 : currentHeadOverlay.colorIndex, 2);
		}
		else if (currentHeadOverlay.id === 100) {
			playerPed.setComponentVariation(10, barbershopCustomManicure[currentHeadOverlay.index]?.drawable || 0, currentHeadOverlay.colorIndex, 0);
		}
		else {
			if (currentHeadOverlay.id === 1) playerPed.setComponentVariation(1, 0, 0, 2);
			playerPed.setHeadOverlay(currentHeadOverlay.id, currentHeadOverlay.index, currentHeadOverlay.opacity);
		}
	}

	function setCurrentHeadOverlayColor() {
		if (currentHeadOverlay.colorIndex === -1) {
			return;
		}
		
		const color = getHeadOverlayColors(currentHeadOverlay.id)[currentHeadOverlay.colorIndex];

		if (typeof(color) !== "number") {
			return;
		}

		if (currentHeadOverlay.id === 1 && (currentHeadOverlay.index >= 29 && currentHeadOverlay.index !== 255)) {
			playerPed.setHeadOverlay(currentHeadOverlay.id, 0, 0);
			playerPed.setComponentVariation(currentHeadOverlay.id, barbershopCustomBeards[currentHeadOverlay.index]?.drawable || 0, color > 25 ? 0 : color, 2);
		}
		else if (currentHeadOverlay.id === 100) {
			playerPed.setComponentVariation(10, barbershopCustomManicure[currentHeadOverlay.index]?.drawable || 0, currentHeadOverlay.colorIndex, 0);
		}
		else {
			playerPed.setHeadOverlayColor(currentHeadOverlay.id, getHeadOverlayColorType(currentHeadOverlay.id), color, color);
		}
	}

	function resetCurrentHeadOverlay(applyOnPed = true) {
		const headOverlay = playerHeadOverlays.get(currentHeadOverlay.id);
		const overlayColors = getHeadOverlayColors(currentHeadOverlay.id);
		const defaultOpacity = getHeadOverlayDefaultOpacity(currentHeadOverlay.id);

		currentHeadOverlay.index = headOverlay[0];
		currentHeadOverlay.opacity = headOverlay[1] > 0 ? headOverlay[1] : defaultOpacity;
		currentHeadOverlay.colorIndex = overlayColors.length > 0 ? overlayColors.indexOf(headOverlay[2]) : -1;

		if (applyOnPed) {
			setCurrentHeadOverlay();
			setCurrentHeadOverlayColor();
		}
	}

	function getHeadOverlayColorType(overlayId) {
		switch (overlayId) {
			case 1: case 2: case 10:
				return 1;
			case 5: case 8:
				return 2;
			default:
				return 0;
		}
	}

	function getNakedClothes(componentId) {
		switch (componentId) {
			case 3:
				return 15;
			case 7:
				return 0;
			case 8:
				return 15;
			case 9:
				return 0;
			case 11:
				return 15;
			default:
				return undefined;
		}
	}

	function restoreClothes() {
		if (removedClothing.length === 0) {
			return;
		}

		for (const clothes of removedClothing) {
			playerPed.setComponentVariation(clothes.componentId, clothes.drawable, clothes.texture, clothes.palette);
		}

		removedClothing = [];
	}

	mp.events.add("onBarberStop", () => {
		onBarberStop()
	})

	function onBarberStop(withAnim = true) {
		if(currentMenu === 0) { // Hair
			setCurrentHair();
			setCurrentHairColor();
		} else if (currentMenu === 4) { // Eye color
			playerPed.setEyeColor(currentEyeColor);
		} else if (currentHeadOverlay.id !== -1) {
			resetCurrentHeadOverlay();

			if (currentMenu === 5) {
				const dependentOverlayId = currentHeadOverlay.id === 4 ? 5 : 4;

				currentHeadOverlay.id = dependentOverlayId;
				resetCurrentHeadOverlay();
			}
		}
		browserMenu.call(`barbershop`, `set`, null)
		cameraRotator.pause(true);
		cameraRotator.reset();
		mp.gui.cursor.visible = false;
		instructionButtonsDrawler.dispose();

		if (withAnim) {
			const chairInfo = currentPlace.chair;

			playerPed.taskPlayAnimAdvanced(currentPlace.animDict, "player_exitchair", chairInfo.position.x, chairInfo.position.y, 
				chairInfo.position.z, 0, 0, chairInfo.heading, 1000, -1000, -1, 5642, 0, 2, 1);

			stage = 3;
		} else {
			onBarberFinished();
		}
	}

	async function onBarberFinished() {
		stage = -1

		fadeScreen(true, 200)
		await mp.game.waitAsync(400)
		cameraRotator.stop();
		mp.game.cam.renderScriptCams(false, false, 3000, true, false);
		
		isBarberStarted = false;
		destroyEntities();
		mp.events.call("hudControl.enable", true) 
		mp.events.callRemote("barbershop::onStop");
		localPlayer.setCollision(true, true);
		localPlayer.freezePosition(false);
		localPlayer.setAlpha(255);
		fadeScreen(false, 200);
	}

	function destroyEntities() {
		if(playerPed)
		{
			playerPed.destroy();
			playerPed = undefined;
		}
		if(camera)
		{
			camera.destroy();
			camera = undefined;
		}
	}

	function addMenuItem(collection, itemName, itemIndex, selectedIndex) {
		const price = getItemPrice(itemIndex);

		if (selectedIndex) collection.push({ text: itemName, price, selected: true });
		else collection.push({ text: itemName, price });
	}

	function getItemPrice(itemIndex) {
		const prices = barberInfo.prices[currentMenu]; 
		
		if (!Array.isArray(prices)) {
			return NaN;
		}

		if (Array.isArray(prices[0])) {
			return prices[(localPlayer.isMale() ? 0 : 1)][itemIndex] + (bizAllowance * (prices[(localPlayer.isMale() ? 0 : 1)][itemIndex] / 100));
		} else {
			return prices[itemIndex] + (bizAllowance * (prices[itemIndex] / 100));
		}
	
	}

	let checkPriceResolver;

	function checkPrice(itemIndex, sale) {
		cameraRotator.pause(true);
		cameraRotator.reset();

		return new Promise((resolve, reject) => {
			if (checkPriceResolver) {
				return reject("CheckPrice is already requested");
			}

			mp.events.call("selectMenu.toggleTempHidden", true);
			instructionButtonsDrawler.setActive(false); 

			checkPriceResolver = {
				resolve: (result) => {
					clearPriceCheck(result);
					resolve(result);
				},
				reject: (message) => {
					clearPriceCheck(false);
					reject(message);
				}
			}

			checkPriceResolver.timeout = setTimeout(() => {
				if (checkPriceResolver) {
					checkPriceResolver.reject("CheckPrice timeout");
				}
			}, 10000);

			mp.events.callRemote("barbershop::checkPrice", currentMenu, itemIndex, localPlayer.isMale(), sale);
		});
	}

	function clearPriceCheck(isSucces) {
		clearTimeout(checkPriceResolver.timeout);
		checkPriceResolver = undefined; 
		cameraRotator.pause(false);

		if (!isSucces) {
			mp.events.call("selectMenu.toggleTempHidden", false);
		}
	}

	mp.events.add("barbershop::checkPriceResponse", (result) => {
		if(!checkPriceResolver || typeof(result) !== "boolean") {
			return;
		}

		if (isBarberStarted) {
			checkPriceResolver.resolve(result);
		} else {
			checkPriceResolver.resolve(false);
		}
	});

	mp.events.add("barbershop::lockCameraRotator", (lock) => {
		if (lock) cameraRotator.pause(true)
		else cameraRotator.pause(false)
	})

	mp.events.add("addBattlePassUniqueItems", (type, items) =>{ 
		if (type == "beard") browserMenu.call("barbershop", "addUniqueItems", items)
	})
} catch (err) {
	chatDebug(err)
}
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.timebar = undefined  
mp.events.add("client::setTimebar", (title, seconds, event, timerType = "timer", image = "timer.svg") => {
    seconds = parseInt(seconds)
    if(isNaN(seconds)) return 
    mp.timebar = { title: title, seconds: seconds, event: event, timerType: timerType}

    browserMenu.call(`timerAPI`, `setTimer`, title, seconds, event, timerType, image)
})
mp.events.add("client::clearTimebar", () => {
    mp.timebar = undefined
    browserMenu.call(`timerAPI`, `clearTimer`)
})

}; a; }
{let a = function scriptEntryPoint(mp) {
class ActionColshape {
    static pool = new Set();
    static inPool = new Set();

    constructor(position, range, dimension, onEnter = () => {}, onLeave = () => {}, onUse = () => {}) {
        this.position = position;

        this.range = range;
        this.dimension = dimension;

        this.onEnter = onEnter;
        this.onLeave = onLeave;
        this.onUse = onUse;

        this.active = true;

        this.colshape = mp.colshapes.newCircle(this.position.x, this.position.y, this.range, this.dimension);
        if (this.colshape && mp.colshapes.exists(this.colshape)) {
            this.colshape.actionShape = this;
        }

        ActionColshape.pool.add(this);
    }

    destroy() {
        if (mp.colshapes.exists(this.colshape)) {
            this.colshape.destroy();
        }
    }
}

mp.events.add("playerEnterColshape", (shape) => {
    if (shape && shape.actionShape) {
        ActionColshape.inPool.add(shape.actionShape);
        shape.actionShape.onEnter();
    }
});

mp.events.add("playerExitColshape", (shape) => {
    if (shape && shape.actionShape) {
        ActionColshape.inPool.delete(shape.actionShape);
        shape.actionShape.onLeave();
    }
});

mp.keys.bindEx(0x45, false, () => {
    const shape = ActionColshape.inPool.values().next().value;

    if (shape) {
        shape.onUse();
    }
}, "Клавіша дії");

global.ActionColshape = ActionColshape;

}; a; }
{let a = function scriptEntryPoint(mp) {
mp.isCaryoPericoEnabled = false
 
mp.events.add("enableCayoPerico", (bool) => {
    mp.isCaryoPericoEnabled = bool
    mp.game.invoke("0x9A9D1BA639675CF1", "HeistIsland", mp.isCaryoPericoEnabled);
    mp.game.invoke("0x5E1460624D194A38", mp.isCaryoPericoEnabled)

    mp.blips.forEach((blip) => {
        if (bool) {
            if (!blip.getVariable("cayoPerico")) {
                blip.setAlpha(0)
            } else {
                blip.setAlpha(255)
            }
        } else {
            if (blip.getVariable("cayoPerico")) {
                blip.setAlpha(0)
            } else {
                blip.setAlpha(255)
            }
        }
    })
})
 
}; a; }
{let a = function scriptEntryPoint(mp) {

mp.isCompletedQuestActive = false

mp.events.add("setCompletedQuestParams", (params) => {
    mp.isCompletedQuestActive = !!params
    if (params) {
        mp.events.call("setMainMenu", null)
        mp.events.call("inventory.forceClose");
        mp.gui.cursor.show(false, true);
    }
    else setCursor(false)
    browserMenu.call(`completedQuestAPI`, `setParams`, params)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
var BigEventHandlers = [];

mp.events.addBig = (dataName, callBack) => {
    BigEventHandlers.push({
        name: dataName,
        func: callBack
    })
}

mp.events.add('DataReceiver:Init', (id, type, eventName) => {
    mp.events.callRemote('DataSender:InitSuccess', id);

    var ChuckBucket = [];
    var DataHandler = new mp.Event('DataReceiver:Receive', (dataId, data, endSig, index, dataType) => {
        if (dataId == id) {
            ChuckBucket.push({
                index: index,
                data: data
            });

            if (endSig) {
                DataHandler_CreateDataStructure(ChuckBucket, dataType).then((StringData) => {
                    mp.events.callRemote('DataSender:End', id, eventName)

                    try {
                        for (const DataHandlerObject of BigEventHandlers) {
                            if (DataHandlerObject.name == eventName) {
                                var functionExec = DataHandlerObject.func;
                                functionExec(...StringData);
                            }
                        }
                    }
                    catch (err) {
                        chatDebug(`err : ${eventName} ${err}`) 
                    }
                    
                }).catch((errorCode) => {
                    mp.events.callRemote('DataSender:Failed', id, eventName, errorCode)
                })

                DataHandler.destroy();
            }
        }
    })
});


function DataHandler_CreateDataStructure(BucketArray, type = "object") {
    return new Promise(async (resolve, reject) => {
        var DataString = '';
        try {
            if (BucketArray.length > 2) {
                var BucketClone = await DataHandler_Sort(BucketArray);
                if (BucketClone === undefined) throw new Error("Whoops!");

                for (const chunk of BucketClone) {
                    DataString += chunk.data;
                }

                try {
                    if (type == "object") {
                        var returnData = JSON.parse(DataString)
                        resolve(returnData)
                    }
                    else if (type == "string") {
                        resolve(DataString)
                    }
                    else if (type == "number") {
                        resolve(parseInt(DataString))
                    }

                }
                catch (e) {
                    reject(-1);
                }
            }
            else {
                var BucketClone = BucketArray

                for (const chunk of BucketClone) {
                    DataString += chunk.data;
                }

                try {
                    if (type == "object") {
                        var returnData = JSON.parse(DataString)
                        resolve(returnData)
                    }
                    else if (type == "string") {
                        resolve(DataString)
                    }
                    else if (type == "number") {
                        resolve(parseInt(DataString))
                    }
                }
                catch (e) {
                    chatDebug(`Error Parsing Data!`);
                    reject(-1);
                }
            }

        }
        catch (e) {
            chatDebug(`Error! Received Data Is Not Final!`);
            reject(-2)
        }
    })
}

function DataHandler_Sort(BucketArray) {
    return new Promise((resolve, reject) => {
        try {
            var sortedArray = [];
            var lastIndex = -1;
            var BucketClone = BucketArray;

            BucketClone.sort((a, b) => {
                return parseInt(a.index) - parseInt(b.index);
            })

            for (const arrayObject of BucketClone) {
                if ((arrayObject.index - 1) == lastIndex) {
                    sortedArray.push(arrayObject);
                    lastIndex = BucketClone.indexOf(arrayObject);
                }
                else {
                    resolve(undefined)
                    return;
                }
            }

            resolve(sortedArray);
        } catch (e) {
            reject(e)
        }
    })
}
}; a; }
{let a = function scriptEntryPoint(mp) {
let timestamp = Date.now()

mp.interfaceActive = false

mp.bindBlocker = (data = {}) => {
	if (!isEntityExists(mp.players.local)) return true
	if (!mp.players.local.getVariable("sqlId")) return true
	if (data.antiflood) { 
		if (Date.now() - timestamp < data.antiflood) {  
			return true
		}  
		timestamp = Date.now()
	}
	if (
	(data.noknock ? false : (mp.players.local.getVariable('knockDown') || mp.players.local.getHealth() <= 0)) || 
	(data.flycheck ? (mp.players.local.isInAir() || mp.players.local.isJumping() || mp.players.local.isFalling() || mp.players.local.isBeingStunned(0)) : false) ||
	(data.swimcheck ? (mp.players.local.isSwimming()) : false) ||
	(data.gungamecheck ? false : (mp.players.local.getVariable("GungameLevel") != undefined)) ||
	(data.gungamecheck ? false : mp.duelsActive) ||
	(data.gungamecheck ? false : mp.setInventoryLock) ||
	mp.tabletActive || 
	mp.vehicleInfoActive ||
	mp.game.ui.isPauseMenuActive() || 
	mp.isBrowserPrimaryActive || 
	(data.faction ? false : mp.isFactionMenuActive) || 
	mp.isAchievementMenuActive ||
	mp.isCompletedQuestActive ||
	(data.mainmenu ? false : mp.isMainMenuActive) ||  
	mp.isDialogBoxesActive || 
	mp.isOpenActivityResult || 
	mp.uninterruptedAnimation || 
	mp.selectMenuPrimaryActive || 
	mp.isSelectionClothes ||
	mp.modalActive || 
	(data.phone ? false : mp.isPhoneActive) || 
	(data.online ? false : mp.playersOnlineActive) || 
	mp.selectMenuActive || 
	(data.chat ? false : mp.chatActiveHandler) || 
	mp.autoSaloonActive || 
	mp.carTuningActive || 
	mp.businessPanelActive ||
	mp.chipStationActive ||
	(data.console ? false : mp.consoleActive) || 
	(data.inventory ? false : mp.inventoryActive) || 
	(data.tabletPrimary ? false : mp.tabletPrimaryActive) || 
	mp.choiceMenuActive || 
	mp.houseMenuActive || 
	(data.minigamePressing ? false : mp.minigamePressingActive) ||
	mp.minigameMaterials ||
	mp.minigameDrugsActive ||
	mp.atmCriminalActive ||
	mp.isPromoActive || 
	mp.blackJackActive ||
	mp.casinoActive ||
	mp.cinemaActive ||
	mp.characterCreation ||
	mp.passportActive ||
	mp.electricMinigameActive ||
	mp.minigamePostmanActive ||
	mp.shopActive ||
	mp.createFamilyActive ||
	mp.craftActive ||
	(mp.interfaceActive && !(mp.interfaceActive == "radio" && data.radio))
	) { 
		return true; 
	}
	else { 
		return false;
	}
}


}; a; }
{let a = function scriptEntryPoint(mp) {
mp.settings = {}
mp.events.add("settings.toggleSetting", (name, value, server) => {
	mp.settings[name] = value;
	switch (name) {
		case 'hud':
			mp.events.call("notifications.enable", !value);
			if (value) mp.events.call("hudControl.enable", !value);
			break
		case 'time':
			mp.events.call("setLocalVar", "timestamp", value);
			mp.events.call("client::updateChatTimestamp")
			break
		case 'chatCount':
			browserMenu.call(`chatAPI`, 'setStrings', value)
			break
		case 'vehiclesDistance':
			mp.vehicles.forEach((veh) => {
				veh.setLodDist(value);
			})
			break
		case 'playerDistance':
			mp.players.forEach((pl) => {
				pl.setLodDist(value);
			})
			break
		case 'hideminimap':
			mp.game.ui.displayRadarCustom(!value, server);
			break
		case 'hidekills':
			mp.events.call("setKillListActive", !value)
			break
		case 'hideHudKeys':
			browserMenu.call(`hudControl`, `showHelp`, !value);
			break
		case 'hideHudTimerRoulette':
			browserMenu.call(`hudControl`, `startRewardTimer`, !value);
			break
		case 'enableHitmarker':
			mp.events.call("setHitmarker", value, server)
			break
		case 'newSpeedometer':
			browserMenu.call(`hudControl`, `setSpeedometer`, value);
			break
		case 'marketLightMode':
			browserMenu.call(`ThemeContext`, value);
			break
		case 'radioWave':
			browserMenu.call("radio", "saveRadioWave", value);
			break
		case 'tabletColorScheme':
			mp.events.call("setLocalVar", "tabletColorScheme", value);
			break
		case 'inventoryTheme':
			browserMenu.call(`storageManager`, `setTheme`, value);
			break
		case 'compass':
			browserMenu.call(`wars`, `setCompass`, !mp.settings.compass || mp.compassDisabled ? false : true);
			break
		default:
			break
	}
	if (!server) mp.events.callRemote("settings.toggleSetting", name, value);
});

mp.game.ui.displayRadarCustom = (enable, server) => {
	if (!server && mp.settings.hideminimap) return;
	if (mp.isHideInTrunk) return
	mp.game.ui.displayRadar(enable);
};

mp.events.add('entityStreamIn', (entity) => {
	try {
		if (entity.type === "player" && mp.settings.playerDistance !== undefined) {
			chatDebug("entityStreamIn Settings")
			entity.setLodDist(mp.settings.playerDistance);
		}
		else if (entity.type === "vehicle" && mp.settings.vehiclesDistance !== undefined) {
			chatDebug("entityStreamIn Settings")
			entity.setLodDist(mp.settings.vehiclesDistance);
		}
	}
	catch (err) {
		mp.events.callRemote("log", `Error client gamemode\scripts\Settings.js entityStreamIn: ${err}`)
	}
});
}; a; }
{let a = function scriptEntryPoint(mp) {
const { characterRotator } = require("gamemode/scripts/helpers/characterRotator.js");
const { info } = require("gamemode/scripts/CharacterCreation/info.js");

mp.events.add("setCharacterCreationClothesData", (data) => {
	info.values.clothes = data
});

const localPlayer = mp.players.local;
const ped = localPlayer;
const editData = {};
class CharacterCreation {
	constructor() {
		this.characterSlot;
	}

	resetEditData() {
		editData.selectedGender = 0
		editData.fatherIndex = 0;
		editData.motherIndex = 0;
		editData.shapeMix = 0.5;
		editData.skinMix = 0.5;
		editData.faceFeatures = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
		editData.appearance = {
			hairIndex: [
				// Female
				4,
				// Male
				4
			],
			hairColorIndex: 0,
			eyeColorIndex: 0,
			headOverlays: {}
		};

		for (let i = 0; i < 10; i++) {
			editData.appearance.headOverlays[i] = { value: i === 2 ? 1 : 255, opacity: 1, colorIndex: this.isHeadOverlayHasColor(i) ? 0 : -1 }
		}

		editData.clothes = [];
		editData.clothesItems = [];


		for (let i = 0; i < 2; i++) {
			editData.clothes[i] = {
				topIndex: 0,
				legsIndex: 0,
				shoesIndex: 0,
				hatsIndex: 0
			};

			editData.clothesItems[i] = [
				{ text: "Торс", values: info.values.clothes[i].top },
				{ text: "Ноги", values: info.values.clothes[i].legs },
				{ text: "Взуття", values: info.values.clothes[i].feets },
			];

			if (info.values.clothes[i].hats) editData.clothesItems[i].push({ text: "Головні убори", values: info.values.clothes[i].hats });
		}

	}

	async initPeds() {
		this.setPedsCurrentClothes();
		this.setPedsCurrentHair();
		this.setPedsCurrentHairColor();
		this.setPedsCurrentHeadBlendData();
		this.setPedsCurrentFaceFeatures();
		this.setPedsCurrentEyeColor();
		this.setPedsCurrentHeadOverlays();
		this.setPedsCurrentHeadOverlaysColors();
	}

	toggleGender() {
		editData.selectedGender = editData.selectedGender === 1 ? 0 : 1;
		const model = mp.game.joaat(editData.selectedGender === 1 ? "MP_M_Freemode_01" : "MP_F_Freemode_01");

		localPlayer.model = model;

		characterCreation.initPeds();
	}

	setPedsCurrentClothes() {
		this.setPedCurrentClothes(editData.selectedGender)
	}

	setPedCurrentClothes(pedIndex) {
		const clothes = editData.clothesItems[pedIndex];
		const pedClothes = editData.clothes[pedIndex];
		const top = clothes[0].values[pedClothes.topIndex];
		if (top == 'Пусто') {
			var index = (pedIndex == 1) ? 15 : 82;
			ped.setComponentVariation(3, 15, 0, 0);
			ped.setComponentVariation(11, index, 0, 0);
		}
		else {
			ped.setComponentVariation(3, top.torso, 0, 0);
			ped.setComponentVariation(11, top.variation, top.textures[0], 0);
		}
		const legs = clothes[1].values[pedClothes.legsIndex];
		if (legs == 'Пусто') {
			ped.setComponentVariation(4, 21, 0, 0);
		}
		else {
			ped.setComponentVariation(4, legs.variation, legs.textures[0], 0);
		}
		const shoes = clothes[2].values[pedClothes.shoesIndex];
		if (shoes == 'Пусто') {
			var index = (pedIndex == 1) ? 34 : 35;
			ped.setComponentVariation(6, index, 0, 0);
		}
		else {
			ped.setComponentVariation(6, shoes.variation, shoes.textures[0], 0);
		}
		if (clothes[3]) {
			const hats = clothes[3].values[pedClothes.hatsIndex];
			if (hats == 'Пусто') {
				ped.setPropIndex(0, 8, 0, true);
			}
			else {
				ped.setPropIndex(0, hats.variation, hats.textures[0], true);
			}
		}

		ped.setComponentVariation(8, pedIndex === 0 ? 14 : 15, 0, 0);

	}

	setPedsCurrentHeadBlendData() {
		const mother = info.mothers[editData.motherIndex];
		const father = info.fathers[editData.fatherIndex];

		ped.setHeadBlendData(mother, father, 0, mother, father, 0, editData.shapeMix, editData.skinMix, 0, false);
	}

	setPedsCurrentHairColor() {
		const color = info.values.hairColors[editData.appearance.hairColorIndex];

		ped.setHairColor(color, color);
	}

	setPedsCurrentFaceFeatures() {
		for (let i = 0; i < editData.faceFeatures.length; i++) {
			this.setPedsFaceFeature(i, editData.faceFeatures[i]);
		}
	}

	setPedsFaceFeature(index, value) {
		ped.setFaceFeature(index, value);
	}

	setPedsCurrentHair() {
		const hairs = info.values.hair[editData.selectedGender];
		const currentHairIndex = editData.appearance.hairIndex[editData.selectedGender];

		ped.setComponentVariation(2, hairs[currentHairIndex], ped.getTextureVariation(2), 2);
	}

	setPedCurrentHair() {
		const hairs = info.values.hair[editData.selectedGender];
		const currentHairIndex = editData.appearance.hairIndex[editData.selectedGender];

		ped.setComponentVariation(2, hairs[currentHairIndex], ped.getTextureVariation(2), 2);
	}

	setPedsCurrentEyeColor() {
		ped.setEyeColor(info.values.eyeColors[editData.appearance.eyeColorIndex]);
	}

	setPedsCurrentHeadOverlays() {
		for (const headOverlayId of info.values.headOverlays[editData.selectedGender]) {
			const headOverlay = editData.appearance.headOverlays[headOverlayId];

			ped.setHeadOverlay(headOverlayId, headOverlay.value, headOverlay.opacity, 0, 0);
		}
	}

	setPedsCurrentHeadOverlay(headOverlayId) {
		if (info.values.headOverlays[editData.selectedGender].indexOf(headOverlayId) < 0) return
		const headOverlay = editData.appearance.headOverlays[headOverlayId];

		ped.setHeadOverlay(headOverlayId, headOverlay.value, headOverlay.opacity, 0, 0);
	}

	setPedsCurrentHeadOverlaysColors() {
		for (const headOverlayId of info.values.headOverlays[editData.selectedGender]) {
			const headOverlay = editData.appearance.headOverlays[headOverlayId];

			if (headOverlay.colorIndex === -1) {
				continue;
			}

			const color = this.getHeadOverlayColors(headOverlayId)[headOverlay.colorIndex];

			ped.setHeadOverlayColor(headOverlayId, this.getHeadOverlayColorType(headOverlayId), color, color);
		}
	}

	setPedsCurrentHeadOverlayColor(headOverlayId) {
		if (info.values.headOverlays[editData.selectedGender].indexOf(headOverlayId) < 0) return

		const headOverlay = editData.appearance.headOverlays[headOverlayId];

		if (headOverlay.colorIndex === -1) return

		const color = this.getHeadOverlayColors(headOverlayId)[headOverlay.colorIndex];

		ped.setHeadOverlayColor(headOverlayId, this.getHeadOverlayColorType(headOverlayId), color, color);
	}

	mapHeadOverlayItems(items, gender) {
		items.map((item) => {
			if (item.text === "Зачіска") {
				const labelTemplate = `CC_${(gender === 1 ? "M" : "F")}_HS_`;
				const currentHairIndex = editData.appearance.hairIndex[gender];
				let selectedIndex = 0;

				item.values = [];

				for (let i = 0; i < info.values.hair[gender].length; i++) {
					const hairValue = info.values.hair[gender][i];

					if (i === currentHairIndex) {
						selectedIndex = i;
					}

					const label = mp.game.ui.getLabelText(labelTemplate + hairValue.toString());

					item.values.push(stringHelper.escapeHtml(label));
				}

				item.valueIndex = selectedIndex;

			} else if (item.text === "Колір очей") {
				let selectedIndex = 0;

				item.values = [];

				for (let i = 0; i < info.values.eyeColors.length; i++) {
					if (i === editData.appearance.eyeColorIndex) {
						selectedIndex = i;
					}

					const label = mp.game.ui.getLabelText(`FACE_E_C_${info.values.eyeColors[i]}`);

					item.values.push(stringHelper.escapeHtml(label));
				}

				item.valueIndex = selectedIndex;
			} else {
				const headOverlayId = this.getHeadOverlayIdByItemName(item.text);
				const itemsCount = this.getHeadOverlayItemsCount(headOverlayId);
				const currentHeadOverlay = editData.appearance.headOverlays[headOverlayId];
				let selectedIndex = 0;

				item.values = [];

				for (let i = 0; i <= itemsCount; i++) {
					if (currentHeadOverlay.value === i - 1) {
						selectedIndex = i;
					}

					const label = this.getHeadOverlayLabel(headOverlayId, i);
					const text = info.values.headOverlaysLabels[headOverlayId] ? label : mp.game.ui.getLabelText(label);

					item.values.push(stringHelper.escapeHtml(text));
				}

				item.valueIndex = selectedIndex;
			}

			const [isColorShowed, isOpacityShowed] = this.getButtonsState(item.text);


			if (isColorShowed) {
				if (item.text === "Зачіска") {
					item.colors = info.values.hairColors;
					item.currentColor = editData.appearance.hairColorIndex;
				}
				else {
					const headOverlayId = this.getHeadOverlayIdByItemName(item.text);
					const colors = this.getHeadOverlayColors(headOverlayId);

					item.colors = colors;
					item.currentColor = editData.appearance.headOverlays[headOverlayId].colorIndex;

				}
			}


			if (isOpacityShowed) {
				const headOverlayId = this.getHeadOverlayIdByItemName(item.text);
				item.opacity = editData.appearance.headOverlays[headOverlayId].opacity;
			}



			return item;
		});
	}

	getHeadOverlayItemsCount(headOverlayId) {
		if (headOverlayId === 4) {
			return info.values.makeups.length;
		} else if (headOverlayId === 5) {
			return info.values.blushes.length;
		}

		return mp.game.ped.getNumHeadOverlayValues(headOverlayId);
	}

	isHeadOverlayHasColor(headOverlayId) {
		return headOverlayId === 1 || headOverlayId === 2 || headOverlayId === 5 || headOverlayId === 8;
	}

	getHeadOverlayIdByItemName(name) {
		switch (name) {
			case "Брови":
				return 2;
			case "Волосся на обличчі":
				return 1;
			case "Дефекти шкіри":
				return 0;
			case "Старіння шкіри":
				return 3;
			case "Тип шкіри":
				return 6;
			case "Родинки та веснянки":
				return 9;
			case "Ушкодження шкіри":
				return 7;
			case "Макіяж очей":
				return 4;
			case "Румяна":
				return 5;
			case "Помада":
				return 8;
		}
	}

	getHeadOverlayLabel(headOverlayId, index) {
		switch (headOverlayId) {
			case 2: // Eyebrows
				return index === 0 ? "NONE" : `CC_EYEBRW_${index - 1}`;
			case 4: // Makeup
				return index === 0 ? "NONE" : `CC_MKUP_${info.values.makeups[index - 1]}`;
			case 5: // Blush
				return index === 0 ? "NONE" : `CC_BLUSH_${info.values.blushes[index - 1]}`;
			case 8: // Lipstick
				return index === 0 ? "NONE" : `CC_LIPSTICK_${index - 1}`;
			default:
				return info.values.headOverlaysLabels[headOverlayId] ? info.values.headOverlaysLabels[headOverlayId][index] : "NONE";
		}
	}

	// [ color, opacity ]
	getButtonsState(itemName) {
		if (itemName === "Зачіска") {
			return [true, false];
		} else if (itemName === "Колір очей") {
			return [false, false];
		} else if (itemName === "Брови" || itemName === "Волосся на обличчі" || itemName === "Помада" || itemName === "Румяна") {
			return [true, true];
		}

		return [false, true];
	}

	initColors() {
		const maxColors = Math.max(mp.game.invoke("0xE5C0CF872C2AD150"), mp.game.invoke("0xD1F7CA1535D22818"));

		for (let i = 0; i < maxColors; i++) {
			if (mp.game.ped.isAValidHairColor(i)) {
				info.values.hairColors.push(i);
			}

			if (mp.game.ped.isAValidLipstickColor(i)) {
				info.values.lipstickColors.push(i);
			}

			if (mp.game.ped.isAValidBlushColor(i)) {
				info.values.makeupColors.push(i);
			}
		}
	}

	getNextValidValue(collection, currentValue, additionValue) {
		let value = currentValue + additionValue;

		if (value < 0) {
			value = collection.length - 1;
		}

		if (value >= collection.length) {
			value = 0;
		}

		return value;
	}

	getHeadOverlayColorType(headOverlayId) {
		switch (headOverlayId) {
			case 1: case 2: case 10:
				return 1;
			case 5: case 8:
				return 2;
			default:
				return 0;
		}
	}

	getHeadOverlayColors(headOverlayId) {
		switch (headOverlayId) {
			case 1:
			case 2:
				return info.values.hairColors;
			case 5:
				return info.values.makeupColors;
			case 8:
				return info.values.lipstickColors;
			default:
				return [];
		}
	}

}

mp.events.add("characterCreation.setOpacity", (name, opacity) => {
	const headOverlayId = characterCreation.getHeadOverlayIdByItemName(name);

	editData.appearance.headOverlays[headOverlayId].opacity = opacity

	if (editData.appearance.headOverlays[headOverlayId].opacity > 1) {
		editData.appearance.headOverlays[headOverlayId].opacity = 1;
	} else if (editData.appearance.headOverlays[headOverlayId].opacity < 0) {
		editData.appearance.headOverlays[headOverlayId].opacity = 0;
	}

	characterCreation.setPedsCurrentHeadOverlay(headOverlayId);
});

mp.events.add("characterCreation.setColor", (name, index) => {
	if (name === "Зачіска") {
		editData.appearance.hairColorIndex = index;

		characterCreation.setPedsCurrentHairColor();
	} else {
		const headOverlayId = characterCreation.getHeadOverlayIdByItemName(name);
		const colors = characterCreation.getHeadOverlayColors(headOverlayId);

		editData.appearance.headOverlays[headOverlayId].colorIndex = index;

		characterCreation.setPedsCurrentHeadOverlayColor(headOverlayId);
	}
});

mp.events.add("updateCharacter", () => {
	const data = {
		gender: editData.selectedGender,
		father: info.fathers[editData.fatherIndex],
		mother: info.mothers[editData.motherIndex],
		shapeMix: editData.shapeMix,
		skinMix: editData.skinMix,
		faceFeatures: editData.faceFeatures.map((faceFeature) => Math.round(faceFeature * 100) / 100),
		appearance: {
			hair: info.values.hair[editData.selectedGender][editData.appearance.hairIndex[editData.selectedGender]],
			hairColor: info.values.hairColors[editData.appearance.hairColorIndex],
			eyeColor: info.values.eyeColors[editData.appearance.eyeColorIndex],
			headOverlays: info.values.headOverlays[editData.selectedGender].map((headOverlayId) => {
				const headOverlay = editData.appearance.headOverlays[headOverlayId];
				const color = headOverlay.colorIndex === -1 ? 0 : characterCreation.getHeadOverlayColors(headOverlayId)[headOverlay.colorIndex];

				return { id: headOverlayId, value: headOverlay.value, opacity: headOverlay.opacity, color };
			})
		},
	};

	mp.events.callRemote("updateCharacter", JSON.stringify(data));
});

mp.events.add("registerCharacter", (characterName) => {
	const clothes = editData.clothesItems[editData.selectedGender];
	const pedClothes = editData.clothes[editData.selectedGender];
	const data = {
		characterName,
		slot: characterCreation.characterSlot,
		gender: editData.selectedGender,
		father: info.fathers[editData.fatherIndex],
		mother: info.mothers[editData.motherIndex],
		shapeMix: editData.shapeMix,
		skinMix: editData.skinMix,
		faceFeatures: editData.faceFeatures.map((faceFeature) => Math.round(faceFeature * 100) / 100),
		appearance: {
			hair: info.values.hair[editData.selectedGender][editData.appearance.hairIndex[editData.selectedGender]],
			hairColor: info.values.hairColors[editData.appearance.hairColorIndex],
			eyeColor: info.values.eyeColors[editData.appearance.eyeColorIndex],
			headOverlays: info.values.headOverlays[editData.selectedGender].map((headOverlayId) => {
				const headOverlay = editData.appearance.headOverlays[headOverlayId];
				const color = headOverlay.colorIndex === -1 ? 0 : characterCreation.getHeadOverlayColors(headOverlayId)[headOverlay.colorIndex];

				return { id: headOverlayId, value: headOverlay.value, opacity: headOverlay.opacity, color };
			})
		},
		clothes: {},
	};

	if (clothes[0].values[pedClothes.topIndex] != 'Пусто') {
		data.clothes.top = { variation: clothes[0].values[pedClothes.topIndex].variation, texture: clothes[0].values[pedClothes.topIndex].textures[0], torso: clothes[0].values[pedClothes.topIndex].torso }
	}

	if (clothes[1].values[pedClothes.legsIndex] != 'Пусто') {
		data.clothes.legs = { variation: clothes[1].values[pedClothes.legsIndex].variation, texture: clothes[1].values[pedClothes.legsIndex].textures[0] }
	}

	if (clothes[2].values[pedClothes.shoesIndex] != 'Пусто') {
		data.clothes.shoes = { variation: clothes[2].values[pedClothes.shoesIndex].variation, texture: clothes[2].values[pedClothes.shoesIndex].textures[0] }
	}

	if (clothes[3]) {
		if (clothes[3].values[pedClothes.hatsIndex] != 'Пусто') {
			data.clothes.hat = { variation: clothes[3].values[pedClothes.hatsIndex].variation, texture: clothes[3].values[pedClothes.hatsIndex].textures[0] }
		}
	}

	mp.events.callRemote("registerCharacter", JSON.stringify(data));
});

mp.events.add("character_creation::setActive", (active) => {
	mp.characterCreation = active
	mp.events.call("displayRadar", !active)
	mp.events.call("displayChat", !active)
	mp.events.call("hudControl.enable", !active)
	setCursor(active)
});

mp.events.add("character_creation::init", async (slot, donate) => {
	if (!info.values.clothes) return rpc.callBrowser(browserMenu, "nError", `Помилка №253421. Зверніться до розробника`)

	if (characterCreation.characterSlot !== undefined) return;
	characterCreation.characterSlot = slot

	if (info.values.hairColors.length === 0) {
		characterCreation.initColors();
	}

	characterCreation.resetEditData();
	mp.events.call("ac:refreshtp")
	localPlayer.position = info.spawn.position;
	localPlayer.setHeading(info.spawn.heading);
	localPlayer.freezePosition(true);
	localPlayer.setAlpha(255);
	editData.selectedGender = 0;


	for (let i = 0; i < 2; i++) {
		const items = [...info.headOverlaysMenu[i]];
		characterCreation.mapHeadOverlayItems(items, i);
		browserMenu.call(`characterCreation`, `setItems`, 'look', items, i);

		const clothes = editData.clothes[i];
		const clothesitems = editData.clothesItems[i];

		clothesitems[0].valueIndex = clothes.topIndex;
		clothesitems[1].valueIndex = clothes.legsIndex;
		clothesitems[2].valueIndex = clothes.shoesIndex;
		if (clothesitems[3]) clothesitems[3].valueIndex = clothes.hatsIndex;
		browserMenu.call(`characterCreation`, `setItems`, 'clothes', clothesitems, i);
	}


	mp.game.ui.requestAdditionalText("HAR_MNU", 9);

	if (!donate) mp.events.call("hideEnterAccount");
	mp.events.call("focusOnPlayer", false, 342.0);
	characterCreation.toggleGender();
	characterRotator.startForPeds(localPlayer)
	setTimeout(() => {
		browserMenu.call(`characterCreation`, `show`, true, donate);
		mp.events.call("fadeIn", 500)
	}, 500)
});

mp.events.add("character_creation::stop", (donate) => {
	browserMenu.call(`characterCreation`, `show`, false);
	characterRotator.stop()
	characterCreation.characterSlot = undefined;
	mp.events.call("finishMoveCam");
	if (!donate) setCamStartedPos()
	localPlayer.freezePosition(false);
});

mp.events.add("characterCreation.page", (page, newhender) => {
	if (page == 0) {
		mp.events.call("focusOnPlayer", false, 342.0);
	} else if (page == 1) {
		mp.events.call("focusOnHead", false, 342.0);
	} else if (page == 2) {
		mp.events.call("focusOnPlayer", false, 342.0);
	} else if (page == 3) {
		mp.events.call("focusOnPlayer", false, 342.0);
	}
});


mp.events.add("characterCreation.itemValueChanged", (menuName, itemName, itemValue, itemIndex, valueIndex) => {
	if (menuName === "character_main") {
		if (itemName === "Стать") {
			characterCreation.toggleGender();
		}
	} else if (menuName === "character_parents") {
		if (itemName === "mother") {
			editData.motherIndex = valueIndex;

			characterCreation.setPedsCurrentHeadBlendData();
		} else if (itemName === "father") {
			editData.fatherIndex = valueIndex;

			characterCreation.setPedsCurrentHeadBlendData();
		} else if (itemName === "similarity") {
			editData.shapeMix = valueIndex / 100;

			characterCreation.setPedsCurrentHeadBlendData();
		} else if (itemName === "skincolor") {
			editData.skinMix = valueIndex / 100;

			characterCreation.setPedsCurrentHeadBlendData();
		}
	} else if (menuName === "character_faceFeatures") {
		const value = valueIndex * 0.02 - 1;

		editData.faceFeatures[itemIndex] = value;
		characterCreation.setPedsFaceFeature(itemIndex, value);
	} else if (menuName === "character_look") {
		if (itemName === "Зачіска") {
			editData.appearance.hairIndex[editData.selectedGender] = valueIndex;

			characterCreation.setPedCurrentHair();
		} else if (itemName === "Колір очей") {
			editData.appearance.eyeColorIndex = valueIndex;

			characterCreation.setPedsCurrentEyeColor();
		} else {
			const headOverlayId = characterCreation.getHeadOverlayIdByItemName(itemName);
			let value = valueIndex === 0 ? 255 : valueIndex - 1;

			if (valueIndex > 0) {
				if (headOverlayId === 4) {
					value = info.values.makeups[valueIndex - 1];
				} else if (headOverlayId === 5) {
					value = info.values.blushes[valueIndex - 1];
				}
			}

			editData.appearance.headOverlays[headOverlayId].value = value;

			characterCreation.setPedsCurrentHeadOverlay(headOverlayId);
		}
	} else if (menuName === "character_clothes") {
		if (itemName === "Торс") {
			editData.clothes[editData.selectedGender].topIndex = valueIndex;
		} else if (itemName === "Ноги") {
			editData.clothes[editData.selectedGender].legsIndex = valueIndex;
		} else if (itemName === "Взуття") {
			editData.clothes[editData.selectedGender].shoesIndex = valueIndex;
		} else if (itemName === "Головні убори") {
			editData.clothes[editData.selectedGender].hatsIndex = valueIndex;
		}

		characterCreation.setPedCurrentClothes(editData.selectedGender);
	}
});

const characterCreation = new CharacterCreation

}; a; }
{let a = function scriptEntryPoint(mp) {
const configBusRoutes = [
	{ 
		name: "Р1 1/8: Автопарк - Радiомаяк",
		checkpoint_positions: [
			{ pos: new mp.Vector3(-249.101, -882.437, 30.605),  stop: true, name: "Автопарк" }, 
			{ pos: new mp.Vector3(-171.691, -867.293, 29.352),  stop: false }, 
			{ pos: new mp.Vector3(-96.183, -661.364, 35.836),  stop: false }, 
			{ pos: new mp.Vector3(5.070, -371.518, 40.011),  stop: false }, 
			{ pos: new mp.Vector3(70.537, -306.872, 46.829),  stop: false }, 
			{ pos: new mp.Vector3(242.410, -370.680, 44.333),  stop: true, name: "Детективне агенство" }, 
			{ pos: new mp.Vector3(358.851, -401.715, 45.549),  stop: false }, 
			{ pos: new mp.Vector3(495.369, -287.555, 46.739),  stop: false }, 
			{ pos: new mp.Vector3(524.159, -185.329, 53.610),  stop: true, name: "Станцiя Чiп-Тюнингу" }, 
			{ pos: new mp.Vector3(542.002, -106.052, 64.436),  stop: false }, 
			{ pos: new mp.Vector3(647.478, -92.349, 74.581),  stop: false }, 
			{ pos: new mp.Vector3(841.000, -209.285, 72.424),  stop: false }, 
			{ pos: new mp.Vector3(922.710, -200.346, 72.656),  stop: true, name: "Таксопарк" }, 
			{ pos: new mp.Vector3(922.459, -127.210, 76.092),  stop: false }, 
			{ pos: new mp.Vector3(817.726, -29.464, 80.639),  stop: false }, 
			{ pos: new mp.Vector3(893.887, 52.673, 78.773),  stop: true, name: "Казино" }, 
			{ pos: new mp.Vector3(1135.984, 293.259, 90.311),  stop: false }, 
			{ pos: new mp.Vector3(1115.605, 409.340, 91.467),  stop: false }, 
			{ pos: new mp.Vector3(1043.382, 503.035, 95.716),  stop: false }, 
			{ pos: new mp.Vector3(1122.369, 626.733, 112.900),  stop: false }, 
			{ pos: new mp.Vector3(1157.064, 731.624, 141.700),  stop: false }, 
			{ pos: new mp.Vector3(1023.451, 691.912, 159.588),  stop: false }, 
			{ pos: new mp.Vector3(978.729, 953.701, 219.114),  stop: false }, 
			{ pos: new mp.Vector3(709.328, 795.894, 206.611),  stop: false }, 
			{ pos: new mp.Vector3(513.512, 858.703, 197.977),  stop: false }, 
			{ pos: new mp.Vector3(477.341, 914.785, 198.483),  stop: false }, 
			{ pos: new mp.Vector3(443.274, 1110.300, 232.257),  stop: false }, 
			{ pos: new mp.Vector3(557.219, 1366.397, 299.865),  stop: false }, 
			{ pos: new mp.Vector3(745.481, 1359.947, 339.837),  stop: false },
			{ pos: new mp.Vector3(811.151, 1278.995, 360.483),  stop: false }]
	},
	{ 
		name: "Р1 2/8: Радiомаяк - Плайс Плейс",
		checkpoint_positions: [
			{ pos: new mp.Vector3(863.316, 1302.672, 357.405),  stop: false }, 
			{ pos: new mp.Vector3(622.727, 1406.450, 319.177),  stop: false }, 
			{ pos: new mp.Vector3(410.404, 1267.069, 261.478),  stop: false }, 
			{ pos: new mp.Vector3(533.875, 1035.725, 219.347),  stop: false }, 
			{ pos: new mp.Vector3(435.155, 886.154, 198.335),  stop: false }, 
			{ pos: new mp.Vector3(369.186, 999.394, 209.901),  stop: false }, 
			{ pos: new mp.Vector3(324.236, 1042.242, 211.036),  stop: false }, 
			{ pos: new mp.Vector3(214.831, 1350.572, 239.823),  stop: false }, 
			{ pos: new mp.Vector3(61.134, 1428.551, 265.292),  stop: false }, 
			{ pos: new mp.Vector3(-192.492, 1480.746, 288.898),  stop: false }, 
			{ pos: new mp.Vector3(-224.830, 1299.978, 306.352),  stop: false }, 
			{ pos: new mp.Vector3(-352.446, 1174.330, 325.349),  stop: false }, 
			{ pos: new mp.Vector3(-393.346, 1201.195, 325.641),  stop: false }, 
			{ pos: new mp.Vector3(-396.013, 1227.765, 325.642),  stop: true, name: "Обсерваторiя" }, 
			{ pos: new mp.Vector3(-440.416, 1196.179, 325.760),  stop: false }, 
			{ pos: new mp.Vector3(-454.597, 1306.666, 310.593),  stop: false }, 
			{ pos: new mp.Vector3(-503.438, 1335.213, 302.947),  stop: false }, 
			{ pos: new mp.Vector3(-676.127, 1278.031, 277.831),  stop: false }, 
			{ pos: new mp.Vector3(-726.515, 1138.204, 262.296),  stop: false }, 
			{ pos: new mp.Vector3(-699.630, 988.785, 238.037),  stop: false }, 
			{ pos: new mp.Vector3(-420.830, 902.315, 236.902),  stop: false }, 
			{ pos: new mp.Vector3(-257.836, 1056.083, 235.763),  stop: false }, 
			{ pos: new mp.Vector3(-117.867, 1049.216, 228.249),  stop: false }, 
			{ pos: new mp.Vector3(123.114, 961.547, 211.497),  stop: false }, 
			{ pos: new mp.Vector3(313.837, 983.832, 210.421),  stop: false }, 
			{ pos: new mp.Vector3(280.894, 805.253, 188.791),  stop: false }, 
			{ pos: new mp.Vector3(267.890, 572.597, 147.283),  stop: false }, 
			{ pos: new mp.Vector3(243.300, 317.690, 105.584),  stop: false }, 
			{ pos: new mp.Vector3(279.709, 156.628, 104.319),  stop: true, name: "Банк" }, 
			{ pos: new mp.Vector3(406.090, 110.784, 101.371),  stop: false }, 
			{ pos: new mp.Vector3(632.815, 38.556, 88.009),  stop: false }, 
			{ pos: new mp.Vector3(753.585, -34.953, 81.791),  stop: false }, 
			{ pos: new mp.Vector3(1082.763, -233.676, 69.487),  stop: false }, 
			{ pos: new mp.Vector3(1173.320, -477.317, 65.699),  stop: true, name: "Мiрор-парк" }, 
			{ pos: new mp.Vector3(1195.260, -724.478, 59.231),  stop: false }, 
			{ pos: new mp.Vector3(1217.471, -1153.337, 37.189),  stop: false }, 
			{ pos: new mp.Vector3(1299.664, -1637.589, 51.585),  stop: false }, 
			{ pos: new mp.Vector3(1075.197, -1774.773, 35.790),  stop: false }, 
			{ pos: new mp.Vector3(1041.553, -1877.872, 29.056),  stop: true, name: "Металургiйний завод" }, 
			{ pos: new mp.Vector3(944.325, -1905.781, 31.117),  stop: false }, 
			{ pos: new mp.Vector3(912.162, -2071.674, 30.532),  stop: false }, 
			{ pos: new mp.Vector3(639.241, -2041.209, 29.222),  stop: false }, 
			{ pos: new mp.Vector3(433.170, -2112.616, 20.363),  stop: false }, 
			{ pos: new mp.Vector3(347.784, -2328.351, 10.190),  stop: false }, 
			{ pos: new mp.Vector3(308.187, -2507.729, 5.878),  stop: false }, 
			{ pos: new mp.Vector3(102.186, -2606.490, 6.005),  stop: false }, 
			{ pos: new mp.Vector3(-16.542, -2614.882, 6.001),  stop: true, name: "Пiдводнi занурення" }, 
			{ pos: new mp.Vector3(-351.247, -2702.981, 6.050),  stop: false }, 
			{ pos: new mp.Vector3(-416.914, -2769.157, 6.001),  stop: false }]
	},
	{
		name: "Р1 3/8: Плайс Плейс - Пустеля Гранд-Сенора",
		checkpoint_positions: [
			{ pos: new mp.Vector3(-380.254, -2768.321, 6.000), stop: false },
			{ pos: new mp.Vector3(-212.447, -2626.028, 6.051), stop: false },
			{ pos: new mp.Vector3(210.239, -2552.073, 5.878), stop: false },
			{ pos: new mp.Vector3(463.164, -2505.282, 14.913), stop: false },
			{ pos: new mp.Vector3(717.728, -2480.842, 20.188), stop: false },
			{ pos: new mp.Vector3(760.334, -2411.796, 20.375), stop: false },
			{ pos: new mp.Vector3(777.266, -2213.228, 29.289), stop: false },
			{ pos: new mp.Vector3(793.699, -2031.992, 29.274), stop: false },
			{ pos: new mp.Vector3(853.661, -1761.989, 29.398), stop: false },
			{ pos: new mp.Vector3(878.582, -1765.823, 29.930), stop: true, name: "Сайпрес Флетс" },
			{ pos: new mp.Vector3(987.089, -1774.309, 31.347), stop: false },
			{ pos: new mp.Vector3(1204.312, -1702.625, 36.258), stop: false },
			{ pos: new mp.Vector3(1363.360, -1590.035, 52.863), stop: false },
			{ pos: new mp.Vector3(1728.902, -1293.740, 85.614), stop: false },
			{ pos: new mp.Vector3(2135.477, -846.489, 78.183), stop: false },
			{ pos: new mp.Vector3(2541.422, -617.303, 62.772), stop: true, name: "FIB" },
			{ pos: new mp.Vector3(2404.351, -437.954, 72.200), stop: false },
			{ pos: new mp.Vector3(2435.739, -221.788, 86.201), stop: false },
			{ pos: new mp.Vector3(2571.438, 166.046, 97.858), stop: false },
			{ pos: new mp.Vector3(2594.743, 358.645, 108.438), stop: true, name: "Гори Татавiам" },
			{ pos: new mp.Vector3(2612.865, 429.486, 107.939), stop: false },
			{ pos: new mp.Vector3(2572.807, 736.537, 91.634), stop: false },
			{ pos: new mp.Vector3(2452.193, 988.603, 85.952), stop: false },
			{ pos: new mp.Vector3(2457.743, 1273.151, 51.852), stop: false },
			{ pos: new mp.Vector3(2549.034, 1621.594, 29.651), stop: true, name: "Вiтрова ферма" },
			{ pos: new mp.Vector3(2540.767, 1908.329, 20.543), stop: false },
			{ pos: new mp.Vector3(2580.161, 2617.684, 36.662), stop: false },
			{ pos: new mp.Vector3(2552.663, 2703.777, 41.902), stop: true, name: "Кар’ер Девiс Кварц" },
			{ pos: new mp.Vector3(2437.809, 2877.565, 49.156), stop: false },
			{ pos: new mp.Vector3(2294.498, 3022.690, 46.290), stop: false },
			{ pos: new mp.Vector3(2283.966, 3142.748, 48.197), stop: false }]
	},
	{
		name: "Р1 4/8: Пустеля Гранд-Сенора - Маяк",
		checkpoint_positions: [
			{ pos: new mp.Vector3(2259.218, 3177.213, 48.987), stop: false },
			{ pos: new mp.Vector3(2222.866, 3248.857, 48.124), stop: false },
			{ pos: new mp.Vector3(2005.232, 3303.820, 45.755), stop: false },
			{ pos: new mp.Vector3(1962.883, 3306.863, 45.503), stop: false },
			{ pos: new mp.Vector3(1815.182, 3306.850, 42.644), stop: false },
			{ pos: new mp.Vector3(1728.030, 3462.090, 39.000), stop: false },
			{ pos: new mp.Vector3(1684.471, 3561.644, 35.567), stop: false },
			{ pos: new mp.Vector3(1785.010, 3614.585, 34.380), stop: true, name: "Лiкарня Сендi Шорс" },
			{ pos: new mp.Vector3(1942.585, 3710.054, 32.350), stop: false },
			{ pos: new mp.Vector3(2040.541, 3752.514, 32.383), stop: false },
			{ pos: new mp.Vector3(2084.433, 3730.106, 33.019), stop: false },
			{ pos: new mp.Vector3(2445.762, 3989.508, 36.931), stop: false },
			{ pos: new mp.Vector3(2491.501, 4147.638, 37.962), stop: false },
			{ pos: new mp.Vector3(2431.106, 4618.868, 36.884), stop: false },
			{ pos: new mp.Vector3(2166.712, 4760.684, 41.062), stop: true, name: "Аеропорт" },
			{ pos: new mp.Vector3(2032.581, 4658.886, 41.182), stop: false },
			{ pos: new mp.Vector3(1839.324, 4581.278, 36.166), stop: false },
			{ pos: new mp.Vector3(1733.615, 4602.797, 41.320), stop: false },
			{ pos: new mp.Vector3(1673.045, 4856.432, 42.041), stop: false },
			{ pos: new mp.Vector3(1689.445, 4947.188, 42.613), stop: true, name: "Грейпсiд" },
			{ pos: new mp.Vector3(1768.635, 5013.602, 53.114), stop: false },
			{ pos: new mp.Vector3(1906.711, 5130.552, 45.218), stop: false },
			{ pos: new mp.Vector3(1994.020, 5151.435, 45.334), stop: false },
			{ pos: new mp.Vector3(2244.081, 5190.097, 60.438), stop: false },
			{ pos: new mp.Vector3(2388.153, 5138.591, 47.455), stop: false },
			{ pos: new mp.Vector3(2284.830, 4982.983, 41.958), stop: false },
			{ pos: new mp.Vector3(2360.056, 4909.872, 42.017), stop: true, name: "Ферма" },
			{ pos: new mp.Vector3(2525.032, 4766.202, 34.645), stop: false },
			{ pos: new mp.Vector3(2586.174, 4737.310, 33.675), stop: false },
			{ pos: new mp.Vector3(2804.416, 4954.073, 33.664), stop: false },
			{ pos: new mp.Vector3(3058.559, 5065.830, 25.263), stop: false },
			{ pos: new mp.Vector3(3172.385, 5117.746, 17.843), stop: false },
			{ pos: new mp.Vector3(3321.710, 5147.888, 18.318), stop: false }]
	},
	{
		name: "Р1 5/8: Маяк - Пожежна станцiя",
		checkpoint_positions: [
			{ pos: new mp.Vector3(3233.217, 5134.900, 19.452), stop: false },
			{ pos: new mp.Vector3(3059.124, 5065.227, 25.275), stop: false },
			{ pos: new mp.Vector3(2896.671, 5039.051, 31.745), stop: false },
			{ pos: new mp.Vector3(2780.058, 4971.187, 33.678), stop: false },
			{ pos: new mp.Vector3(2633.955, 5158.841, 44.780), stop: false },
			{ pos: new mp.Vector3(2427.383, 5745.273, 45.508), stop: false },
			{ pos: new mp.Vector3(1979.336, 6275.899, 45.334), stop: false },
			{ pos: new mp.Vector3(1756.841, 6373.998, 36.728), stop: false },
			{ pos: new mp.Vector3(1695.725, 6400.028, 32.164), stop: true, name: "Магазин 24/7 №39" },
			{ pos: new mp.Vector3(1576.958, 6441.636, 24.651), stop: false },
			{ pos: new mp.Vector3(1013.592, 6495.605, 20.983), stop: false },
			{ pos: new mp.Vector3(418.225, 6577.003, 27.335), stop: false },
			{ pos: new mp.Vector3(198.856, 6610.069, 31.723), stop: true, name: "АЗС №156" },
			{ pos: new mp.Vector3(138.038, 6622.177, 31.767), stop: false },
			{ pos: new mp.Vector3(169.960, 6545.990, 31.908), stop: false },
			{ pos: new mp.Vector3(-2.512, 6640.604, 31.279), stop: false },
			{ pos: new mp.Vector3(-191.461, 6459.085, 30.814), stop: false },
			{ pos: new mp.Vector3(-393.515, 6293.253, 29.545), stop: false },
			{ pos: new mp.Vector3(-346.473, 6145.738, 31.484), stop: false }]
	},
	{
		name: "Р1 6/8: Пожежна станцiя - Виноградник",
		checkpoint_positions: [
			{ pos: new mp.Vector3(-351.052, 6163.727, 31.491), stop: false },
			{ pos: new mp.Vector3(-410.644, 6130.729, 31.274), stop: false },
			{ pos: new mp.Vector3(-462.199, 6070.886, 31.065), stop: false },
			{ pos: new mp.Vector3(-632.916, 6065.309, 8.332), stop: false },
			{ pos: new mp.Vector3(-720.884, 5807.122, 17.383), stop: true, name: "Лiс Палето-Бей" },
			{ pos: new mp.Vector3(-800.189, 5582.299, 30.682), stop: false },
			{ pos: new mp.Vector3(-858.636, 5446.592, 34.469), stop: false },
			{ pos: new mp.Vector3(-953.215, 5427.069, 38.608), stop: true, name: "Лiсопилка" },
			{ pos: new mp.Vector3(-1137.703, 5299.987, 51.833), stop: false },
			{ pos: new mp.Vector3(-1347.175, 5132.336, 61.704), stop: false },
			{ pos: new mp.Vector3(-1526.663, 4997.614, 62.424), stop: true, name: "Скупник шкур" },
			{ pos: new mp.Vector3(-1712.946, 4805.402, 59.447), stop: false },
			{ pos: new mp.Vector3(-2045.061, 4484.151, 57.199), stop: false },
			{ pos: new mp.Vector3(-2292.272, 4208.528, 41.125), stop: false },
			{ pos: new mp.Vector3(-2469.696, 3758.286, 18.014), stop: false },
			{ pos: new mp.Vector3(-2429.791, 3635.145, 14.112), stop: false },
			{ pos: new mp.Vector3(-2346.840, 3412.428, 29.503), stop: true, name: "Нацiональна гвардiя" },
			{ pos: new mp.Vector3(-2389.218, 3528.809, 19.731), stop: false },
			{ pos: new mp.Vector3(-2492.598, 3610.819, 14.261), stop: false },
			{ pos: new mp.Vector3(-2625.032, 2907.095, 16.704), stop: false },
			{ pos: new mp.Vector3(-2704.730, 2367.668, 16.785), stop: false },
			{ pos: new mp.Vector3(-2681.504, 2279.608, 20.597), stop: false },
			{ pos: new mp.Vector3(-2126.325, 2304.501, 37.257), stop: false },
			{ pos: new mp.Vector3(-2051.054, 2274.242, 42.746), stop: false },
			{ pos: new mp.Vector3(-1808.886, 2300.578, 70.124), stop: false },
			{ pos: new mp.Vector3(-1642.427, 2183.313, 93.011), stop: false },
			{ pos: new mp.Vector3(-1879.411, 2012.450, 141.195), stop: false }]
	},
	{
		name: "Р1 7/8: Виноградник - Пляж Лос Сантоса",
		checkpoint_positions: [
			{ pos: new mp.Vector3(-1861.588, 1958.136, 144.383), stop: false },
			{ pos: new mp.Vector3(-1858.009, 1838.364, 161.621), stop: false },
			{ pos: new mp.Vector3(-1989.499, 1805.555, 181.777), stop: false },
			{ pos: new mp.Vector3(-2034.096, 1992.776, 189.957), stop: false },
			{ pos: new mp.Vector3(-2313.355, 1870.115, 182.805), stop: false },
			{ pos: new mp.Vector3(-2549.017, 1890.434, 167.517), stop: false },
			{ pos: new mp.Vector3(-2590.772, 1666.062, 141.128), stop: false },
			{ pos: new mp.Vector3(-2699.937, 1506.512, 108.576), stop: false },
			{ pos: new mp.Vector3(-2893.214, 1300.699, 52.531), stop: false },
			{ pos: new mp.Vector3(-3032.673, 1241.938, 26.888), stop: false },
			{ pos: new mp.Vector3(-3096.324, 1228.087, 20.291), stop: false },
			{ pos: new mp.Vector3(-3112.959, 1323.613, 20.146), stop: false },
			{ pos: new mp.Vector3(-3215.368, 1102.589, 10.443), stop: false },
			{ pos: new mp.Vector3(-3232.804, 968.823, 13.007), stop: true, name: "Пiрс в Чумашах" },
			{ pos: new mp.Vector3(-3181.653, 907.552, 14.553), stop: false },
			{ pos: new mp.Vector3(-3117.075, 1041.206, 19.905), stop: false },
			{ pos: new mp.Vector3(-3129.100, 1112.656, 20.597), stop: false },
			{ pos: new mp.Vector3(-3149.231, 1065.906, 20.625), stop: true, name: "Магазин одягу №10" },
			{ pos: new mp.Vector3(-3163.569, 950.236, 14.648), stop: false },
			{ pos: new mp.Vector3(-3095.129, 741.572, 20.489), stop: false },
			{ pos: new mp.Vector3(-3030.767, 592.109, 7.737), stop: true, name: "Магазин 24/7 №151" },
			{ pos: new mp.Vector3(-3060.760, 408.038, 6.711), stop: false },
			{ pos: new mp.Vector3(-3036.640, 196.979, 16.086), stop: false },
			{ pos: new mp.Vector3(-2895.892, 64.137, 13.941), stop: false },
			{ pos: new mp.Vector3(-2324.801, -321.322, 13.774), stop: false },
			{ pos: new mp.Vector3(-2014.293, -455.715, 11.483), stop: false }]
	},
	{ 
		name: "Р1 8/8: Пляж Лос Сантоса - Автопарк",
		checkpoint_positions: [
			{ pos: new mp.Vector3(-2014.293, -455.715, 11.483), stop: false }, 
			{ pos: new mp.Vector3(-1766.141, -659.739, 10.573),  stop: false }, 
			{ pos: new mp.Vector3(-1621.617, -772.858, 10.751),  stop: false }, 
			{ pos: new mp.Vector3(-1414.599, -840.687, 17.648),  stop: false }, 
			{ pos: new mp.Vector3(-1392.659, -783.783, 19.875),  stop: false }, 
			{ pos: new mp.Vector3(-1465.630, -783.203, 23.755),  stop: false }, 
			{ pos: new mp.Vector3(-1588.717, -930.170, 15.084),  stop: false }, 
			{ pos: new mp.Vector3(-1620.416, -1007.171, 13.080),  stop: false }, 
			{ pos: new mp.Vector3(-1599.455, -1041.092, 13.018),  stop: true, name: "Парк Розваг" }, 
			{ pos: new mp.Vector3(-1561.686, -1022.214, 13.018),  stop: false }, 
			{ pos: new mp.Vector3(-1540.573, -982.462, 13.018),  stop: false }, 
			{ pos: new mp.Vector3(-1604.426, -1013.700, 13.019),  stop: false }, 
			{ pos: new mp.Vector3(-1614.922, -973.089, 13.018),  stop: false }, 
			{ pos: new mp.Vector3(-1496.357, -828.011, 23.755),  stop: false }, 
			{ pos: new mp.Vector3(-1460.076, -728.432, 24.616),  stop: false }, 
			{ pos: new mp.Vector3(-1576.391, -633.235, 30.096),  stop: false }, 
			{ pos: new mp.Vector3(-1676.210, -549.172, 35.229),  stop: false }, 
			{ pos: new mp.Vector3(-1724.185, -426.672, 43.653),  stop: false }, 
			{ pos: new mp.Vector3(-1603.290, -260.066, 53.466),  stop: false }, 
			{ pos: new mp.Vector3(-1501.190, -144.981, 52.472),  stop: false }, 
			{ pos: new mp.Vector3(-1429.594, -91.832, 51.822),  stop: true, name: "Кiнотеатр Tivol" }, 
			{ pos: new mp.Vector3(-1370.825, -68.999, 51.918),  stop: false }, 
			{ pos: new mp.Vector3(-1191.412, -126.662, 40.522),  stop: false }, 
			{ pos: new mp.Vector3(-1105.434, -171.533, 38.251),  stop: false }, 
			{ pos: new mp.Vector3(-1225.423, -294.049, 37.708),  stop: false }, 
			{ pos: new mp.Vector3(-1337.236, -358.437, 36.737),  stop: false }, 
			{ pos: new mp.Vector3(-1357.852, -436.468, 35.211),  stop: false }, 
			{ pos: new mp.Vector3(-1263.568, -571.351, 28.888),  stop: true, name: "Кiностудiя" }, 
			{ pos: new mp.Vector3(-1160.157, -687.485, 21.997),  stop: false }, 
			{ pos: new mp.Vector3(-1026.215, -812.096, 16.624),  stop: true, name: "LSPD" }, 
			{ pos: new mp.Vector3(-854.464, -976.028, 14.854),  stop: false }, 
			{ pos: new mp.Vector3(-739.549, -1172.902, 10.674),  stop: false }, 
			{ pos: new mp.Vector3(-646.002, -1293.477, 10.668),  stop: false }, 
			{ pos: new mp.Vector3(-559.242, -1222.784, 16.276),  stop: true, name: "АЗС №21" }, 
			{ pos: new mp.Vector3(-534.926, -1129.153, 21.116),  stop: false }, 
			{ pos: new mp.Vector3(-533.105, -963.098, 23.486),  stop: false },
			{ pos: new mp.Vector3(-464.326, -846.341, 30.467),  stop: false }, 
			{ pos: new mp.Vector3(-317.719, -890.244, 31.073),  stop: false }] 
	},
	{ 
		name: "М1: Центр Лос Сантоса",
		checkpoint_positions: [
        { pos: new mp.Vector3(-249.263, -884.041, 30.090), stop: true, name: "Пiллбокс Хiлл" },
        { pos: new mp.Vector3(-81.600, -944.498, 28.512), stop: false },
        { pos: new mp.Vector3(77.80, -989.29, 29.20), stop: false },
        { pos: new mp.Vector3(274.685, -588.535, 42.740), stop: true, name: "Госпiталь Лос Сантоса" },
        { pos: new mp.Vector3(305.07, -464.96, 43.45), stop: false },
		{ pos: new mp.Vector3(245.448, -349.504, 43.914), stop: true, name: "Детективне агентство" },
        { pos: new mp.Vector3(127.73, -308.51, 45.46), stop: false },
        { pos: new mp.Vector3(-116.97, -217.33, 45.00), stop: false },
		{ pos: new mp.Vector3(-384.033, -199.536, 36.144), stop: true, name: "Центральний LSC" },
        { pos: new mp.Vector3(-423.50, -205.31, 36.37), stop: false },
        { pos: new mp.Vector3(-475.22, -127.14, 39.00), stop: false },
        { pos: new mp.Vector3(-627.86, -182.78, 38.00), stop: false },
		{ pos: new mp.Vector3(-710.476, -179.618, 36.471), stop: true, name: "Магазин одягу Ponsonbys" },
        { pos: new mp.Vector3(-781.21, -80.92, 38.00), stop: false },
		{ pos: new mp.Vector3(-1019.083, -161.460, 37.083), stop: false },
        { pos: new mp.Vector3(-1254.45, -67.45, 44.64), stop: false },
        { pos: new mp.Vector3(-1403.13, -62.23, 53.01), stop: false },
		{ pos: new mp.Vector3(-1621.376, -236.435, 53.585), stop: true, name: "Цвинтар Лос Сантоса" },
        { pos: new mp.Vector3(-1741.37, -344.20, 46.57), stop: false },
        { pos: new mp.Vector3(-2018.28, -167.79, 28.02), stop: false },
		{ pos: new mp.Vector3(-2171.202, -297.309, 12.050), stop: false },
        { pos: new mp.Vector3(-2027.98, -435.04, 11.56), stop: false },
        { pos: new mp.Vector3(-1816.10, -617.69, 11.00), stop: false },
        { pos: new mp.Vector3(-1589.47, -819.31, 10.00), stop: false },
		{ pos: new mp.Vector3(-1572.948, -885.883, 9.710), stop: true, name: "Авторинок" }, 
        { pos: new mp.Vector3(-1489.83, -956.37, 8.02), stop: false },
        { pos: new mp.Vector3(-1360.30, -1118.79, 4.39), stop: false },
		{ pos: new mp.Vector3(-1336.755, -1297.127, 4.414), stop: true, name: "Пляж Веспуччi" },
        { pos: new mp.Vector3(-1316.28, -1355.14, 4.59), stop: false },
        { pos: new mp.Vector3(-1241.29, -1469.07, 4.61), stop: false },
		{ pos: new mp.Vector3(-1162.419, -1418.707, 4.246), stop: true, name: "Тату-салон The Pit" },
        { pos: new mp.Vector3(-1071.35, -1363.84, 5.26), stop: false },
        { pos: new mp.Vector3(-961.92, -1240.36, 5.49), stop: false },
		{ pos: new mp.Vector3(-711.241, -1091.864, 12.129), stop: true, name: "Готель Crastenburg" },
		{ pos: new mp.Vector3(-558.248, -846.678, 27.030), stop: true, name: "Маленький Сеул" }, 
		{ pos: new mp.Vector3(-318.832, -885.993, 30.650), stop: false }]
    },
    {
        name: "М2: Схiдний Лос Сантос",
        checkpoint_positions: [
			{ pos: new mp.Vector3(-249.429, -883.709, 30.096), stop: true, name: "Пiллбокс Хiлл" },
            { pos: new mp.Vector3(-288.791, -1385.304, 30.763), stop: false },
            { pos: new mp.Vector3(-232.68, -1449.49, 30.70), stop: false },
            { pos: new mp.Vector3(-110.15, -1552.18, 33.10), stop: false },
            { pos: new mp.Vector3(96.869, -1728.074, 28.453), stop: true, name: "MegaMall" },
            { pos: new mp.Vector3(185.77, -1799.98, 28.20), stop: false },
            { pos: new mp.Vector3(440.328, -2030.909, 23.049), stop: true, name: "Промисловий район" },
            { pos: new mp.Vector3(518.45, -2057.11, 26.20), stop: false },
            { pos: new mp.Vector3(807.03, -2078.16, 28.66), stop: false },
            { pos: new mp.Vector3(1030.21, -2083.03, 30.38), stop: false },
            { pos: new mp.Vector3(1357.452, -2015.109, 50.629), stop: false },
            { pos: new mp.Vector3(1437.90, -1850.04, 70.47), stop: false },
            { pos: new mp.Vector3(1359.091, -1625.113, 51.860), stop: false },
            { pos: new mp.Vector3(1270.82, -1450.13, 34.40), stop: false },
            { pos: new mp.Vector3(1255.32, -1242.70, 34.97), stop: false },
            { pos: new mp.Vector3(1166.37, -966.16, 46.45), stop: false },
            { pos: new mp.Vector3(1197.31, -703.20, 59.35), stop: false },
            { pos: new mp.Vector3(1127.102, -509.027, 63.599), stop: true, name: "Мiрор-парк" },
            { pos: new mp.Vector3(1071.95, -502.08, 62.10), stop: false },
            { pos: new mp.Vector3(1042.84, -332.32, 66.44), stop: false },
            { pos: new mp.Vector3(922.739, -198.694, 72.439), stop: true, name: "Таксопарк Downtown Cab Co." },
            { pos: new mp.Vector3(836.18, -72.33, 79.87), stop: false },
            { pos: new mp.Vector3(895.075, 13.590, 78.458), stop: true, name: "Казино Diamond" },
            { pos: new mp.Vector3(933.30, 81.38, 78.17), stop: false },
            { pos: new mp.Vector3(892.28, 62.24, 78.19), stop: false },
            { pos: new mp.Vector3(778.65, -31.12, 80.20), stop: false },
            { pos: new mp.Vector3(542.869, 85.542, 95.698), stop: true, name: "Служба доставки Pizza This" },
            { pos: new mp.Vector3(329.746, 162.798, 102.931), stop: true, name: "Кiнотеатр Oriental Cinema" },
            { pos: new mp.Vector3(185.48, 210.28, 104.97), stop: false },
            { pos: new mp.Vector3(24.85, 248.40, 108.88), stop: false },
            { pos: new mp.Vector3(-38.501, 79.557, 73.626), stop: false },
            { pos: new mp.Vector3(-91.44, -121.20, 57.13), stop: false },
            { pos: new mp.Vector3(-147.937, -308.383, 38.175), stop: true, name: "Магазин одягу Ponsonbys" },
            { pos: new mp.Vector3(-221.20, -543.29, 34.05), stop: false },
            { pos: new mp.Vector3(-245.742, -714.116, 32.991), stop: true, name: "Пiсфул-стрiт" },
            { pos: new mp.Vector3(-319.873, -889.820, 30.649), stop: false }]
    },
    {
        name: "М3: Пiвденний Лос Сантос",
        checkpoint_positions: [
			{ pos: new mp.Vector3(-271.63, -858.19, 30.98), stop: false },
            { pos: new mp.Vector3(-473.76, -829.91, 30.45), stop: false },
            { pos: new mp.Vector3(-648.302, -928.220, 22.406), stop: false },
            { pos: new mp.Vector3(-709.499, -1067.172, 13.129), stop: true, name: "Готель Crastenburg" },
            { pos: new mp.Vector3(-771.61, -1125.33, 10.02), stop: false },
            { pos: new mp.Vector3(-701.10, -1236.33, 9.87), stop: false },
            { pos: new mp.Vector3(-792.791, -1320.245, 4.576), stop: true, name: "Водна школа" },
            { pos: new mp.Vector3(-825.63, -1318.54, 4.31), stop: false },
            { pos: new mp.Vector3(-794.68, -1284.49, 4.31), stop: false },
            { pos: new mp.Vector3(-693.72, -1241.00, 9.91), stop: false },
            { pos: new mp.Vector3(-655.80, -1403.80, 9.94), stop: false },
            { pos: new mp.Vector3(-770.430, -1657.939, 26.864), stop: false },
            { pos: new mp.Vector3(-704.54, -2008.24, 24.88), stop: false },
            { pos: new mp.Vector3(-823.24, -2217.07, 16.63), stop: false },
            { pos: new mp.Vector3(-948.57, -2363.29, 19.47), stop: false },
            { pos: new mp.Vector3(-1034.434, -2729.639, 19.660), stop: true, name: "Аеропорт Лос Сантоса" },
            { pos: new mp.Vector3(-878.63, -2664.90, 19.04), stop: false },
            { pos: new mp.Vector3(-752.270, -2443.135, 13.973), stop: false },
            { pos: new mp.Vector3(-622.43, -2282.82, 5.18), stop: false },
            { pos: new mp.Vector3(-364.70, -2153.29, 9.63), stop: false },
            { pos: new mp.Vector3(-129.235, -2172.496, 9.792), stop: false },
            { pos: new mp.Vector3(-14.08, -1991.57, 12.53), stop: false },
            { pos: new mp.Vector3(-198.89, -1878.82, 27.23), stop: false },
            { pos: new mp.Vector3(-212.12, -1814.89, 29.22), stop: false },
            { pos: new mp.Vector3(-71.117, -1798.585, 27.280), stop: false },
            { pos: new mp.Vector3(68.56, -1898.13, 20.91), stop: false },
            { pos: new mp.Vector3(189.41, -1755.23, 28.16), stop: false },
            { pos: new mp.Vector3(289.37, -1683.01, 28.64), stop: false },
            { pos: new mp.Vector3(452.687, -1675.578, 28.714), stop: true, name: "Бульвар Роя Левенштейна" },
            { pos: new mp.Vector3(546.97, -1532.56, 28.55), stop: false },
            { pos: new mp.Vector3(533.04, -1342.41, 28.60), stop: false },
            { pos: new mp.Vector3(505.030, -1008.741, 27.403), stop: true, name: "Полiцейський департамент" },
            { pos: new mp.Vector3(434.895, -672.517, 28.513), stop: true, name: "Автошкола Dashound" },
            { pos: new mp.Vector3(286.40, -639.77, 28.51), stop: false },
            { pos: new mp.Vector3(-104.699, -609.669, 35.648), stop: true, name: "Колегiя адвокатiв" },
            { pos: new mp.Vector3(-299.431, -890.073, 30.657), stop: false }]
	},
	{
		name: "М4: Екскурсiйний",
		checkpoint_positions: [
			{ pos: new mp.Vector3(-249.459, -883.619, 30.101), stop: true, name: "Пiллбокс Хiлл" },
			{ pos: new mp.Vector3(-206.33, -913.03, 28.58), stop: false },
			{ pos: new mp.Vector3(-208.864, -1150.401, 22.506), stop: true, name: "Автосалон Vapid" },
			{ pos: new mp.Vector3(-114.66, -1164.48, 25.11), stop: false },
			{ pos: new mp.Vector3(-98.79, -1345.32, 28.69), stop: false },
			{ pos: new mp.Vector3(27.574, -1377.043, 28.812), stop: false },
			{ pos: new mp.Vector3(83.24, -1270.27, 28.56), stop: false },
			{ pos: new mp.Vector3(218.51, -1234.99, 37.55), stop: false },
			{ pos: new mp.Vector3(485.93, -1219.85, 41.16), stop: false },
			{ pos: new mp.Vector3(832.17, -1203.86, 45.01), stop: false },
			{ pos: new mp.Vector3(1367.02, -1108.91, 51.91), stop: false },
			{ pos: new mp.Vector3(1817.27, -834.62, 74.81), stop: false },
			{ pos: new mp.Vector3(2222.78, -504.07, 91.48), stop: false },
			{ pos: new mp.Vector3(2422.63, -233.60, 85.11), stop: false },
			{ pos: new mp.Vector3(2562.79, 123.96, 96.53), stop: false },
			{ pos: new mp.Vector3(2603.19, 318.37, 107.12), stop: false },
			{ pos: new mp.Vector3(2593.08, 650.47, 93.94), stop: false },
			{ pos: new mp.Vector3(2460.58, 973.62, 85.52), stop: false },
			{ pos: new mp.Vector3(2445.40, 1257.52, 52.93), stop: false },
			{ pos: new mp.Vector3(2547.451, 1626.811, 29.139), stop: true, name: "Електростанцiя Лос Сантоса" },
			{ pos: new mp.Vector3(2557.27, 2189.94, 18.58), stop: false },
			{ pos: new mp.Vector3(2540.330, 2724.481, 42.960), stop: true, name: "Кар’ер Quartz" },
			{ pos: new mp.Vector3(2569.12, 3027.11, 43.04), stop: false },
			{ pos: new mp.Vector3(2822.20, 3418.62, 55.00), stop: false, name: "Будiвельний магазин YouTool" },
			{ pos: new mp.Vector3(2933.69, 3773.88, 52.00), stop: false },
			{ pos: new mp.Vector3(2880.13, 4196.37, 49.44), stop: false },
			{ pos: new mp.Vector3(2744.43, 4663.60, 43.80), stop: false },
			{ pos: new mp.Vector3(2653.16, 5078.12, 44.13), stop: false },
			{ pos: new mp.Vector3(2556.37, 5416.76, 43.86), stop: false },
			{ pos: new mp.Vector3(2139.41, 6076.76, 50.94), stop: false },
			{ pos: new mp.Vector3(1718.411, 6387.693, 33.159), stop: true, name: "Магазин 24/7 у Шосе Сенора" },
			{ pos: new mp.Vector3(997.02, 6494.70, 20.29), stop: false },
			{ pos: new mp.Vector3(180.821, 6562.670, 31.515), stop: true, name: "LSC у Палето-Бей" },
			{ pos: new mp.Vector3(44.33, 6583.02, 30.71), stop: false },
			{ pos: new mp.Vector3(-419.73, 6119.35, 30.99), stop: false },
			{ pos: new mp.Vector3(-759.24, 5507.49, 34.57), stop: false },
			{ pos: new mp.Vector3(-1524.996, 4997.471, 62.122), stop: true, name: "Мисливський парк" },
			{ pos: new mp.Vector3(-2258.96, 4255.13, 44.14), stop: false },
			{ pos: new mp.Vector3(-2497.642, 3611.675, 13.838), stop: true, name: "Шосе Грейт-оушн" },
			{ pos: new mp.Vector3(-2722.10, 2297.25, 17.90), stop: false },
			{ pos: new mp.Vector3(-3123.53, 1089.49, 19.79), stop: true, name: "Чумаш-плаза" },
			{ pos: new mp.Vector3(-2104.06, -382.37, 11.93), stop: false },
			{ pos: new mp.Vector3(-1809.03, -614.81, 10.47), stop: false },
			{ pos: new mp.Vector3(-1042.58, -617.38, 17.45), stop: false },
			{ pos: new mp.Vector3(-874.24, -560.30, 20.26), stop: false },
			{ pos: new mp.Vector3(-644.91, -606.96, 32.70), stop: false },
			{ pos: new mp.Vector3(-608.26, -843.47, 24.78), stop: false },
			{ pos: new mp.Vector3(-486.38, -844.52, 29.76), stop: false },
			{ pos: new mp.Vector3(-355.693, -913.878, 30.657), stop: false }]
	}
]
let checkpoints = []
let currentCheckpoint = 0
let payment = 0

mp.events.add("client::startBusRoute", (track) => { 
    let find = configBusRoutes.findIndex(elemen => elemen.name == `${track.name}`)
    for(var i = 0; i < checkpoints.length; i++){
        if(mp.checkpoints.exists(checkpoints[i])){
            checkpoints[i].destroy();
            delete checkpoints[i]
        }
    }
    checkpoints = []
    currentCheckpoint = 0
    for(let i = 0; i < configBusRoutes[find].checkpoint_positions.length; i++){
        let pos = {...configBusRoutes[find].checkpoint_positions[i].pos}
        pos.z -= 1.25
        let destination, checkpoint
        checkpoint = mp.checkpoints.new(configBusRoutes[find].checkpoint_positions[i].stop ? 4 : i + 1 >= configBusRoutes[find].checkpoint_positions.length ? 4 : 1, pos, 8, {
            color: [255, 165, 0, 100],
            visible: false,
            dimension: 0
        });
 
        if(i + 1 >= configBusRoutes[find].checkpoint_positions.length){
            destination = configBusRoutes[find].checkpoint_positions[i].pos
            checkpoint.destination = new mp.Vector3(destination)
        }
        else{
            destination = configBusRoutes[find].checkpoint_positions[i+1].pos
            checkpoint.direction = destination        
        }
        // checkpoint.blip = mp.blips.new(1, configBusRoutes[find].checkpoint_positions[i].pos, {
        //     color: 81,
        //     name: "",
        //     shortRange: true,
        //     scale: 0.5,
        //     dimension: 0
        // });
        checkpoint.owner = `bus`
        if (configBusRoutes[find].checkpoint_positions[i].stop) {
            checkpoint.stop = true
            checkpoint.stopName = configBusRoutes[find].checkpoint_positions[i].name
        }
        checkpoints.push(checkpoint)
    }
    checkpoints[0].visible = true  
    payment = track.price
    mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[0].position.x, checkpoints[0].position.y, checkpoints[0].position.z));
})

mp.events.add("client::endBusRoute", () => {
    for(var i = 0; i < checkpoints.length; i++){
        if(mp.checkpoints.exists(checkpoints[i])){
            checkpoints[i].destroy();
            delete checkpoints[i]
        }
    }
    checkpoints = []
    currentCheckpoint = 0
    /*checkpoints[currentCheckpoint].visible = false;
    checkpoints = []
    currentCheckpoint = 0 */
    mp.events.call("resetNavigationMarker")
})

mp.events.add("playerEnterCheckpoint", (checkpoint) => {
    if(checkpoint.owner == "bus" && mp.players.local.vehicle && (mp.players.local.vehicle.model == mp.game.joaat("qbus") || mp.players.local.vehicle.model == mp.game.joaat("citiport"))) {
        if(checkpoint.stop) {
            mp.events.call("clearSubtitles")
            mp.events.call("addSubtitle", JSON.stringify({ text: `~y~Зупинка "${checkpoint.stopName}"`, seconds: 10})) 
            mp.events.call("addSubtitle", JSON.stringify({ text: `~y~Зупинися на 10 секунд!`, seconds: 10})) 
            mp.events.callRemote("server::getStop", checkpoint.stopName)
            mp.game.audio.playSoundFrontend(-1, "Enter_1st", "GTAO_FM_Events_Soundset", true);
        }
        else if (checkpoint.destination) {
            mp.game.audio.playSoundFrontend(-1, "FIRST_PLACE", "HUD_MINI_GAME_SOUNDSET", true);
            mp.events.callRemote("busRoutePayment")
            checkpoint.visible = false;
            checkpoints = []
            currentCheckpoint = 0
            mp.events.call("resetNavigationMarker")
        } else {
            mp.game.audio.playSoundFrontend(-1, "CHECKPOINT_NORMAL", "HUD_MINI_GAME_SOUNDSET", true);
            checkpoint.visible = false;
            currentCheckpoint = currentCheckpoint + 1 == checkpoints.length ? currentCheckpoint : currentCheckpoint + 1
            checkpoints[currentCheckpoint].visible = currentCheckpoint == checkpoints.length ? false : true
            mp.events.call("resetNavigationMarker")
            mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[currentCheckpoint].position.x, checkpoints[currentCheckpoint].position.y, checkpoints[currentCheckpoint].position.z));
        }
    }
})

mp.events.add("playerExitCheckpoint", (checkpoint) => {
    if (checkpoint.owner == "bus" && mp.players.local.vehicle && (mp.players.local.vehicle.model == mp.game.joaat("qbus") || mp.players.local.vehicle.model == mp.game.joaat("citiport"))) {
        mp.events.call("clearSubtitles")
        rpc.callBrowser(browserMenu, "nInfo", "Ти покинув зупинку завчасно!")
        mp.events.callRemote("server::leaveStop")
    }
})

mp.events.add("client::nextBusPos", () => {
    checkpoints[currentCheckpoint].visible = false;
    currentCheckpoint = currentCheckpoint + 1 == checkpoints.length ? currentCheckpoint : currentCheckpoint + 1
    checkpoints[currentCheckpoint].visible = currentCheckpoint == checkpoints.length ? false : true
    mp.events.call("resetNavigationMarker")
    mp.events.call("createNavigationToMarker", new mp.Vector3(checkpoints[currentCheckpoint].position.x, checkpoints[currentCheckpoint].position.y, checkpoints[currentCheckpoint].position.z));
})
}; a; }
{let a = function scriptEntryPoint(mp) {
const localPlayer = mp.players.local;
let updateAirInterval = null

class Aquanaut {
    constructor() {
        this.storageParams = {
            position: [new mp.Vector3(-79.79, -2771.72, -0.3), new mp.Vector3(-1914.715, -2701.158, -0.271), new mp.Vector3(1714.785, -2846.981, -0.168)],
            blip: [],
            marker: [],
            subcolshape: [],
            colshape: []
        }
    }
}

const aquanaut = new Aquanaut

mp.events.add("updateAirInterval", (disabled) => {
    let vehicle = localPlayer.vehicle
    if (disabled) {
        if (updateAirInterval) clearInterval(updateAirInterval), updateAirInterval = null
        if (vehicle && vehicle.model == 771711535) vehicle.setInvincible(false)
    } else {
        if (updateAirInterval) clearInterval(updateAirInterval), updateAirInterval = null
        updateAirInterval = setInterval(() => {
            if (vehicle && vehicle.model == 771711535) {
                mp.events.callRemote("updateBathyscapheAir")
                vehicle.setInvincible(true)
            }
        }, 60000)
    }
})

mp.events.add("createAquanautStorage", (type) => {
    if (type) {
        for (let key in aquanaut.storageParams.position) {
            let marker = mp.markers.new(1, new mp.Vector3(aquanaut.storageParams.position[key].x, aquanaut.storageParams.position[key].y, aquanaut.storageParams.position[key].z), 10, {
                visible: true,
                color: [66, 142, 228, 100],
                rotation: 180
            });
            let blip = mp.blips.new(483, aquanaut.storageParams.position[key], {
                alpha: 255,
                name: "Резервуар",
                scale: 1,
                color: 74
            });

            let colshape = mp.colshapes.newSphere(aquanaut.storageParams.position[key].x, aquanaut.storageParams.position[key].y, aquanaut.storageParams.position[key].z, 8)
            colshape.catchEvent = "aquanautLoadVehicle"

            aquanaut.storageParams.marker.push(marker)
            aquanaut.storageParams.blip.push(blip)
            aquanaut.storageParams.colshape.push(colshape)
        }
    } else {
        for (let key in aquanaut.storageParams.position) {
            if (aquanaut.storageParams.blip[key]) {
                aquanaut.storageParams.blip[key].destroy()
                aquanaut.storageParams.blip[key] = undefined
            }
            if (aquanaut.storageParams.marker[key]) {
                aquanaut.storageParams.marker[key].destroy()
                aquanaut.storageParams.marker[key] = undefined
            }
            if (aquanaut.storageParams.colshape[key]) {
                aquanaut.storageParams.colshape[key].destroy()
                aquanaut.storageParams.colshape[key] = undefined
            }
        }
    }
});
}; a; }
{let a = function scriptEntryPoint(mp) {
const dimension = 0

rpc.register("getContrabandistGroundData", (data) => {
    const playerPos = mp.players.local.position;
    const { x, y, z } = playerPos;

    const dx = x - data[0].x;
    const dy = y - data[0].y;
    const distance = Math.sqrt(dx * dx + dy * dy);

    const accuracy = Math.max(0, Math.min(100, (1 - distance / 60) * 100));

    return { accuracy: Math.floor(accuracy) }
})

class AirDrop {
    static pool = new Set();
    static GRAVITY = 9.81;
    static TERMINAL_VELOCITY = 30;

    constructor(position) {
        this.position = position;
        this.velocity = 0;

        const groundZ = mp.game.gameplay.getGroundZFor3DCoord(this.position.x, this.position.y, this.position.z, false, true);
        this.destination = new mp.Vector3(this.position.x, this.position.y, groundZ);

        const randomRotation = new mp.Vector3(0, 0, Math.random() * 360);

        this.objectBox = mp.objects.new(mp.game.joaat("prop_box_ammo04a"), this.position, {
            rotation: randomRotation,
            dimension: dimension
        });
        this.parachuteBox = mp.objects.new(mp.game.joaat("prop_v_parachute"), new mp.Vector3(this.position.x, this.position.y, this.position.z), {
            rotation: randomRotation,
            dimension: dimension
        });

        AirDrop.waitForObject(this.objectBox).then(() => {
            this.objectBox.setCollision(false, false);
        });

        AirDrop.waitForObject(this.parachuteBox).then(() => {
            this.parachuteBox.setCollision(false, false);
        });

        this.isLanded = false;
        AirDrop.pool.add(this);
    }

    static async waitForObject(object) {
        for (let a = 0; 0 === object?.handle && a < 15e3; ++a) await mp.game.waitAsync(0);
    }

    update() {
        if (!this.isLanded && this.objectBox.handle !== 0 && this.parachuteBox.handle !== 0) {
            const dt = mp.game.misc.getFrameTime();

            this.velocity += AirDrop.GRAVITY * dt;
            if (this.velocity > AirDrop.TERMINAL_VELOCITY) {
                this.velocity = AirDrop.TERMINAL_VELOCITY;
            }

            this.position.z -= this.velocity * dt;

            // this.objectBox.setCoords(this.position.x, this.position.y, this.position.z, false, false, false, false);
            // this.parachuteBox.setCoords(this.position.x, this.position.y, this.position.z + 5, false, false, false, false);

            this.objectBox.position = this.position;
            this.parachuteBox.position = new mp.Vector3(this.position.x, this.position.y, this.position.z + 5);

            if (this.position.z <= this.destination.z) {
                this.isLanded = true;
                this.velocity = 0;

                if (mp.objects.exists(this.objectBox) && this.objectBox.doesExist()) {
                    this.objectBox.placeOnGroundProperly();
                }

                this.destroy();
            }
        }
    }

    destroy() {
        if (mp.objects.exists(this.objectBox)) this.objectBox.destroy();
        if (mp.objects.exists(this.parachuteBox)) this.parachuteBox.destroy();
        AirDrop.pool.delete(this);
    }
}

mp.events.add("render", () => {
    for (let airDrop of AirDrop.pool) {
        airDrop.update();
    }
});

mp.events.add("c:aircraft:addAirDrop", (x, y, z) => {
    const position = new mp.Vector3(x, y, z);
    if (!position) return mp.console.log("[Error] (c:aircraft:addAirDrop) Invalid position");

    if (mp.players.local.vehicle)
        mp.game.audio.playSoundFromEntity(-1, "Hood_Open", mp.players.local.vehicle.handle, "Lowrider_Super_Mod_Garage_Sounds", false, 0);
    new AirDrop(position);
});
}; a; }
{let a = function scriptEntryPoint(mp) {
const waitForHandle = async (object) => {
    for (let a = 0; 0 === object?.handle && a < 15e3; ++a) await mp.game.waitAsync(0);
};

const dist = (a, b) => {
    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) + Math.pow(a.z - b.z, 2));
};

const getHeadingFromCoords = (pos1, pos2) => (180 * Math.atan2(pos2.y - pos1.y, pos2.x - pos1.x)) / Math.PI + 270;

const loadAnimDict = async (dict) => {
    if (mp.game.streaming.hasAnimDictLoaded(dict)) return;
    mp.game.streaming.requestAnimDict(dict);
    while (!mp.game.streaming.hasAnimDictLoaded(dict)) await mp.game.waitAsync(0);
};

const getRandomInteger = (min, max) => {
    return Math.floor(Math.random() * (max - min)) + min
}

const TREE_CONSTANTS = {
    COLSHAPE: {
        RADIUS: 2.0, // Радиус взаимодействия с деревом ( клиент )
        DIMENSION: 0,
    },
    FALL: {
        MAX_ANGLE: 90,
        FADE_START: 30,
        FADE_END: 85,
        ACCELERATION: 30,
        TIME: Math.sqrt((2 * 90) / 30), // Время падения дерева
    },
    GROW: {
        TIME: 10.0, // Время роста дерева
        DISTANCE: 30, // Z роста дерева
    },
    ALPHA: {
        MAX: 255,
        MIN: 0,
    },
    LOGIC: {
        HIT_DELAY: 1500, // Задержка между ударами
    },
    WOODCUTTER: {
        TOTAL_HITS_REQUIRED: 0,
        ANIM_DICT: "melee@large_wpn@streamed_core",
        ANIM_NAME: "car_down_attack",
        ATTACK_CONTROL: 24,
        PROGRESS_TEXT: {
            FONT: 4,
            COLOR: [255, 165, 0, 255],
            SCALE: 0.4,
        },
        PROGRESS_HEIGHT: 1.0,
    },
};

const TREE_STATE = {
    IDLE: 0,
    FALLING: 1,
    WAITING: 2,
    GROWING: 3,
};

function easeOutQuad(t) {
    return t * (2 - t);
}

class Tree {
    static pool = new Map();

    static processPool() {
        const dt = mp.game.misc.getFrameTime();
        for (const tree of Tree.pool.values()) {
            try {
                tree.process(dt);
            } catch (error) {
                mp.console.logError(`Error processing tree ${tree.id}: ${error.message}`);
            }
        }
    }

    constructor(object, id) {
        this.object = object;
        this.object.tree = this;
        this.id = id;
        this.position = object.position;
        this.rotation = object.rotation;

        this.physics = {
            startFall: false,
            fallAngle: 0,
            angularVelocity: 0,
            alpha: TREE_CONSTANTS.ALPHA.MAX,
            initialRotation: object.rotation,
            elapsedTime: 0,
            startGrowTime: null,
            startFallTime: null,
            isGrowing: false,
            isFalling: false,
        };

        this.colshape = new global.ActionColshape(
            this.position,
            TREE_CONSTANTS.COLSHAPE.RADIUS,
            TREE_CONSTANTS.COLSHAPE.DIMENSION,
            () => (object.variable_state ?? TREE_STATE.IDLE) === TREE_STATE.IDLE && !mp.players.local.vehicle && mp.events.call("promptSecondary.show", "Натисни <span>E</span> для взаємодії"),
            () => (object.variable_state ?? TREE_STATE.IDLE) === TREE_STATE.IDLE && mp.events.call("promptSecondary.hide"),
            () => (object.variable_state ?? TREE_STATE.IDLE) === TREE_STATE.IDLE && mp.events.callRemote("s:woodcutter:tree:interact", this.id)
        );

        Tree.pool.set(id, this);
        chatDebug(`Tree ${id} initialized`);
    }

    process(dt) {
        if (!this.isStreamed()) return;

        const { physics } = this;

        if (physics.startFallTime) {
            if (this.processFall(dt)) {
                physics.startFallTime = null;
                setTimeout(() => this.hideTree(), 5000);
            }
        } else if (physics.startGrowTime) {
            if (this.processGrow()) {
                physics.startGrowTime = null;
                physics.isGrowing = false;
            }
        }
    }

    processFall(dt) {
        const { physics } = this;

        if (!physics.startFall) {
            physics.startFall = true;
            physics.elapsedTime = (Date.now() - physics.startFallTime) / 1000;
            physics.fallAngle = Math.min(TREE_CONSTANTS.FALL.MAX_ANGLE, (TREE_CONSTANTS.FALL.ACCELERATION * physics.elapsedTime * physics.elapsedTime) / 2);
            physics.angularVelocity = TREE_CONSTANTS.FALL.ACCELERATION * physics.elapsedTime;
        }

        physics.angularVelocity += TREE_CONSTANTS.FALL.ACCELERATION * dt;
        physics.fallAngle = Math.min(TREE_CONSTANTS.FALL.MAX_ANGLE, physics.fallAngle + physics.angularVelocity * dt);

        // if (physics.fallAngle < TREE_CONSTANTS.FALL.FADE_START) {
        //     physics.alpha = TREE_CONSTANTS.ALPHA.MAX;
        // } else if (physics.fallAngle >= TREE_CONSTANTS.FALL.FADE_END) {
        //     physics.alpha = TREE_CONSTANTS.ALPHA.MIN;
        // } else {
        //     const fadeProgress = (physics.fallAngle - TREE_CONSTANTS.FALL.FADE_START) / (TREE_CONSTANTS.FALL.FADE_END - TREE_CONSTANTS.FALL.FADE_START);
        //     physics.alpha = Math.floor(TREE_CONSTANTS.ALPHA.MAX * (1 - fadeProgress));
        // }

        this.object.setRotation(physics.fallAngle, 0, physics.initialRotation.z, 2, false);
        // mp.game.entity.setAlpha(this.object.handle, physics.alpha, true);

        return physics.fallAngle >= TREE_CONSTANTS.FALL.MAX_ANGLE;
    }

    processGrow() {
        const { physics } = this;
        if (!physics.startGrowTime) return true;

        const elapsedTime = (Date.now() - physics.startGrowTime) / 1000;
        const progress = Math.min(elapsedTime / TREE_CONSTANTS.GROW.TIME, 1);
        const easedProgress = easeOutQuad(progress);

        if (this.isStreamed()) {
            const targetPos = this.position;
            const startPos = new mp.Vector3(targetPos.x, targetPos.y, targetPos.z - (this.object.getVariable("treeHeight") ?? TREE_CONSTANTS.GROW.DISTANCE));

            const currentZ = startPos.z + (targetPos.z - startPos.z) * easedProgress;
            this.object.position = new mp.Vector3(targetPos.x, targetPos.y, currentZ);
        }

        return progress >= 1;
    }

    isStreamed() {
        return this.object && mp.objects.exists(this.object) && this.object.handle !== 0;
    }

    hideTree() {
        if (this.object && mp.objects.exists(this.object)) {
            const { x, y, z } = this.position;
            this.object.position = new mp.Vector3(x, y, z - (this.object.getVariable("treeHeight") ?? TREE_CONSTANTS.GROW.DISTANCE));
            this.object.setRotation(this.physics.initialRotation.x, this.physics.initialRotation.y, this.physics.initialRotation.z, 2, false);
            mp.game.entity.setAlpha(this.object.handle, TREE_CONSTANTS.ALPHA.MIN, true);
        }
        this.physics.startFallTime = null;
        this.physics.startFall = false;
    }

    resetTree() {
        if (this.object && mp.objects.exists(this.object)) {
            const { x, y, z } = this.position;
            this.object.position = new mp.Vector3(x, y, z);
            mp.game.entity.setAlpha(this.object.handle, TREE_CONSTANTS.ALPHA.MAX, true);
        }
    }

    destroyTree() {
        if (this.object && mp.objects.exists(this.object)) {
            this.object.destroy();
        }
    }

    static getFallDuration() {
        return TREE_CONSTANTS.FALL.TIME;
    }

    getRemainingFallTime() {
        if (!this.physics.startFallTime) return 0;

        const elapsed = (Date.now() - this.physics.startFallTime) / 1000;
        const remaining = TREE_CONSTANTS.FALL.TIME - elapsed;
        return Math.max(0, remaining);
    }
}

class WoodcutterController {
    constructor() {
        this.isCutting = false;
        this.lastCutTime = 0;
        this.cutProgress = 0;
        this.TOTAL_HITS_REQUIRED = TREE_CONSTANTS.WOODCUTTER.TOTAL_HITS_REQUIRED;
        this.targetTree = null;

        mp.events.add("c:woodcutter:startCutting", this.handleStartCutting.bind(this));
        mp.events.add("c:woodcutter:stopCutting", this.handleStopCutting.bind(this));
        mp.events.add("c:woodcutter:syncHitCount", this.syncHitCount.bind(this));

        mp.events.add("render", this.handleRender.bind(this));
    }

    async handleStartCutting(treeId) {
        if (this.isCutting) return;

        const tree = Tree.pool.get(treeId);
        if (!tree) return;

        this.targetTree = tree;
        this.isCutting = true;
        this.cutProgress = 0;

        mp.players.local.freezePosition(true);
        await loadAnimDict(TREE_CONSTANTS.WOODCUTTER.ANIM_DICT);
        mp.players.local.setHeading(getHeadingFromCoords(mp.players.local.position, tree.position));
    }

    handleStopCutting() {
        this.isCutting = false;
        this.cutProgress = 0;
        mp.players.local.freezePosition(false);
    }

    handleRender() {
        if (!this.isCutting) return;

        const newPosition = new mp.Vector3(
            this.targetTree.position.x,
            this.targetTree.position.y,
            this.targetTree.position.z + TREE_CONSTANTS.WOODCUTTER.PROGRESS_HEIGHT
        );

        if (this.TOTAL_HITS_REQUIRED > 0) {
            drawProgressCircle(newPosition, mp.players.local.getHeading(), 1.0, this.cutProgress / this.TOTAL_HITS_REQUIRED);
            mp.game.graphics.drawText(`${Math.floor((this.cutProgress / this.TOTAL_HITS_REQUIRED) * 100)}%`, [newPosition.x, newPosition.y, newPosition.z], {
                font: TREE_CONSTANTS.WOODCUTTER.PROGRESS_TEXT.FONT,
                color: TREE_CONSTANTS.WOODCUTTER.PROGRESS_TEXT.COLOR,
                scale: TREE_CONSTANTS.WOODCUTTER.PROGRESS_TEXT.SCALE,
            });
        }

        mp.game.controls.disableControlAction(0, TREE_CONSTANTS.WOODCUTTER.ATTACK_CONTROL, true);

        if (this.isAttackTriggered() && this.canHit()) {
            this.hit();
        }
    }

    syncHitCount(hits, maxHits) {
        this.cutProgress = hits;
        this.TOTAL_HITS_REQUIRED = maxHits;
    }

    isAttackTriggered() {
        return (
            mp.game.controls.isControlJustPressed(0, TREE_CONSTANTS.WOODCUTTER.ATTACK_CONTROL) ||
            mp.game.controls.isDisabledControlJustPressed(0, TREE_CONSTANTS.WOODCUTTER.ATTACK_CONTROL)
        );
    }

    canHit() {
        return Date.now() - this.lastCutTime > TREE_CONSTANTS.LOGIC.HIT_DELAY;
    }

    hit() {
        mp.players.local.taskPlayAnim(TREE_CONSTANTS.WOODCUTTER.ANIM_DICT, TREE_CONSTANTS.WOODCUTTER.ANIM_NAME, 1, 1, 3000, 0, 0, false, false, false);
        mp.events.callRemote("s:woodcutter:tree:click");

        if (this.cutProgress >= this.TOTAL_HITS_REQUIRED) {
            this.cutProgress = 0;
        }

        mp.events.call("enableSound", `chop_${getRandomInteger(1, 6)}.mp3`, 0.7)

        this.lastCutTime = Date.now();
    }
}

new WoodcutterController();

mp.events.add("setRadiusVariable", (entity, name, value) => {
    if (name === "state") {
        if (!entity.tree) return;

        const tree = entity.tree;
        const newState = value !== null ? Number(value) : TREE_STATE.IDLE;
        tree.state = newState;

        if (newState === TREE_STATE.GROWING) {
            mp.game.entity.setAlpha(tree.object.handle, TREE_CONSTANTS.ALPHA.MAX, true);
            tree.physics.startGrowTime = Date.now();
            tree.physics.isGrowing = true;
        } else if (newState === TREE_STATE.FALLING) {
            tree.physics.startFallTime = Date.now();
            tree.physics.isFalling = true;
        }

        // chatDebug(`Tree ${tree.id} state changed from ${oldValue} to ${newState}`);
    }
});

mp.events.add("entityStreamInCustom", (entity) => {
    if (entity.type === "object" && entity.getVariable("tree") != null) {
        const id = entity.getVariable("tree");

        if (!entity.tree) new Tree(entity, id);

        const state = entity.variable_state ?? TREE_STATE.IDLE;

        if (state === TREE_STATE.WAITING || state === TREE_STATE.FALLING) entity.tree.hideTree();
        else entity.tree.resetTree();
    }
});

mp.events.add("render", Tree.processPool);

function drawProgressCircle(position, heading, radius, progress, segments = 32, color = { r: 255, g: 165, b: 0, a: 100 }) {
    const startOffset = (heading - 90) * (Math.PI / 180);
    for (let i = 0; i < segments * progress; i++) {
        const startAngle = startOffset + (i / segments) * 2 * Math.PI;
        const endAngle = startOffset + ((i + 1) / segments) * 2 * Math.PI;

        const center = position;
        const start = new mp.Vector3(position.x + radius * Math.cos(startAngle), position.y + radius * Math.sin(startAngle), position.z);
        const end = new mp.Vector3(position.x + radius * Math.cos(endAngle), position.y + radius * Math.sin(endAngle), position.z);

        mp.game.graphics.drawPoly(center.x, center.y, center.z, start.x, start.y, start.z, end.x, end.y, end.z, color.r, color.g, color.b, color.a);
    }
}

}; a; }
{let a = function scriptEntryPoint(mp) {
mp.casino_dimension = 200000

require('gamemode/scripts/Casino/wheel.js')
require('gamemode/scripts/Casino/BlackJack.js')
require('gamemode/scripts/Casino/casino.js')
require('gamemode/scripts/Casino/casino_slots.js')
require('gamemode/scripts/Casino/Podium.js')
require('gamemode/scripts/Casino/CasinoWalls.js')
require('gamemode/scripts/Casino/Poker.js')
require('gamemode/scripts/Casino/horses/index.js')
}; a; }
{let a = function scriptEntryPoint(mp) {
const luckywheel =
{
    object:
    {
        name: 'vw_prop_vw_luckywheel_02a',
        pos: [
            { position: new mp.Vector3(1111.052, 229.8579, -49.133), rotation: 0, taskHeading: 317, taskHeadingFemale: 360, dimension: mp.casino_dimension },
            { position: new mp.Vector3(214.4189, 1169.42273, 227.4824), rotation: 283, taskHeading: 238, taskHeadingFemale: 284, dimension: 0 },
            { position: new mp.Vector3(-592.5517, -96.7569962, 42.8346939), rotation: 155, taskHeading: 112.5, taskHeadingFemale: 155.5, dimension: 0 }
        ],
        model: [],
        animations:
            [
                'Enter_to_ArmRaisedIDLE',
                'ArmRaisedIDLE_to_SpinningIDLE_High',
                'SpinningIDLE_High',
                'Win_Big'
            ],
        getDictionary() {
            return mp.players.local.getModel() == 1885233650 ? 'ANIM_CASINO_A@AMB@CASINO@GAMES@LUCKY7WHEEL@MALE' : 'ANIM_CASINO_A@AMB@CASINO@GAMES@LUCKY7WHEEL@FEMALE';
        },
        async spin(pos, isOwner, id) {
            if (this.spinController?.abort) {
                this.spinController.abort = true;
                await this.spinController.finished;
            }

            const controller = { abort: false };
            controller.finished = new Promise(resolve => {
                controller._resolve = resolve;
            });
            
            this.spinController = controller;

            let spins = 320, maxSpeed = 2.25;
            const speed = maxSpeed / (spins * 2 + (pos + this.model[id].getRotation(2).y / 18) * 16 + 1);

            mp.game.audio.playSoundFromCoord(1, 'Spin_Start', this.pos[id].position.x, this.pos[id].position.y, this.pos[id].position.z, 'dlc_vw_casino_lucky_wheel_sounds', true, 0, false);

            try {
                while (!controller.abort) {
                    if (spins <= 0) {
                        maxSpeed -= speed;
                        this.model[id].setRotation(0, this.model[id].getRotation(2).y - maxSpeed, this.pos[id].rotation, 2, true);
                        if (maxSpeed <= 0) {
                            this.model[id].setRotation(0, Math.round(this.model[id].getRotation(2).y), this.pos[id].rotation, 2, true);
                            mp.game.audio.playSoundFromCoord(1, 'Win', this.pos[id].position.x, this.pos[id].position.y, this.pos[id].position.z, "dlc_vw_casino_lucky_wheel_sounds", true, 0, false);
                            break;
                        }
                    } else {
                        spins--;
                        this.model[id].setRotation(0, this.model[id].getRotation(2).y - maxSpeed, this.pos[id].rotation, 2, true);
                    }
                    await mp.game.waitAsync(5);
                }
            } finally {
                if (isOwner) {
                    mp.events.callRemote('luckywheel.finishspin');
                    mp.players.local.taskPlayAnim(this.getDictionary(), this.animations[3], 4, -1000, -1, 1048576, 0, false, true, false);
                    while (true) {
                        if (
                            mp.players.local.isPlayingAnim(this.getDictionary(), this.animations[3], 3) &&
                            mp.players.local.getAnimCurrentTime(this.getDictionary(), this.animations[3]) > 0.75
                        ) {
                            mp.players.local.clearTasks();
                            break;
                        }
                        await mp.game.waitAsync(0);
                    }
                }

                controller._resolve();
            }
        }
    },
    async comeToLuckyWheel(pos, id) {
        const dict = this.object.getDictionary();
        // #region 1.1 
        await mp.game.streaming.loadAnimDict(dict)
        if (mp.players.local.getScriptTaskStatus(2106541073) != 1 && mp.players.local.getScriptTaskStatus(2106541073) != 0) {
            let offset = mp.game.ped.getAnimInitialOffsetPosition(dict, this.object.animations[0], this.object.pos[id].position.x, this.object.pos[id].position.y, this.object.pos[id].position.z, 0, 0, this.object.pos[id].rotation, 0, 2);
            mp.players.local.taskGoStraightToCoord(offset.x, offset.y, offset.z, 1, 8000, mp.players.local.getModel() == 1885233650 ? this.object.pos[id].taskHeading : this.object.pos[id].taskHeadingFemale, 0.001);
            while (!(mp.players.local.getScriptTaskStatus(2106541073) == 7 || mp.players.local.isAtCoord(offset.x, offset.y, offset.z, 0.1, 0.0, 0.0, false, true, 0))) {
                await mp.game.waitAsync(0);
            }
            mp.players.local.taskPlayAnim(dict, this.object.animations[0], 4, -1000, -1, 1048576, 0, false, true, false);
            let isGoing;
            while (true) {
                if (mp.players.local.isPlayingAnim(dict, this.object.animations[0], 3) && mp.players.local.getAnimCurrentTime(dict, this.object.animations[0]) > 0.97) {
                    mp.players.local.taskPlayAnim(dict, this.object.animations[1], 4, -1000, -1, 1048576, 0, false, true, false);
                }
                if (mp.players.local.isPlayingAnim(dict, this.object.animations[1], 3)) {
                    if (!isGoing && mp.players.local.getAnimCurrentTime(dict, this.object.animations[1]) > 0.04) {
                        isGoing = true;
                        this.object.spin(pos, true, id);
                        mp.events.callRemote('luckywheel.spin');
                    }
                    if (mp.players.local.getAnimCurrentTime(dict, this.object.animations[1]) > 0.8) {
                        mp.players.local.taskPlayAnim(dict, this.object.animations[2], 8.0, 1.0, -1, 1, 1.0, false, false, false);
                        break;
                    }
                }
                await mp.game.waitAsync(0);
            }
        }
    },
    init() {
        this.object.pos.forEach((item) => {
            this.object.model.push(mp.objects.new(mp.game.joaat(this.object.name), item.position, {
                rotation: new mp.Vector3(0, 0, item.rotation),
                dimension: item.dimension
            }))
        })
    }
};

const player = mp.players.local;

mp.events.add(
    {
        'luckywheel.cometoluckywheel': (pos, id) => {
            luckywheel.comeToLuckyWheel(pos, id);
        },
        'luckywheel.spin': (pos, id) => {
            luckywheel.object.spin(pos, false, id);
        }
    });

luckywheel.init();

// IPL for casino
const ipl_list =
    [
        'vw_casino_main',
        'hei_dlc_windows_casino',
        'hei_dlc_casino_door',
        'hei_dlc_casino_aircon'
    ];

for (let i = 0; i < ipl_list.length; i++) {
    mp.game.streaming.requestIpl(ipl_list[i]);
}
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.selectMenuPrimaryActive = false
mp.events.add("setSelectMenuPrimaryActive", (enable) => {
    mp.selectMenuPrimaryActive = enable;
});

var currentTorso;
const clothesForType = {
    4: 'bags',
    8: 'top',
    9: 'legs',
    10: 'torsos',
    11: 'glasses',
    12: 'ears',
    15: 'undershirts',
    16: 'feets',
    17: 'hats',
    18: 'watches',
    19: 'bracelets',
    20: 'ties'
}

const clothesComponentForType = {
    4: { component: 5, isProp: false },
    8: { component: 11, isProp: false },
    9: { component: 4, isProp: false },
    10: { component: 3, isProp: false },
    11: { component: 1, isProp: true },
    12: { component: 10, isProp: false },
    15: { component: 8, isProp: false },
    16: { component: 6, isProp: false },
    17: { component: 0, isProp: true },
    18: { component: 6, isProp: true },
    19: { component: 7, isProp: true },
    20: { component: 7, isProp: false },
}

mp.events.add("addBattlePassUniqueItems", (type, items) =>{ 
    if (type == "tatto") browserMenu.call("selectMenuPrimary", "addUniqueItems", items)
});
mp.events.add("client::setTopSelectMenuPrimary", (info) =>{ 
    browserMenu.call("selectMenuPrimary", 'setTop', info)
});
mp.events.add("client::setTorsoSelectMenuPrimary", (torso) =>{ 
    currentTorso = torso;
});
mp.events.add("client::initSelectMenuPrimary", (menuName, values, clothesTop, category) =>{ 
    if(!menuName) {
        mp.events.call("setSelectMenuPrimaryActive", false)
        browserMenu.call("selectMenuPrimary", 'init', false)
        mp.events.call('setBlockControl', false);
        mp.events.call("displayChat", false) 
        setCursor(false)
        mp.events.call("hudControl.enable", true)
        mp.events.call("fadeIn", 500)
        return
    } 
    mp.events.call("setSelectMenuPrimaryActive", true) 
    let info = { name: menuName, values: values, top: clothesTop, category: category }
    rpc.callBrowser(browserMenu, "selectMenuPrimaryInit", info)
})
mp.events.add("client::setBuyedSelectMenuPrimary", (zone, id, index, buyed) =>{ 
    if (!mp.selectMenuPrimaryActive) return;
    browserMenu.call("selectMenuPrimary", 'updateData', zone, id, index, buyed)
})
var lastHeading = false

mp.events.add("client::showMaskSelectMenu", (allowance) => {
    let masks = []
    for (let key in mp.clothesshop.masks[1]) {
        let data = JSON.parse(JSON.stringify(mp.clothesshop.masks[1][key]))
        data.price = parseInt(data.price + (allowance * (data.price / 100)))
        masks.push(data) 
    }
    mp.events.call("client::initSelectMenuPrimary", "masks", JSON.stringify(masks)) 
    mp.events.call('selectMenu.hide')
    mp.events.call("focusOnHead", new mp.Vector3(-1337.40, -1277.54, 4.88), 298.59, true)
    mp.events.call("characterRotator::handle", true)
    setCursor(true)
})

mp.events.add("client::showClothesSelectMenuPrimaryFaction", () => {
    mp.events.call("client::initSelectMenuPrimary", "faction_clothes", JSON.stringify(mp.factionClothes))
    mp.events.call('selectMenu.hide')
    lastHeading = mp.players.local.getHeading()
    mp.events.call("dragcamFocusOnPlayer")
    mp.events.call("characterRotator::handle", true)
    mp.events.callRemote("server::loadPlayerClothes") 
    setCursor(true)
    mp.events.call("fadeIn", 500)
})

mp.events.add("updateFactionClothesPresetsParams", () => {
    browserMenu.call(`selectMenuPrimary`, `getFactionClothesPresetsParams`)
})

mp.events.add("closeSelectMenuPrimary", () => {
    browserMenu.call(`selectMenuPrimary`, `closeSelectMenuPrimary`)
})

mp.events.add("client::showClothesSelectMenuPrimary", (clothesTop, allowance, category) => {
    let clothes = {
        "bracelets": mp.clothesshop["bracelets"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        "ears": mp.clothesshop["ears"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        "feets": mp.clothesshop["feets"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        "glasses": mp.clothesshop["glasses"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        "hats": mp.clothesshop["hats"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        "legs": mp.clothesshop["legs"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        // "masks": mp.clothesshop["masks"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        "ties": mp.clothesshop["ties"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        // "topunder": mp.clothesshop["topunder"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        "torsos": mp.clothesshop["torsos"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        "top": mp.clothesshop["top"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        "undershirts": mp.clothesshop["undershirts"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        "watches": mp.clothesshop["watches"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        // "torsossort": mp.clothesshop["torsossort"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
        "bags": mp.clothesshop["bags"][mp.clientStorage.sex].map((item) => { return { ...item, price: parseInt(item.price + (allowance * (item.price / 100))) } }),
    }

    mp.events.call("client::initSelectMenuPrimary", "clothes", clothes, clothesTop, category)
    mp.events.call('selectMenu.hide')
    lastHeading = mp.players.local.getHeading()
    mp.events.call("dragcamFocusOnPlayer")
    mp.events.call("characterRotator::handle", true)
    mp.events.callRemote("server::loadPlayerClothes") 
    setCursor(true)
    mp.events.call("fadeIn", 500)
})
mp.events.add("client::selectMenuPrimarySelect", (menuName, itemName, itemPrice, itemIndex, itemValue, itemClass, category) => {
    if(menuName == "clothes" || menuName == "faction_clothes"){
        let clothesData = menuName == "clothes" ? getClothesValues(clothesForType[itemClass], category) : getClothesFactionValues(clothesComponentForType[itemClass])
        let comp = clothesData[itemIndex];

        if(itemClass == 19){ 
            let tiesData = getClothesValues('ties', category)
            if (itemIndex > tiesData.length - 1) {
                itemIndex -= tiesData.length;
                comp = clothesData[itemIndex];
            }
            else {
                itemClass = 20
                comp = tiesData[itemIndex];
            }
        }

        if (menuName == "faction_clothes") mp.events.callRemote("playerBuyFactionClothes", clothesForType[itemClass], itemIndex, itemValue, comp.textureNames ? comp.textureNames[itemValue] : comp.locale); 
        else mp.events.callRemote("playerBuyClothes", clothesForType[itemClass], itemIndex, itemValue, comp.textureNames ? comp.textureNames[itemValue] : comp.locale); 
    }
    else if (menuName == "masks") {
        if (itemIndex >= mp.clothesshop.masks[1].length) return;
        itemIndex = Math.clamp(itemIndex, 0, mp.clothesshop.masks[1].length - 1);
        let comp = mp.clothesshop.masks[1][itemIndex];
        if (comp.textures[itemValue] == null) return rpc.callBrowser(browserMenu, "nError", `Текстура не знайдена!`)
        mp.events.callRemote("playerBuyClothes", "masks", itemIndex, itemValue, comp.textureNames ? comp.textureNames[itemValue] : comp.locale); 
    }
})
mp.getClothesBySexAndVariation = (name, sex, variation) => {
    var finded = false
    for (var i = 0; i < mp.clothesshop[name][sex].length; i++) {
        if (mp.clothesshop[name][sex][i].variation === variation) {
            finded = mp.clothesshop[name][sex][i]
            break
        };
    }
    return finded
}
function setTorso(torso) {
    var torsosPack
    
    var seted = false
                            
    for (var key in mp.clothesshop.torsossort[mp.clientStorage.sex]) {
        for (var id in mp.clothesshop.torsossort[mp.clientStorage.sex][key].textures) {
            var clothesV = mp.clothesshop.torsossort[mp.clientStorage.sex][key].textures[id]
            if (clothesV == currentTorso.variation) {
                torsosPack = mp.clothesshop.torsossort[mp.clientStorage.sex][key].textures
                break
            }
        }
    }

    for (var key in torsosPack) {
        var item = torsosPack[key]
        var itemDB = mp.getClothesBySexAndVariation("torsos",mp.clientStorage.sex,item)
        if (itemDB) {
            if (itemDB.torso == torso) {
                seted = true
                mp.players.local.setComponentVariation(3, itemDB.variation, currentTorso.texture, 0);
                break
            }
        }
    }
    
    return seted
}	

function getClothesFactionValues(data){ 
    return mp.factionClothes.filter((item) => item.component == data.component && item.isProp == data.isProp && item.sex == mp.clientStorage.sex)
}

function getClothesValues(type, datacategory){ 
    const category = datacategory || 0
    if (mp.clothesshop[type][mp.clientStorage.sex][0].hasOwnProperty("category")) {
        let values = []
        for (var idx in mp.clothesshop[type][mp.clientStorage.sex]) {
            if (mp.clothesshop[type][mp.clientStorage.sex][idx].category == category) values.push(mp.clothesshop[type][mp.clientStorage.sex][idx]);
        }
        return values;
    }
    else return mp.clothesshop[type][mp.clientStorage.sex];
}

mp.events.add("client::selectMenuPrimaryFocus", (menuName, itemName, itemPrice, itemIndex, itemValue, itemClass, category) => {
    if (menuName == "clothes" || menuName == "faction_clothes") {
        let clothesData = menuName == "clothes" ? getClothesValues(clothesForType[itemClass], category) : getClothesFactionValues(clothesComponentForType[itemClass])
        let comp = clothesData[itemIndex];
        
        switch (itemClass) {
            case 4:
                mp.players.local.setComponentVariation(5, comp.variation, comp.textures[itemValue], 0);
                mp.events.call("dragcamFocusOnBody", false, lastHeading);
                break
            case 8:
                if (menuName == "faction_clothes") {
                    mp.players.local.setComponentVariation(3, comp.torso, 0, 0);
                }
                else {
                    if (currentTorso) {
                        var newtorso = setTorso(comp.torso);
                        if (!newtorso) mp.players.local.setComponentVariation(3, comp.torso, 0, 0);
                    }
                    else mp.players.local.setComponentVariation(3, comp.torso, 0, 0);
                }
                mp.players.local.setComponentVariation(11, comp.variation, comp.textures[itemValue], 0);
                mp.events.call("dragcamFocusOnBody", false, lastHeading);
                var undershirtDefault = (mp.clientStorage.sex == 1) ? 15 : 14;
                mp.players.local.setComponentVariation(8, undershirtDefault, 0, 0);
                break
            case 9:
                mp.players.local.setComponentVariation(4, comp.variation, comp.textures[itemValue], 0);
                mp.events.call("dragcamFocusOnLegs", false, lastHeading);
                break
            case 10:
                mp.players.local.setComponentVariation(3, comp.variation, comp.textures[itemValue], 0);
                mp.events.call("dragcamFocusOnBody", false, lastHeading);
                break
            case 11:
                mp.players.local.setPropIndex(1, comp.variation, comp.textures[itemValue], true);
                mp.events.call("dragcamFocusOnHead", false, lastHeading);
                break
            case 12:
                if (menuName == "faction_clothes") mp.players.local.setComponentVariation(10, comp.variation, comp.textures[itemValue], 0);
                else mp.players.local.setPropIndex(2, comp.variation, comp.textures[itemValue], true);
                mp.events.call("dragcamFocusOnHead", false, lastHeading);
                break
            case 15:
                mp.players.local.setComponentVariation(8, comp.variation, comp.textures[itemValue], 0);
                mp.events.call("dragcamFocusOnBody", false, lastHeading);
                break
            case 16:
                mp.players.local.setComponentVariation(6, comp.variation, comp.textures[itemValue], 0);
                mp.events.call("dragcamFocusOnFeets", false, lastHeading);
                break
            case 17:
                mp.players.local.setPropIndex(0, comp.variation, comp.textures[itemValue], true);
                mp.events.call("dragcamFocusOnHead", false, lastHeading);
                break
            case 18:
                mp.players.local.setPropIndex(6, comp.variation, comp.textures[itemValue], true);
                mp.events.call("dragcamFocusOnBody", false, lastHeading);
                break
            case 19:
                let tiesData = menuName == "clothes" ? getClothesValues('ties', category) : getClothesFactionValues(clothesComponentForType[20])
                if (itemIndex > tiesData.length - 1) {
                    itemIndex -= tiesData.length;
                    comp = clothesData[itemIndex];
                    mp.players.local.setPropIndex(7, comp.variation, comp.textures[itemValue], true);
                }
                else {
                    comp = tiesData[itemIndex];
                    mp.players.local.setComponentVariation(7, comp.variation, comp.textures[itemValue], 0);
                }
                mp.events.call("dragcamFocusOnBody", false, lastHeading);
                break
        }
    }
    else if (menuName == "masks") {
        let comp = mp.clothesshop.masks[1][itemIndex];
        mp.players.local.setComponentVariation(1, !mp.clientStorage.sex && comp.variation >= 190 ? comp.variation + 1 : comp.variation, comp.textures[itemValue], 0);
    }
})
}; a; }
{let a = function scriptEntryPoint(mp) {
let gungameActive = false
let userScore

mp.events.add("setGungame", (value) => {
    if (value) {
        gungameActive = true
        mp.events.call("updateTimerBars");
    }
    else {
        gungameActive = false
        browserMenu.call(`hudControl`, `setRatingData`, false);
    }
})

mp.events.add("updateTimerBars", () => {
    if (!gungameActive) return
    let players = mp.players.toArray().filter(p => p.hasVariable("GungameLevel"));
    players.sort((a, b) => b.getVariable("GungameLevel") - a.getVariable("GungameLevel"));
    players = players.slice(0, 3);
    let data = []
    for (let i = 0; i < 3; i++) {
		data.push({ text: [`${i + 1}`, `${players[i] ? players[i].name : "Відсутнє"}`, `${players[i] ? players[i].getVariable("GungameLevel"): ""}`], color: 'black' })
	}
	data.push({ text: ['', 'Вбивства', `${((mp.players.local.getVariable("GungameLevel") || 0)).toString()}`], color: 'green' })
    if (mp.activeRating == "gungame" || (userScore !== mp.players.local.getVariable("GungameLevel") || 0)) {
        browserMenu.call(`hudControl`, `setRatingData`, data);
        mp.activeRating = "gungame"
    }
    userScore = mp.players.local.getVariable("GungameLevel") || 0
});


mp.events.addDataHandler("GungameLevel", (entity, value) => {
    if (entity.type === "player") mp.events.call("updateTimerBars");
});
}; a; }
{let a = function scriptEntryPoint(mp) {
const { driftMngr } = require("gamemode/scripts/activities/Drift/drifting.js");
const { counter } = require("gamemode/scripts/activities/Drift/driftCounter.js");
driftMngr.addCallback(counter.start.bind(counter), 0);
driftMngr.addCallback(counter.end.bind(counter), 1);
driftMngr.addCallback(counter.process.bind(counter), 2);


mp.events.add("loadXPData", (exp) => {
	counter.allScore = exp;
});

let pulseInterval = false
let driftActive = false
let userScore

mp.events.add("startDrift", (start) => {
	if (start) {
		driftActive = true
		driftMngr.pulseDrift(true)

		pulseInterval = setInterval(() => {
			driftMngr.pulse();
		}, 250);

		mp.activeRating = "drift"
	}
	else {
		driftActive = false
		browserMenu.call(`hudControl`, `setRatingData`, false);
		clearInterval(pulseInterval)
		pulseInterval = false
		driftMngr.pulseDrift(false)
	}
})

let driftScoreVisible = true

mp.events.add("driftScoreVisible", () => {
	driftScoreVisible = !driftScoreVisible
	rpc.callBrowser(browserMenu, "nInfo", `drift score visible ${driftScoreVisible}`)
});

mp.events.add("updateDriftTimerBars", (data) => {
	if (!driftScoreVisible) return
	data.push({ text: ['', 'Рахунок', `${((parseInt(counter.allScore || 0))).toString()}`], color: 'green' })
	if (mp.activeRating == "drift" || (userScore !== parseInt(counter.allScore || 0))) {
		browserMenu.call(`hudControl`, `setRatingData`, data);
		mp.activeRating = "drift"
	}
	userScore = parseInt(counter.allScore || 0)
});

mp.events.add("updateDriftTimerBarsTimer", (time) => {
	browserMenu.call(`hudControl`, `setRatingDataTimer`, time);
});
}; a; }
{let a = function scriptEntryPoint(mp) {
const { driftConsts } = require("gamemode/scripts/activities/Drift/configs/drifting.js");

function normalize2d(x, y) {
	let t = mp.game.system.sqrt(x * x + y * y);

	if (t > 0.000001) {
		let fRcpt = 1 / t;

		x *= fRcpt;
		y *= fRcpt;
	}

	return [x, y];
}

let driftMngr =
{
	isDrifting: false,

	startSnapshot:
	{
		health: 1000.0
	},

	badAngleSince: 0,

	slippery: false,
	slippedyIdx: 0,
	attemptsToEnd: 0,

	api:
		[
			[],	// start
			[],	// end
			[]	// process
		],

	onDriftStarted: function (vehicle, health) {
		this.startSnapshot.health = health;
		this.startSnapshot.startTime = Date.now();
		this.isDrifting = true;

		if (this.api[0].length > 0) {
			for (let cb of this.api[0]) {
				cb();
			}
		}
	},

	onDriftEnded: function (reason) {
		this.isDrifting = false;

		if (this.api[1].length > 0) {
			for (let cb of this.api[1]) {
				cb(reason);
			}
		}
	},

	onDriftProcessed: function (angle, speed, active, stopProgress) {
		if (this.api[2].length > 0) {
			for (let cb of this.api[2]) {
				cb(angle, speed, active, stopProgress);
			}
		}
	},

	pulse: function () {
		if (mp.players.local.dimension > 0) return
		let vehicle = mp.players.local.vehicle;

		if (vehicle && vehicle.getPedInSeat(-1) == mp.players.local.handle && mp.game.vehicle.isThisModelACar(vehicle.model) && vehicle.model != 1491375716) {
			let velocity = vehicle.getVelocity();
			let speed = vehicle.getSpeed();

			let health = vehicle.getBodyHealth();

			///
			let fv = vehicle.getForwardVector();
			let fvn = normalize2d(fv.x, fv.y);
			let fvvn = normalize2d(velocity.x, velocity.y);

			let driftAngle = mp.game.gameplay.getAngleBetween2dVectors(fvn[0], fvn[1], fvvn[0], fvvn[1]);

			let angleOk = (driftAngle >= driftConsts.MinAngle && driftAngle <= driftConsts.MaxAngle);
			let speedOk = (speed >= driftConsts.MinSpeed);
			let damageOk = this.isDrifting ? (health >= this.startSnapshot.health) : true;

			let isDriftingNow = (angleOk && speedOk && damageOk && !vehicle.isInAir());

			if (this.isDrifting) {
				if (isDriftingNow) {
					this.badAngleSince = 0;
					this.attemptsToEnd = 0;
					this.onDriftProcessed(driftAngle, speed, true);
				}
				else {
					let end = true;

					if (!angleOk && speedOk && damageOk) {
						if (this.badAngleSince === 0) {
							this.badAngleSince = Date.now();
							end = false;
						}
						else if ((Date.now() - this.badAngleSince) < 2000) {
							end = false;
						}
					}

					if (end) {
						if (!angleOk) {
							this.attemptsToEnd++
							if (this.attemptsToEnd >= 4) {
								this.onDriftEnded(driftConsts.DriftEndReason.LowAngle);
								//vehicle.setReduceGrip(false);
								this.attemptsToEnd = 0
							}
						}
						else if (!speedOk) {
							this.attemptsToEnd++
							if (this.attemptsToEnd >= 4) {
								this.onDriftEnded(driftConsts.DriftEndReason.LowAngle);
								this.attemptsToEnd = 0
							}
						}
						else if (vehicle.isInAir()) {
							this.attemptsToEnd++
							if (this.attemptsToEnd >= 4) {
								this.onDriftEnded(driftConsts.DriftEndReason.isInAir);
								this.attemptsToEnd = 0
							}
						}
						else {
							this.onDriftEnded(driftConsts.DriftEndReason.DamageDetected);
							this.attemptsToEnd = 0
						}
					}
					else {
						this.onDriftProcessed(driftAngle, speed, false, ((Date.now() - this.badAngleSince) / 2000));
						this.attemptsToEnd = 0
					}
				}
			}
			else if (isDriftingNow) {
				this.onDriftStarted(vehicle, health);
			}
		}
		else if (this.isDrifting) {
			this.onDriftEnded(driftConsts.DriftEndReason.OutOfVehicle);
		}
	},

	renderPulseDrift: function () {
		if (driftMngr.isDrifting) {
			let vehicle = mp.players.local.vehicle;

			if (vehicle && vehicle.getPedInSeat(-1) == mp.players.local.handle && mp.game.vehicle.isThisModelACar(vehicle.model) && vehicle.model != 1491375716) {
				driftMngr.slippedyIdx++;

				if (driftMngr.slippedyIdx === 3) {
					driftMngr.slippedyIdx = 0;
				}
			}
		}
	},

	pulseDrift: function (add) {
		if (add) mp.events.add("render", this.renderPulseDrift)
		else {
			this.onDriftEnded(driftConsts.DriftEndReason.driftingStop);
			mp.events.remove("render", this.renderPulseDrift);
		}
	},

	addCallback: function (cb, type) {
		if (typeof (type) === 'number' && type >= 0 && type <= 2) {
			let api = this.api[type];

			if (api.indexOf(cb) === -1) {
				api.push(cb);
			}
		}
	}
};

exports = {
	driftMngr
}
}; a; }
{let a = function scriptEntryPoint(mp) {
const driftConsts = {
	MinAngle: 12.0,
	MaxAngle: 80.0,
	MinSpeed: 7.0,
	
	DriftEndReason:
	{
		LowSpeed: 0,
		LowAngle: 1,
		DamageDetected: 2,
		OutOfVehicle: 3,
		isInAir: 4,
		driftingStop: 5
	}
};

exports = {
	driftConsts
};
}; a; }
{let a = function scriptEntryPoint(mp) {
const { consts } = require("gamemode/scripts/activities/Drift/configs/counter.js");
const { driftConsts } = require("gamemode/scripts/activities/Drift/configs/drifting.js");
const { messages } = require("gamemode/scripts/activities/Drift/configs/messages.js");

let counter =
{
	currentScore: 0,
	lastMessageScore: 0,
	startTimestamp: 0,

	allScore: 0,

	start: function () {
		this.currentScore = 0;
		this.lastMessageScore = 0;
		this.startTimestamp = Date.now();

		browserMenu.call(`driftAPI`, `setActive`, true);
	},

	getRandomInteger: function (min, max) {
		let rand = min - 0.5 + Math.random() * (max - min + 1)
		rand = Math.round(rand);
		return rand;
	},

	end: function (reason) {
		browserMenu.call(`driftAPI`, `setActive`, false);

		if (reason === driftConsts.DriftEndReason.LowSpeed || reason === driftConsts.DriftEndReason.LowAngle) {
			this.allScore += this.currentScore;
			mp.events.callRemote("updateXPData", this.allScore >> 0);

			if (this.currentScore >= consts.FinishResults.Low) {
				if (this.currentScore >= consts.FinishResults.High) {
					// show a message?
				}
				else if (this.currentScore >= consts.FinishResults.Mid) {
				}
				else {
				}
			}
		}
		else if (reason === driftConsts.DriftEndReason.driftingStop) {
			this.allScore = 0;
		}
	},

	process: function (angle, speed, active, stopProgress) {
		if (active) {
			let score = (((angle - driftConsts.MinAngle) * consts.AngleMultiply)
				+ ((speed - driftConsts.MinSpeed) * consts.SpeedMultiply));

			let timePassed = Date.now() - this.startTimestamp;

			if (timePassed > consts.TimeBonusStart) {
				score *= ((timePassed - consts.TimeBonusStart) * consts.TimeMultiply);
			}

			score *= 0.02;
			score /= 10;

			this.currentScore += score;

			for (let key in messages) {
				if (this.currentScore > key) {
					if (this.lastMessageScore >= key) continue
					this.lastMessageScore = key
					let randomMessage = messages[key][this.getRandomInteger(0, messages[key].length - 1)]
					browserMenu.call(`driftAPI`, `setText`, randomMessage)
					break
				}
				else break
			}

			browserMenu.call(`driftAPI`, `setPoints`, this.currentScore)
		}

		browserMenu.call(`driftAPI`, `setSeconds`, ((Date.now() - this.startTimestamp) / 1000).toFixed(0))
	}
};

exports = {
	counter
};


}; a; }
{let a = function scriptEntryPoint(mp) {
const consts = {
	SpeedMultiply:	0.5,
	AngleMultiply:	1.5,
	
	TimeMultiply: 	1.0,
	TimeBonusStart: 0,
	
	FinishResults:
	{
		High: 5000,
		Mid: 3000,
		Low: 1500
	}
};

exports = {
	consts
};

}; a; }
{let a = function scriptEntryPoint(mp) {
const messages = {
	1000: ['Гарний початок!', 'Відмінний початок!', 'Відмінно стартанув!', 'Пішла рідна!'],
	5000: ['Ульот!', 'Як по маслу!', 'Не надумай врізатися!', 'Та ти женеш!', 'А якщо більше?'],
	10000: ['Ульот!', 'Як по маслу!', 'Не надумай врізатися!', 'Та ти женеш!', 'А якщо більше?'],
	15000: ['Не може бути!', 'По-справжньому в заносі!', 'Не надумай врізатися!', 'Не зменшуй газу!', 'Не гальмуй!'],
	30000: ['Це ульотно!', 'Як по маслу!', 'Не надумай врізатися!', 'Запах гуми всюди!', 'Шини - все!'],
	60000: ['Це нереально!', 'А ти можеш!', 'Не надумай загальмувати!', 'По газах!', 'Педаль у підлогу!'],
};


exports = {
	messages
};
}; a; }
{let a = function scriptEntryPoint(mp) {

mp.events.add("atmMenu.forceClose", () => {
    if (mp.interfaceActive === "bankomat") {
        mp.interfaceActive = false
        browserMenu.call(`bankomat`, `set`, null)
    }
    if (mp.atmCriminalActive) {
        browserMenu.call(`atmCriminal`, `show`, false)
        mp.events.call("CircuitBreakerStop")
        mp.events.call("setFreeze", false)
    }
})

mp.events.add("showBankomat", (data) => {
    if (data) {
        if (!data.isBankomat) {
            mp.interfaceActive = "bankomat"
            browserMenu.call(`bankomat`, `set`, data)
        }
        else {
            let gender = mp.players.local.isMale()
            let player = mp.players.local
            if (player.variable_attachedObject) return
            if (mp.game.blackout.enabled) return rpc.callBrowser(browserMenu, "nWarning", `В банкоматі немає живлення!`)
            // mp.players.local.clearTasksImmediately();
            if (gender) mp.events.callRemote("anim", "anim@mp_atm@enter", "enter")
            else mp.events.callRemote("anim", "anim@mp_atm@femaleenter", "enter")
            if (data.bankomatData.position) {
                let street = mp.game.ui.getStreetNameFromHashKey(mp.game.pathfind.getStreetNameAtCoord(data.bankomatData.position.x, data.bankomatData.position.y, data.bankomatData.position.z, 0, 0)["streetName"])
                data.bankomatData.street = street
                delete data.bankomatData.position
            }
            setTimeout(() => {
                mp.interfaceActive = "bankomat"
                browserMenu.call(`bankomat`, `set`, data)
            }, 1500)
        }
    }
    else {
        mp.interfaceActive = false
        browserMenu.call(`bankomat`, `set`, null)
    }
})

mp.events.add("updateBankomat", (data) => {
    if (mp.interfaceActive === "bankomat") {
        if (data.bankomatData.position) {
            let street = mp.game.ui.getStreetNameFromHashKey(mp.game.pathfind.getStreetNameAtCoord(data.bankomatData.position.x, data.bankomatData.position.y, data.bankomatData.position.z, 0, 0)["streetName"])
            data.bankomatData.street = street
            delete data.bankomatData.position
        }
        browserMenu.call(`bankomat`, `update`, data)
    }
})

mp.events.add("showBankomatSelect", (data) => {
    if (data) mp.interfaceActive = "bankomatSelect"
    else mp.interfaceActive = false
    browserMenu.call(`bankomatSelect`, `set`, data)
})

mp.events.add("atmMenu.onStartCriminal", async (coords) => {
    if (coords) {
        let player = getClosestPlayer(50);
        let robber = mp.players.local
        if (player) return rpc.callBrowser(browserMenu, "nError", `Поруч є люди, які тебе можуть запідозрити!`)
        if (vdist(robber.position, coords) > 2) return mp.events.call("promptThird.hide")
        mp.events.callRemote("logTxt", `${robber.name} начал ограбление банкомата.`)
        mp.atmCriminalActive = true
        browserMenu.call(`atmCriminal`, `show`, "bolt", false, coords)
        mp.events.call("setFreeze", true)
        mp.events.call("promptThird.hide")
    }
    else {
        findTimeout = true
        mp.events.call("promptThird.hide");
        mp.events.call("prompt.hide");
        mp.events.call("selectMenu.hide");
        mp.events.call("atmMenu.forceClose");
        await sleep(500)
        findTimeout = false
    }
});

mp.events.add("CircuitBreakerWIN", () => {
    browserMenu.call(`atmCriminal`, `show`, "money")
    rpc.callBrowser(browserMenu, "nInfo", `Забери гроші затиснув ЛКМ у колі!`)
});

mp.events.add("CircuitBreakerLOSE", () => {
    setCursor(false)
    mp.events.call('setBlockControl', false)
    mp.events.call('atmMenu.setCriminalActive', false)
    mp.events.call("displayRadar", true)
    mp.events.call("displayChat", true)
    mp.events.call("hudControl.enable", true)
    mp.events.call("setFreeze", false)
});

mp.events.add('atmMenu.setCriminalActive', (active) => {
    mp.atmCriminalActive = active
    mp.events.call("setFreeze", active)
});

mp.events.add('atmMenu.sendNotify', () => {
    mp.events.callRemote("atmMenu.sendNotify", getStreetName(mp.players.local.position))
});
}; a; }
{let a = function scriptEntryPoint(mp) {
const info = {
	spawn: { position: new mp.Vector3(-38.27, -589.98, 78.83), heading: -18.0 },
	mothers: [ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45 ],
	fathers: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 42, 44, 43 ],
	peds: [],
	headOverlaysMenu: [
		// Female
		[
			{ text: "Зачіска" },
			{ text: "Брови" },
			{ text: "Дефекти шкіри" },
			{ text: "Старіння шкіри" },
			{ text: "Тип шкіри" },
			{ text: "Родинки та веснянки" },
			{ text: "Ушкодження шкіри" },
			{ text: "Колір очей" },
			{ text: "Макіяж очей" },
			{ text: "Румяна" },
			{ text: "Помада" },
		],
		// Male
		[
			{ text: "Зачіска" },
			{ text: "Брови" },
			{ text: "Волосся на обличчі" },
			{ text: "Дефекти шкіри" },
			{ text: "Старіння шкіри" },
			{ text: "Тип шкіри" },
			{ text: "Родинки та веснянки" },
			{ text: "Ушкодження шкіри" },
			{ text: "Колір очей" },
			{ text: "Макіяж очей" },
			{ text: "Помада" },
		]
	],
	values: {
		hair: [
			// Female
			[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 ],
			// Male
			[ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 ]
		],
		eyeColors: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ],
		headOverlays: [
			// Female
			[ 2, 0, 3, 6, 9, 7, 4, 5, 8 ],
			// Male
			[ 2, 1, 0, 3, 6, 9, 7, 4, 8 ]
		],
		headOverlaysLabels: {
			0: [ "Ні", "Краснуха", "Кір", "Плями", "Висип", "Вугри", "Наліт", "Гнійники", "Прищики", "Великі прищі", "Прищі", "Висип на щоках", "Висип на обличчі", "Розколупані прищі", "Пубертат", "Виразка", "Висип на підборідді", "З двома особами", "Зона Т", "Сальна шкіра", "Шрами", "Шрами від прищів", "Шрами від великих прищів", "Герпес", "Лишай" ],
			1: [ "Гладка шкіра", "Легка щетина", "Бальбо", "Кругла борода", "Еспаньолка", "Козляча борідка", "Острівець", "Тонка борідка", "Коротка борідка", "Мушкетер", "Вуса", "Підстрижена борода", "Щетина", "Кругла борода", "Борода-підкова", "Олівці вуса", "Борода-ремінь", "Бальбо", "Баки", "Коротка борідка", "Дали", "Дали і борода", "Велосипедний руль", "Острівець з вусами", "Англійські вуса з пеньком", "Голлівудська борода", "Фу Манчу", "Острівець з баками", "Широкі баки", "Ширма борода" ],
			3: [ "Ні", "Зморшки у кутах очей", "Перші ознаки старіння", "Середній вік", "Зморшки", "Депресія", "Похилий вік", "Старість", "Обвітрена шкіра", "Зморшкувата шкіра", "Обвисла шкіра", "Важке життя", "Вінтаж", "Пенсійний вік", "Наркоманія", "Старість" ],
			6: [ "Ні", "Рум’янець", "Роздратування від щетини", "Почервоніння", "Сонячний опік", "Синяки", "Алкоголізм", "Плями", "Тотем", "Кровоносні судини", "Пошкодження", "Бліда", "Мертвенно-бліда" ],
			7: [ "Ні", "Нерівна", "Наждак", "Плямиста", "Груба", "Жорстка", "Шорстка", "Загрубіла", "Нерівна", "Зі складками", "Потріскана", "Тверда" ],
			9: [ "Ні", "Ангелятко", "Всюди", "Місцями", "Одиничні", "На переніссі", "Лялечка", "Фея", "Засмагла", "Родимки", "Ряд", "Як у моделі", "Рідкісні", "Веснянки", "Краплинки дощу", "Подвійність", "З одного боку", "Пари", "Бородавки" ]
		},
		makeups: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 34, 35, 36, 37, 38, 39, 40, 41 ],
		blushes: [ 0, 1, 2, 3, 4, 5, 6 ],
		hairColors: [],
		lipstickColors: [],
		makeupColors: [],
	}
};

exports = {
	info
}

}; a; }
{let a = function scriptEntryPoint(mp) {
class CharacterRotator {
	startForPeds(ped){
		this.ped = ped;
        this.activate(true); 
    }
    start(){
        this.activate(true); 
    }
    stop(){
		if (this.ped) delete this.ped;
        this.activate(false)
    }
    rotate(){   
        let position = parseInt(mp.gui.cursor.position.toString().substr(0,4))  
        if(this.position == undefined) this.position = position 
        if(this.position == position) return
        if(this.lastPosition == position){
            this.reset()
            return;
        }
        if(this.position < position) {
			if (this.ped) {
				this.setHeading(this.ped, this.ped.getHeading() + 8);
			}
			else this.setHeading(mp.players.local, mp.players.local.getHeading() + 8);
        }
        else {
			if (this.ped) {
				this.setHeading(this.ped, this.ped.getHeading() - 8);
			}
            else this.setHeading(mp.players.local, mp.players.local.getHeading() - 8);
        }
        this.lastPosition = position
        
    }
    activate(state){
        this.isActive = state
		if (!this.isActive && mp.banCameraRotate) mp.banCameraRotate = false;
    }  
    reset(){
        this.position = undefined
        this.lastPosition = undefined
    }
    setHeading(ped, heading){
        ped.setHeading(heading);
    }
}
 
const characterRotator = new CharacterRotator();
mp.events.add("characterRotator::handle", (bool) => {
    if(bool) characterRotator.start()
    else characterRotator.stop()
})
mp.events.add("render", () => {
    if(!characterRotator.isActive || mp.banCameraRotate) return
    if (mp.gui.cursor.visible){
        if (mp.game.controls.isDisabledControlPressed(2, 237)) {
            characterRotator.rotate()
        } 
        if (mp.game.controls.isDisabledControlJustReleased(2, 237)) {
            characterRotator.reset()
        } 
    }
    if(mp.keys.isDown(37)){
		if (characterRotator.ped) {
			characterRotator.setHeading(characterRotator.ped, characterRotator.ped.getHeading() - 7);
		}
        else characterRotator.setHeading(mp.players.local, mp.players.local.getHeading() - 7);
    }
    else if(mp.keys.isDown(39)){
		if (characterRotator.ped) {
			characterRotator.setHeading(characterRotator.ped, characterRotator.ped.getHeading() + 7);
		}
        else characterRotator.setHeading(mp.players.local, mp.players.local.getHeading() + 7);
    }
})
// mp.events.add("render", () => {
	

// 	const x = mp.game.controls.getDisabledControlNormal(2, 239);
// 	const y = mp.game.controls.getDisabledControlNormal(2, 240);

// 	if (cameraRotator.isPointEmpty()) {
// 		cameraRotator.setPoint(x, y);
// 	}

// 	const currentPoint = cameraRotator.getPoint();
// 	const dX = currentPoint.x - x;
// 	const dY = currentPoint.y - y;
	
// 	cameraRotator.setPoint(x, y);

// 	// Comment before commit
// 	drawDebugText();

	
// });

exports = {
    characterRotator
}
}; a; }
{let a = function scriptEntryPoint(mp) {
const cameraRotator = require("gamemode/scripts/helpers/cameraRotator.js");
const hiddenWheels = {
	7: [
		40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
		61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
		82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
		103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
		121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
		139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
		157, 158, 159, 160, 161, 162, 163, 164, 165
	]
}  

const factionColors = {
	6: [6, 47, 0],
	7: [82, 29, 111],
	8: [30, 50, 40],
	9: [255, 174, 0],
	10: [11, 156, 241],
	11: [60, 60, 60],
	12: [53, 23, 12],
	13: [64, 1, 5],
	14: [0, 0, 0],
}

const CarTuning = {
	data: {},
	customsInfo: undefined,
	controlsToDisable: [ 71, 72, 76, 73, 59, 60, 75, 80, 69, 70, 68, 74, 86, 81, 82, 138, 136, 114,
		107, 110, 89, 89, 87, 88, 113, 115, 116, 117, 118, 119, 131, 132, 123, 126, 129, 130, 133, 134 ],
	accessedMods: [{ id: 0, name: "Спойлер"}, { id: 1, name: "Передній бампер"}, { id: 2, name: "Задній бампер"}, { id: 3, name: "Пороги"}, { id: 4, name: "Вихлоп"},
	{ id: 5, name: "Каркас"}, { id: 6, name: "Решітка бампера"}, { id: 7, name: "Капот"}, { id: 8, name: "Крила"}, { id: 9, name: "Крила"},
	{ id: 10, name: "Дах"}, { id: 11, name: "Двигун"}, { id: 12, name: "Гальма"}, { id: 13, name: "Трансмісія"}, { id: 14, name: "Клаксон"}, { id: 15, name: "Підвіска"},
	{ id: 16, name: "Броня"}, { id: 23, name: "Колеса", hide: true },
	{ id: 27, name: "Дизайн оздоблення"}, { id: 28, name: "Емблема"}, { id: 48, name: "Розмальовка"}, { id: 33, name: "Кермо"}, { id: 34, name: "Важіль перемикання передач"},
	{ id: 35, name: "Наклейки"}, { id: 38, name: "Гідравліка"}, { id: 40, name: "Буст"}, { id: 55, name: "Тонування"}, { id: 1000, name: "Пофарбування"}, { id: 1012, name: "Хамелеон"}, { id: 1011, name: "Перламутр"}, { id: 1001, name: "Неон"},
	{ id: 1002, name: "Колеса"}, { id: 1003, name: "Ксенон"}, { id: 1004, name: "Турбонаддув"}, { id: 1006, name: "Колір диму від шин"}, /*{ id: 1007, name: "Чип-тюнинг"},*/
	{ id: 1008, name: "Ремені безпеки"}, { id: 1009, name: "Фарбування дисків", hide: true }, { id: 1010, name: "Автопілот"}, { id: 1013, name: "Фракційне пофарбування"}], 
	accessedModsAir: [{ id: 11, name: "Двигун"}, { id: 16, name: "Броня"}, { id: 48, name: "Розмальовка"}, { id: 1000, name: "Пофарбування"}, { id: 1011, name: "Перламутр"}, { id: 1004, name: "Турбонаддув"}, { id: 1010, name: "Автопілот"}],
	accessedModsBoat: [{ id: 11, name: "Двигун"}, { id: 16, name: "Броня"}, { id: 1000, name: "Пофарбування"}, { id: 1011, name: "Перламутр"}, { id: 1004, name: "Турбонаддув"}, { id: 1010, name: "Автопілот"}], 
	withColorPicker: [1000, 1001, 1006],
	withColorPalette: [1011],
	uniqueMods: [25, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013],
	withoutStandart: [55, 23, 25, 1000, 1001, 1003, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013],
	paramsBuggedCars: [{
		model: mp.game.joaat("toros"),
		indexes: [{ id: 0, name: "Передній бампер", icon: 1 }, {id: 1, name: "Верхній спойлер", icon: 0 }, {id: 2, name: "Нижній спойлер", icon: 0}]
	}],
	numberPlateTypes: [{ index: 0, name: "Стандарт" }, { index: 1, name: "Жовто-чорний стиль" }, { index: 2, name: "Жовто-синій стиль" }, { index: 3, name: "Синьо-білий стиль" },
						{ index: 4, name: "Додатковий синьо-білий стиль" }, { index: 5, name: "Біло-червоний стиль" }],
	wheelsTypes: [{ id: 0, name: "Sport", multiplier: 0.01 }, { id: 1, name: "Muscle", multiplier: 0.02 }, { id: 2, name: "Lowrider", multiplier: 0.03 }, { id: 3, name: "SUV", multiplier: 0.04 }, { id: 4, name: "Offroad", multiplier: 0.05 },
					{ id: 5, name: "Tuner", multiplier: 0.06 }, { id: 6, name: "Bike Wheels", multiplier: 0.06 }, { id: 7, name: "High End", multiplier: 0.07 }, { id: 8, name: "Benny Original", multiplier: 0.08 }, { id: 9, name: "Benny Bespoke", multiplier: 0.08 }, { id: 10, name: "Фарбування дисків" }],
	headlightsColor: [{ index: 0, name: "Стандарт", price: 1000 }, { index: 255, name: "Ксенонові", price: 50000 }
	, { index: 0, name: "Ксенонові білі", price: 500000 }, { index: 1, name: "Ксенонові сині", price: 500000 }, { index: 2, name: "Ксенонові блакитні", price: 500000 }, 
	 					{ index: 3, name: "Ксенонові зелені", price: 500000 }, { index: 4, name: "Ксенонові світло-зелені", price: 500000 }, { index: 5, name: "Ксенонові світло-жовті", price: 500000 }, { index: 6, name: "Ксенонові жовті", price: 500000 },
	 					{ index: 7, name: "Ксенонові помаранчеві", price: 500000 }, { index: 8, name: "Ксенонові червоні", price: 500000 }, { index: 9, name: "Ксенонові світло-рожеві", price: 500000 }, { index: 10, name: "Ксенонові рожеві", price: 500000 },
	 					{ index: 11, name: "Ксенонові фіолетові", price: 500000 }, { index: 12, name: "Ксенонові світло-фіолетові", price: 500000 },
					],
	wheelsColor: [
		{ name: "Чорний", index: 0 }, { name: "Чорний карбон", index: 147 },
		{ name: "Графіт", index: 1 }, { name: "Антрацит чорний", index: 11 },
		{ name: "Чорна сталь", index: 2 }, { name: "Темна сталь", index: 3 },
		{ name: "Срібний", index: 4 }, { name: "Блакитне срібло", index: 5 },
		{ name: "Катана сталь", index: 6 }, { name: "Срібна тінь", index: 7 },
		{ name: "Кам’яне срібло", index: 8 }, { name: "Опівнічне срібло", index: 9 },
		{ name: "Чавун сріблястий", index: 10 }, { name: "Червоний", index: 27 },
		{ name: "Турин червоний", index: 28 }, { name: "Червона формула", index: 29 },
		{ name: "Червона лава", index: 150 }, { name: "Яскраво червоний", index: 30 },
		{ name: "Грейс червоний", index: 31 }, { name: "Гранатово-червоний", index: 32 },
		{ name: "Червоний захід сонця", index: 33 }, { name: "Каберне червоний", index: 34 },
		{ name: "Червоне вино", index: 143 }, { name: "Цукерково-червоний", index: 35 },
		{ name: "Яскраво рожевий", index: 135 }, { name: "Пфістер рожевий", index: 137 },
		{ name: "Лососевий рожевий", index: 136 }, { name: "Схід помаранчевий", index: 36 },
		{ name: "Апельсин", index: 38 }, { name: "Яскраво оранжевий", index: 138 },
		{ name: "Золото", index: 99 }, { name: "Бронза", index: 90 },
		{ name: "Жовтий", index: 88 }, { name: "Гоночний жовтий", index: 89 },
		{ name: "Жовта роса", index: 91 }, { name: "Темно-зелений", index: 49 },
		{ name: "Гоночний зелений", index: 50 }, { name: "Колір морської хвилі", index: 51 },
		{ name: "Оливково-зелений", index: 52 }, { name: "Яскраво зелений", index: 53 },
		{ name: "Бензиново зелений", index: 54 }, { name: "Зелений лайм", index: 92 },
		{ name: "Північний синій", index: 141 },
		{ name: "Блакитна галактика", index: 61 }, { name: "Темно синій", index: 62 },
		{ name: "Саксонський синій", index: 63 }, { name: "Синій", index: 64 },
		{ name: "Морський синій", index: 65 }, { name: "Блакитна гавань", index: 66 },
		{ name: "Діамантовий синій", index: 67 }, { name: "Синій прибій", index: 68 },
		{ name: "Морський синій", index: 69 }, { name: "Гоночний синій", index: 73 },
		{ name: "Ультра синій", index: 70 }, { name: "Світло синій", index: 74 },
		{ name: "Шоколадно-коричневий", index: 96 }, { name: "Бізон коричневий", index: 101 },
		{ name: "Коричневий крин", index: 95 }, { name: "Коричневий фельцер", index: 94 },
		{ name: "Кленовий коричневий", index: 97 }, { name: "Буквуд коричневий", index: 103 },
		{ name: "Коричнева сієна", index: 104 }, { name: "Коричневе сідло", index: 98 },
		{ name: "Коричневий мох", index: 100 }, { name: "Вудбук коричневийй", index: 102 },
		{ name: "Солом’яно-коричневий", index: 99 }, { name: "Коричневий сенді", index: 105 },
		{ name: "Вибілений коричневий", index: 106 }, { name: "Шафтер фіолетовий", index: 71 },
		{ name: "Фіолетовий спінакер", index: 72 }, { name: "Північний фіолетовий", index: 142 },
		{ name: "Яскраво-фіолетовий", index: 145 }, { name: "Пломбір", index: 107 },
		{ name: "Крижаний білий", index: 111 }, { name: "Морозний білий", index: 112 }],

	clearCarTuningData: () => {
		CarTuning.data = {
			camera: undefined,
			vehicle: undefined,
			vehiclePrice: undefined,
			vehicleDriver: undefined,
			place: undefined 
		}
	},
	getValuesByModType: (modType) => {
		if (!CarTuning.data.vehicle) return
		let result = []  
		let mods = CarTuning.data.vehicle.getNumMods(modType)  
		let prices = CarTuning.customsInfo.prices["mods"]    
		for (let key = 0; key < mods; key++) { 
			let label = CarTuning.data.vehicle.getModTextLabel(modType, key); 
			if (typeof label !== "string" || !label.length) {
				label = CarTuning.getModLabel(modType, key); 
			}   
			let price = 1 
			if (prices[modType]) price = prices[modType][key] || prices[modType].base + (key * prices[modType].add) 
			label = typeof label === "string" ? mp.game.ui.getLabelText(label) : false
			if (!label || label === "NULL") label = `${CarTuning.accessedMods.find((value) => value.id == modType).name} ${key}`
			result.push({name: stringHelper.escapeHtml(label), price: Math.round(price * CarTuning.data.vehiclePrice) || 500, index: key });
		} 
		if (!CarTuning.withoutStandart.includes(modType)) {
			result.unshift({name: "Стандарт", price: 1000, index: -1})
		}
		let executing = {
			55: {
				on: () => { 
					result[0].name = "0% тонування вікон" 
					result[0].index = 4   
					result[0].price = 1000

					result[1].name = "25% тонування вікон"
					result[1].index = 0
					result[1].price = 0.02 * CarTuning.data.vehiclePrice

					result[2].name = "50% тонування вікон"
					result[2].index = 3
					result[2].price = 0.03 * CarTuning.data.vehiclePrice

					result[3].name = "75% тонування вікон"
					result[3].index = 2
					result[3].price = 0.04 * CarTuning.data.vehiclePrice

					result[4].name = "100% тонування вікон"
					result[4].index = 1 
					result[4].price = 0.05 * CarTuning.data.vehiclePrice
				}
			}, 
			14: {
				on: () => {
					for (var i = 0; i < result.length; i++) {
						result[i].name = `${i}. ${CarTuning.customsInfo.horns[i].label}` 
						result[i].index = CarTuning.customsInfo.horns[i].value
					}
				}
			},
			23: {
				on: () => { 
					for (let key in result) {
						result[key].name = `${key}. ${result[key].name}`
						result[key].price = CarTuning.wheelsTypes.find( (val) => val.id == CarTuning.data.vehicle.getWheelType() ).multiplier * CarTuning.data.vehiclePrice
						result[key].isHidden = hiddenWheels[CarTuning.data.vehicle.getWheelType()] && hiddenWheels[CarTuning.data.vehicle.getWheelType()].includes(parseInt(key))
					}
				}
			},
			25: {
				on: () => {
					for (let key in CarTuning.numberPlateTypes) { 
						result.push({ name: CarTuning.numberPlateTypes[key].name, index: CarTuning.numberPlateTypes[key].index, price: (prices[25].base + (key * prices[25].add)) * CarTuning.data.vehiclePrice  })
					}
				}
			},
			// 1000: {
			// 	on: () => {
			// 		for (let key in CarTuning.colorTypes) {
			// 			result.push({ name: CarTuning.colorTypes[key], price: Math.round(0.1 * CarTuning.data.vehiclePrice) })
			// 		} 
			// 	}
			// },
			1002: {
				on: () => {
					let bike = mp.game.vehicle.isThisModelABike(CarTuning.data.vehicle.model)
					for (let key in CarTuning.wheelsTypes) { 
						if (CarTuning.wheelsTypes[key].name == "Фарбування дисків") {
							result.push({ name: CarTuning.wheelsTypes[key].name, index: CarTuning.wheelsTypes[key].id })
						}
						else {
							if (bike && CarTuning.wheelsTypes[key].name == "Bike Wheels") result.push({ name: CarTuning.wheelsTypes[key].name, index: CarTuning.wheelsTypes[key].id })
							else if (!bike && CarTuning.wheelsTypes[key].name != "Bike Wheels") result.push({ name: CarTuning.wheelsTypes[key].name, index: CarTuning.wheelsTypes[key].id })
						}
					}
				}
			},
			1003: {
				on: () => {  
					for (let key in CarTuning.headlightsColor) { 
						result.push({ name: CarTuning.headlightsColor[key].name, index: CarTuning.headlightsColor[key].index, price: CarTuning.headlightsColor[key].price })
					}
				}
			},
			1012: {
				on: () => {  
					for (var i = 0; i < 82; i++) {
						result.push({ name: `Варіант ${i + 1}`, index: i, price: Math.round(0.15 * CarTuning.data.vehiclePrice) })
					}
				}
			},
			1004: {
				on: () => {
					result.push({ name: "Турбина", index: 1, price: Math.round(0.1 * CarTuning.data.vehiclePrice) || 500 })
				}
			},
			/*1007: {
				on: () => {  
					result.push({ name: "Стандарт", index: 0, price: 1000 })
					result.push({ name: "Stage 1 (+5%)", index: 1, price: 500000 })
					result.push({ name: "Stage 2 (+10%)", index: 2, price: 2000000 })
					result.push({ name: "Stage 3 (+15%)", index: 3, price: 3000000 })
				}
			},*/
			1008: {
				on: () => {
					result.push({ name: "Стандарт", index: 0, price: 1000 })
					result.push({ name: "Ремені безпеки", index: 1, price: Math.round(0.05 * CarTuning.data.vehiclePrice) })
				}
			},
			1009: {
				on: () => {
					for (let key in CarTuning.wheelsColor) { 
						result.push({ name: CarTuning.wheelsColor[key].name, index: CarTuning.wheelsColor[key].index, price: 0.05 * CarTuning.data.vehiclePrice  })
					}
				}
			},
			1010: {
				on: () => {
					result.push({ name: "Стандарт", index: 0, price: 1000 })
					result.push({ name: "Автопілот", index: 1, price: Math.round(0.06 * CarTuning.data.vehiclePrice) })
				}
			},
			1013: {
				on: () => {
					result.push({ name: "Стандарт", index: 0, price: 1000 })
					result.push({ name: "Фракційний колір", index: 1, price: 1000 })
				}
			},
		}	
		if (executing[modType]) executing[modType].on() 
		for (let key in result) {
			result[key].activity = modType
		}
		return result
	},
	getAllVehicleMods: (veh) => {
		let result = [] 
		for (let key in CarTuning.accessedMods) {  
			let modType = CarTuning.accessedMods[key].id
			if (!CarTuning.uniqueMods.includes(modType)) { 
				result.push({ modType, modIndex: modType == 55 ? mp.game.invoke("0x0EE21293DAD47C95", CarTuning.data.vehicle.handle) : modType == 23 ? CarTuning.data.currentWheelType == CarTuning.data.vehicle.getWheelType() ? veh.getMod(modType) : -1 : veh.getMod(modType)})
			}
			else { 
				if (modType == 25) { 
					let answer = veh.getNumberPlateTextIndex()
					result.push({ modType, modIndex: answer}) 
				}
				else if (modType == 1002) {
					let answer = veh.getMod(23)
					result.push({ modType, modIndex: answer == -1 ? -1 : 1000 }) 
				}
				else if (modType == 1003) {
					let answer = veh.isToggleModOn(22) || -1
					if (answer != -1) {
						answer = mp.game.invoke("0x3DFF319A831E0CDB", veh.handle)
					}
					result.push({ modType, modIndex: answer}) 
				}
				else if (modType == 1004) {
					let answer = veh.isToggleModOn(18) || -1
					result.push({ modType, modIndex: answer == -1 ? -1 : 1}) 
				}
				else if (modType == 1007) {
					result.push({ modType, modIndex: veh.variable_chip || 0})
				}
				else if (modType == 1008) {
					result.push({ modType, modIndex: veh.variable_seatbelt || 0})
				}
				else if (modType == 1009) {
					let obj = mp.players.local.vehicle.getExtraColours(1, 1)
					result.push({ modType, modIndex: obj.wheelColor || 0})
				}
				else if (modType == 1010) {
					result.push({ modType, modIndex: veh.getVariable("autopilot") || 0})
				}
				else if (modType == 1013) {
					const color1 = veh.color1 || [255, 255, 255]
					const color2 = veh.color2 || [255, 255, 255]
					const modColor1 = veh.modColor1 || 0
					const modColor2 = veh.modColor2 || 0

					if (factionColors[mp.clientStorage["faction"]] && factionColors[mp.clientStorage["faction"]][0] === color1[0] && factionColors[mp.clientStorage["faction"]][1] === color1[1] && factionColors[mp.clientStorage["faction"]][2] === color1[2] && factionColors[mp.clientStorage["faction"]][0] === color2[0] && factionColors[mp.clientStorage["faction"]][1] === color2[1] && factionColors[mp.clientStorage["faction"]][2] === color2[2] && !modColor1 && !modColor2) {
						result.push({ modType, modIndex: 1 })
					}
					else {
						result.push({ modType, modIndex: 0 })
					}
				}
				else if (modType == 1012) {
					let color = veh.getColours(0, 0)
					result.push({ modType, modIndex: color && color.colorPrimary ? color.colorPrimary - 161 : -1})
				}
			} 
		}  
		return result
	},
	getAvailableMods: (veh) => {
		let result = [] 
		const mods = mp.game.vehicle.isThisModelAPlane(veh.model) || mp.game.vehicle.isThisModelAHeli(veh.model) ? CarTuning.accessedModsAir : mp.game.vehicle.isThisModelABoat(veh.model) ? CarTuning.accessedModsBoat : CarTuning.accessedMods

		for (let key in mods) {   
			if ((veh.getNumMods(mods[key].id) != 0 || CarTuning.uniqueMods.includes(mods[key].id)) && !mods[key].hide) { 
				if (mods[key].name === "Фракційне пофарбування" && !factionColors[mp.clientStorage["faction"]]) continue
				result.push(mods[key])
			} 
		} 
		for (let j in CarTuning.paramsBuggedCars) {
			if (CarTuning.data.vehicle.model == CarTuning.paramsBuggedCars[j].model) {
				for (let i in CarTuning.paramsBuggedCars[j].indexes) {
					for (let k in result) {
						if (result[k].id == CarTuning.paramsBuggedCars[j].indexes[i].id) {
							result[k].name = CarTuning.paramsBuggedCars[j].indexes[i].name
							result[k].icon = CarTuning.paramsBuggedCars[j].indexes[i].icon
						}
					}
				}
			}
		}
		return result
	}, 
	getModLabel: (modType, modIndex) => {
		switch(modType) {
			case 3:
				return `CMOD_SKI_${modIndex + 1}`;
			case 11:
				return modIndex === 0 ? "collision_55wey9g" : `CMOD_ENG_${modIndex + 2}`;
			case 12:
				return `CMOD_BRA_${modIndex + 1}`;
			case 13:
				return `CMOD_GBX_${modIndex + 1}`;
			case 15:
				return modIndex === 3 ? "collision_84hts2y" : `CMOD_SUS_${modIndex + 1}`;
			case 16: 
				return `CMOD_ARM_${modIndex + 1}`;  
		}
	},  
}


mp.events.add("carTuning::sync", (rawCustomsInfo) => {
	CarTuning.clearCarTuningData()
	CarTuning.customsInfo = JSON.parse(rawCustomsInfo); 
});
mp.events.add("carTuning::setColor", (place, color) => {
	if (place) mp.game.invoke("0x7141766F91D15BEA", CarTuning.data.vehicle.handle, color.r, color.g, color.b)
	else mp.game.invoke("0x36CED73BFED89754", CarTuning.data.vehicle.handle, color.r, color.g, color.b)
}) 
mp.events.add("carTuning::setColorType", (number, colorType) => {
	if (number == 0) CarTuning.data.vehicle.setModColor1(colorType || 0, 0, 0);
	else CarTuning.data.vehicle.setModColor2(colorType || 0, 0);  
})
mp.events.add("carTuning::setModColor", (colorType, color) => {
	CarTuning.data.vehicle.setModColor1(colorType || 0, color || 0, 0);
	CarTuning.data.vehicle.setModColor2(colorType || 0, color || 0);  
})
mp.events.add("carTuning::enterPrimaryColshape", (driver, price, index) => { 
	const place = CarTuning.customsInfo.places[index] 
	if (!place || !mp.players.local.vehicle) return
	CarTuning.data.vehicle = mp.players.local.vehicle  
	CarTuning.data.vehiclePrice = price 
	CarTuning.data.vehicleDriver = driver
	CarTuning.data.currentWheelType = CarTuning.data.vehicle.getWheelType()
	CarTuning.data.vehicle.setOnGroundProperly();
	CarTuning.data.vehicle.setDoorsShut(true);
	CarTuning.data.vehicle.setForwardSpeed(3);
	CarTuning.data.vehicle.setVelocity(0, 0, 0) 
	mp.game.invoke("0x3B988190C0AA6C0B", CarTuning.data.vehicle.handle, false); // Radio
	mp.game.invoke("0xE65F427EB70AB1ED", -1, "MOD_SHOPS_ENTER_ENGINE_BLIP", CarTuning.data.vehicle.handle, 0, 0, 0); // Engine sound 
	CarTuning.data.camera = mp.cameras.new("default");
	// const camParams = place.startCamParams; 
	// CarTuning.data.camera.setParams(camParams.from.position.x, camParams.from.position.y, camParams.from.position.z, camParams.from.rotation.x, camParams.from.rotation.y, camParams.from.rotation.z, camParams.from.fov, camParams.from.duration, camParams.from.unk, 1, 2);
	// CarTuning.data.camera.setParams(camParams.to.position.x, camParams.to.position.y, camParams.to.position.z, camParams.to.rotation.x, camParams.to.rotation.y, camParams.to.rotation.z, camParams.to.fov, camParams.to.duration, camParams.to.unk, 1, 2);
	CarTuning.data.camera.setActive(true);
	mp.game.cam.renderScriptCams(true, false, 3000, true, false);   
	if (CarTuning.data.vehicleDriver === mp.players.local.remoteId) { 
		mp.events.call("carTuning::CEF::setData", CarTuning.getAvailableMods(CarTuning.data.vehicle))   
	} else {
		setCursor(true)
	}
	cameraRotator.start(CarTuning.data.camera, CarTuning.data.vehicle.position, CarTuning.data.vehicle.position, new mp.Vector3(-3.5, 4, 0.5), CarTuning.data.vehicle.getHeading(), 60);
	cameraRotator.setZBound(-0.8, 1.8);
	cameraRotator.setZUpMultipler(5); 
	mp.game.ui.requestAdditionalText("MOD_MNU", 9); 

});

let hornInterval = null
let hornIntervalIterations = 0
mp.events.add("carTuning::startHorn", () => {
	CarTuning.data.vehicle.startHorn(3000, 0, false);
	if (hornInterval) clearInterval(hornInterval), hornInterval = null
	hornInterval = setInterval(() => {
		if (!CarTuning.data.vehicle) return clearInterval(hornInterval), hornInterval = null
		CarTuning.data.vehicle.startHorn(3000, 0, false);
		hornIntervalIterations++
		if (hornIntervalIterations == 3) {
			clearInterval(hornInterval) 
			hornIntervalIterations = 0
			hornInterval = null
		}
	}, 300)
})

mp.events.add("carTuning::exitTuning", () => {
	if (!CarTuning.data.vehicle) return new Error("exitTuning error")
	if (CarTuning.data.vehicleDriver === mp.players.local.remoteId) {
		if (!mp.carTuningActive) return new Error("exitTuning error")
		mp.events.call("carTuning::CEF::setData", null)  
	} else {
		setCursor(false)
	}
	mp.game.invoke("0x3B988190C0AA6C0B", CarTuning.data.vehicle.handle, true); // Radio
	CarTuning.data.vehicle.setOnGroundProperly();
	mp.game.audio.setRadioToStationName("OFF");
	mp.game.audio.setUserRadioControlEnabled(true);
	if (CarTuning.data.camera !== undefined) {
		cameraRotator.stop();
		CarTuning.data.camera.destroy(); 
	} 
	mp.game.cam.renderScriptCams(false, false, 0, true, false);  
	CarTuning.clearCarTuningData()
})

mp.events.add("carTuning::CEF::setData", (data) => { 
	if (typeof data == "string") data = JSON.parse(data)    
	let mods = CarTuning.getAllVehicleMods(CarTuning.data.vehicle)
	browserMenu.call(`carTuningAPI`, `setData`, data, mods)
	mp.events.call("carTuning::setVehicleParams")
	mp.carTuningActive = data != null  
	CarTuning.data.vehicle.setLights(0)
})

mp.events.add("carTuning::selectPoint", async (activity, value, price, name) => {  
	if (!price) {   
		if (CarTuning.withColorPicker.includes(value)) { 
			mp.events.call("carTuning::CEF::setData", [])
			browserMenu.call(`carTuningAPI`, `setColorPicker`, value)
		}
		else if (CarTuning.withColorPalette.includes(value)) {
			mp.events.call("carTuning::CEF::setData", [])
			browserMenu.call(`carTuningAPI`, `setColorPalette`, value)
		}
		else if (activity == 1002) { 
			if (value == 10) {
				mp.events.call("carTuning::CEF::setData", CarTuning.getValuesByModType(1009)) 
				return
			}
			mp.events.callRemote("carTuning::setWheelType", value)
			CarTuning.data.vehicle.setWheelType(value)
			mp.events.call("carTuning::CEF::setData", CarTuning.getValuesByModType(23))  
		}
		else if (activity == 1003) {
			mp.events.call("carTuning::CEF::setData", CarTuning.getValuesByModType(activity))  
		} 
		else {
			mp.events.call("carTuning::CEF::setData", CarTuning.getValuesByModType(value)) 
		} 
	}
	else {
		if (activity == undefined) return   
		if (activity == 1003) { 
			CarTuning.data.vehicle.setLights(2) 
		} 
		mp.events.callRemote("carTuning::selectPoint::setMod", activity, value, price, name) 
	} 
})

mp.events.add("carTuning::setVehicleParams", (isDisplayChanges, isUpdateVehicleMods) => { 
	let neon = CarTuning.data.vehicle.getNeonLightsColour(1, 1, 1)
	let params = {
		maxSpeed: mp.game.vehicle.getVehicleModelMaxSpeed(CarTuning.data.vehicle.model), 
		braking: parseFloat((CarTuning.data.vehicle.getMaxBraking() * 100)), 
		acceleration: parseFloat(CarTuning.data.vehicle.getAcceleration() * 100), 
		controllability: parseFloat(CarTuning.data.vehicle.getMaxTraction() * 100),  
		//maxSpeedKm: ((mp.game.vehicle.getVehicleModelMaxSpeed(model) * 3.6).toFixed(0)), 
		modColor1: CarTuning.data.vehicle.modColor1 || 0,
		modColor2: CarTuning.data.vehicle.modColor2 || 0,
		color1: CarTuning.data.vehicle.color1 || [255, 255, 255],
		color2: CarTuning.data.vehicle.color2 || [255, 255, 255],
		pearlescentColor: CarTuning.data.vehicle.pearlescentColor,
		tyresmokecolor: CarTuning.data.vehicle.variable_tyreSmokeColor || [255, 255, 255],
		neoncolor: neon ? [neon.r, neon.g, neon.b] : [255, 255, 255],
		price: CarTuning.data.vehiclePrice
		
	}  
	let mods = CarTuning.getAllVehicleMods(CarTuning.data.vehicle)
	browserMenu.call(`carTuningAPI`, `setVehicleParams`, params, isDisplayChanges, isUpdateVehicleMods ? mods : undefined)
})

mp.events.add("carTuning::setWheelsType", (type) => { 
	CarTuning.data.currentWheelType = type
})

mp.events.add("carTuning::buyMode", (activity, value, price, name) => {
	mp.events.callRemote("carTuning::selectPoint::setMod", activity, value, price, name, true)
})



mp.events.add("render", () => {
	if (!mp.carTuningActive) return
	for (const control of CarTuning.controlsToDisable) {
		mp.game.controls.disableControlAction(0, control, true);
	}
})

mp.events.add("showCarTuningEnter", (data) => {
    if (data) mp.interfaceActive = "carTuningEnter"
    else mp.interfaceActive = false
    browserMenu.call(`carTuningEnter`, `set`, data)
})

}; a; }
{let a = function scriptEntryPoint(mp) {
mp.businessPanelActive = false

mp.events.add("setBusinessPanel", (params) => {
    browserMenu.call(`businessPanelAPI`, `show`, params ? params : null);
})

mp.events.add("setBusinessPanelActive", (bool) => {
    mp.businessPanelActive = bool
    mp.events.call("displayChat", !bool)
	mp.events.call("hudControl.enable", !bool) 
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.chatActive = false
mp.chatActiveHandler = false
const generalChatTags = ["s", "o", "n"]
const familyChatTag = "f"
const jobChatTag = "tr"
const tagsCheckStrangers = ["n", "s"]

class Chat {
    constructor () {

    } 
    _setChatActive (enable) { 
        mp.chatActive = enable;
    }

    _showChatHandler (bool) {
        if (mp.settings.chat && !mp.chatActive) return;
        if (mp.isDroneSessionActive()) return
        browserMenu.call(`chatAPI`, 'showChatHandler', bool)
        mp.chatActiveHandler = bool
    }

    _showChat (bool) {
        if (mp.settings.chat && !mp.chatActive) return;
        if (mp.binocularActive) return
        browserMenu.call(`chatAPI`, 'show', bool)
    }

}

const chat = new Chat

mp.events.add("setChatActive", (enable) => {
    chat._setChatActive(enable)
});

mp.events.add("displayChat", (bool) => {
    chat._showChat(bool)
})

mp.events.add("displayChatHandler", (bool) => {
    chat._showChatHandler(bool)
})

mp.events.add("client::updateChatTimestamp", () => {
    browserMenu.call(`chatAPI`, 'updateChatTimestamp')
})

mp.events.add("authCharacter.success", async () => {
    try {
        let enableChat = true
        let reward = await rpc.callServer("getCharacterReward") 
        if (reward.length) {
            for(let key in reward){
                if (reward[key].id == 1 || reward[key].id == 4) enableChat = false;
            }
        }
        if (enableChat) mp.events.call("displayChat", true);
        mp.keys.bindEx(0x54, true, () => {
            if (mp.bindBlocker({noknock: true, gungamecheck: true})) return;
            mp.events.call("displayChatHandler", !mp.chatActiveHandler)
        }, "Відкрити ввод тексту у чаті", 2) 
        mp.keys.bindEx(0x75, true, () => {
            if (mp.bindBlocker({chat: true, noknock: true, gungamecheck: true})) return;
            mp.events.call("displayChatHandler", !mp.chatActiveHandler)
        }, "Відкрити ввод тексту у чаті 2", 2)  
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\Chat.js authCharacter.success: ${err}`)
    }
}) 
mp.events.add("client::getMessage", (text, color, sqlId, feature, tag) => {
    if (tag) {
        if (mp.settings.generalChat && tag == "o") return;
        else if (mp.settings.familyChat && tag == familyChatTag) return;
        else if (mp.settings.jobChat && tag == jobChatTag) return;
    }
    let player = sqlId != undefined || sqlId != null ? mp.players.atRemoteId(sqlId) : {}
    let localPlayer = mp.players.local
    if (!browserMenu) return

    let username
    if (!player) {
        mp.events.callRemote("log", `client::getMessage error ${feature && feature.innerHTML ? text : stringHelper.escapeHtml(text)}`)
        player = {}
    }
    else {
        if (tag && tagsCheckStrangers.includes(tag)) {
            if (player.getVariable) {
                if ((localPlayer.getVariable("sqlId") == player.getVariable("sqlId")) || (mp.familiars.isFamiliar(player.getVariable("sqlId")) && !player.variable_hasMask) || (mp.clientStorage["faction"] && player.getVariable("faction") === mp.clientStorage["faction"]) || (mp.clientStorage["family"] && player.getVariable("family") === mp.clientStorage["family"]) || (mp.clientStorage["marriageTo"] && mp.clientStorage["marriageTo"] === player.getVariable("sqlId"))) {
                    username = player.name
                }
                else {
                    username = `${player.isMale() ? 'Незнайомець' : 'Незнайомка'}`
                }
            }
        }
        else username = player.name
    }
    if (feature && feature.username) username = feature.username
    browserMenu.call(`chatAPI`, 'getMessage', sqlId, username === "undefined" ? username = undefined : username, feature && feature.innerHTML ? text : stringHelper.escapeHtml(text), color ? JSON.stringify(color) : undefined, feature ? JSON.stringify(feature) : undefined)
    // playChatAnim(player, tag);
    // playChatSound(player, tag);
});  
mp.events.add("chat.clear", (playerId) => {
    var player = mp.players.atRemoteId(playerId);
    browserMenu.call(`chatAPI`, 'clear', player.name)
});

 

async function playChatAnim(player, tag) {
    if (tag != "ближній") return;
    if (vdist(player.position, mp.players.local.position) > 50) return;
    if (player.vehicle) return;
    if (player.getVariable("knockDown")) return;
    player.clearTasksImmediately();
    var anim = getAnimByChatTag(tag);

    if (await mp.game.streaming.loadAnimDict(anim[0]))
        player.taskPlayAnim(anim[0], anim[1], 8, 0, -1, 49, 0, false, false, false)

    var playerId = player.remoteId;
    setTimeout(() => {
        var rec = mp.players.atRemoteId(playerId);
        if (rec) rec.clearTasksImmediately();
    }, 3000);
}

function getAnimByChatTag(tag) {
    var anim = ["special_ped@baygor@monologue_3@monologue_3f", "trees_can_talk_5"];
    return anim;
} 

mp.events.add("chat.playRadio", (playerId) => {
    var player = mp.players.atRemoteId(playerId);
    if (!player) return;
    if (vdist(player.position, mp.players.local.position) > 20) return;
    let soundId = mp.game.invoke("0x430386FE9BF80B45");
    mp.game.audio.playSoundFromEntity(soundId, "End_Squelch", player.handle, "CB_RADIO_SFX", false, 0);
});

}; a; }
{let a = function scriptEntryPoint(mp) {
const cameraRotator = require("gamemode/scripts/helpers/cameraRotator.js");
const dragcam = require("gamemode/scripts/helpers/dragcam.js");
class TransportSalons {
    createCam(x, y, z, rx, ry, rz, viewangle) {
        // camera = mp.cameras.new("Cam", {x, y, z}, {x: rx, y: ry, z: rz}, viewangle); // 262 -1159 29.22
        if(mp.cameras.exists(this.camera)){
            this.camera.destroy()
        }
        this.camera = mp.cameras.new("default");
        this.camera.setCoord(x, y, z);
        // this.camera.setRot(rx, ry, rz, 2);
        this.camera.setFov(viewangle);
        this.camera.setActive(true);
        
        const vehPosition = new mp.Vector3(x, y, z);

        cameraRotator.start(this.camera, vehPosition, vehPosition, new mp.Vector3(-3.0, 3.5, 0.5), 180);
        cameraRotator.setZBound(-0.8, 1.8);
        cameraRotator.setZUpMultipler(5); 

        mp.game.cam.renderScriptCams(true, false, 3000, true, false);
    }
    constructor () {
        this.vehicle = null
        
    }
    destroyVehicleInSalon () {
        if (mp.vehicles.exists(this.vehicle)) {
            this.vehicle.destroy()
            this.vehicle = null
        }
    }
    async spawnVehicle (data) {
        data = JSON.parse(data)
        let model = data.model  
        this.destroyVehicleInSalon() 
        /*await sleep(300)
        mp.game.streaming.requestModel(mp.game.joaat(model)) 
        while(!mp.game.streaming.hasModelLoaded(mp.game.joaat(model))) {
            await sleep(250)
        }*/
        let color = data.color
        let position = data.position
        let dimension = data.dimension  
        this.vehicle = mp.vehicles.new(mp.game.joaat(model), new mp.Vector3(position.x, position.y, position.z), 
        {
            heading: 190,
            locked: true,
            engine: false, 
            dimension: dimension
        }) 
        if (mp.game.vehicle.isThisModelABoat(mp.game.joaat(model))) {
            mp.game.invoke('0x75DBEC174AEEAD10', this.vehicle.handle, true);
            mp.game.invoke('0xE3EBAAE484798530', this.vehicle.handle, true);
        }
        this.vehicle.setVelocity(0, 0, 0)
        this.vehicle.setOnGroundProperly();
        this.vehicle.setDirtLevel(0)
        let veh = await waitEntity(this.vehicle) 
        if (veh) {
            mp.game.invoke("0x7141766F91D15BEA", this.vehicle.handle, color[0], color[1], color[2])
            mp.game.invoke("0x36CED73BFED89754", this.vehicle.handle, color[0], color[1], color[2])
            mp.game.invoke("0x95A88F0B409CDA47", this.vehicle.handle, "CARROOM")
            this.vehicle.setFixed()
        }
        if (!this.camera) this.camera = dragcam.startDragCam(this.vehicle, {initial: 20.0, min: 10.0, max: 30.0, scrollIncrements: 0.5, angleY: 15.0}, this.vehicle.position)
        else dragcam.updateEntity(this.vehicle)
        let paramsCar = {
            maxSpeed: mp.game.vehicle.getVehicleModelMaxSpeed(mp.game.joaat(model)), 
            braking: parseFloat(mp.game.vehicle.getVehicleModelMaxBraking(mp.game.joaat(model)) * 100), 
            acceleration: parseFloat(mp.game.vehicle.getVehicleModelAcceleration(mp.game.joaat(model)) * 100), 
            controllability: parseFloat(mp.game.vehicle.getVehicleModelMaxTraction(mp.game.joaat(model)) * 100),
            //classCar: this.auto.entity.getClass(),
            maxPassagersCar: mp.game.vehicle.getVehicleModelMaxNumberOfPassengers(mp.game.joaat(model)),
            maxSpeedKm: ((mp.game.vehicle.getVehicleModelMaxSpeed(mp.game.joaat(model)) * 3.6).toFixed(0)), 
            isAir: mp.game.vehicle.isThisModelAPlane(mp.game.joaat(model)) || mp.game.vehicle.isThisModelAHeli(mp.game.joaat(model)),
            isBoat: mp.game.vehicle.isThisModelABoat(mp.game.joaat(model))
        }
        browserMenu.call(`transportSalonAPI`, `setVehicleData`, paramsCar)
    }
}
const transportSalons = new TransportSalons

mp.events.add('client::openShoppingMenuTransportInSalon', (data, showLastCar = true) => {   
    Object.assign(data, { showLastCar })
    browserMenu.call(`transportSalonAPI`, `setData`, data)
    if (data.bizType != 20) transportSalons.createCam(data.camera.x, data.camera.y, data.camera.z, data.camera.rx, data.camera.ry, data.camera.rz, data.camera.viewangle); 
    mp.events.call("setAlpha", 0)
    mp.events.call("setFreeze", true) 
});
mp.events.add('client::hideShoppingMenuTransportSalon', (testdrive) => {
    browserMenu.call(`transportSalonAPI`, `setData`, null)
    if(!testdrive) {
        setTimeout(() => {
            mp.events.call("autoSaloon.destroyCam")  
            transportSalons.destroyVehicleInSalon()
        }, 500)
        mp.events.callRemote("server::backToBizPosition")
        return
    }  
    else if (testdrive != 'rent') {
        mp.events.call("setAlpha", 255) 
        mp.events.call('displayRadar', true)
        mp.events.call("setFreeze", false) 
    }
    mp.events.call("autoSaloon.destroyCam")
    transportSalons.destroyVehicleInSalon()
})

rpc.register("getClosestVehicleNodeWithHeading", (boat = false) => {
    let params = mp.game.pathfind.getClosestVehicleNodeWithHeading(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, boat ? 3 : 5, 3.0, 0);
    let outPosition = JSON.stringify(params.outPosition);
    let outHeading = JSON.stringify(params.outHeading);
    return {
        outPosition,
        outHeading
    }
})

mp.events.add("client::selectTransport", (data) => {  
    if (transportSalons.vehicle) {
        if(transportSalons.showTimeout) {
            clearTimeout(transportSalons.showTimeout);
            transportSalons.showTimeout = null
        }
        transportSalons.showTimeout = setTimeout(() => { 
            transportSalons.showTimeout = null
            transportSalons.spawnVehicle(data)
         }, 250);
    }
    else transportSalons.spawnVehicle(data);
}) 

mp.events.add('autoSaloon.setActive', (enable) => {
    mp.autoSaloonActive = enable;
});

mp.events.add("client::testDriveActive", (enable) => {
    mp.testDriveActive = enable
})

mp.events.add("client::setVehicleColor", (color) => {
    if (!transportSalons.vehicle) return 
    color = JSON.parse(color)
    mp.game.invoke("0x7141766F91D15BEA", transportSalons.vehicle.handle, color[0], color[1], color[2])
    mp.game.invoke("0x36CED73BFED89754", transportSalons.vehicle.handle, color[0], color[1], color[2])

})

mp.events.add('autoSaloon.destroyCam', () => {
    if (transportSalons.camera.type == "custom") {
        dragcam.stopDragCam()
        transportSalons.camera = null;
    }
    else {
        cameraRotator.stop();
        if (!mp.cameras.exists(transportSalons.camera)) return;
        transportSalons.camera.setActive(false);
        mp.game.cam.renderScriptCams(false, false, 3000, true, false);
        transportSalons.camera.destroy();
        transportSalons.camera = null;
    }
});

}; a; }
{let a = function scriptEntryPoint(mp) {
class Dragcam {
    constructor() {
        this.angleY = 0.0
        this.angleZ = 0.0
        this.gEntity = null
        this.gRadius = null
        this.gRadiusMax = null
        this.gRadiusMin = null
        this.gHeight = 0.0
        this.gHeightMax = 1.0
        this.addedHeight = 0.0
        this.fov = 40.0
        this.scrollIncrements = null
        this.rotationSpeed = 2.0
        this.heading = 0.0
        this.cam = null
        this.disableMoving = false
    }

	degreesToRads(deg) {
        return (deg * Math.PI) / 180.0;
	}

    cos(degrees) {
		return Math.cos(this.degreesToRads(degrees))
	}

    sin(degrees) {
		return Math.sin(this.degreesToRads(degrees))
	}

    setCamPosition(useRotation) {
        let entityCoords = this.fixedPos ? this.fixedPos : this.gEntity.position
        let mouseX = mp.game.controls.getDisabledControlNormal(0, 1) * 8.0
        let mouseY = mp.game.controls.getDisabledControlNormal(0, 2) * 8.0
    
        if (!useRotation) {
            mouseX = 0
            mouseY = 0
        }
    
        this.angleZ = this.angleZ - mouseX
        this.angleY = Math.clamp(this.angleY + mouseY, -89.0, 89.0)
    
        let cosAngleZ = this.cos(this.angleZ)
        let cosAngleY = this.cos(this.angleY)
        let sinAngleZ = this.sin(this.angleZ)
        let sinAngleY = this.sin(this.angleY)
    
        let offset = new mp.Vector3(
            ((cosAngleZ * cosAngleY) + (cosAngleY * cosAngleZ)) / 2 * this.gRadius,
            ((sinAngleZ * cosAngleY) + (cosAngleY * sinAngleZ)) / 2 * this.gRadius,
            sinAngleY * this.gRadius
        )
    
        let camPos = new mp.Vector3(entityCoords.x + offset.x, entityCoords.y + offset.y, entityCoords.z + offset.z + this.gHeight + this.addedHeight)
        this.cam.setCoord(camPos.x, camPos.y, camPos.z)
        this.cam.pointAtCoord(entityCoords.x, entityCoords.y, entityCoords.z + this.gHeight + this.addedHeight)
    }

    renderdragcam() {
        if (!isEntityExists(dragcam.gEntity)) return
        if (mp.banCameraRotate) return

        let setPosition = false
        let setRotation = false
    
        if (!dragcam.disableMoving) {
            if (mp.game.controls.isDisabledControlPressed(0, 24)) { // Left Click rotate camera
                setPosition = true
                setRotation = true
            }
        
            if (mp.game.controls.isDisabledControlPressed(0, 25)) { // Left Click rotate camera
                let mouseX = mp.game.controls.getDisabledControlNormal(0, 1) * 8.0
                dragcam.heading = dragcam.heading - mouseX * dragcam.rotationSpeed
                dragcam.gEntity.setHeading(dragcam.heading)
            }
        }
    
        if (mp.game.controls.isDisabledControlJustReleased(0, 14)) { // Mouse Zoom In
            if (dragcam.gRadius + dragcam.scrollIncrements <= dragcam.gRadiusMax) {
                dragcam.gRadius += dragcam.scrollIncrements
                setPosition = true
            }
        }
        else if (mp.game.controls.isDisabledControlJustReleased(0, 15)) { // Mouse Zoom Out
            if (dragcam.gRadius - dragcam.scrollIncrements >= dragcam.gRadiusMin) {
                dragcam.gRadius -= dragcam.scrollIncrements
                setPosition = true
            }
        }
    
        if (mp.game.controls.isDisabledControlPressed(0, 32)) { // W Camera Pan Up
            if (dragcam.gHeight + 0.1 <= dragcam.gHeightMax) {
                dragcam.gHeight = Math.min(dragcam.gHeight + 0.01, dragcam.gHeightMax)
                setPosition = true
            }
        } else if (mp.game.controls.isDisabledControlPressed(0, 33)) { // S Camera Pan Down
            if (dragcam.gHeight - 0.1 >= -dragcam.gHeightMax) {
                dragcam.gHeight = Math.max(dragcam.gHeight - 0.01, -dragcam.gHeightMax)
                setPosition = true
            }
        }
    
        if (setPosition) dragcam.setCamPosition(setRotation)
    }

    startDragCam(entity, radiusOptions, fixedPos) {
        this.gEntity = entity
        this.gRadius = radiusOptions.initial || 5.0
        this.gRadiusMin = radiusOptions.min || 2.5
        this.gRadiusMax = radiusOptions.max || 10.0
        this.addedHeight = radiusOptions.addedHeight || 0.0
        this.scrollIncrements = radiusOptions.scrollIncrements || 0.5
        this.fov = radiusOptions.fov || 40.0
        this.angleY = radiusOptions.angleY || 0.0
        this.disableMoving = radiusOptions.disableMoving || false
        this.fixedPos = fixedPos ? fixedPos : false
        this.cam = mp.cameras.new('default', new mp.Vector3(0,0,0), new mp.Vector3(0,0,0), this.fov)
        this.cam.type = "custom"
        this.cam.setActive(true)
        mp.game.cam.renderScriptCams(true, true, 100, true, false)
        this.heading = entity.getHeading()
        this.angleZ = entity.getHeading() + 90
        this.setCamPosition()
        mp.events.add('render', this.renderdragcam)
        return this.cam
    }

    updateParams(radiusOptions) {
        this.gRadius = radiusOptions.initial || 5.0
        this.gRadiusMin = radiusOptions.min || 2.5
        this.gRadiusMax = radiusOptions.max || 10.0
        this.addedHeight = radiusOptions.addedHeight || 0.0
        this.scrollIncrements = radiusOptions.scrollIncrements || 0.5
        this.fov = radiusOptions.fov || 40.0
        this.gHeight = 0.0

        this.setCamPosition()
    }

    updateEntity(entity) {
        this.gEntity = entity
    }

    stopDragCam() {
        mp.events.remove("render", this.renderdragcam);
        this.cam.setActive(false)
        this.cam.destroy()
        this.cam = null
        mp.game.cam.renderScriptCams(false, true, 0, false, false)
        this.gEntity = null
        this.angleY = 0.0
        this.angleZ = 0.0
        this.heading = 0.0
        if (this.fixedPos) delete this.fixedPos
    }

}

const dragcam = new Dragcam();
exports = dragcam;

mp.events.add("dragcamFocusOnPlayer", (position, heading) => {
    if (dragcam.currentFocus == "player") return
    dragcam.startDragCam(mp.players.local, {initial: 2.0, min: 1.0, max: 3.0, scrollIncrements: 0.1, fov: 45.0, addedHeight: 0.2, angleY: 20.0, disableMoving: true})
    dragcam.currentFocus = "player"
});

mp.events.add("dragcamFocusOnHead", (position, heading, mask) => {
    if (dragcam.currentFocus == "head") return
    dragcam.updateParams({initial: 1.5, min: 0.5, max: 3.0, scrollIncrements: 0.1, fov: 45.0, addedHeight: 0.5, angleY: 20.0})
    dragcam.currentFocus = "head"
});

mp.events.add("dragcamFocusOnBody", (position, heading) => {
    if (dragcam.currentFocus == "body") return
    dragcam.updateParams({initial: 1.5, min: 0.5, max: 3.0, scrollIncrements: 0.1, fov: 45.0, addedHeight: 0.2, angleY: 20.0})
    dragcam.currentFocus = "body"
});

mp.events.add("dragcamFocusOnLegs", (position, heading) => {
    if (dragcam.currentFocus == "legs") return
    dragcam.updateParams({initial: 1.5, min: 0.5, max: 3.0, scrollIncrements: 0.1, fov: 45.0, addedHeight: -0.5, angleY: 20.0})
    dragcam.currentFocus = "legs"
});

mp.events.add("dragcamFocusOnFeets", (position, heading) => {
    if (dragcam.currentFocus == "feets") return
    dragcam.updateParams({initial: 1.5, min: 0.5, max: 3.0, scrollIncrements: 0.1, fov: 45.0, addedHeight: -0.8, angleY: 20.0})
    dragcam.currentFocus = "feets"
});

mp.events.add("dragcamFinishMoveCam", (position, heading) => {
    dragcam.stopDragCam()
    delete dragcam.currentFocus
});
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.vehicleInfoActive = false
mp.events.add("showVehicleInfo", (data) => {
    if (mp.bindBlocker() && !mp.vehicleInfoActive) return
    if (data) {
        mp.vehicleInfoActive = true
        setCursor(true)
    } else {
        setCursor(false)
        mp.vehicleInfoActive = false
        return browserMenu.call(`vehicleInfoAPI`, `setData`, null)
    }
    const vehicle = mp.vehicles.atRemoteId(data.id)
    let params = {
        maxSpeed: mp.game.vehicle.getVehicleModelMaxSpeed(vehicle.model), 
        braking: parseFloat((vehicle.getMaxBraking() * 100)), 
        acceleration: parseFloat(vehicle.getAcceleration() * 100), 
        controllability: parseFloat(vehicle.getMaxTraction() * 100),  
        maxSpeedKm: data.maxSpeed ? data.maxSpeed : ((mp.game.vehicle.getVehicleModelMaxSpeed(vehicle.model) * 3.6).toFixed(0)),  
        isHasTurbo: vehicle.isToggleModOn(18),
        stage: vehicle.variable_chip || 0,
        vehicleMods: { 
            11: vehicle.getMod(11),
            12: vehicle.getMod(12),
            13: vehicle.getMod(13),
            15: vehicle.getMod(15)
        }
    } 
    Object.assign(data, params)
    browserMenu.call(`vehicleInfoAPI`, `setData`, data)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
const localPlayer = mp.players.local;  
let packetSended = false
let knockDownGodmodeTimeout = null

function closeAll() {
	mp.events.call("inventory.forceClose");
    mp.events.call("atmMenu.forceClose"); 
    mp.events.call("fishing.forceClose"); 
	mp.events.call("client::phoneForceClose"); 
	mp.events.call("criminalMinigame.forceClose"); 
    mp.events.call("postal.forceClose"); 
    mp.events.call("minigame.forceClose"); 
    if (mp.isAchievementMenuActive) mp.events.call("setAchievementMenu", false)
    if (mp.isCompletedQuestActive) mp.events.call("setCompletedQuestParams", null)
    if (mp.isFactionMenuActive) mp.events.call("setFactionMenu", null)
    if (mp.isMainMenuActive) mp.events.call("setMainMenu", null)
	if (mp.houseMenuActive) mp.events.call("houseMenu.hide"); 
	if (mp.tabletPrimaryActive) mp.events.call("client::TabletPrimarySetData", null)
	if (mp.selectMenuActive) mp.events.call("selectMenu.hide");
	if (mp.carTuningActive) mp.events.call("carTuning::exitTuning");
	if (mp.vehicleInfoActive) mp.events.call("showVehicleInfo", null);
	if (mp.isBrowserPrimaryActive) mp.events.call("client::showBrowser", false);
	if (mp.isOpenActivityResult) mp.events.call("client::hideActivityResult");
	if (mp.modalActive) mp.events.call("modal.hide");
	mp.events.call("playersOnline.forceClose");
	if (mp.chatActiveHandler) mp.events.call("displayChatHandler", false);
	if (mp.autoSaloonActive) mp.events.call("client::hideShoppingMenuTransportSalon", ['death']);
	if (mp.minigamePressingActive) mp.events.callRemote("autoroober.lose");
	mp.events.call("graffiti:forseClose");
    if (mp.electricMinigameActive) mp.events.call("electric.forceClose");
    mp.events.call("familiesTablet.forceClose"); 
    mp.events.call("binoculars.forceClose"); 
    mp.events.call("radio.forceClose");
}

mp.events.add("clearKnockDownGodmodeTimeout", () => {
    if (knockDownGodmodeTimeout) {
        clearTimeout(knockDownGodmodeTimeout)
        knockDownGodmodeTimeout = null
    }
})


let anim;
let timeoutAnim;
let syncTime = new Date().getTime();

function disableControlActions() {
    mp.game.controls.disableAllControlActions(0);
    mp.game.controls.enableControlAction(0, 1, true);
    mp.game.controls.enableControlAction(0, 2, true);
    mp.game.controls.enableControlAction(0, 3, true);
    mp.game.controls.enableControlAction(0, 4, true);
    mp.game.controls.enableControlAction(0, 5, true);
    mp.game.controls.enableControlAction(0, 6, true);
    mp.game.controls.enableControlAction(0, 6, true);
    mp.game.controls.enableControlAction(0, 199, true);
    mp.game.controls.enableControlAction(0, 200, true);
}

mp.events.addDataHandler("knockDown", (entity, value) => {
    if (entity.type != 'player') return  
    if (entity.remoteId == localPlayer.remoteId) { 
        packetSended = false
        closeAll();
        mp.events.callRemote("setGodmode", value == "crawl" ? true : value)
        if (value) {
            if (value === "crawl") {
                entity.knockDownRender = new mp.Event("render", () => {
                    disableControlActions()
                    if (mp.bindBlocker({noknock: true})) return

                    let rotation = localPlayer.getRotation(2);
                    if (mp.game.controls.isDisabledControlPressed(0, 34) || mp.game.controls.isDisabledControlPressed(0, 35)) {
                        if (mp.game.controls.isDisabledControlPressed(0, 34)) localPlayer.setRotation(rotation.x, rotation.y, rotation.z + 0.2, 2, true);
                        else localPlayer.setRotation(rotation.x, rotation.y, rotation.z - 0.2, 2, true);

                        var ms = new Date().getTime() - syncTime;
                        if (ms > 1000) {
                            mp.events.callRemote("knockDownSetRotation", JSON.stringify(localPlayer.getRotation(2)));
                            syncTime = new Date().getTime()
                        }
                    }

                    if (mp.game.controls.isDisabledControlPressed(0, 32)) {
                        if (anim === ('onfront_fwd' || 'onfront_bwd') || timeoutAnim) return;
                        anim = 'onfront_fwd';
                        let timer = mp.game.entity.getEntityAnimDuration('move_crawl', anim);
                        mp.events.callRemote("knockDownCrawlAnim", anim) 
                        timeoutAnim = setTimeout(() => {
                            anim = undefined;
                            timeoutAnim = undefined;
                        }, (timer - 0.1) * 1000);
                    }
                    if (mp.game.controls.isDisabledControlPressed(0, 33)) {
                        if (anim === ('onfront_fwd' || 'onfront_bwd') || timeoutAnim) return;
                        anim = 'onfront_bwd';
                        let timer = mp.game.entity.getEntityAnimDuration('move_crawl', anim);
                        mp.events.callRemote("knockDownCrawlAnim", anim) 
                        timeoutAnim = setTimeout(() => {
                            anim = undefined;
                            timeoutAnim = undefined;
                        }, (timer - 0.1) * 1000);
                    }

                }) 
                knockDownGodmodeTimeout = setTimeout(() => {
                    mp.events.callRemote("setGodmode", false)
                    knockDownGodmodeTimeout = null
                }, 1000 * 5)
            }
            else {
                browserMenu.call(`respawn`, `set`, { page: "timer", time: 60 })
                if (entity.knockDownRender) {
                    entity.knockDownRender.destroy()
                    delete entity.knockDownRender
                }
                entity.knockDownRender = new mp.Event("render", () => {
                    disableControlActions()
                })
                if (knockDownGodmodeTimeout) {
                    clearTimeout(knockDownGodmodeTimeout)
                    knockDownGodmodeTimeout = null
                }
                knockDownGodmodeTimeout = setTimeout(() => {
                    mp.events.callRemote("setGodmode", false)
                    knockDownGodmodeTimeout = null
                }, 1000 * 15)
            }
        } else {
            browserMenu.call(`respawn`, `set`, null)
            if (entity.knockDownRender) {
                entity.knockDownRender.destroy()
                delete entity.knockDownRender
            }
        }
    } 
}) 

mp.events.add("respawnSet", (data) => {
    browserMenu.call(`respawn`, `set`, data)
})

mp.events.add("respawnSetKiller", (data) => {
    browserMenu.call(`respawn`, `setKiller`, data)
})

mp.events.add("knockDownSetRotation", (player, rot) => {
    if (player && player.handle) {
        rot = JSON.parse(rot)
        player.setRotation(rot.x, rot.y, rot.z, 2, true);
    }
})


mp.events.add("render", () => {
    if (!isEntityExists(localPlayer)) return
    if (localPlayer.getVariable("knockDown") && localPlayer.getHealth() >= 15 && !packetSended) {
        packetSended = true
        mp.events.callRemote("knockDown", false)
    }
}) 
}; a; }
{let a = function scriptEntryPoint(mp) {
let PlayerSubtitles = []; 

mp.events.add('addSubtitle', (object, clearLast) => {
	if (clearLast) {
		PlayerSubtitles.forEach((subtitle) => {
			if (subtitle.timeOut) {
				clearTimeout(subtitle.timeOut)
				subtitle.timeOut = null
			}
		})
		PlayerSubtitles = [];
	}
	object = JSON.parse(object)
	Object.assign(object, { id: getGeneratedSubtitleID(), startDate: Date.now() })
	PlayerSubtitles.push(object);
	if (object.isPlaySound) mp.events.call("playSound", "Boss_Blipped", "GTAO_Magnate_Hunt_Boss_SoundSet") 
});

const getGeneratedSubtitleID = () => {
	let result = null
	while (!result) {
		result = getRandomInteger(0, 100000)
		if (!!getSubtitleByID(result)) result = null
	}
	return result
}

function getRandomInteger(min, max) {
    var rand = min - 0.5 + Math.random() * (max - min + 1)
    rand = Math.round(rand);
    return rand;
}

const getSubtitleByID = (id) => {
	let result = null
	for (let key in PlayerSubtitles) {
		if (PlayerSubtitles[key].id == id) {
			result = PlayerSubtitles[key]
		}
	}
	return result
}

mp.events.add('clearSubtitles', () => {
	PlayerSubtitles.forEach((subtitle) => {
		if (subtitle.timeOut) {
			clearTimeout(subtitle.timeOut)
			subtitle.timeOut = null
		}
	})
	PlayerSubtitles = [];
});

mp.events.add('render', () => {
	if(PlayerSubtitles.length) {
		let spliceIds = []

		PlayerSubtitles.slice().reverse().forEach((sub, index) => { 
			if (Date.now() - sub.startDate < 1000 * sub.seconds) {
				mp.game.graphics.drawText(sub.text, [0.5, (0.92 - (index / 100 * 3))], { 
					font: 4, 
					color: [255, 255, 255, 255], 
					scale: [0.45, 0.45], 
					outline: true,
					centre: true
				});
			}
			else {
				spliceIds.push(index)
			}
		});

		if (spliceIds.length) {
			for (let i = spliceIds.length - 1; i >= 0; i--) {
				PlayerSubtitles.slice().reverse().splice(spliceIds[i], 1)
			}
		}
	} 
});
}; a; }
{let a = function scriptEntryPoint(mp) {
let damageByPedTimestamp = null 
let turnOnPassivemodeTimestamp = null
let turnOnPassivemodeInterval = null
let turnOnPassivemodeIntervalLeft = 25
let turnOnPassivemodeEnable = false
mp.events.add("authCharacter.success", () => {
    try {
        mp.keys.bindEx(79, false, async () => {
            if (mp.bindBlocker()) return;
            if (!mp.players.local.getVariable("passiveMode")){
                if (turnOnPassivemodeTimestamp && Date.now() - turnOnPassivemodeTimestamp < 60 * 1000) return rpc.callBrowser(browserMenu, "nError", `Не так часто!`)
                if (damageByPedTimestamp && Date.now() - damageByPedTimestamp < 20 * 1000) return rpc.callBrowser(browserMenu, "nError", `Нещодавно була отримана шкода!`)
                let playerCanTurnOnPassiveMode = await rpc.callServer("playerCanTurnOnPassiveMode")
                if (playerCanTurnOnPassiveMode !== true) return abortTurnOnPassiveMode(playerCanTurnOnPassiveMode)
                if (turnOnPassivemodeEnable) return abortTurnOnPassiveMode("Увімкнення пасивного режиму скасовано!") 
                if (turnOnPassivemodeInterval) clearInterval(turnOnPassivemodeInterval), turnOnPassivemodeInterval = null
                turnOnPassivemodeEnable = true
                mp.events.call("addSubtitle", JSON.stringify({ text: `~y~Пасивний режим через ~r~${turnOnPassivemodeIntervalLeft} ~y~сек.`, seconds: 15})) 
                mp.events.callRemote("executeQuestTask", JSON.stringify({ progress: 1, task: 20 }))
                turnOnPassivemodeInterval = setInterval(async () => {
                    let playerCanTurnOnPassiveMode = await rpc.callServer("playerCanTurnOnPassiveMode")
                    if (playerCanTurnOnPassiveMode !== true) return abortTurnOnPassiveMode(playerCanTurnOnPassiveMode)
                    mp.events.call("clearSubtitles")
                    turnOnPassivemodeIntervalLeft -= 1
                    if (turnOnPassivemodeIntervalLeft <= 0) {
                        if (turnOnPassivemodeInterval) clearInterval(turnOnPassivemodeInterval), turnOnPassivemodeInterval = null
                        turnOnPassivemodeIntervalLeft = 25
                        turnOnPassivemodeEnable = false
                        mp.events.callRemote("setPassiveMode", !mp.players.local.getVariable("passiveMode")) 
                    } else mp.events.call("addSubtitle", JSON.stringify({ text: `~y~Пасивний режим через ~r~${turnOnPassivemodeIntervalLeft} ~y~сек.`, seconds: 15})) 
                }, 1000)
            }
            else mp.events.callRemote("setPassiveMode", !mp.players.local.getVariable("passiveMode"))
        }, "Пасивний режим")
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\PassiveMode.js authCharacter.success: ${err}`)
    }
})

mp.events.addDataHandler("passiveMode", (entity, value) => { 
    if(entity == mp.players.local){
        mp.events.call('hudControl.passiveMode', value)   
        entity.setProofs(true, value, value, false, value, false, false, false);
        if (value) {
            turnOnPassivemodeTimestamp = Date.now()
        }
    }   
})
function abortTurnOnPassiveMode (error) {
    turnOnPassivemodeIntervalLeft = 25
    mp.events.call("clearSubtitles")
    turnOnPassivemodeEnable = false
    if (turnOnPassivemodeInterval) clearInterval(turnOnPassivemodeInterval), turnOnPassivemodeInterval = null
    return rpc.callBrowser(browserMenu, "nInfo", error)
}
mp.events.add("playerWeaponShot", (position, entity) => { // игрок выстрелил/ударил 
    if (turnOnPassivemodeEnable) { 
        abortTurnOnPassiveMode("Стрілянина заборонена під час увімкнення пасивного режиму!")
    }
})
 
mp.events.add("render", () => {
    if (!isEntityExists(mp.players.local)) return
    if (mp.players.local.hasBeenDamagedByAnyPed()) {
        damageByPedTimestamp = Date.now()
        mp.players.local.clearLastDamage() 
        if (turnOnPassivemodeIntervalLeft != 25) abortTurnOnPassiveMode("Збій увімкнення пасивного режиму! Ти отримав шкоду!")
    }
    
    mp.players.forEachInStreamRange((player) => { 
        if(player == mp.players.local) return 
        if(player.getVariable("passiveMode") || mp.players.local.getVariable("passiveMode") || player.getVariable("disableCollision")){
            entityEnablePassive(player, true) 
        }
        else {
            entityEnablePassive(player, false) 
        } 
    })
    mp.vehicles.forEachInStreamRange((vehicle) => { 
        let driver = vehicle.getPedInSeat(-1); 
        if(!driver) {
            entityEnablePassive(vehicle, false);
        } 
    }) 
    if(mp.players.local.getVariable("passiveMode")){  
        if(mp.players.local.vehicle && mp.players.local.vehicle.getAlpha() != 255) {
            mp.players.local.vehicle.setAlpha(255);
            mp.players.local.vehicle.resetAlpha()
        }
        mp.game.controls.disableControlAction(0, 257, true); // стрельба
        mp.game.controls.disableControlAction(0, 263, true); // мили R
        mp.game.controls.disableControlAction(0, 264, true); // мили Q
        mp.game.controls.disableControlAction(0, 331, true); // veh attack
        
        mp.game.controls.disableControlAction(2, 24, true);
        mp.game.controls.disableControlAction(2, 69, true);
        mp.game.controls.disableControlAction(2, 70, true);
        mp.game.controls.disableControlAction(2, 92, true);

        mp.game.controls.disableControlAction(2, 140, true);
        mp.game.controls.disableControlAction(2, 141, true);
        mp.game.controls.disableControlAction(2, 263, true);
        mp.game.controls.disableControlAction(2, 264, true);
    }   
})

function getVehicleTrailer (vehicle) {
    return mp.game.invoke("0x1CDD6BADC297830D", vehicle.handle)
}

function entityEnablePassive(entity, toggle)
{    
    try {
        if (entity.variable_invisible && !entity.getVariable("disableCollision")) return   
        if (entity.model === mp.game.joaat("rcbandito")) return
        if (entity.vehicle && entity.vehicle.model === mp.game.joaat("rcbandito")) return

        if(toggle)
        {   
            
    
            if (entity.vehicle && entity.vehicle.attachedObjects && entity.vehicle.attachedObjects.length) {
                entity.vehicle.attachedObjects.forEach((object) => {
                    object.setNoCollision(mp.players.local.handle, true)
                    if (mp.players.local.vehicle) object.setNoCollision(mp.players.local.vehicle.handle, true)
                })
            }

            if (mp.players.local.vehicle && mp.players.local.vehicle.attachedObjects && mp.players.local.vehicle.attachedObjects.length) { 
                mp.players.local.vehicle.attachedObjects.forEach((object) => {
                    object.setNoCollision(entity.handle, true)
                    if (entity.vehicle) object.setNoCollision(entity.vehicle.handle, true)
                })
            } 

            entity.setNoCollision(mp.players.local.handle, true);
            if(mp.players.local.vehicle) { 
                entity.setNoCollision(mp.players.local.vehicle.handle, true); 
            } 

            if (entity.vehicle) {  

                entity.vehicle.setNoCollision(mp.players.local.handle, true); 

                if (mp.players.local.vehicle) {
                    entity.vehicle.setNoCollision(mp.players.local.vehicle.handle, true); 
                }
                
            }
            
            if (!entity.getVariable("disableCollision")) {
                if(entity == mp.players.local.vehicle || entity == mp.players.local){
                    entity.setAlpha(255);
                    entity.resetAlpha()  
                } 
                else {
                    entity.setAlpha(150);
                    if (entity.vehicle && entity.vehicle.getPedInSeat(-1) === entity.handle) {
                        entity.vehicle.setAlpha(150);  
                    }
                }
            }
        }
        else
        {  
            if(entity != mp.players.local.vehicle && entity != mp.players.local) {
                entity.setAlpha(255) 
                entity.resetAlpha() 
                if (entity.vehicle) {
                    entity.vehicle.setAlpha(255) 
                    entity.vehicle.resetAlpha()    
                }
            }

            if(entity.getVariable("passiveMode")){
                if(entity != mp.players.local.vehicle && entity != mp.players.local) {
                    entity.setAlpha(150) 
                    if (entity.vehicle) {
                        entity.vehicle.setAlpha(150)  
                    }
                }
            } 
        }  
    } catch (err) {
        chatDebug(err)
    }
}
}; a; }
{let a = function scriptEntryPoint(mp) {
const { characterRotator } = require("gamemode/scripts/helpers/characterRotator.js");
const { tattoos } = require("gamemode/scripts/tattoo_shop/tattoos.js");
const tattooShopData = {
    tattooInfo: undefined,
    camera: undefined,
    tattoos,
    items: [{text: "Голова"}, {text: "Торс"}, {text: "Ліва нога"}, {text: "Права нога"}, {text: "Ліве плече"}, {text: "Праве плече"}],

    zones: {
        "ZONE_TORSO": [[], []],
        "ZONE_HEAD": [[], []],
        "ZONE_LEFT_LEG": [[], []],
        "ZONE_RIGHT_LEG": [[], []],
        "ZONE_LEFT_ARM": [[], []],
        "ZONE_RIGHT_ARM": [[], []],
    },
    decoractions: [],
    setTattoo: (zone, itemIndex, gender, isClear) => {
        mp.players.local.clearDecorations()  
        let v = JSON.parse(mp.players.local.getVariable("tattoos")) 
        let g = mp.players.local.isMale() ? "HashNameMale" : "HashNameFemale"  
        
        if(v){
            for(let key in v){
                mp.players.local.setDecoration(mp.game.gameplay.getHashKey(tattooShopData.zones[v[key].zone][1][v[key].index].collection), mp.game.gameplay.getHashKey(tattooShopData.zones[v[key].zone][1][v[key].index].overlay[g]))
            }
        }
        if(isClear) return
        for(let key in tattooShopData.decoractions){
            if(tattooShopData.decoractions[key].overlay == tattooShopData.zones[zone][1][itemIndex].overlay[gender]){
                return
            }
        }
        mp.players.local.setDecoration(mp.game.gameplay.getHashKey(tattooShopData.zones[zone][1][itemIndex].collection), mp.game.gameplay.getHashKey(tattooShopData.zones[zone][1][itemIndex].overlay[gender]))
    }
}
mp.events.add("client::loadTattooInfo", () => {    
    //if (typeof tattooShopData.tattoos == "string") tattooShopData.tattoos = JSON.parse(tattooShopData.tattoos)
    if(tattooShopData.tattooInfo == undefined) tattooShopData.tattooInfo = tattooShopData.tattoos 
    for(let key in tattooShopData.tattooInfo){   
        for(let k in tattooShopData.tattooInfo[key]){     
            tattooShopData.zones[tattooShopData.tattooInfo[key][k].Zone][0].push({text: `${tattooShopData.tattooInfo[key][k].LocalizedName}`, name: tattooShopData.tattooInfo[key][k].Name, price: tattooShopData.tattooInfo[key][k].Price, genderMale: tattooShopData.tattooInfo[key][k].HashNameMale, genderFemale: tattooShopData.tattooInfo[key][k].HashNameFemale, unique: tattooShopData.tattooInfo[key][k].Unique})
            tattooShopData.zones[tattooShopData.tattooInfo[key][k].Zone][1].push({collection: key, overlay: tattooShopData.tattooInfo[key][k]})  
        }
    }    
})


var lastHeading = false 
mp.events.add("client::startSelectTattoo", (allowance) => { 
    setCursor(true)
    characterRotator.start()
    lastHeading = mp.players.local.getHeading()
    let zonesCopy = JSON.parse(JSON.stringify(tattooShopData.zones))
    for (let key in zonesCopy) {
        for (let j in zonesCopy[key][0]) {
                zonesCopy[key][0][j].price = parseInt(zonesCopy[key][0][j].price + (allowance * (zonesCopy[key][0][j].price / 100)))
        }
    }
    mp.events.call("client::initSelectMenuPrimary", "tattoo", JSON.stringify(zonesCopy))
})

mp.events.addDataHandler("tattoos", (entity, value) => { 
    if(entity == mp.players.local && value.length){
        value = JSON.parse(value)
        if(!value.length) return
        tattooShopData.decoractions = []
        let gender = mp.players.local.isMale() ? "HashNameMale" : "HashNameFemale" 
        mp.players.local.clearDecorations() 
        let fixedTattos = []
        for(let key in value){
            let idx = value[key].index
            if (!tattooShopData.zones[value[key].zone][1][idx]) {
                let newIdx = idx - tattooShopData.zones[value[key].zone][1].length
                if (!tattooShopData.zones[value[key].zone][1][newIdx]) continue

                fixedTattos.push({zone: value[key].zone, index: idx, newIdx})
                idx = newIdx
            }

            mp.players.local.setDecoration(mp.game.gameplay.getHashKey(tattooShopData.zones[value[key].zone][1][idx].collection), mp.game.gameplay.getHashKey(tattooShopData.zones[value[key].zone][1][idx].overlay[gender]))
            tattooShopData.decoractions.push({collection: tattooShopData.zones[value[key].zone][1][idx].collection, overlay: tattooShopData.zones[value[key].zone][1][idx].overlay[gender]})
			if (!tattooShopData.zones[value[key].zone][0][idx].buyed) {
				tattooShopData.zones[value[key].zone][0][idx].buyed = true
				mp.events.call("client::setBuyedSelectMenuPrimary", value[key].zone, 0, idx, true)
			}
        } 

        if (fixedTattos.length) mp.events.callRemote("fixTatto",  JSON.stringify(fixedTattos))
    } 
})

mp.events.add("entityStreamIn", (entity) => {
    try {
        if(entity.type == "player"){
            let gender = entity.isMale() ? "HashNameMale" : "HashNameFemale" 
            if(entity.getVariable("tattoos")){
                chatDebug(`EntityStreamIn tattoo_shop`)
                let value = JSON.parse(entity.getVariable("tattoos"))
                for(let key in value){
                    let idx = value[key].index
                    if (!tattooShopData.zones[value[key].zone][1][idx]) idx = idx - tattooShopData.zones[value[key].zone][1].length
                    if (!tattooShopData.zones[value[key].zone][1][idx]) continue

                    entity.setDecoration(mp.game.gameplay.getHashKey(tattooShopData.zones[value[key].zone][1][idx].collection), mp.game.gameplay.getHashKey(tattooShopData.zones[value[key].zone][1][idx].overlay[gender]))
                } 
            }
        }
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\tattoo_shop\tattoo_shop.js entityStreamIn: ${err}`)
    }
})

rpc.register("getTattoos", () => mp.players.local.getVariable("tattoos"))

mp.events.add("client::TattoFocusCam", (zone) => { 
	if (zone == 'ZONE_LEFT_LEG' || zone == 'ZONE_RIGHT_LEG') {
		mp.events.call("focusOnLegs", false, lastHeading); 
	}
	else if (zone == 'ZONE_LEFT_ARM' || zone == 'ZONE_RIGHT_ARM') {
		mp.events.call("focusOnPlayer", false, lastHeading); 
	}
	else if (zone == 'ZONE_HEAD') {
		mp.events.call("focusOnHead", false, lastHeading); 
	}
	else if (zone == 'ZONE_TORSO') {
		mp.events.call("focusOnBody", false, lastHeading); 
	}
})
mp.events.add("client::setTattoo", (zone, index, gender, bool) => {
    gender = mp.players.local.isMale() ? "HashNameMale" : "HashNameFemale"
    tattooShopData.setTattoo(zone, index, gender, bool) 
})

mp.events.add("clearСertainTattoo", (zone, index, price) => {
    mp.players.local.clearDecorations()  
    let v = JSON.parse(mp.players.local.getVariable("tattoos")) 
    let g = mp.players.local.isMale() ? "HashNameMale" : "HashNameFemale"  
    let _index = -1
    for (let j in v) {
        if (v[j].zone == zone && v[j].index == index) _index = j
    }
    if (_index != -1) v.splice(_index, 1)
    for(let key in v){
        mp.players.local.setDecoration(mp.game.gameplay.getHashKey(tattooShopData.zones[v[key].zone][1][v[key].index].collection), mp.game.gameplay.getHashKey(tattooShopData.zones[v[key].zone][1][v[key].index].overlay[g]))
    }
    if (price) {
        tattooShopData.zones[zone][0][index].buyed = false
        mp.events.call("client::setBuyedSelectMenuPrimary", zone, 0, index, false)
        mp.events.callRemote("playerDeleteTattoo",  JSON.stringify({ zone, index }))
    }
})

mp.events.add("client::buyTattoo", (name, price, zone, index) =>{ 
    let gender = mp.players.local.isMale() ? "HashNameMale" : "HashNameFemale"
    tattooShopData.setTattoo(zone, index, gender, null)
    let data = {
        zone: zone, 
        index: index
    }
    mp.events.callRemote("server::playerBuyTattoo", JSON.stringify(data))
}) 
}; a; }
{let a = function scriptEntryPoint(mp) {


mp.events.add("client::getMechanicOrder", (pos) => {  
    mp.events.call("createNavigationToMarker", new mp.Vector3(pos.x, pos.y, pos.z), "Маршрут"); 
})
mp.events.add("client::removeMechanicOrder", () => {  
    mp.events.call("resetNavigationMarker"); 
})
}; a; }
{let a = function scriptEntryPoint(mp) {
class Taxi {
    constructor () {
        this.waypoint 
        this.createdWaypoint = undefined
    }
} 

const taxi = new Taxi
mp.events.add('render', () => { 
    //if (taxi.waypoint === mp.game.invoke('0x1DD1F58F493F1DA5')) return
    taxi.waypoint = mp.game.invoke('0x1DD1F58F493F1DA5');
    let blipIterator = mp.game.invoke('0x186E5D252FA50E7D');
    let FirstInfoId = mp.game.invoke('0x1BEDE233E6CD2A1F', blipIterator);
    let NextInfoId = mp.game.invoke('0x14F96AA50D6FBEA7', blipIterator);
   // mp.events.call("client::getMessage", `taxi.waypoint ${taxi.waypoint}`)
    for (let i = FirstInfoId; mp.game.invoke('0xA6DB27D19ECBB7DA', i) != 0; i = NextInfoId) {
        if (mp.game.invoke('0xBE9B0959FFD0779B', i) == 4 ) {
            let coord = mp.game.ui.getBlipInfoIdCoord(i);  
            if (taxi.createdWaypoint && JSON.stringify(taxi.createdWaypoint) == JSON.stringify(coord)) return
            if (Boolean(taxi.waypoint)) taxi.createdWaypoint = coord
            else taxi.createdWaypoint = undefined 
            // mp.events.call("playerCreateWaypoint", coord, Boolean(taxi.waypoint));
            // mp.events.callRemote("playerCreateWaypoint", JSON.stringify(coord), Boolean(taxi.waypoint));
        };
    };
})
// mp.events.add("playerCreateWaypoint", (position, toggle) => {  
//     if (toggle) taxi.createdWaypoint = position
//     else taxi.createdWaypoint = undefined
// }); 
mp.keys.bindEx(0x59, true, () => { 
    if (mp.bindBlocker() || taxi.createdWaypoint == undefined) return 
    mp.events.callRemote("server::setTaxiWaypoint", JSON.stringify(taxi.createdWaypoint))
}, "Передати мітку (таксі)", 2)


mp.events.add("client::getTaxiOrder", (pos) => {  
    mp.events.call("createNavigationToMarker", new mp.Vector3(pos.x, pos.y, pos.z), "Маршрут", 38); 
})

mp.events.add("client::removeTaxiOrder", () => {  
    mp.events.call("resetNavigationMarker"); 
})
}; a; }
{let a = function scriptEntryPoint(mp) {
class Courier {
    constructor () {
		this.storage_blip = undefined
		this.storage_marker = undefined 
		this.blip = undefined
	}
	
	createCurrentOrder() {
		this.order = {}
		mp.events.call("selectMenu.show", "fridge_oreder_menu");
	}
}

const courier = new Courier
 

mp.events.add("selectMenu.hide", () => {
	if (courier.order) delete courier.order;
});


mp.events.add("selectMenu.itemSelected", (menuName, itemName, itemValue, itemIndex, itemId) => {
	if (menuName == "fridge_oreder_menu") {
		if (itemName == "Замовити доставку") {
			if (!courier.order || !Object.keys(courier.order).length) return;
			mp.events.callRemote("job.pizza.createOrder", JSON.stringify(courier.order));
		}
		else if (itemName == "Повернутись") {
			mp.events.call("selectMenu.show", "fridge_menu");
		}
	}
	else if (menuName == "fridge_menu") {
		if (itemName == "Відкрити холодильник") {
			mp.events.callRemote("fridge.getItems");
            mp.events.call("selectMenu.hide");
		}
		else if (itemName == "Замовити доставку") {
			mp.events.callRemote("createOrderCheckOwner")
		}
		else if (itemName == "Закрити") {
			mp.events.call(`selectMenu.hide`);
		}
	}
	else if (menuName == "fridge_menu_apartment") {
		if (itemName == "Відкрити холодильник") {
			mp.events.callRemote("fridge.getItemsApartment");
            mp.events.call("selectMenu.hide");
		}
	}
});

mp.events.add("createOrderCheckOwner", () => {
	courier.createCurrentOrder()
});


mp.events.add("selectMenu.backspacePressed", (menuName, itemName, itemValue, itemIndex) => {
	if (menuName == "fridge_oreder_menu") {
		mp.events.call("selectMenu.show", "fridge_menu");
	}
});

mp.events.add("selectMenu.itemValueChanged", (menuName, itemName, itemValue, itemIndex, valueIndex) => {
	if (menuName == "fridge_oreder_menu") {
		if (!courier.order) return;
		if (valueIndex == 0) {
			if (courier.order[itemIndex]) delete courier.order[itemIndex];
			return
		}
		courier.order[itemIndex] = valueIndex
	}
});

 
mp.events.add('create.pizza.storagemarker', (type) => {
    if (type === false) {
        courier.storage_marker.destroy();
        delete courier.storage_marker;
        if (courier.storage_blip !== undefined) {
            courier.storage_blip.destroy();
            delete courier.storage_blip;
        }
		
		if (courier.blip) courier.blip.destroy(); 
		delete courier.blip;
		
    } else {
        courier.storage_marker = mp.markers.new(30, new mp.Vector3(-1160.83, -1532.12, 4.35), 0.8, {
            visible: true,
            color: [255, 165, 0, 100],
            rotation: 180
        });
        courier.storage_blip = mp.blips.new(587, new mp.Vector3(-1160.83, -1532.12), {
            alpha: 255,
            name: "Склад курьерiв",
            scale: 0.8,
            color: 73
        });
    }
});

mp.events.add('create.pizza.place', (pos) => {
	courier.blip = mp.blips.new(162, new mp.Vector3(pos.x, pos.y), { alpha: 255, scale: 1.1, name: "Точка доставки", color: 73 });
	courier.blip.setRoute(true);
	courier.blip.setRouteColour(73);
});
mp.events.add('delete.pizza.colshape', () => {
	if (courier.blip) courier.blip.destroy(); 
	delete courier.blip;
});
mp.events.add('storage.navigate', (remove) => {
	if (remove) return courier.storage_blip.setRoute(false);
	courier.storage_blip.setRoute(true);
	courier.storage_blip.setRouteColour(73);
});
}; a; }
{let a = function scriptEntryPoint(mp) {
class Postman {
    constructor () {
        this.storageParams = {
            position: new mp.Vector3(68.02857971191406, 125.2327651977539, 79.17980194091797),
            blip: undefined,
            marker: undefined,
            subcolshape: undefined,
            colshape: undefined
        } 
        this.generatedHousesParams = {
            blips: [],
            markers: [],
            colshapes: [],
            subcolshapes: [],
        }
        this.takeObjectParams
	}
	 
}

const postman = new Postman

mp.minigamePostmanActive = false 

mp.events.add("postalTakeObjectCloseToHouse", (dist, pos, house) => {
    if (!dist) delete postman.takeObjectParams
    else postman.takeObjectParams = { dist, pos, house }
})

mp.keys.bindEx(0x45, false, () => {
    if (postman.takeObjectParams) {
        if (vdist(mp.players.local.position, postman.takeObjectParams.pos) < postman.takeObjectParams.dist) {
            mp.events.callRemote("postalTakeObjectCloseToHouse", postman.takeObjectParams.house)
        }
    }
}, "Клавіша дії");

mp.events.add("setRoutePostmanStorage", () => {
    if (postman.storageParams.blip) {
        postman.storageParams.blip.setRoute(true)
    }
})
mp.events.add('createPostmanStorage', (type) => {
    if (type) {
        postman.storageParams.marker = mp.markers.new(1, new mp.Vector3(postman.storageParams.position.x, postman.storageParams.position.y, postman.storageParams.position.z - 1), 3, {
            visible: true,
            color: [255, 165, 0, 100],
            rotation: 180
        });
        postman.storageParams.blip = mp.blips.new(478, postman.storageParams.position, {
            alpha: 255,
            name: "Склад пошти",
            scale: 1,
            color: 81
        });
        postman.storageParams.subcolshape = mp.colshapes.newSphere(postman.storageParams.position.x, postman.storageParams.position.y, postman.storageParams.position.z, 15)
        postman.storageParams.subcolshape.catchEvent = "enterPostalSubcolshape" 
        postman.storageParams.subcolshape.data = { enterColshape: true }

        postman.storageParams.colshape = mp.colshapes.newSphere(postman.storageParams.position.x, postman.storageParams.position.y, postman.storageParams.position.z, 3)
        postman.storageParams.colshape.catchEvent = "postalTakeObject" 
    } else {
        if (postman.storageParams.blip) {
            postman.storageParams.blip.destroy()
            postman.storageParams.blip = undefined
        }
        if (postman.storageParams.marker) {
            postman.storageParams.marker.destroy()
            postman.storageParams.marker = undefined
        }
        if (postman.storageParams.subcolshape) {
            postman.storageParams.subcolshape.destroy()
            postman.storageParams.subcolshape = undefined
        }
        if (postman.storageParams.colshape) {
            postman.storageParams.colshape.destroy()
            postman.storageParams.colshape = undefined
        }
    }
});

mp.events.add("postmanGenerateHouses", (data) => {
    for (let key in data.houses) {
        if (data.houses[key]) {
            let blip = mp.blips.new(1, data.houses[key].position, {
                alpha: 255,
                name: "Посилка",
                scale: 1,
                color: 81
            });
            blip.houseSqlId = data.houses[key].sqlId
            postman.generatedHousesParams.blips.push(blip)

            let marker = mp.markers.new(1, new mp.Vector3(data.houses[key].position.x, data.houses[key].position.y, data.houses[key].position.z - 1), 1, {
                visible: false,
                color: [255, 165, 0, 100],
                rotation: 180
            });
            marker.houseSqlId = data.houses[key].sqlId
            postman.generatedHousesParams.markers.push(marker)

            let colshape = mp.colshapes.newSphere(data.houses[key].position.x, data.houses[key].position.y, data.houses[key].position.z, 1.75)
            colshape.houseSqlId = data.houses[key].sqlId
            colshape.catchEvent = "postalPutObjectCloseToHouse"
            colshape.catchEventParams = { house: data.houses[key].sqlId }
            postman.generatedHousesParams.colshapes.push(colshape) 

            let subcolshape = mp.colshapes.newSphere(data.houses[key].position.x, data.houses[key].position.y, data.houses[key].position.z, 30)
            subcolshape.houseSqlId = data.houses[key].sqlId
            subcolshape.catchEvent = "enterPostalSubcolshapeCloseToHouse" 
            subcolshape.data = { enterColshape: true, postalCloseToHouse: data.houses[key].sqlId }

            postman.generatedHousesParams.subcolshapes.push(subcolshape) 
        }
    }
})
mp.events.add("postal.forceClose", () => {
	if (mp.minigamePostmanActive) browserMenu.call(`minigamePostman`, `terminate`)
});
mp.events.add("postalSetMinigameActive", (active) => {
    mp.minigamePostmanActive = active
    mp.events.call("displayChat", !active)
	mp.events.call("hudControl.enable", !active) 
})
mp.events.add("postalStartMinigame", () => {
    browserMenu.call(`minigamePostman`, `start`, true)
})
mp.events.add("postalShowGeneratedHouseMarker", (house) => {
    for (let key in postman.generatedHousesParams.markers) {
        if (postman.generatedHousesParams.markers[key].houseSqlId == house) {
            postman.generatedHousesParams.markers[key].visible = true
        }
    }
})
mp.events.add("postalHideGeneratedHouseMarker", (house) => {
    for (let key in postman.generatedHousesParams.markers) {
        if (postman.generatedHousesParams.markers[key].houseSqlId == house) {
            postman.generatedHousesParams.markers[key].visible = false
        }
    }
})
mp.events.add("postalDeleteGeneratedHouse", (house) => {
    for (let key in postman.generatedHousesParams.blips) {
        if (postman.generatedHousesParams.blips[key].houseSqlId == house) {
            postman.generatedHousesParams.blips[key].destroy()
            postman.generatedHousesParams.blips.splice(key, 1)
        }
        if (postman.generatedHousesParams.markers[key].houseSqlId == house) {
            postman.generatedHousesParams.markers[key].destroy()
            postman.generatedHousesParams.markers.splice(key, 1)
        }
        if (postman.generatedHousesParams.colshapes[key].houseSqlId == house) {
            mp.events.call("playerExitColshape", postman.generatedHousesParams.colshapes[key])
            postman.generatedHousesParams.colshapes[key].destroy()
            postman.generatedHousesParams.colshapes.splice(key, 1)
        }
        if (postman.generatedHousesParams.subcolshapes[key].houseSqlId == house) {
            postman.generatedHousesParams.subcolshapes[key].destroy()
            postman.generatedHousesParams.subcolshapes.splice(key, 1)
        } 
    }
})
mp.events.add("syncPlayerExitVehicle", (vehicle) => { 
    try {
        if (mp.players.local.colshape && mp.players.local.colshape.data && mp.players.local.colshape.data.postalCloseToHouse != undefined) { 
            mp.events.callRemote("postalExitVehicleCloseToHouse", mp.players.local.colshape.data.postalCloseToHouse)
        }
    } catch (err) {
        mp.events.call("client::getMessage", `Error ${err}`)
    }
}) 
}; a; }
{let a = function scriptEntryPoint(mp) {
 
let storageParams = {
    colshape: undefined,
    marker: undefined,
    blip: undefined
}

mp.events.add("garbageSetStorage", (destroy, position) => {
    if (storageParams.colshape) {
        mp.events.call("playerExitColshape", storageParams.colshape)
        storageParams.colshape.destroy()
        storageParams.colshape = undefined
    }
    if (storageParams.marker) {
        storageParams.marker.destroy()
        storageParams.marker = undefined
    }
    if (storageParams.blip) {
        storageParams.blip.destroy()
        storageParams.blip = undefined
    } 
    if (destroy) return
    storageParams.colshape = mp.colshapes.newSphere(position.x, position.y, position.z, 4, -1)
    storageParams.colshape.catchEvent = "garbagemanPutObjectWithinUnloading" 
    storageParams.marker = mp.markers.new(1, position, 4, {
        color: [255, 165, 0, 100],
        dimension: -1
    }); 
    storageParams.blip = mp.blips.new(728, position,
    {
        name: "Звалище",
        scale: 1,
        color: 81,
    });
    storageParams.blip.setRoute(true); 
})
}; a; }
{let a = function scriptEntryPoint(mp) {
"use strict"

class Lawnmower {
    constructor () {
        this.bushesPositions = [
            {pos: new mp.Vector3(-1304.870, 34.288, 50.572)},
            {pos: new mp.Vector3(-1303.501953125, 59.085330963134766, 51.09678649902344)},
            {pos: new mp.Vector3(-1307.273681640625, 90.60865020751953, 53.677345275878906)},
            {pos: new mp.Vector3(-1297.3507080078125, 148.43515014648438, 57.30)},
            {pos: new mp.Vector3(-1247.5089111328125, 182.9469757080078, 61.489)},
            {pos: new mp.Vector3(-1156.7125244140625, 190.87767028808594, 63.152)},
            {pos: new mp.Vector3(-1103.3294677734375, 172.610595703125, 61.13)},
            {pos: new mp.Vector3(-1067.900634765625, 101.19400787353516, 54.151)},
            {pos: new mp.Vector3(-1089.685302734375, 47.23948669433594, 49.88)},
            {pos: new mp.Vector3(-1103.647216796875, -20.398212432861328, 48.844)},
            {pos: new mp.Vector3(-1043.6763916015625, 2.9283981323242188, 48.4795)},
            {pos: new mp.Vector3(-974.4701538085938, -31.705780029296875, 42.3453)},
            {pos: new mp.Vector3(-982.4624633789062, -114.26366424560547, 38.218)},
            {pos: new mp.Vector3(-1075.362548828125, -128.93081665039062, 39.48)},
            {pos: new mp.Vector3(-1151.992431640625, -92.18862915039062, 42.26)},
            {pos: new mp.Vector3(-1246.725830078125, -47.56723403930664, 44.12)},
            {pos: new mp.Vector3(-1293.06005859375, 4.705558776855469, 49.04)},
            {pos: new mp.Vector3(-1252.708740234375, 20.083969116210938, 46.557)},
            {pos: new mp.Vector3(-1210.90283203125, -24.105945587158203, 44.802)},
            {pos: new mp.Vector3(-1167.24560546875, -48.38720703125, 43.365)},
            {pos: new mp.Vector3(-1125.7122802734375, -32.05744171142578, 46.16)},
            {pos: new mp.Vector3(-1110.159423828125, 42.542110443115234, 50.80)},
            {pos: new mp.Vector3(-1177.6307373046875, 52.15534210205078, 51.82)},
            {pos: new mp.Vector3(-1251.507080078125, 84.21464538574219, 52.03)},
            {pos: new mp.Vector3(-1279.5511474609375, 41.05583572387695, 48.7)}
        ]
        this.currentPosition = 0
        this.currentBonus = 0
        this.checkpoint = {
            blip: {}
        }
    }
    
    _deleteAllPoints () {
        if(mp.checkpoints.exists(this.checkpoint)){
            this.checkpoint.destroy()
        }
        if(mp.blips.exists(this.checkpoint.blip)){
            this.checkpoint.blip.destroy()
        }
    }

    _createPoint () {
        if(this.currentPosition + 1 >= this.bushesPositions.length) {
            this.currentPosition = 0
        }
        this.checkpoint = mp.checkpoints.new(1, this.bushesPositions[this.currentPosition].pos, 3, {
            color: [255, 165, 0, 100],
            visible: true,
            dimension: 0,
            direction: this.bushesPositions[this.currentPosition + 1].pos
        }); 
        this.checkpoint.blip = mp.blips.new(1, this.bushesPositions[this.currentPosition].pos, {
            color: 47,
            name: "Трава",
            shortRange: false,
            scale: 1
        }); 
        this.checkpoint.job = 12 
    }
}

const lawnmower = new Lawnmower

mp.events.add("client::initBushesForMowing", () => {
    lawnmower._createPoint()
})
mp.events.add("client::deleteBushesPoints", () => {
    lawnmower._deleteAllPoints()
    lawnmower.currentPosition = 0
})
let mowerCd = null
mp.events.add("playerEnterCheckpoint", (checkpoint) => {
    if(checkpoint.job == 12 && (mp.players.local.vehicle && mp.players.local.vehicle.model == mp.game.joaat("mower"))) {
        if (mowerCd && Date.now() - mowerCd < 4 * 1000) return
            let noExe = checkpoint.job
            mowerCd = Date.now()
            checkpoint.blip.destroy()
            checkpoint.destroy()
            lawnmower.currentPosition++
            lawnmower.currentBonus++
            mp.game.audio.playSoundFrontend(-1, "CHECKPOINT_NORMAL", "HUD_MINI_GAME_SOUNDSET", true);
            lawnmower._createPoint(lawnmower.currentPosition)
            mp.events.callRemote("server::getLawnmowerEntity", noExe)
            if(lawnmower.currentBonus == 25) {
                mp.events.callRemote("server::getLawnmowerBonus", lawnmower.currentBonus)
                lawnmower.currentBonus = 0
            }
        }
})
}; a; }
{let a = function scriptEntryPoint(mp) {
"use strict"

/*
if (this.attachToBed(flatbedVeh, targetVeh)) {
    rpc.callBrowser(browserMenu, "nInfo", "Транспорт успішно занурений!")

    this.deleteOrder()
    this.createPoint()

    mp.events.callRemote('server::Flatbed:fbAttachVehicle', flatbedVeh.remoteId, targetVeh.remoteId)
    this.startSyncIntervalForVeh(targetVeh)
}
*/


class Flatbed {
    constructor() {
        this.data = {}
        this.createVeh = false
        this.isInVehicleColshape = false
    }

    createOrder(data) {
        try {
            this.isInVehicleColshape = false
            this.data.currentOrder = data
            let position = data.spawnPoint.position
            this.data.colshape = mp.colshapes.newSphere(position.x, position.y, position.z, 10, 0)
            this.data.createVehColshape = mp.colshapes.newSphere(position.x, position.y, position.z, 150, 0)
            this.data.blip = mp.blips.new(810, new mp.Vector3(position.x, position.y, position.z),
                {
                    name: "Покинуте ТЗ",
                    scale: 1,
                    color: 82,
                });
            this.data.blip.setRoute(true);
        } catch (e) {
            mp.events.callRemote("log", `Error flatbed:createOrder: ${e}`)
        }
    }

    deleteOrder() {
        this.data.colshape.destroy()
        this.data.blip.setRoute(false)
        this.data.blip.destroy()
    }

    createPoint() {
        this.createVeh = true

        mp.events.call("promptSecondary.hide")
        let position = this.data.currentOrder.deliveryPoint

        this.data.colshapePoint = mp.colshapes.newSphere(position.x, position.y, position.z, 4, 0),
            this.data.marker = mp.markers.new(1, new mp.Vector3(position.x, position.y, position.z - 0.9), 7, {
                color: [255, 165, 0, 100],
                dimension: 0
            });
        this.data.blip = mp.blips.new(267, new mp.Vector3(position.x, position.y, position.z),
            {
                name: "Розвантаження",
                scale: 1,
                color: 82,
            });
        this.data.blip.setRoute(true)
    }
    endPoint() {
        let flatbedVeh = mp.players.local.vehicle

        mp.game.audio.playSoundFrontend(-1, "CHECKPOINT_NORMAL", "HUD_MINI_GAME_SOUNDSET", true)
        mp.events.call("setHUDProgressBar", { time: 1000 * 15, img: "pogruz.svg", name: "Розвантаження транспорту" })
        flatbedVeh.freezePosition(true)

        this.data.timeout = setTimeout(() => {
            mp.events.callRemote('server::Flatbed:endPoint')

            delete this.data.currentOrder
            this.isInVehicleColshape = false
            mp.events.call("setHUDProgressBar", null)

            flatbedVeh.freezePosition(false)
            this.data.timeout = null
        }, 1000 * 15)
    }
    endJobs() {
        try {
            if (mp.blips.exists(this.data.blip)) {
                this.data.blip.setRoute(false)
                this.data.blip.destroy()
            }

            if (mp.markers.exists(this.data.marker)) {
                this.data.marker.destroy()
            }

            if (mp.colshapes.exists(this.data.colshape)) {
                this.data.colshape.destroy()
            }

            if (mp.colshapes.exists(this.data.colshapePoint)) {
                this.data.colshapePoint.destroy()
            }

            delete this.data.currentOrder

            if (this.data.createVehColshape && mp.colshapes.exists(this.data.createVehColshape)) this.data.createVehColshape.destroy();

            this.createVeh = false

        } catch (e) {
            mp.events.callRemote("log", `Error client::Flatbed:endJobs: ${e}`)
        }
    }
}

const flatbed = new Flatbed

mp.events.add('client::Flatbed:createOrder', async (data) => {
    flatbed.createOrder(data)
})

mp.events.add('client::Flatbed:vehAttached', async () => {
    flatbed.deleteOrder()
    flatbed.createPoint()
})

mp.keys.bindEx(0x45, false, () => {
	if (flatbed.isInVehicleColshape) {
        mp.events.callRemote('server::Flatbed:attachVeh')
    }
}, "Клавіша дії", 1);

mp.events.add("playerExitColshape", (shape) => {  
    if (shape == flatbed.data.colshape) {
        if (flatbed.createVeh) return
        mp.events.call("promptSecondary.hide")
        flatbed.isInVehicleColshape = false
    }
}) 

mp.events.add('playerEnterColshape', (shape) => {
    if (shape == flatbed.data.colshape) {
        if (flatbed.createVeh) return
        if (mp.players.local.vehicle) {
            flatbed.isInVehicleColshape = true
            mp.game.audio.playSoundFrontend(-1, "CHECKPOINT_NORMAL", "HUD_MINI_GAME_SOUNDSET", true)
            mp.events.call("promptSecondary.show", "Натисни <span>E</span> для навантаження")
        }
    }
    else if (shape == flatbed.data.colshapePoint) {
        if (mp.players.local.vehicle) {
            flatbed.endPoint()
        }
    }
    else if (shape == flatbed.data.createVehColshape) {
        flatbed.data.createVehColshape.destroy()
        mp.events.callRemote('server::Flatbed:createVeh')
    }
})

mp.events.add('client::Flatbed:endJobs', (veh) => {
    flatbed.endJobs(veh)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("playerReady", () => {
  mp.game.weapon.setEnableLocalOutgoingDamage(true);
});

const getDateTime = () => {
  return new Date().getTime();
};

class ServerPed {
  static pool = new Set();
  static controlledPool = new Set();
  static streamedPool = new Set();

  static addToControlledPool(serverPed) {
    ServerPed.controlledPool.add(serverPed);
  }
  static removeFromControlledPool(serverPed) {
    if (ServerPed.controlledPool.has(serverPed)) ServerPed.controlledPool.delete(serverPed);
  }

  static addToStreamedPool(serverPed) {
    ServerPed.streamedPool.add(serverPed);
  }
  static removeFromStreamedPool(serverPed) {
    if (ServerPed.streamedPool.has(serverPed)) ServerPed.streamedPool.delete(serverPed);
  }

  static pedScripts = new Map();

  static registerPedScript(name, script) {
    ServerPed.pedScripts.set(name, script);
  }

  static removePedScript(name) {
    ServerPed.pedScripts.delete(name);
  }

  static getPedScript(name) {
    return ServerPed.pedScripts.get(name);
  }

  static _tick = null;

  constructor(entity, id) {
    this.id = id;
    this.handle = entity;

    this.handle.serverPed = this;

    this.health = entity.getVariable("health");
    this.alive = entity.getVariable("alive");

    const scriptName = entity.getVariable("script");
    this.script = scriptName ? ServerPed.getPedScript(scriptName) : {};

    this.controllerScriptOnStreamIn = this.script?.onStreamIn ?? (() => {});
    this.controllerScriptOnStreamOut = this.script?.onStreamOut ?? (() => {});
    this.controllerScriptOnControllerChange = this.script?.onChangeController ?? (() => {});

    this.controllerScriptOnServerAliveChange = this.script?.onServerAliveChange ?? (() => {});
    this.controllerScriptOnServerHealthChange = this.script?.onServerHealthChange ?? (() => {});

    this.controllerScriptOnPlayerDamage = this.script?.onPlayerDamage ?? (() => {});

    this.lastRequestControllerTime = -1;
    this.lastRemoveControllerRequestTime = -1;

    ServerPed.pool.add(this);

    if (!ServerPed._tick)
      ServerPed._tick = setInterval(() => {
        const { x: hx, y: hy, z: hz } = mp.players.local.position;

        for (const serverPed of ServerPed.streamedPool) {
          serverPed.syncHealth();
          if (serverPed.isInStream()) {
            if (serverPed.isControlledByLocalPlayer()) {
              const { x, y, z } = serverPed.handle.getCoords(true);
              if (mp.game.system.vdist(x, y, z, hx, hy, hz) > 200) {
                const currentTime = getDateTime();
                if (currentTime - serverPed.lastRemoveControllerRequestTime > 300) {
                  serverPed.requestRemoveController();
                  serverPed.lastRemoveControllerRequestTime = currentTime;
                  continue;
                }
              }
            } else if (!serverPed.isControlledByAnyPlayer()) {
              const { x, y, z } = serverPed.handle.getCoords(true);

              if (mp.game.system.vdist(x, y, z, hx, hy, hz) <= 200) {
                const currentTime = getDateTime();
                if (currentTime - serverPed.lastRequestControllerTime > 300) {
                  serverPed.requestController();
                  serverPed.lastRequestControllerTime = currentTime;
                  continue;
                }
              }
            } else {
              ServerPed.removeFromControlledPool(serverPed);
            }
          } else {
            ServerPed.removeFromStreamedPool(serverPed);
          }
        }
      }, 50);
  }

  get remoteId() {
    return this.handle ? this.handle.remoteId : null;
  }

  isInStream() {
    return this.handle && this.handle.handle !== 0;
  }

  isExist() {
    return this.handle && mp.peds.exists(this.handle);
  }

  isControlledByLocalPlayer() {
    return this.handle.controller === mp.players.local;
  }

  isControlledByAnyPlayer() {
    return !!this.handle.controller;
  }

  onStreamIn() {
    ServerPed.addToStreamedPool(this);
    this.controllerScriptOnStreamIn(this);

    if (this.alive === false) {
      this.handle.setHealth(0);
      this.handle.freezePosition(true);
    }
  }

  onStreamOut() {
    ServerPed.removeFromStreamedPool(this);
    this.controllerScriptOnStreamOut(this);
  }

  onChangeController(newController) {
    newController === mp.players.local ? ServerPed.addToControlledPool(this) : ServerPed.removeFromControlledPool(this);
    this.syncHealth();
    this.controllerScriptOnControllerChange(this, newController);
  }

  onServerAliveChange(isAlive) {
    this.alive = isAlive;

    if (this.isInStream()) {
      if (!isAlive) {
        this.handle.setHealth(0);
        this.handle.freezePosition(true);
      }
    }

    this.controllerScriptOnServerAliveChange(this);
  }

  onServerHealthChange(health) {
    this.health = health;
    this.controllerScriptOnServerHealthChange(this, health);
  }

  onPlayerDamage(player, damage, weapon, boneIndex) {
    mp.events.callRemote("server::syncedPed::DamagePed", this.remoteId, weapon, boneIndex, damage);
    this.controllerScriptOnPlayerDamage(this, player, damage);
  }

  requestController() {
    mp.events.callRemoteUnreliable("server::syncedPed::RequestController", this.remoteId);
  }

  requestRemoveController() {
    mp.events.callRemoteUnreliable("server::syncedPed::RequestRemoveController", this.remoteId);
  }

  syncHealth() {
    if (this.isInStream()) {
      const serverHealth = this.health;
      const currentHealth = this.handle.getHealth();

      if (currentHealth !== serverHealth) {
        this.handle.setHealth(serverHealth === 0 ? 0 : serverHealth + 100);
      }
    }
  }
}

const AnimalsBehaviors = {
  ANGRY: "ANGRY",
  NEUTRAL: "NEUTRAL",
  CAN_BE_ANGRY: "CAN_BE_ANGRY",
};

const AnimalData = [
  { id: 1, hash: mp.game.joaat("a_c_rabbit_01"), health: 200, behaviour: AnimalsBehaviors.NEUTRAL, name: "Заєць" },
  { id: 2, hash: mp.game.joaat("a_c_deer"), health: 500, behaviour: AnimalsBehaviors.CAN_BE_ANGRY, chance: 0.25, name: "Олень" },
  { id: 3, hash: mp.game.joaat("a_c_boar"), health: 400, behaviour: AnimalsBehaviors.CAN_BE_ANGRY, chance: 0.25, name: "Дика свиня" },
  { id: 4, hash: mp.game.joaat("a_c_coyote"), health: 350, behaviour: AnimalsBehaviors.ANGRY, name: "Койот" },
  { id: 5, hash: mp.game.joaat("a_c_mtlion"), health: 600, behaviour: AnimalsBehaviors.ANGRY, name: "Пума" },
  { id: 6, hash: mp.game.joaat("a_c_panther"), health: 700, behaviour: AnimalsBehaviors.ANGRY, name: "Пантера" },
  { id: 7, hash: mp.game.joaat("a_c_pig"), health: 400, behaviour: AnimalsBehaviors.NEUTRAL, name: "pig" },
  { id: 8, hash: mp.game.joaat("a_c_cow"), health: 400, behaviour: AnimalsBehaviors.NEUTRAL, name: "cow" },
  { id: 9, hash: mp.game.joaat("a_c_hen"), health: 200, behaviour: AnimalsBehaviors.NEUTRAL, name: "hen" },
];

ServerPed.registerPedScript("HUNTING", {
  onStreamIn() {},
  onStreamOut() {},

  onChangeController(serverPed, newController) {
    if (serverPed.isInStream() && mp.players.local === newController) {
      serverPed.handle.setCanBeDamaged(true);
      serverPed.handle.setCanRagdoll(false);
      serverPed.handle.setCanRagdollFromPlayerImpact(false);

      serverPed.handle.setProofs(false, true, true, true, false, true, true, true);
      serverPed.handle.setSuffersCriticalHits(false);

      serverPed.handle.taskWanderStandard(10, 10);

      const animalId = serverPed.handle.getVariable("animalId");
      if (!animalId) return;

      const animalData = AnimalData.find((data) => data.id === animalId);
      if (!animalData) return;

      const { behaviour, chance } = animalData;
      if (behaviour === AnimalsBehaviors.ANGRY || behaviour === AnimalsBehaviors.CAN_BE_ANGRY) {
        serverPed.handle.setCombatAbility(1);
        serverPed.handle.setCombatRange(2);
        serverPed.handle.setCombatMovement(3);
        serverPed.handle.setCombatAttributes(46, true);
        serverPed.handle.setCombatAttributes(5, true);
        serverPed.handle.setFleeAttributes(0, true);
        serverPed.handle.setConfigFlag(2, true);
        serverPed.handle.setConfigFlag(188, true);
        //serverPed.handle.taskPutDirectlyIntoMelee(mp.players.local.handle, 0.0, -1.0, 1.0, false);
      }
    }
  },

  onServerAliveChange() {},
  onServerHealthChange() {},

  onPlayerDamage(serverPed, player, damage) {},
});

mp.events.add("authCharacter.success", () => {
  mp.peds.forEach((entity) => {
    const pedId = entity.getVariable("pedId");
    if (pedId != null) new ServerPed(entity, pedId);
  });

  mp.events.addDataHandler("pedId", (entity, id, oldId) => {
    if (entity && id != null) {
      entity.handle === 0 ? new ServerPed(entity, id) : new ServerPed(entity, id).onStreamIn();
    }
  });
  mp.events.addDataHandler("health", (entity, health, oldHealth) => {
    entity && entity.serverPed && entity.serverPed.onServerHealthChange(health);
  });

  mp.events.addDataHandler("alive", (entity, alive, oldAlive) => {
    entity && entity.serverPed && entity.serverPed.onServerAliveChange(alive);
  });
});

mp.events.add("entityStreamIn", (entity) => {
  entity && entity.serverPed && entity.serverPed.onStreamIn();
});

mp.events.add("entityStreamOut", (entity) => {
  entity && entity.serverPed && entity.serverPed.onStreamOut();
});

mp.events.add("entityControllerChange", (entity, newController) => {
  entity && entity.serverPed && entity.serverPed.onChangeController(newController);
});

mp.events.add("outgoingDamage", (sourceEntity, targetEntity, sourcePlayer, weapon, boneIndex, damage) => {
  if (targetEntity && targetEntity.serverPed) {
    targetEntity.serverPed.onPlayerDamage(sourcePlayer, damage, weapon, boneIndex);
  }
});

mp.events.add("huntingStopMinigame", (win) => {
  mp.minigamePressingActive = false;
  mp.events.callRemote("hunting::StopMinigame", win);
});
}; a; }
{let a = function scriptEntryPoint(mp) {
const controlsDisabler = require("gamemode/scripts/helpers/controlsDisabler.js");
const localPlayer = mp.players.local
const controlsToDisable = [ /*21, 22,*/ 37, 44, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	14, 15, 16, 17, 53, 54, 140, 141, 142, 143, 143, 47, 38, 69, 70, 68, 92, 99, 115, 46, 36];
const controlsToDisableNoJump = [ /*21, 22,*/ 37, 44, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	14, 15, 16, 17, 53, 54, 140, 141, 142, 143, 143, 47, 38, 69, 70, 68, 92, 99, 115, 46, 36];

let interiorZones = new Set();
let isInGreenZone = false;
let zoneCoords = {};

let currentGreenZone = false;
let currentSpeedZone = false;
let showZones = false;
let showMarkers = {};

mp.events.add("custom_event:interiorChanged", onInteriorChanged);

mp.events.add("green_zone::load", (rawData, rawDataCoords) => {
	interiorZones = new Set(JSON.parse(rawData));
	rawDataCoords = JSON.parse(rawDataCoords)
	for (let key in rawDataCoords){
		zoneCoords[key] = mp.colshapes.newSphere(rawDataCoords[key].x, rawDataCoords[key].y, rawDataCoords[key].z - 1.0, rawDataCoords[key].r);
		zoneCoords[key].greenZone = {x: rawDataCoords[key].x, y: rawDataCoords[key].y, z: rawDataCoords[key].z, r: rawDataCoords[key].r, spawn: rawDataCoords[key].spawn, speed: rawDataCoords[key].speed, id: key};
	}
});

mp.events.add("green_zone::addRemove", (isAdd) => {
	const eventName = `green_zone::${isAdd ? "add": "remove"}`;

	mp.events.callRemote(eventName, getCurrentInterior());
});

mp.events.add("green_zone::add", (interior) => {
	addInteriorZone(interior);
});

mp.events.add("green_zone_coords::add", (id, x, y, z, r, spawn) => {
	zoneCoords[id] = mp.colshapes.newSphere(x, y, z - 1.0, r);
	zoneCoords[id].greenZone = {x: x, y: y, z: z, r: r, spawn: spawn, id: id};
	if (showZones) {
		let marker = mp.markers.new(28, new mp.Vector3(x, y, z - 1.0), r, {
			visible: true,
			color: [255, 165, 0, 100],
			rotation: 180
		});
		showMarkers[id] = marker
	}
});

mp.events.add("green_zone_coords::remove", (id) => {
	if (!zoneCoords[id]) return;
	if (currentGreenZone && currentGreenZone == id) onExitGreenZone(currentGreenZone);
	zoneCoords[id].destroy(); 
	delete zoneCoords[id];
	if (showZones && showMarkers[id]) {
		showMarkers[id].destroy();
		delete showMarkers[id];
	}
});

mp.events.add("playerEnterColshape", (colshape) => {
	if (colshape.greenZone) {
		if (colshape.greenZone.spawn) onEnterGreenZone(colshape.greenZone, true);
		else onEnterGreenZone(colshape.greenZone);
	}
})

mp.events.add("playerExitColshape", (colshape) => {
	if (colshape.greenZone) onExitGreenZone(colshape.greenZone.id);
})

mp.events.add("green_zone::remove", (interior) => {
	removeInteriorZone(interior);
});

mp.events.add("green_zone::showallzones", () => {
	showZones = !showZones
	
	if (showZones) {
		for (let key in zoneCoords){
			let marker = mp.markers.new(28, new mp.Vector3(zoneCoords[key].greenZone.x, zoneCoords[key].greenZone.y, zoneCoords[key].greenZone.z - 1.0), zoneCoords[key].greenZone.r, {
                visible: true,
                color: [255, 165, 0, 100],
                rotation: 180
            });
			showMarkers[key] = marker
		}
	}
	else {
		for (let key in showMarkers){
			showMarkers[key].destroy();
		}
		showMarkers = {};
	}
});

mp.events.addDataHandler("faction", (entity, value) => {
    if (entity && entity.type === "player" && value) {
		if (entity != localPlayer) return
		if (value == 1 || value == 2 || value == 4 || value == 15) {
			if (mp.players.exists(localPlayer)) localPlayer.setMaxMoveBlendRatio(1);
			mp.events.remove("render", render);
			controlsDisabler.removeRange(controlsToDisableNoJump);
			controlsDisabler.removeRange(controlsToDisable);
		}
	}
});

function onInteriorChanged(newInterior) {
	if (newInterior === 0) {
		if (isInGreenZone) {
			onExitGreenZone();
		}

		return;
	}

	for (const interiorZone of interiorZones) {
		if (newInterior !== interiorZone) {
			continue;
		}

		onEnterGreenZone();

		return;
	}

	if (isInGreenZone) {
		onExitGreenZone();
	}
}

function render() {
	//mp.game.invoke("0xADF692B254977C0C", localPlayer.handle, mp.game.joaat("weapon_unarmed") >> 0, true);
	mp.game.player.disableFiring(true);
}

function onEnterGreenZone(coords, spawn = false) {
	try {
		if (mp.players.local.dimension > 0 && !(mp.players.local.dimension >= 60000 && mp.players.local.dimension <= 63000) && !(mp.players.local.dimension >= 100000 && mp.players.local.dimension <= 121000) && mp.players.local.dimension !== mp.casino_dimension) return

		if (coords !== undefined) {
			currentGreenZone = coords.id;
			currentSpeedZone = coords.speed;
		}
		else isInGreenZone = true;

		if (localPlayer.getVariable("faction") != 1 && localPlayer.getVariable("faction") != 2 && localPlayer.getVariable("faction") != 4 && localPlayer.getVariable("faction") != 15) {
			if (localPlayer.vehicle && currentSpeedZone) {
				localPlayer.vehicle.currentSpeedZone = currentSpeedZone
				localPlayer.vehicle.setMaxSpeed(currentSpeedZone / 3.636363) 
			}
			mp.events.add("render", render);
			localPlayer.setStealthMovement(false, "DEFAULT_ACTION");
			localPlayer.setMaxMoveBlendRatio(1.35);
			if (coords !== undefined) controlsDisabler.addRange(controlsToDisableNoJump);
			else controlsDisabler.addRange(controlsToDisable);
		}
		mp.events.callRemote("green_zone::enter", true, spawn);
		mp.events.call("hudControl.greenZone", true)
	} catch (err) {
		mp.game.graphics.notify(`err: ${err}`)
	}
}

function onExitGreenZone(coords) {
	if (coords) {
		currentGreenZone = false;
		if (currentSpeedZone) {
			if (localPlayer.vehicle) {
				delete localPlayer.vehicle.currentSpeedZone
				localPlayer.vehicle.setMaxSpeed(0.0) 
			}
			currentSpeedZone = false;
		}
	}
	else isInGreenZone = false;
	if (localPlayer.getVariable("faction") != 1 && localPlayer.getVariable("faction") != 2 && localPlayer.getVariable("faction") != 4) {
		localPlayer.setMaxMoveBlendRatio(1);
		mp.events.remove("render", render);
		if (coords) controlsDisabler.removeRange(controlsToDisableNoJump);
		else controlsDisabler.removeRange(controlsToDisable);
	}
	mp.events.callRemote("green_zone::enter" , false);
	mp.events.call("hudControl.greenZone", false)
}


function addInteriorZone(interiorId) {
	interiorZones.add(interiorId);

	const currentInterior = getCurrentInterior();

	if (currentInterior === interiorId && !isInGreenZone) {
		onEnterGreenZone();
	}
}

function removeInteriorZone(interiorId) {
	interiorZones.delete(interiorId);

	const currentInterior = getCurrentInterior();

	if (currentInterior === interiorId && isInGreenZone) {
		onExitGreenZone();
	}
}

function getCurrentInterior() {
	return mp.game.invoke("0x2107BA504071A6BB", mp.players.local.handle);
}

exports = {
	addInteriorGreenZone: addInteriorZone,
	removeInteriorGreenZone: removeInteriorZone,
	isLocalPlayerInGreenZone: () => (isInGreenZone || currentGreenZone) ? currentSpeedZone : false
};


}; a; }
{let a = function scriptEntryPoint(mp) {
class InteriorChangedHandler {
	constructor() {
		this.currentInterior = 0;
		this.localPlayer = mp.players.local;
	}

	tick() {
		const newInterior = this.getInterior();

		if (newInterior === this.currentInterior) {
			return;
		}

		mp.events.call("custom_event:interiorChanged", newInterior, this.currentInterior);
		this.currentInterior = newInterior;
	}

	getInterior() {
		return mp.game.invoke("0x2107BA504071A6BB", this.localPlayer.handle);
	}
}

const handler = new InteriorChangedHandler();
 

mp.events.add("render", () => {
	handler.tick();
});


}; a; }
{let a = function scriptEntryPoint(mp) {
mp.events.add("doorControl::setDefaultState", (rawInfo) => {
	const doorsInfo = JSON.parse(rawInfo);

	for (const doorInfo of doorsInfo) {
		if (doorInfo.hide) mp.game.entity.createModelHide(doorInfo.position.x, doorInfo.position.y, doorInfo.position.z, 100, doorInfo.model, true)
		else doorControl(doorInfo.locked, doorInfo.model, doorInfo.position);
	}
});

function doorControl(locked, model, position) {
	mp.game.object.doorControl(model, position.x, position.y, position.z, locked, 0, 0, 0);
}


if (!mp.game.graphics.hasStreamedTextureDictLoaded("mpsafecracking")) mp.game.graphics.requestStreamedTextureDict("mpsafecracking", true);


let doorsData = null
let dist = 2.5

mp.events.add("syncPlayerEnterVehicle", (vehicle, seat) => {
	dist = 7
})

mp.events.add("syncPlayerExitVehicle", (vehicle, seat) => { 
	dist = 2.5
})

mp.events.add("setDoorsData", (data) => {
	doorsData = data

	doorsData.forEach((door) => {
		door.doors.forEach((doorInfo) => {
			let hash = typeof doorInfo.model === 'string' ? mp.game.joaat(doorInfo.model) : doorInfo.model

			mp.game.object.doorControl(hash, doorInfo.position.x, doorInfo.position.y, doorInfo.position.z, door.locked ? true : false, 0.0, 0.0, 0);
		})
	})
})

mp.events.add("setDoorData", (id, state) => {
	if (!doorsData) return
	let door = doorsData.find(val => val.id == id)
	if (!door) return

	door.locked = state

	door.doors.forEach((doorInfo) => {
		let hash = typeof doorInfo.model === 'string' ? mp.game.joaat(doorInfo.model) : doorInfo.model

		mp.game.object.doorControl(hash, doorInfo.position.x, doorInfo.position.y, doorInfo.position.z, door.locked ? true : false, 0.0, 0.0, 0);
	})
})


mp.events.add('render', () => {
	if (!doorsData) return
	if (!mp.game.graphics.hasStreamedTextureDictLoaded("mpsafecracking")) return

	doorsData.forEach((door) => {
		const position = new mp.Vector3(door.icon.x, door.icon.y, door.icon.z)

		if (mp.game.gameplay.getDistanceBetweenCoords(position.x, position.y, position.z, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, true) < dist) {
			const pos = mp.game.graphics.world3dToScreen2d(position)
			if (pos) {
				if (door.locked) mp.game.graphics.drawSprite("mpsafecracking", "lock_closed", pos.x, pos.y, 0.04, 0.06, 0, 255, 255, 255, 255);
				else mp.game.graphics.drawSprite("mpsafecracking", "lock_open", pos.x, pos.y, 0.04, 0.06, 0, 255, 255, 255, 255);
			}
		}
	})
})

mp.keys.bindEx(0x45, false, () => {
	if (!doorsData) return

	doorsData.forEach((door) => {
		const position = new mp.Vector3(door.icon.x, door.icon.y, door.icon.z)

		if (mp.game.gameplay.getDistanceBetweenCoords(position.x, position.y, position.z, mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, true) < dist) {
			if (door.faction == mp.clientStorage["faction"]) mp.events.callRemote("setDoorState", door.id, !door.locked)
		}
	})
}, "Клавіша дії");



}; a; }
{let a = function scriptEntryPoint(mp) {
let betBlackjack = [
    [],
    [],
    [],
    []
];

let betRoulette = [
    [],
    []
];

let canDoBets = false;
let betObject = null;

var CasinoPedss = [
    { Hash: 0xBC92BED5, Pos: new mp.Vector3(1149.391, 269.1934, -51.8409), Angle: 47.5 },
    { Hash: 0xBC92BED5, Pos: new mp.Vector3(1151.28, 267.33, -51.840), Angle: 222.2 },
    { Hash: 0xBC92BED5, Pos: new mp.Vector3(1128.853, 261.8036, -51.041), Angle: 314.2 },
    { Hash: 0xBC92BED5, Pos: new mp.Vector3(1143.875, 246.781, -51.041), Angle: 317.2 },
    //{Hash: 0x1422D45B, Pos: new mp.Vector3(1145.337, 267.7967, -51.8409), Angle: 47.5},
    //{Hash: 0x1422D45B, Pos: new mp.Vector3(1149.791, 263.1628, -51.8409), Angle: 222.2},
];

var CasinoPedssID = [];

var cardNum = 0;
var CardObjects = [

    [
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
    ],
    [
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
    ],
    [
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
    ],
    [
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
        [null, null, null, null, null, null, null],
    ],
];

const BlackJackTablesPos = [
    new mp.Vector3(1148.837, 269.747, -52.8409),
    new mp.Vector3(1151.84, 266.747, -52.8409),
    new mp.Vector3(1129.406, 262.3578, -52.041),
    new mp.Vector3(1144.429, 247.3352, -52.041),
];


mp.game.streaming.requestAnimDict("anim_casino_b@amb@casino@games@shared@dealer@");
mp.game.streaming.requestAnimDict("anim_casino_b@amb@casino@games@blackjack@dealer");
mp.game.streaming.requestAnimDict("anim_casino_b@amb@casino@games@blackjack@player");
mp.game.streaming.requestAnimDict("anim_casino_b@amb@casino@games@shared@player@");


setTimeout(function () {


    let n = 0;

    for (let tb = 0; tb < 4; tb++) {
        BlackJackTables[tb] = mp.objects.new(s_propName, new mp.Vector3(BlackJackTablesPos[tb].x, BlackJackTablesPos[tb].y, BlackJackTablesPos[tb].z), {
            rotation: new mp.Vector3(0, 0, BlackJackTablesHeading[tb]),
            alpha: 255,
            dimension: mp.casino_dimension
        });
    }

    CasinoPedss.forEach(ped => {
        CasinoPedssID[n] = mp.peds.new(ped.Hash, ped.Pos, ped.Angle, mp.casino_dimension);
        CasinoPedssID[n].setComponentVariation(0, 2, 1, 0);
        CasinoPedssID[n].setComponentVariation(1, 1, 0, 0);
        CasinoPedssID[n].setComponentVariation(2, 2, 0, 0);
        CasinoPedssID[n].setComponentVariation(3, 0, n + 2, 0);
        CasinoPedssID[n].setComponentVariation(4, 0, 0, 0);
        CasinoPedssID[n].setComponentVariation(6, 1, 0, 0);
        CasinoPedssID[n].setComponentVariation(7, 2, 0, 0);
        CasinoPedssID[n].setComponentVariation(8, 1, 0, 0);
        CasinoPedssID[n].setComponentVariation(10, 1, 0, 0);
        CasinoPedssID[n].setComponentVariation(11, 1, 0, 0);
        CasinoPedssID[n].setConfigFlag(185, true);
        CasinoPedssID[n].setConfigFlag(108, true);
        CasinoPedssID[n].setConfigFlag(208, true);
        CasinoPedssID[n].taskPlayAnim("anim_casino_b@amb@casino@games@shared@dealer@", "idle", 1000.0, -2.0, -1, 2, 1148846080, false, false, false);
        n = n + 1;
        //CasinoPedssID[0].playFacialAnim("idle_facial", "anim_casino_b@amb@casino@games@shared@dealer@");
        //mp.game.invoke("0xEA47FE3719165B94", CasinoPedssID[0].handle, "anim_casino_b@amb@casino@games@shared@dealer@", "idle", 1000.0, -2.0, -1, 2, 1148846080, false, false, false)
    })

}, 10000);

const BlackJackTableCardsRotation = [
    [69.12, 67.8, 66.6, 70.44, 70.84, 67.88, 69.56],
    [22.11, 22.32, 20.8, 19.8, 19.44, 26.28, 22.68],
    [-21.43, -20.16, -16.92, -23.4, -21.24, -23.76, -19.44],
    [-67.03, -69.12, -64.44, -67.68, -63.72, -68.4, -64.44],
    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
];

const BlakcJackBetsOffset = [
    new mp.Vector3(0.712625, 0.170625, 0.95),
    new mp.Vector3(0.278125, -0.2571, 0.95),
    new mp.Vector3(-0.30305, -0.2464, 0.95),
    new mp.Vector3(-0.72855, 0.17345, 0.95)
];

const BlackJackTableCardsOffset = [
    [
        new mp.Vector3(0.5737, 0.2376, 0.948025),
        new mp.Vector3(0.562975, 0.2523, 0.94875),
        new mp.Vector3(0.553875, 0.266325, 0.94955),
        new mp.Vector3(0.5459, 0.282075, 0.9501),
        new mp.Vector3(0.536125, 0.29645, 0.95085),
        new mp.Vector3(0.524975, 0.30975, 0.9516),
        new mp.Vector3(0.515775, 0.325325, 0.95235),
    ],
    [
        new mp.Vector3(0.2325, -0.1082, 0.94805),
        new mp.Vector3(0.23645, -0.0918, 0.949),
        new mp.Vector3(0.2401, -0.074475, 0.950225),
        new mp.Vector3(0.244625, -0.057675, 0.951125),
        new mp.Vector3(0.249675, -0.041475, 0.95205),
        new mp.Vector3(0.257575, -0.0256, 0.9532),
        new mp.Vector3(0.2601, -0.008175, 0.954375),
    ],
    [
        new mp.Vector3(-0.2359, -0.1091, 0.9483),
        new mp.Vector3(-0.221025, -0.100675, 0.949),
        new mp.Vector3(-0.20625, -0.092875, 0.949725),
        new mp.Vector3(-0.193225, -0.07985, 0.950325),
        new mp.Vector3(-0.1776, -0.072, 0.951025),
        new mp.Vector3(-0.165, -0.060025, 0.951825),
        new mp.Vector3(-0.14895, -0.05155, 0.95255),
    ],
    [
        new mp.Vector3(-0.5765, 0.2229, 0.9482),
        new mp.Vector3(-0.558925, 0.2197, 0.949175),
        new mp.Vector3(-0.5425, 0.213025, 0.9499),
        new mp.Vector3(-0.525925, 0.21105, 0.95095),
        new mp.Vector3(-0.509475, 0.20535, 0.9519),
        new mp.Vector3(-0.491775, 0.204075, 0.952825),
        new mp.Vector3(-0.4752, 0.197525, 0.9543),
    ],
    [
        new mp.Vector3(-0.0436, 0.21205, 0.948875),
        new mp.Vector3(0.0356, 0.2105, 0.94885),
        new mp.Vector3(-0.0806, 0.2137, 0.950225),
        new mp.Vector3(-0.1006, 0.21125, 0.950875),
        new mp.Vector3(0.3962, 0.253, 0.950025),
        new mp.Vector3(0.5185, 0.253, 0.950025),

    ]
];
const BlackJackTablesHeading = [
    -134.69,
    45.31,
    135.31,
    135.31,
];

const BlackJackTablesSeatsHeading = [
    [290.5, 245.5, 200.5, 150.5],
    [110.5, 65.5, 20.5, 330.5],
    [200.5, 155.5, 110.5, 415.5],
    [216.5, 161.5, 116.5, 66.5],
];

const BlackJackSeats = {
    0: "Chair_Base_04",
    1: "Chair_Base_03",
    2: "Chair_Base_02",
    3: "Chair_Base_01"
};

const CasinoCards = [
    "vw_prop_cas_card_club_ace",
    "vw_prop_cas_card_club_02",
    "vw_prop_cas_card_club_03",
    "vw_prop_cas_card_club_04",
    "vw_prop_cas_card_club_05",
    "vw_prop_cas_card_club_06",
    "vw_prop_cas_card_club_07",
    "vw_prop_cas_card_club_08",
    "vw_prop_cas_card_club_09",
    "vw_prop_cas_card_club_10",
    "vw_prop_cas_card_club_jack",
    "vw_prop_cas_card_club_queen",
    "vw_prop_cas_card_club_king",
    "vw_prop_cas_card_dia_ace",
    "vw_prop_cas_card_dia_02",
    "vw_prop_cas_card_dia_03",
    "vw_prop_cas_card_dia_04",
    "vw_prop_cas_card_dia_05",
    "vw_prop_cas_card_dia_06",
    "vw_prop_cas_card_dia_07",
    "vw_prop_cas_card_dia_08",
    "vw_prop_cas_card_dia_09",
    "vw_prop_cas_card_dia_10",
    "vw_prop_cas_card_dia_jack",
    "vw_prop_cas_card_dia_queen",
    "vw_prop_cas_card_dia_king",
    "vw_prop_cas_card_hrt_ace",
    "vw_prop_cas_card_hrt_02",
    "vw_prop_cas_card_hrt_03",
    "vw_prop_cas_card_hrt_04",
    "vw_prop_cas_card_hrt_05",
    "vw_prop_cas_card_hrt_06",
    "vw_prop_cas_card_hrt_07",
    "vw_prop_cas_card_hrt_08",
    "vw_prop_cas_card_hrt_09",
    "vw_prop_cas_card_hrt_10",
    "vw_prop_cas_card_hrt_jack",
    "vw_prop_cas_card_hrt_queen",
    "vw_prop_cas_card_hrt_king",
    "vw_prop_cas_card_spd_ace",
    "vw_prop_cas_card_spd_02",
    "vw_prop_cas_card_spd_03",
    "vw_prop_cas_card_spd_04",
    "vw_prop_cas_card_spd_05",
    "vw_prop_cas_card_spd_06",
    "vw_prop_cas_card_spd_07",
    "vw_prop_cas_card_spd_08",
    "vw_prop_cas_card_spd_09",
    "vw_prop_cas_card_spd_10",
    "vw_prop_cas_card_spd_jack",
    "vw_prop_cas_card_spd_queen",
    "vw_prop_cas_card_spd_king",
];


mp.game.streaming.requestModel(mp.game.joaat('vw_prop_casino_blckjack_01'));

const s_propName = mp.game.joaat('vw_prop_casino_blckjack_01');
let BlackJackTables = [];



mp.events.add('client_bj_give_card', function (table, play, num, card) {
    mp.game.streaming.requestModel(mp.game.joaat(`${CasinoCards[card]}`));

    let animName = `deal_card_player_0${play + 1}`;
    let cardOff = new mp.Vector3(0.526, 0.571, 0.963);
    let tableCords = BlackJackTablesPos[table];

    CardObjects[table][play][num] = mp.objects.new(mp.game.joaat(`${CasinoCards[card]}`), new mp.Vector3(tableCords.x, tableCords.y, tableCords.z - 2),
        {
            rotation: new mp.Vector3(0, 0, 0),
            alpha: 255,
            dimension: mp.casino_dimension,
        });
        
    setTimeout(() => {
        let cardPos = mp.game.object.getObjectOffsetFromCoords(tableCords.x, tableCords.y, tableCords.z, BlackJackTablesHeading[table], cardOff.x, cardOff.y, cardOff.z);
        CardObjects[table][play][num].setVisible(false, false);
        CardObjects[table][play][num].position = cardPos;
        CardObjects[table][play][num].setCoordsNoOffset(cardPos.x, cardPos.y, cardPos.z, false, false, true);
        let rotat = new mp.Vector3(BlackJackTablesHeading[table], 164.52, 11.5);
        CardObjects[table][play][num].setRotation(rotat.x, rotat.y, rotat.z, 2, true);
        mp.game.invoke("0xE532F5D78798DAAB", mp.game.joaat(`${CasinoCards[card]}`));
        if (isEntityExists(CasinoPedssID[table])) CardObjects[table][play][num].attachTo(CasinoPedssID[table].handle, CasinoPedssID[table].getBoneIndex(28422), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, false, false, false, true, 2, true);
        if (play == 4) {
            if (num == 0) {
                animName = "deal_card_self_second_card";
            }
            else if (num == 1) {
                animName = "deal_card_self";
            }
            else {
                animName = "deal_card_self_card_06";
            }
        }
        if (isEntityExists(CasinoPedssID[table])) CasinoPedssID[table].taskPlayAnim("anim_casino_b@amb@casino@games@blackjack@dealer", animName, 3.0, 1.0, -1, 2, 0, false, false, false);
    }, 150);

    //mp.game.invoke("0x6B9BBD38AB0796DF", CardObjects[cardNum].handle, CasinoPedssID[0].handle, CasinoPedssID[0].getBoneIndex(28422), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, false, false, false, true, 2, true);
    
    setTimeout(() => {
        if (!isEntityExists(CardObjects[table][play][num])) return
        CardObjects[table][play][num].detach(false, true);
        CardObjects[table][play][num].setVisible(true, false);
        let newCardOff = BlackJackTableCardsOffset[play][num];
        let newCardPos = mp.game.object.getObjectOffsetFromCoords(tableCords.x, tableCords.y, tableCords.z, BlackJackTablesHeading[table], newCardOff.x, newCardOff.y, newCardOff.z);
        mp.game.invoke("0x239A3351AC1DA385", CardObjects[table][play][num].handle, newCardPos.x, newCardPos.y, newCardPos.z, false, false, true);
        //CardObjects[cardNum].position = newCardPos;
        let rotatet = (play == 4 && num == 1) ? new mp.Vector3(0, 180, BlackJackTablesHeading[table]) : new mp.Vector3(0, 0, BlackJackTablesHeading[table] + BlackJackTableCardsRotation[play][num]);

        CardObjects[table][play][num].setRotation(rotatet.x, rotatet.y, rotatet.z, 2, true);

        //mp.events.callRemote("end_give", table + 1, play);
    }, 1400);

});



mp.events.add('flip_card', function (table) {
    if (isEntityExists(CasinoPedssID[table])) CasinoPedssID[table].taskPlayAnim("anim_casino_b@amb@casino@games@blackjack@dealer", "check_and_turn_card", 3.0, 1.0, -1, 2, 0, false, false, false);

    setTimeout(() => {
        if (CardObjects[table][4][1] != undefined && isEntityExists(CasinoPedssID[table]))
            CardObjects[table][4][1].attachTo(CasinoPedssID[table].handle, CasinoPedssID[table].getBoneIndex(28422), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, false, false, false, true, 2, true);
    }, 500);
    setTimeout(() => {
        if (CardObjects[table][4][1] != undefined) {
            let pos = BlackJackTableCardsOffset[4][1];
            let tablePos = BlackJackTablesPos[table];
            let newCardPos = mp.game.object.getObjectOffsetFromCoords(tablePos.x, tablePos.y, tablePos.z, BlackJackTablesHeading[table], pos.x, pos.y, pos.z);
            CardObjects[table][4][1].detach(false, true);
            CardObjects[table][4][1].setCoordsNoOffset(newCardPos.x, newCardPos.y, newCardPos.z, false, false, true);
            let rot = new mp.Vector3(0, 0, BlackJackTablesHeading[table] + BlackJackTableCardsRotation[4][1]);
            CardObjects[table][4][1].setRotation(rot.x, rot.y, rot.z, 2, true);
        }
    }, 1650);

});

mp.events.add('clean_cards', function (table, play) {
    if (play == 4 && isEntityExists(CasinoPedssID[table])) CasinoPedssID[table].taskPlayAnim("anim_casino_b@amb@casino@games@blackjack@dealer", "retrieve_own_cards_and_remove", 3.0, 1.0, -1, 2, 0, false, false, false);
    else if (isEntityExists(CasinoPedssID[table])) CasinoPedssID[table].taskPlayAnim("anim_casino_b@amb@casino@games@blackjack@dealer", `retrieve_cards_player_0${play + 1}`, 3.0, 1.0, -1, 2, 0, false, false, false);


    setTimeout(() => {
        if (CardObjects[table][play][0] != undefined || CardObjects[table][play][0] != null) {
            if (isEntityExists(CasinoPedssID[table])) CardObjects[table][play][0].attachTo(CasinoPedssID[table].handle, CasinoPedssID[table].getBoneIndex(28422), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, false, false, false, true, 2, true);
        }
        for (let i = 1; i < CardObjects[table][play].length; i++) {
            if (CardObjects[table][play][i] != null || CardObjects[table][play][i] != undefined) {
                CardObjects[table][play][i].destroy();
                CardObjects[table][play][i] = null;
            }
        }

        for (let i = 0; i < betBlackjack[table].length; i++) {
            if (betBlackjack[table][i] != null)
                betBlackjack[table][i].destroy();
        }

        betBlackjack[table] = [];

    }, 500);

    setTimeout(() => {
        if (CardObjects[table][play][0] != undefined) {

            CardObjects[table][play][0].detach(false, true);
            CardObjects[table][play][0].destroy();
            CardObjects[table][play][0] = null;
        }
    }, 1600);

});




mp.events.add('stand_or_hit', function (table, seat) {
    if (isEntityExists(CasinoPedssID[table])) CasinoPedssID[table].taskPlayAnim("anim_casino_b@amb@casino@games@blackjack@dealer", `dealer_focus_player_0${seat + 1}_idle`, 3.0, 1.0, -1, 2, 0, false, false, false);
});

mp.events.add('lose_blackjack', function (table) {
    if (isEntityExists(CasinoPedssID[table])) CasinoPedssID[table].taskPlayAnim("anim_casino_b@amb@casino@games@blackjack@dealer", "reaction_bad", 3.0, 1.0, -1, 2, 0, false, false, false);
});

mp.events.add('push_blackjack', function (table) {
    if (isEntityExists(CasinoPedssID[table])) CasinoPedssID[table].taskPlayAnim("anim_casino_b@amb@casino@games@blackjack@dealer", "reaction_impartial", 3.0, 1.0, -1, 2, 0, false, false, false);
});

mp.events.add('request_card', function (player) {
    player.taskPlayAnim("anim_casino_b@amb@casino@games@blackjack@player", "request_card", 3.0, 1.0, -1, 2, 0, false, false, false);
});

mp.events.add('decline_card', function (player) {
    player.taskPlayAnim("anim_casino_b@amb@casino@games@blackjack@player", "decline_card_001", 3.0, 1.0, -1, 2, 0, false, false, false);
});

mp.events.add('exit_table', function (player, table, seat) {
    if (player == mp.players.local) {
        mp.blackJackActive = false
        canDoBets = false;

        var boneIndex = BlackJackTables[table].getBoneIndexByName(BlackJackSeats[seat]);
        const bonePos = BlackJackTables[table].getWorldPositionOfBone(boneIndex);

        const sitUpAnim = ['sit_exit_left', 'sit_exit_right'][Math.floor(Math.random() * 2)];
        mp.players.local.clearTasksImmediately();
        mp.players.local.taskPlayAnimAdvanced("anim_casino_b@amb@casino@games@shared@player@", sitUpAnim, bonePos.x, bonePos.y, bonePos.z + 1, 0, 0, mp.players.local.getHeading(), 8, -8, -1, 513, 0, 0, 0);
        setTimeout(() => {
            mp.players.local.stopAnimTask("anim_casino_b@amb@casino@games@shared@player@", sitUpAnim, 3);
            mp.players.local.clearTasksImmediately();
            mp.players.local.clearTasks();
            mp.players.local.freezePosition(false);
        }, 3000);
    }
});

mp.events.add('win_blackjack', function (table) {
    if (isEntityExists(CasinoPedssID[table])) CasinoPedssID[table].taskPlayAnim("anim_casino_b@amb@casino@games@blackjack@dealer", "reaction_good", 3.0, 1.0, -1, 2, 0, false, false, false);
});

mp.events.add('bet_blackjack', function (table, seat, player) {
    player.taskPlayAnim("anim_casino_b@amb@casino@games@blackjack@player", "place_bet_small", 3.0, 1.0, -1, 2, 0, false, false, false);
    let tablePos = BlackJackTablesPos[table];
    let betOffset = BlakcJackBetsOffset[seat];
    let newCardPos = mp.game.object.getObjectOffsetFromCoords(tablePos.x, tablePos.y, tablePos.z, BlackJackTablesHeading[table], betOffset.x, betOffset.y, betOffset.z);
    setTimeout(() => {
        betBlackjack[table].push(mp.objects.new(mp.game.joaat(`vw_prop_chip_100dollar_x1`), new mp.Vector3(newCardPos.x, newCardPos.y, newCardPos.z),
            {
                rotation: new mp.Vector3(0, 0, 0),
                alpha: 255,
                dimension: mp.casino_dimension,
            }));


    }, 500);
});

mp.events.add('seat_to_blackjack_table', function (table, seat, player) {
    if (player == mp.players.local) {
        if (!isEntityExists(BlackJackTables[table])) return

        const sitAnims = ['sit_enter_left_side', 'sit_enter_right_side'];
        let animationIndex = 1;

        mp.blackJackActive = true
        canDoBets = true;

        var boneIndex = BlackJackTables[table].getBoneIndexByName(BlackJackSeats[seat]);
        const bonePos = BlackJackTables[table].getWorldPositionOfBone(boneIndex);
        const rotation = BlackJackTablesSeatsHeading[table][seat] + 100;

        let offset = mp.players.local.getOffsetFromGivenWorldCoords(bonePos.x, bonePos.y, bonePos.z);
        if (offset.x > 0)
            animationIndex = 0;
        mp.players.local.taskPlayAnimAdvanced("anim_casino_b@amb@casino@games@shared@player@", sitAnims[animationIndex], bonePos.x, bonePos.y, bonePos.z, 0, 0, rotation, 1e3, -1e3, -1, 5642, 0, 2, 1);

        setTimeout(() => mp.players.local.taskPlayAnim("anim_casino_b@amb@casino@games@shared@player@", "idle_cardgames", 1, 0, -1, 49, 1, false, false, false), 3000);
    }
});

function GetDistanceBetweenPoints3D(v1, v2) {
    return Math.abs(Math.sqrt(Math.pow(v2.x - v1.x, 2) +
        Math.pow(v2.y - v1.y, 2) +
        Math.pow(v2.z - v1.z, 2)));
}

function GetClosestTable(Position) {
    let ClosestTable = null;
    let ClosestDistance = 2.3;
    for (const Table of BlackJackTables) {
        const Distance = GetDistanceBetweenPoints3D(Position, Table.position);
        if (Distance < ClosestDistance) {
            ClosestTable = Table;
            ClosestDistance = Distance;
        }
    }
    return ClosestTable;
}

function GetClosestSeatData(Table, Position) {
    if (!Table)
        return;
    let ClosestChair = null;
    let ClosestDistance = 1.6;
    for (let key in BlackJackSeats) {
        const Chair = BlackJackSeats[key]
        var boneIndex = Table.getBoneIndexByName(Chair);
        const ObjectPos = Table.getWorldPositionOfBone(boneIndex);
        const Distance = GetDistanceBetweenPoints3D(Position, ObjectPos);
        if (Distance < ClosestDistance) {
            ClosestChair = {
                Position: ObjectPos,
                Rotation: Chair.heading,
                ChairID: key
            };
            ClosestDistance = Distance;
        }
    }
    return ClosestChair;
}

function PokerRender() {
    const NearTable = GetClosestTable(mp.players.local.position);
    if (!mp.blackJackActive) {
        if (NearTable == null)
            return;
        const Seat = GetClosestSeatData(NearTable, mp.players.local.position);
        if (Seat == null)
            return;
        mp.game.graphics.drawMarker(20, Seat.Position.x, Seat.Position.y, Seat.Position.z + 1, 0.0, 0.0, 0.0, 180.0, 0.0, 0.0, 0.4, 0.4, 0.4, 255, 165, 0, 100, true, true, 2, true, null, null, false);
    }
}

mp.events.add("render", PokerRender);

function getAnimSeat(seatid) {
    if (seatid == 0)
        return "sit_enter_left";
    else if (seatid == 1)
        return "sit_enter_left_side";
    else if (seatid == 2)
        return "sit_enter_right_side";
    else if (seatid == 3)
        return "sit_enter_right";
}

mp.peds.newLegacy = (hash, position, heading, dimension) => {
    let ped = mp.peds.new(hash, position, heading, dimension);
    ped.streamInHandler = true;
    ped.streamOutHandler = true;
    return ped;
};

mp.events.add('GET_OBJECT_OFFSET_FROM_CORD', function (x, y, z, heading, ox, oy, oz) {
    //let num1, num2, num3;
    var retval = mp.game.object.getObjectOffsetFromCoords(x, y, z, heading, ox, oy, oz);
    mp.events.call('notify', 4, 9, `${retval}`, 10000);
    mp.events.callRemote("otvet", retval.x, retval.y, retval.z);
});



mp.keys.bindEx(0x26, false, function () { // стрелка вверх
    if (canDoBets) {
        mp.events.callRemote('blackJackBetUp');
    }
});
mp.keys.bindEx(0x28, false, function () { // стрелка вверх
    if (canDoBets) {
        mp.events.callRemote('blackJackBetDown');
    }
});

mp.keys.bindEx(0x0D, false, function () { // стрелка вверх
    if (canDoBets) {
        mp.events.callRemote('blackJackSetBet');
    }
});

mp.keys.bindEx(0x20, false, function () { // стрелка вверх
    if (canDoBets) {
        mp.events.callRemote('blackJackHit');
    }
});

let lastCheck = new Date().getTime();

mp.keys.bindEx(0x45, false, () => { // E Key
    if (new Date().getTime() - lastCheck < 500)
        return;

    if (canDoBets) {
        mp.events.callRemote('blackJackClose');
    }
    else {
        let nearTable = GetClosestTable(mp.players.local.position);
        if (!nearTable)
            return;
        const nearSeat = GetClosestSeatData(nearTable, mp.players.local.position);
        if (!nearSeat)
            return;

        mp.events.callRemote("blackJackSeat", BlackJackTables.indexOf(nearTable), nearSeat.ChairID);
    }

    lastCheck = new Date().getTime();
});

mp.events.add('casinoKeys', (act, ...data) => {
    switch (act) {
        case 'setChips':
            browserMenu.call(`blackJackAPI`, `setChips`, data[0], data[1]);
            break;
        case 'setBet':
            browserMenu.call(`blackJackAPI`, `setBet`, data[0], data[1]);
            break;
        case 'setTime':
            browserMenu.call(`blackJackAPI`, `setTime`, data[0], data[1]);
            break;
        case 'toggleStart':
            browserMenu.call(`blackJackAPI`, `toggleStart`, data[0]);
            break;
        case 'show':
            browserMenu.call(`blackJackAPI`, `show`);
            break;
        case 'hide':
            browserMenu.call(`blackJackAPI`, `hide`);
            break;
        case 'setCurrentChips':
            browserMenu.call(`blackJackAPI`, `setCurrentChips`, data[0]);
            break;
        case 'setMinBet':
            browserMenu.call(`blackJackAPI`, `setMinBet`, data[0]);
            break;
    }
});

}; a; }
{let a = function scriptEntryPoint(mp) {
let canDoBets = true;
let betObject = null;
let closestChipSpot = null;
let rouletteTable = null;
let rouletteSeat = null;
let startRoullete = false;
let roulleteCam = false;
var blockControls = false;
var setBet = false;

let RouletteTables = [];

let betRoulette = [
	[],
	[]
];


var CasinoPeds = [
	{ Hash: 0x1422D45B, Pos: new mp.Vector3(1145.337, 267.7967, -51.8409), Angle: 47.5 },
	{ Hash: 0x1422D45B, Pos: new mp.Vector3(1149.791, 263.1628, -51.8409), Angle: 222.2 },
];

var PrizePed = [
	{ Hash: 0x1422D45B, Pos: new mp.Vector3(1087.727, 221.20876, -49.220415), Angle: 178 },
];


const RouletteTablesSeatsHeading = [
	[45, -45, -135, -135],
	[225, 135, 45, 45],

	[110.5, 65.5, 20.5, 330.5],
	[216.5, 161.5, 116.5, 66.5],
];

const RouletteSeats = {
	0: "Chair_Base_04",
	1: "Chair_Base_03",
	2: "Chair_Base_02",
	3: "Chair_Base_01"
};


var CasinoPedsID = [];

var rouletteCamera = null;
var betCoords = null;

const RouletteCameraPos = [

	new mp.Vector3(1143.73, 268.9541, -52.960873 + 3.5),
	new mp.Vector3(1151.4585, 262.04517, -52.96084 + 3.5),
];


const RouletteCameraRot = [
	225,
	45
];


const RouletteCameraRotStop = [
	[-173, -112, -160],
	[13, 68, 17]
];



const RouletteTablesPos = [
	new mp.Vector3(1144.814, 268.2634, -52.8409),
	new mp.Vector3(1150.355, 262.7224, -52.8409),
];


const RouletteTablesHeading = [
	-135,
	45
];


setTimeout(function () {
	for (let tbs = 0; tbs < RouletteTablesPos.length; tbs++) {
		RouletteTables[tbs] = {};
		RouletteTables[tbs].table = mp.objects.new(mp.game.joaat('vw_prop_casino_roulette_01'), new mp.Vector3(RouletteTablesPos[tbs].x, RouletteTablesPos[tbs].y, RouletteTablesPos[tbs].z), {
			rotation: new mp.Vector3(0, 0, RouletteTablesHeading[tbs]),
			alpha: 255,
			dimension: mp.casino_dimension
		});
		RouletteTables[tbs].ball = mp.objects.new(87196104, new mp.Vector3(RouletteTablesPos[tbs].x, RouletteTablesPos[tbs].y, RouletteTablesPos[tbs].z), {
			dimension: mp.casino_dimension
		});
	}
}, 1000);


setTimeout(function () {
	mp.game.streaming.requestAnimDict("anim_casino_b@amb@casino@games@shared@dealer@");
	let n = 0;
	CasinoPeds.forEach(ped => {
		CasinoPedsID[n] = mp.peds.new(ped.Hash, ped.Pos, ped.Angle, mp.casino_dimension);
		CasinoPedsID[n].setComponentVariation(0, 2, 1, 0);
		CasinoPedsID[n].setComponentVariation(1, 1, 0, 0);
		CasinoPedsID[n].setComponentVariation(2, 2, 0, 0);
		CasinoPedsID[n].setComponentVariation(3, 0, n + 2, 0);
		CasinoPedsID[n].setComponentVariation(4, 0, 0, 0);
		CasinoPedsID[n].setComponentVariation(6, 1, 0, 0);
		CasinoPedsID[n].setComponentVariation(7, 2, 0, 0);
		CasinoPedsID[n].setComponentVariation(8, 1, 0, 0);
		CasinoPedsID[n].setComponentVariation(10, 1, 0, 0);
		CasinoPedsID[n].setComponentVariation(11, 1, 0, 0);
		CasinoPedsID[n].setConfigFlag(185, true);
		CasinoPedsID[n].setConfigFlag(108, true);
		CasinoPedsID[n].setConfigFlag(208, true);
		CasinoPedsID[n].taskPlayAnim("anim_casino_b@amb@casino@games@shared@dealer@", "idle", 1000.0, -2.0, -1, 2, 1148846080, false, false, false);
		n = n + 1;
		//CasinoPedsID[0].playFacialAnim("idle_facial", "anim_casino_b@amb@casino@games@shared@dealer@");
		//mp.game.invoke("0xEA47FE3719165B94", CasinoPedsID[0].handle, "anim_casino_b@amb@casino@games@shared@dealer@", "idle", 1000.0, -2.0, -1, 2, 1148846080, false, false, false)
	});
	n = 0;

	PrizePed.forEach(ped => {
		var ped = mp.peds.new(ped.Hash, ped.Pos, ped.Angle, mp.casino_dimension);
		ped.setComponentVariation(0, 2, 1, 0);
		ped.setComponentVariation(1, 1, 0, 0);
		ped.setComponentVariation(2, 2, 0, 0);
		ped.setComponentVariation(3, 0, n + 2, 0);
		ped.setComponentVariation(4, 0, 0, 0);
		ped.setComponentVariation(6, 1, 0, 0);
		ped.setComponentVariation(7, 2, 0, 0);
		ped.setComponentVariation(8, 1, 0, 0);
		ped.setComponentVariation(10, 1, 0, 0);
		ped.setComponentVariation(11, 1, 0, 0);
		ped.setConfigFlag(185, true);
		ped.setConfigFlag(108, true);
		ped.setConfigFlag(208, true);
	})

}, 10000);

mp.game.streaming.requestAnimDict("anim_casino_b@amb@casino@games@shared@dealer@");
mp.game.streaming.requestAnimDict("anim_casino_b@amb@casino@games@shared@player@");
mp.game.streaming.requestAnimDict("anim_casino_b@amb@casino@games@roulette@table");
mp.game.streaming.requestAnimDict("anim_casino_b@amb@casino@games@roulette@dealer");
mp.game.streaming.requestAnimDict("anim_casino_b@amb@casino@games@roulette@ped_male@seat_1@regular@01a@base");
mp.game.streaming.requestAnimDict("anim_casino_a@amb@casino@games@lucky7wheel@male");
mp.game.streaming.requestIpl("vw_casino_main");

mp.events.add('delWheelCam', () => {
	rouletteCamera.destroy(true);
	rouletteCamera = null;
	mp.game.cam.renderScriptCams(false, true, 1000, true, false);
});

mp.events.add('spin_wheel', function (tb, needSpins, endTable, endBall) {
	RouletteTables[tb].table.playAnim("intro_wheel", "anim_casino_b@amb@casino@games@roulette@table", 1000.0, false, true, true, 0, 131072);
	RouletteTables[tb].table.forceAiAndAnimationUpdate();
	const ballPos = RouletteTables[tb].table.getWorldPositionOfBone(RouletteTables[tb].table.getBoneIndexByName("Roulette_Wheel"));
	RouletteTables[tb].ball.position = ballPos;

	RouletteTables[tb].ball.setCoordsNoOffset(ballPos.x, ballPos.y, ballPos.z, !1, !1, !1);
	const ballRot = RouletteTables[tb].table.getRotation(2);
	RouletteTables[tb].ball.setRotation(ballRot.x, ballRot.y, ballRot.z + 90, 2, !1)
	//RouletteTables[tb].ball.rotation = new mp.Vector3(0.0, 0.0, 0);

	RouletteTables[tb].ball.playAnim("intro_ball", "anim_casino_b@amb@casino@games@roulette@table", 1000.0, false, true, false, 0, 136704); // loop, freezeLastFrame, ?
	RouletteTables[tb].ball.forceAiAndAnimationUpdate();

	RouletteTables[tb].spins = 0;
	RouletteTables[tb].lastSpinTime = 0;
	RouletteTables[tb].needSpins = needSpins;
	RouletteTables[tb].endTable = endTable;
	RouletteTables[tb].endBall = endBall;

	CasinoPedsID[tb].taskPlayAnim("anim_casino_b@amb@casino@games@roulette@dealer", "spin_wheel", 8.0, 1, -1, 2, 0.0, false, false, false);

	setTimeout(
		function () {
			CasinoPedsID[tb].taskPlayAnim("anim_casino_b@amb@casino@games@roulette@dealer", "idle", 8.0, 1, -1, 1, 0.0, false, false, false);

		}, 8000
	);
});

mp.events.add('render', () => {
	if (blockControls) {
		mp.game.controls.disableControlAction(0, 257, true); // стрельба
		mp.game.controls.disableControlAction(0, 22, true);
		mp.game.controls.disableControlAction(2, 25, true);
		mp.game.controls.disableControlAction(0, 23, true); // INPUT_ENTER

		mp.game.controls.disableControlAction(2, 24, true);
		mp.game.controls.disableControlAction(2, 69, true);
		mp.game.controls.disableControlAction(2, 70, true);
		mp.game.controls.disableControlAction(2, 92, true);

		mp.game.controls.disableControlAction(2, 140, true);
		mp.game.controls.disableControlAction(2, 141, true);
		mp.game.controls.disableControlAction(2, 263, true);
		mp.game.controls.disableControlAction(2, 264, true);

		mp.game.controls.disableControlAction(0, 21, true);
		mp.game.controls.disableControlAction(0, 23, true);
		mp.game.controls.disableControlAction(0, 32, true);
		mp.game.controls.disableControlAction(0, 33, true);
		mp.game.controls.disableControlAction(0, 34, true);
		mp.game.controls.disableControlAction(0, 35, true);

	}

	if (setBet && rouletteCamera != null && rouletteTable != null && startRoullete == false && !mp.gui.cursor.visible) {
		if (canDoBets && betObject == null) {
			betObject = mp.objects.new(mp.game.joaat("vw_prop_chip_100dollar_x1"), new mp.Vector3(RouletteTablesPos[rouletteTable].x, RouletteTablesPos[rouletteTable].y, RouletteTablesPos[rouletteTable].z + 0.4), {
				dimension: mp.casino_dimension
			});
			betObject.setCollision(false, false);
		}
		if (betObject != null && canDoBets) {
			/*if (mp.game.controls.isDisabledControlJustReleased(0, 25) && !mp.gui.cursor.visible) // ПКМ
			{
				if (closestChipSpot != null) mp.events.callRemote("server_remove_roulette_bet", closestChipSpot);
			}*/

			if (mp.game.controls.isDisabledControlJustReleased(0, 24) && !mp.gui.cursor.visible) // ЛКМ
			{
				if (closestChipSpot != null) mp.events.callRemote("server_make_roulette_bet", closestChipSpot);
			}

			let drawObj = getCameraHitCoord();
			if (drawObj != null) {

				// let height = betObject.getHeight(editorFocusObject.position.x, editorFocusObject.position.y, editorFocusObject.position.z, false, true);
				//drawObj.position.z = RouletteTablesPos[rouletteTable].z;
				//drawObj.position.z = mp.game.gameplay.getGroundZFor3dCoord(drawObj.position.x, drawObj.position.y, drawObj.position.z, parseFloat(0), false);
				getClosestChipSpot(new mp.Vector3(drawObj.position.x, drawObj.position.y, drawObj.position.z));

				if (betCoords == null) {
					betObject.setCoordsNoOffset(drawObj.position.x, drawObj.position.y, RouletteTablesPos[rouletteTable].z + 0.95, false, false, false);
					getClosestChipSpot(new mp.Vector3(drawObj.position.x, drawObj.position.y, drawObj.position.z));
				}
				else {

					betObject.setCoordsNoOffset(drawObj.position.x, drawObj.position.y, RouletteTablesPos[rouletteTable].z + 0.95, false, false, false);
					getClosestChipSpot(new mp.Vector3(drawObj.position.x, drawObj.position.y, drawObj.position.z));
				}

				//getClosestChipSpot(new mp.Vector3(drawObj.position.x, drawObj.position.y, drawObj.position.z));
			}
		}


		let rightAxisX = mp.game.controls.getDisabledControlNormal(0, 220);
		let rightAxisY = mp.game.controls.getDisabledControlNormal(0, 221);

		let leftAxisX = 0;
		let leftAxisY = 0;

		let pos = rouletteCamera.getCoord();
		let rr = rouletteCamera.getDirection();
		let vector = new mp.Vector3(0, 0, 0);
		vector.x = rr.x * leftAxisY;
		vector.y = rr.y * leftAxisY;
		vector.z = rr.z * leftAxisY;

		let upVector = new mp.Vector3(0, 0, 1);
		let rightVector = getCrossProduct(getNormalizedVector(rr), getNormalizedVector(upVector));
		rightVector.x *= leftAxisX * 0.5;
		rightVector.y *= leftAxisX * 0.5;
		rightVector.z *= leftAxisX * 0.5;

		let rot = rouletteCamera.getRot(2);

		let rotx = rot.x + rightAxisY * -5.0;
		let rotz = rot.z + rightAxisX * -5.0;

		if (rotx > -57.5) rotx = -57.5;
		if (rotx < -70) rotx = -70;

		if (rotz < RouletteCameraRotStop[rouletteTable][0]) rotz = RouletteCameraRotStop[rouletteTable][0];
		if (rotz > RouletteCameraRotStop[rouletteTable][1]) rotz = RouletteCameraRotStop[rouletteTable][1];

		if (rotx < -69 && rotz < RouletteCameraRotStop[rouletteTable][2]) {
			rotz = RouletteCameraRotStop[rouletteTable][2];
			rotx = -69;
		}


		rouletteCamera.setRot(rotx, 0.0, rotz, 2);

		let cp = rouletteCamera.getRot(2);
	}
	if (startRoullete == true && rouletteTable != null && !roulleteCam) {

		const ballPos = RouletteTables[rouletteTable].table.getWorldPositionOfBone(RouletteTables[rouletteTable].table.getBoneIndexByName("Roulette_Wheel"));
		//rouletteCamera.setActive(false);
		//rouletteCamera.destroy();
		//rouletteCamera = mp.cameras.new('default', new mp.Vector3(ballPos.x, ballPos.y, ballPos.z+1.5), new mp.Vector3(0,0,0), 40);
		rouletteCamera.setCoord(RouletteTablesPos[rouletteTable].x, RouletteTablesPos[rouletteTable].y, RouletteTablesPos[rouletteTable].z + 1.5);
		rouletteCamera.pointAtCoord(ballPos.x, ballPos.y, ballPos.z);
		//rouletteCamera.setRot(90.0, 0, 225, 2);
		rouletteCamera.setActive(true);
		mp.game.cam.renderScriptCams(true, true, 2500, true, false);
		roulleteCam = true;
	}
	if (startRoullete == false && rouletteTable != null && roulleteCam) {

		roulleteCam = false;
		rouletteCamera.destroy();
		rouletteCamera = mp.cameras.new('default', RouletteCameraPos[rouletteTable], new mp.Vector3(0, 0, 0), 40);
		rouletteCamera.setRot(-63, 0, RouletteCameraRot[rouletteTable], 2);
		rouletteCamera.setActive(true);
		mp.game.cam.renderScriptCams(true, true, 1500, true, false);
	}

});

mp.events.add('render', rouletteRender);
function rouletteRender() {


	for (var i = 0; i < RouletteTables.length; i++) {
		if (RouletteTables[i].table.isPlayingAnim("anim_casino_b@amb@casino@games@roulette@table", "intro_wheel", 3)) {
			if (RouletteTables[i].table.getAnimCurrentTime("anim_casino_b@amb@casino@games@roulette@table", "intro_wheel") > 0.9425) {
				RouletteTables[i].table.playAnim("loop_wheel", "anim_casino_b@amb@casino@games@roulette@table", 1000.0, true, true, true, 0, 131072);
			}
		}

		if (RouletteTables[i].ball.isPlayingAnim("anim_casino_b@amb@casino@games@roulette@table", "intro_ball", 3)) {
			if (RouletteTables[i].ball.getAnimCurrentTime("anim_casino_b@amb@casino@games@roulette@table", "intro_ball") > 0.99) {
				const ballPos = RouletteTables[i].table.getWorldPositionOfBone(RouletteTables[i].table.getBoneIndexByName("Roulette_Wheel"));
				const ballRot = RouletteTables[i].table.getRotation(2);
				RouletteTables[i].ball.position = new mp.Vector3(ballPos.x, ballPos.y, ballPos.z);
				RouletteTables[i].ball.rotation = new mp.Vector3(ballRot.x, ballRot.y, ballRot.z + 90);

				RouletteTables[i].ball.playAnim("loop_ball", "anim_casino_b@amb@casino@games@roulette@table", 1000.0, true, true, false, 0, 136704);
			}
		}

		if (RouletteTables[i].table.isPlayingAnim("anim_casino_b@amb@casino@games@roulette@table", "loop_wheel", 3)) {

			if (RouletteTables[i].table.getAnimCurrentTime("anim_casino_b@amb@casino@games@roulette@table", "loop_wheel") >= 0.9 && Date.now() - RouletteTables[i].lastSpinTime > 1000) {
				RouletteTables[i].spins++;
				RouletteTables[i].lastSpinTime = Date.now();
			}
			if (RouletteTables[i].spins == RouletteTables[i].needSpins - 1) {
				RouletteTables[i].ball.setAnimSpeed("anim_casino_b@amb@casino@games@roulette@table", "loop_ball", 0.70);
			}
			if (RouletteTables[i].spins == RouletteTables[i].needSpins && RouletteTables[i].table.getAnimCurrentTime("anim_casino_b@amb@casino@games@roulette@table", "loop_wheel") > 0.89) {
				RouletteTables[i].table.playAnim(RouletteTables[i].endTable, "anim_casino_b@amb@casino@games@roulette@table", 1000.0, false, true, true, 0, 131072);
				const ballPos = RouletteTables[i].table.getWorldPositionOfBone(RouletteTables[i].table.getBoneIndexByName("Roulette_Wheel"));
				const ballRot = RouletteTables[i].table.getRotation(2);
				RouletteTables[i].ball.position = new mp.Vector3(ballPos.x, ballPos.y, ballPos.z);
				RouletteTables[i].ball.rotation = new mp.Vector3(ballRot.x, ballRot.y, ballRot.z + 90);
				RouletteTables[i].ball.playAnim(RouletteTables[i].endBall, "anim_casino_b@amb@casino@games@roulette@table", 1000.0, false, true, true, 0, 136704);
			}
		}
	}
}

mp.events.add('casinoBet', () => {
	setBet = true;
	setCursor(false)
});


mp.events.add('clean_chips', function (table) {

	CasinoPedsID[table].taskPlayAnim("anim_casino_b@amb@casino@games@roulette@dealer", "clear_chips_intro", 3.0, 1.0, -1, 2, 0, false, false, false);

	for (let i = 0; i < betRoulette[table].length; i++) {
		if (betRoulette[table][i] != null)
			betRoulette[table][i].destroy();
	}

	betRoulette[table] = [];

	setTimeout(() => {
		CasinoPedsID[table].taskPlayAnim("anim_casino_b@amb@casino@games@roulette@dealer", "clear_chips_outro", 3.0, 1.0, -1, 2, 0, false, false, false);
	}, 1000);
});


mp.events.add('start_roulette', function () {
	startRoullete = true;
	browserMenu.call(`casino`, `hide`);
});

mp.events.add('stop_roulette', function () {
	startRoullete = false;
	browserMenu.call(`casino`, `rest`);
});

mp.events.add('bet_roulette', function (table, spot) {
	//player.taskPlayAnim("anim_casino_b@amb@casino@games@blackjack@player", "place_bet_small", 3.0, 1.0, -1, 2, 0, false, false, false);
	let tablePos = RouletteTablesPos[table];
	let betOffset = tableChipsOffsets[spot];
	let newCardPos = mp.game.object.getObjectOffsetFromCoords(tablePos.x, tablePos.y, tablePos.z, RouletteTablesHeading[table], betOffset[0], betOffset[1], betOffset[2]);

	betRoulette[table].push(mp.objects.new(mp.game.joaat(`vw_prop_chip_100dollar_x1`), new mp.Vector3(newCardPos.x, newCardPos.y, newCardPos.z),
		{
			rotation: new mp.Vector3(0, 0, 0),
			alpha: 255,
			dimension: mp.casino_dimension,
		}));
});

mp.events.add('seat_to_roulette_table', function (table) {
	mp.events.call("displayRadar", false)
	mp.events.call("displayChat", false)
	mp.events.call("hudControl.enable", false)
	mp.casinoActive = true
	setCursor(true)
	mp.players.local.freezePosition(true);
	rouletteTable = table;
	setBet = false;
	rouletteCamera = mp.cameras.new('default', RouletteCameraPos[table], new mp.Vector3(90, 0, 0), 40);
	rouletteCamera.setRot(-63, 0, RouletteCameraRot[table], 2);
	// rouletteCamera.pointAtCoord(RouletteTablesPos[table].x, RouletteTablesPos[table].y, RouletteTablesPos[table].z);
	rouletteCamera.setActive(true);
	//mp.players.local.freezePosition(true);
	mp.game.cam.renderScriptCams(true, true, 1500, true, false);
	blockControls = true;
});

mp.events.add('exit_roulette', function () {
	//entity.taskPlayAnim("anim_casino_b@amb@casino@games@shared@player@", "sit_exit_left", 3.0, 1.0, 2500, 2, 0, false, false, false);
	try {
		mp.events.call("displayRadar", true)
		mp.events.call("displayChat", true)
		mp.events.call("hudControl.enable", true)
		setCursor(false)
		mp.casinoActive = false
		RouletteTables[rouletteTable].table.setCollision(true, false);
		rouletteCamera.destroy(true);
		rouletteCamera = null;
		rouletteTable = null;
		mp.game.cam.renderScriptCams(false, true, 1000, true, false);
		mp.players.local.freezePosition(false);
		blockControls = false;
		setBet = false;

		clearTableMarkers();
		if (betObject != null || betObject !== undefined) {
			betObject.destroy();
			betObject = null;
		}
	}
	catch {

	}
});

function getCameraHitCoord() {
	let position = rouletteCamera.getCoord();
	let direction = rouletteCamera.getDirection();
	let farAway = new mp.Vector3((direction.x * 3) + position.x, (direction.y * 3) + position.y, (direction.z * 3) + position.z);

	let hitData = mp.raycasting.testPointToPoint(position, farAway);
	// mp.game.graphics.drawLine(position.x, position.y, position.z, farAway.x, farAway.y, farAway.z, 255, 0, 0, 255);
	if (hitData != undefined) {
		return hitData;
	}
	return null;
}

function getNormalizedVector(vector) {
	let mag = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
	vector.x = vector.x / mag;
	vector.y = vector.y / mag;
	vector.z = vector.z / mag;
	return vector;
}

function getCrossProduct(v1, v2) {
	let vector = new mp.Vector3(0, 0, 0);
	vector.x = v1.y * v2.z - v1.z * v2.y;
	vector.y = v1.z * v2.x - v1.x * v2.z;
	vector.z = v1.x * v2.y - v1.y * v2.x;
	return vector;
}

let tableMarkers = [];
const tableMarkersOffsets =
{
	"0": [-0.137451171875, -0.146942138671875, 0.9449996948242188],
	"00": [-0.1387939453125, 0.10546875, 0.9449996948242188],
	"1": [-0.0560302734375, -0.1898193359375, 0.9449996948242188],
	"2": [-0.0567626953125, -0.024017333984375, 0.9449996948242188],
	"3": [-0.056884765625, 0.141632080078125, 0.9449996948242188],
	"4": [0.02392578125, -0.187347412109375, 0.9449996948242188],
	"5": [0.0240478515625, -0.02471923828125, 0.9449996948242188],
	"6": [0.02392578125, 0.1422119140625, 0.9449996948242188],
	"7": [0.1038818359375, -0.18902587890625, 0.9449996948242188],
	"8": [0.1044921875, -0.023834228515625, 0.9449996948242188],
	"9": [0.10546875, 0.1419677734375, 0.9449996948242188],
	"10": [0.18701171875, -0.188385009765625, 0.9449996948242188],
	"11": [0.18603515625, -0.0238037109375, 0.9449996948242188],
	"12": [0.1851806640625, 0.143157958984375, 0.9449996948242188],
	"13": [0.2677001953125, -0.18780517578125, 0.9449996948242188],
	"14": [0.26806640625, -0.02301025390625, 0.9449996948242188],
	"15": [0.26611328125, 0.143310546875, 0.9449996948242188],
	"16": [0.3497314453125, -0.18829345703125, 0.9449996948242188],
	"17": [0.349609375, -0.023101806640625, 0.9449996948242188],
	"18": [0.3497314453125, 0.142242431640625, 0.9449996948242188],
	"19": [0.4307861328125, -0.18829345703125, 0.9449996948242188],
	"20": [0.4312744140625, -0.02392578125, 0.9449996948242188],
	"21": [0.431884765625, 0.1416015625, 0.9449996948242188],
	"22": [0.51220703125, -0.188873291015625, 0.9449996948242188],
	"23": [0.5123291015625, -0.023773193359375, 0.9449996948242188],
	"24": [0.511962890625, 0.14215087890625, 0.9449996948242188],
	"25": [0.5931396484375, -0.18890380859375, 0.9449996948242188],
	"26": [0.59375, -0.023651123046875, 0.9449996948242188],
	"27": [0.59375, 0.14080810546875, 0.9449996948242188],
	"28": [0.67529296875, -0.189849853515625, 0.9449996948242188],
	"29": [0.6751708984375, -0.02337646484375, 0.9449996948242188],
	"30": [0.674560546875, 0.141845703125, 0.9449996948242188],
	"31": [0.756591796875, -0.18798828125, 0.9449996948242188],
	"32": [0.7547607421875, -0.0234375, 0.9449996948242188],
	"33": [0.7554931640625, 0.14263916015625, 0.9449996948242188],
	"34": [0.836669921875, -0.188323974609375, 0.9449996948242188],
	"35": [0.8365478515625, -0.0244140625, 0.9449996948242188],
	"36": [0.8359375, 0.14276123046875, 0.9449996948242188]
};

const tableChipsOffsets =
	[
		[-0.154541015625, -0.150604248046875, 0.9449996948242188, ["0"]],
		[-0.1561279296875, 0.11505126953125, 0.9449996948242188, ["00"]],
		[-0.059326171875, -0.18701171875, 0.9449996948242188, ["1"]],
		[-0.058349609375, -0.019378662109375, 0.9449996948242188, ["2"]],
		[-0.0587158203125, 0.142059326171875, 0.9449996948242188, ["3"]],
		[0.02294921875, -0.1920166015625, 0.9449996948242188, ["4"]],
		[0.023193359375, -0.01947021484375, 0.9449996948242188, ["5"]],
		[0.024658203125, 0.147369384765625, 0.9449996948242188, ["6"]],
		[0.105224609375, -0.1876220703125, 0.9449996948242188, ["7"]],
		[0.1055908203125, -0.028472900390625, 0.9449996948242188, ["8"]],
		[0.10400390625, 0.147430419921875, 0.9449996948242188, ["9"]],
		[0.187744140625, -0.191802978515625, 0.9449996948242188, ["10"]],
		[0.1866455078125, -0.02667236328125, 0.9449996948242188, ["11"]],
		[0.1842041015625, 0.145965576171875, 0.9449996948242188, ["12"]],
		[0.2696533203125, -0.182464599609375, 0.9449996948242188, ["13"]],
		[0.265869140625, -0.027862548828125, 0.9449996948242188, ["14"]],
		[0.2667236328125, 0.138946533203125, 0.9449996948242188, ["15"]],
		[0.35009765625, -0.186126708984375, 0.9449996948242188, ["16"]],
		[0.348876953125, -0.027740478515625, 0.9449996948242188, ["17"]],
		[0.3497314453125, 0.14715576171875, 0.9449996948242188, ["18"]],
		[0.43212890625, -0.17864990234375, 0.9449996948242188, ["19"]],
		[0.4337158203125, -0.02508544921875, 0.9449996948242188, ["20"]],
		[0.430419921875, 0.138336181640625, 0.9449996948242188, ["21"]],
		[0.51416015625, -0.18603515625, 0.9449996948242188, ["22"]],
		[0.5135498046875, -0.02301025390625, 0.9449996948242188, ["23"]],
		[0.5146484375, 0.14239501953125, 0.9449996948242188, ["24"]],
		[0.59130859375, -0.192413330078125, 0.9449996948242188, ["25"]],
		[0.596923828125, -0.022216796875, 0.9449996948242188, ["26"]],
		[0.5924072265625, 0.14385986328125, 0.9449996948242188, ["27"]],
		[0.6749267578125, -0.187286376953125, 0.9449996948242188, ["28"]],
		[0.67431640625, -0.0262451171875, 0.9449996948242188, ["29"]],
		[0.6756591796875, 0.140594482421875, 0.9449996948242188, ["30"]],
		[0.7542724609375, -0.19415283203125, 0.9449996948242188, ["31"]],
		[0.7542724609375, -0.01898193359375, 0.9449996948242188, ["32"]],
		[0.75439453125, 0.1448974609375, 0.9449996948242188, ["33"]],
		[0.8392333984375, -0.18951416015625, 0.9449996948242188, ["34"]],
		[0.837646484375, -0.023468017578125, 0.9449996948242188, ["35"]],
		[0.8380126953125, 0.14227294921875, 0.9449996948242188, ["36"]],
		[-0.1368408203125, -0.02099609375, 0.9449996948242188, ["0", "00"]],
		[-0.055419921875, -0.105804443359375, 0.9449996948242188, ["1", "2"]],
		[-0.0567626953125, 0.058624267578125, 0.9449996948242188, ["2", "3"]],
		[0.02587890625, -0.10498046875, 0.9449996948242188, ["4", "5"]],
		[0.0244140625, 0.058837890625, 0.9449996948242188, ["5", "6"]],
		[0.100341796875, -0.10382080078125, 0.9449996948242188, ["7", "8"]],
		[0.1064453125, 0.06011962890625, 0.9449996948242188, ["8", "9"]],
		[0.19189453125, -0.1060791015625, 0.9449996948242188, ["10", "11"]],
		[0.1856689453125, 0.05438232421875, 0.9449996948242188, ["11", "12"]],
		[0.27099609375, -0.10870361328125, 0.9449996948242188, ["13", "14"]],
		[0.2667236328125, 0.058502197265625, 0.9449996948242188, ["14", "15"]],
		[0.3463134765625, -0.107696533203125, 0.9449996948242188, ["16", "17"]],
		[0.34814453125, 0.0556640625, 0.9449996948242188, ["17", "18"]],
		[0.42822265625, -0.109130859375, 0.9449996948242188, ["19", "20"]],
		[0.4302978515625, 0.0550537109375, 0.9449996948242188, ["20", "21"]],
		[0.511474609375, -0.107421875, 0.9449996948242188, ["22", "23"]],
		[0.512451171875, 0.0614013671875, 0.9449996948242188, ["23", "24"]],
		[0.5980224609375, -0.107147216796875, 0.9449996948242188, ["25", "26"]],
		[0.596435546875, 0.0574951171875, 0.9449996948242188, ["26", "27"]],
		[0.673828125, -0.106903076171875, 0.9449996948242188, ["28", "29"]],
		[0.6751708984375, 0.058685302734375, 0.9449996948242188, ["29", "30"]],
		[0.7532958984375, -0.1102294921875, 0.9449996948242188, ["31", "32"]],
		[0.750244140625, 0.06103515625, 0.9449996948242188, ["32", "33"]],
		[0.834716796875, -0.108978271484375, 0.9449996948242188, ["34", "35"]],
		[0.836181640625, 0.05828857421875, 0.9449996948242188, ["35", "36"]],
		[-0.0167236328125, -0.187042236328125, 0.9449996948242188, ["1", "4"]],
		[-0.0167236328125, -0.02154541015625, 0.9449996948242188, ["2", "5"]],
		[-0.0164794921875, 0.140350341796875, 0.9449996948242188, ["3", "6"]],
		[0.064453125, -0.1865234375, 0.9449996948242188, ["4", "7"]],
		[0.06494140625, -0.01727294921875, 0.9449996948242188, ["5", "8"]],
		[0.068603515625, 0.13873291015625, 0.9449996948242188, ["6", "9"]],
		[0.144287109375, -0.184173583984375, 0.9449996948242188, ["7", "10"]],
		[0.14501953125, -0.024139404296875, 0.9449996948242188, ["8", "11"]],
		[0.14501953125, 0.136993408203125, 0.9449996948242188, ["9", "12"]],
		[0.2291259765625, -0.18670654296875, 0.9449996948242188, ["10", "13"]],
		[0.227783203125, -0.0242919921875, 0.9449996948242188, ["11", "14"]],
		[0.2286376953125, 0.14398193359375, 0.9449996948242188, ["12", "15"]],
		[0.308349609375, -0.18792724609375, 0.9449996948242188, ["13", "16"]],
		[0.308837890625, -0.02374267578125, 0.9449996948242188, ["14", "17"]],
		[0.3099365234375, 0.14410400390625, 0.9449996948242188, ["15", "18"]],
		[0.39111328125, -0.192230224609375, 0.9449996948242188, ["16", "19"]],
		[0.390869140625, -0.0189208984375, 0.9449996948242188, ["17", "20"]],
		[0.39111328125, 0.146514892578125, 0.9449996948242188, ["18", "21"]],
		[0.470947265625, -0.188690185546875, 0.9449996948242188, ["19", "22"]],
		[0.4705810546875, -0.0205078125, 0.9449996948242188, ["20", "23"]],
		[0.4725341796875, 0.140167236328125, 0.9449996948242188, ["21", "24"]],
		[0.5491943359375, -0.189666748046875, 0.9449996948242188, ["22", "25"]],
		[0.548095703125, -0.022552490234375, 0.9449996948242188, ["23", "26"]],
		[0.553955078125, 0.1446533203125, 0.9449996948242188, ["24", "27"]],
		[0.6324462890625, -0.191131591796875, 0.9449996948242188, ["25", "28"]],
		[0.635498046875, -0.0224609375, 0.9449996948242188, ["26", "29"]],
		[0.6392822265625, 0.139190673828125, 0.9449996948242188, ["27", "30"]],
		[0.71533203125, -0.187042236328125, 0.9449996948242188, ["28", "31"]],
		[0.7181396484375, -0.02447509765625, 0.9449996948242188, ["29", "32"]],
		[0.7152099609375, 0.138153076171875, 0.9449996948242188, ["30", "33"]],
		[0.7969970703125, -0.1904296875, 0.9449996948242188, ["31", "34"]],
		[0.7955322265625, -0.024871826171875, 0.9449996948242188, ["32", "35"]],
		[0.7960205078125, 0.137664794921875, 0.9449996948242188, ["33", "36"]],
		[-0.0560302734375, -0.271240234375, 0.9449996948242188, ["1", "2", "3"]],
		[0.024658203125, -0.271392822265625, 0.9449996948242188, ["4", "5", "6"]],
		[0.1051025390625, -0.272125244140625, 0.9449996948242188, ["7", "8", "9"]],
		[0.1898193359375, -0.27001953125, 0.9449996948242188, ["10", "11", "12"]],
		[0.2696533203125, -0.271697998046875, 0.9449996948242188, ["13", "14", "15"]],
		[0.351318359375, -0.268096923828125, 0.9449996948242188, ["16", "17", "18"]],
		[0.4287109375, -0.269561767578125, 0.9449996948242188, ["19", "20", "21"]],
		[0.5098876953125, -0.2716064453125, 0.9449996948242188, ["22", "23", "24"]],
		[0.5960693359375, -0.271148681640625, 0.9449996948242188, ["25", "26", "27"]],
		[0.67724609375, -0.268524169921875, 0.9449996948242188, ["28", "29", "30"]],
		[0.7523193359375, -0.27227783203125, 0.9449996948242188, ["31", "32", "33"]],
		[0.8382568359375, -0.272125244140625, 0.9449996948242188, ["34", "35", "36"]],
		[-0.017333984375, -0.106170654296875, 0.9449996948242188, ["1", "2", "4", "5"]],
		[-0.0162353515625, 0.060882568359375, 0.9449996948242188, ["2", "3", "5", "6"]],
		[0.06591796875, -0.110107421875, 0.9449996948242188, ["4", "5", "7", "8"]],
		[0.0653076171875, 0.060028076171875, 0.9449996948242188, ["5", "6", "8", "9"]],
		[0.146484375, -0.10888671875, 0.9449996948242188, ["7", "8", "10", "11"]],
		[0.1451416015625, 0.057159423828125, 0.9449996948242188, ["8", "9", "11", "12"]],
		[0.22705078125, -0.1092529296875, 0.9449996948242188, ["10", "11", "13", "14"]],
		[0.22802734375, 0.059356689453125, 0.9449996948242188, ["11", "12", "14", "15"]],
		[0.307373046875, -0.1043701171875, 0.9449996948242188, ["13", "14", "16", "17"]],
		[0.309814453125, 0.05584716796875, 0.9449996948242188, ["14", "15", "17", "18"]],
		[0.3919677734375, -0.111083984375, 0.9449996948242188, ["16", "17", "19", "20"]],
		[0.3924560546875, 0.0596923828125, 0.9449996948242188, ["17", "18", "20", "21"]],
		[0.471923828125, -0.1044921875, 0.9449996948242188, ["19", "20", "22", "23"]],
		[0.4698486328125, 0.060028076171875, 0.9449996948242188, ["20", "21", "23", "24"]],
		[0.5531005859375, -0.106170654296875, 0.9449996948242188, ["22", "23", "25", "26"]],
		[0.5546875, 0.059417724609375, 0.9449996948242188, ["23", "24", "26", "27"]],
		[0.633544921875, -0.101531982421875, 0.9449996948242188, ["25", "26", "28", "29"]],
		[0.6337890625, 0.0579833984375, 0.9449996948242188, ["26", "27", "29", "30"]],
		[0.7156982421875, -0.106292724609375, 0.9449996948242188, ["28", "29", "31", "32"]],
		[0.7158203125, 0.0604248046875, 0.9449996948242188, ["29", "30", "32", "33"]],
		[0.7947998046875, -0.108642578125, 0.9449996948242188, ["31", "32", "34", "35"]],
		[0.7952880859375, 0.059051513671875, 0.9449996948242188, ["32", "33", "35", "36"]],
		[-0.099609375, -0.2711181640625, 0.9449996948242188, ["0", "00", "1", "2", "3"]],
		[-0.0147705078125, -0.27154541015625, 0.9449996948242188, ["1", "2", "3", "4", "5", "6"]],
		[0.064697265625, -0.270263671875, 0.9449996948242188, ["4", "5", "6", "7", "8", "9"]],
		[0.144775390625, -0.271209716796875, 0.9449996948242188, ["7", "8", "9", "10", "11", "12"]],
		[0.226806640625, -0.27142333984375, 0.9449996948242188, ["10", "11", "12", "13", "14", "15"]],
		[0.306396484375, -0.27142333984375, 0.9449996948242188, ["13", "14", "15", "16", "17", "18"]],
		[0.3895263671875, -0.27099609375, 0.9449996948242188, ["16", "17", "18", "19", "20", "21"]],
		[0.468017578125, -0.275238037109375, 0.9449996948242188, ["19", "20", "21", "22", "23", "24"]],
		[0.5509033203125, -0.2738037109375, 0.9449996948242188, ["22", "23", "24", "25", "26", "27"]],
		[0.6336669921875, -0.27386474609375, 0.9449996948242188, ["25", "26", "27", "28", "29", "30"]],
		[0.7144775390625, -0.272186279296875, 0.9449996948242188, ["28", "29", "30", "31", "32", "33"]],
		[0.7935791015625, -0.272918701171875, 0.9449996948242188, ["31", "32", "33", "34", "35", "36"]],
		[0.0643310546875, -0.304718017578125, 0.9449996948242188, ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]],
		[0.392822265625, -0.304779052734375, 0.9449996948242188, ["13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"]],
		[0.712158203125, -0.30303955078125, 0.9449996948242188, ["25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"]],
		[0.9222412109375, -0.185882568359375, 0.9449996948242188, ["1", "4", "7", "10", "13", "16", "19", "22", "25", "28", "31", "34"]],
		[0.9229736328125, -0.0181884765625, 0.9449996948242188, ["2", "5", "8", "11", "14", "17", "20", "23", "26", "29", "32", "35"]],
		[0.9248046875, 0.14849853515625, 0.9449996948242188, ["3", "6", "9", "12", "15", "18", "21", "24", "27", "30", "33", "36"]],
		[-0.011474609375, -0.378875732421875, 0.9449996948242188, ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18"]],
		[0.142822265625, -0.375732421875, 0.9449996948242188, ["2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36"]],
		[0.308349609375, -0.37542724609375, 0.9449996948242188, ["1", "3", "5", "7", "9", "12", "14", "16", "18", "19", "21", "23", "25", "27", "30", "32", "34", "36"]],
		[0.4713134765625, -0.376861572265625, 0.9449996948242188, ["2", "4", "6", "8", "10", "11", "13", "15", "17", "20", "22", "24", "26", "28", "29", "31", "33", "35"]],
		[0.6341552734375, -0.376495361328125, 0.9449996948242188, ["1", "3", "5", "7", "9", "11", "13", "15", "17", "19", "21", "23", "25", "27", "29", "31", "33", "35"]],
		[0.7926025390625, -0.382232666015625, 0.9449996948242188, ["19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"]]
	];



function clearTableMarkers() {
	for (var i = 0; i < tableMarkers.length; i++) {
		tableMarkers[i].destroy();
	}
	tableMarkers = [];
}

function getClosestChipSpot(vector) {
	var spot = null;
	var prevDistance = 0.025;
	var dist = null;

	for (var i = 0; i < tableChipsOffsets.length; i++) {
		//dist = mp.Vector3.getDistanceBetweenPoints3D(vector, new mp.Vector3(RouletteTablesPos[0].x+tableChipsOffsets[i][0], RouletteTablesPos[0].y+tableChipsOffsets[i][1], RouletteTablesPos[0].z+tableChipsOffsets[i][2]));
		let newCordPos = mp.game.object.getObjectOffsetFromCoords(RouletteTablesPos[rouletteTable].x, RouletteTablesPos[rouletteTable].y, RouletteTablesPos[rouletteTable].z, RouletteTablesHeading[rouletteTable], tableChipsOffsets[i][0], tableChipsOffsets[i][1], tableChipsOffsets[i][2]);
		dist = mp.game.gameplay.getDistanceBetweenCoords(vector.x, vector.y, vector.z, newCordPos.x, newCordPos.y, newCordPos.z, false);

		if (dist <= prevDistance) {
			spot = i;
			prevDistance = dist;

		}
	}

	if (spot != closestChipSpot) {
		closestChipSpot = spot;
		clearTableMarkers();

		if (spot != null) {
			var key = null;
			var obj = null;
			let newBetPos = mp.game.object.getObjectOffsetFromCoords(RouletteTablesPos[rouletteTable].x, RouletteTablesPos[rouletteTable].y, RouletteTablesPos[rouletteTable].z, RouletteTablesHeading[rouletteTable], tableChipsOffsets[spot][0], tableChipsOffsets[spot][1], tableChipsOffsets[spot][2]);
			betCoords = newBetPos;

			for (var i = 0; i < tableChipsOffsets[spot][3].length; i++) {
				key = tableChipsOffsets[spot][3][i];
				if (key == "00" || key == "0") {
					let newCardPos = mp.game.object.getObjectOffsetFromCoords(RouletteTablesPos[rouletteTable].x, RouletteTablesPos[rouletteTable].y, RouletteTablesPos[rouletteTable].z, RouletteTablesHeading[rouletteTable], tableMarkersOffsets[key][0], tableMarkersOffsets[key][1], tableMarkersOffsets[key][2]);

					obj = mp.objects.new(269022546, new mp.Vector3(newCardPos.x, newCardPos.y, newCardPos.z), { 
						rotation: new mp.Vector3(0, 0, RouletteTablesHeading[rouletteTable]),
						dimension: mp.casino_dimension
					});
					obj.setCollision(false, false);
					tableMarkers.push(obj);
				}
				else {
					let newCardPos = mp.game.object.getObjectOffsetFromCoords(RouletteTablesPos[rouletteTable].x, RouletteTablesPos[rouletteTable].y, RouletteTablesPos[rouletteTable].z, RouletteTablesHeading[rouletteTable], tableMarkersOffsets[key][0], tableMarkersOffsets[key][1], tableMarkersOffsets[key][2]);


					tableMarkers.push(mp.objects.new(3267450776, new mp.Vector3(newCardPos.x, newCardPos.y, newCardPos.z), { 
						rotation: new mp.Vector3(0, 0, RouletteTablesHeading[rouletteTable]),
						dimension: mp.casino_dimension 
					}));
				}
			}
		}
	}
}
/*

mp.keys.bindEx(0x09, false, function () { // change bet
		if (!loggedin || chatActive || editing || global.menuCheck() || cuffed || mp.players.local.getVariable('InDeath') == true) return;

		mp.events.callRemote('serverChangeRouletteBet');
	  
		lastCheck = new Date().getTime();
});*/


mp.events.add('client_casino_bet', (act, data) => {
	switch (act) {
		case 'open':
			browserMenu.call(`casino`, `show`, data);
			break;
		case 'close':
			browserMenu.call(`casino`, `hide`);
			break;
	}
});

mp.events.add('updateCasinoTime', (data) => {
	browserMenu.call(`casino`, `setTimeToStart`, data);
});

mp.events.add('updateCasinoChips', (data) => {
	browserMenu.call(`casino`, `setChips`, data);
});

mp.events.add('exitRoulette', () => {
	mp.events.callRemote('exitRoulette');
});
}; a; }
{let a = function scriptEntryPoint(mp) {

var reels = [];
var data = {};
var d = null;

var a = Math.floor;

let started = false;

const SLOTS_MACHINE = [
    {
        model: "vw_prop_casino_slot_04a",
        position: new mp.Vector3(1100.483, 230.4082, -50.8409),
        rot: 45.0,
    },
    {
        model: "vw_prop_casino_slot_05a",
        position: new mp.Vector3(1100.939, 231.0017, -50.8409),
        rot: 60.0,
    },
    {
        model: "vw_prop_casino_slot_06a",
        position: new mp.Vector3(1101.221, 231.6943, -50.8409),
        rot: 75.0,
    },
    {
        model: "vw_prop_casino_slot_07a",
        position: new mp.Vector3(1101.323, 232.4321, -50.8409),
        rot: 90.0,
    },
    {
        model: "vw_prop_casino_slot_08a",
        position: new mp.Vector3(1101.229, 233.1719, -50.8409),
        rot: 105.0,
    },
    {
        model: "vw_prop_casino_slot_01a",
        position: new mp.Vector3(1108.938, 239.4797, -50.8409),
        rot: -45.0,
    },
    {
        model: "vw_prop_casino_slot_02a",
        position: new mp.Vector3(1109.536, 239.0278, -50.8409),
        rot: -30.0,
    },
    {
        model: "vw_prop_casino_slot_03a",
        position: new mp.Vector3(1110.229, 238.7428, -50.8409),
        rot: -15.0,
    },
    {
        model: "vw_prop_casino_slot_04a",
        position: new mp.Vector3(1110.974, 238.642, -50.8409),
        rot: 0.0,
    },
    {
        model: "vw_prop_casino_slot_05a",
        position: new mp.Vector3(1111.716, 238.7384, -50.8409),
        rot: 15.0,
    },
    {
        model: "vw_prop_casino_slot_06a",
        position: new mp.Vector3(1112.407, 239.0216, -50.8409),
        rot: 30.0,
    },
    {
        model: "vw_prop_casino_slot_07a",
        position: new mp.Vector3(1112.999, 239.4742, -50.8409),
        rot: 45.0,
    },
    {
        model: "vw_prop_casino_slot_01a",
        position: new mp.Vector3(1120.853, 233.1621, -50.8409),
        rot: -105.0,
    },
    {
        model: "vw_prop_casino_slot_02a",
        position: new mp.Vector3(1120.753, 232.4272, -50.8409),
        rot: -90.0,
    },
    {
        model: "vw_prop_casino_slot_03a",
        position: new mp.Vector3(1120.853, 231.6886, -50.8409),
        rot: -75.0,
    },
    {
        model: "vw_prop_casino_slot_04a",
        position: new mp.Vector3(1121.135, 230.9999, -50.8409),
        rot: -60.0,
    },
    {
        model: "vw_prop_casino_slot_05a",
        position: new mp.Vector3(1121.592, 230.4106, -50.8409),
        rot: -45.0,
    },
    {
        model: "vw_prop_casino_slot_04a",
        position: new mp.Vector3(1104.572, 229.4451, -50.8409),
        rot: -36.0,
    },
    {
        model: "vw_prop_casino_slot_05a",
        position: new mp.Vector3(1104.302, 230.3183, -50.8409),
        rot: -108.0,
    },
    {
        model: "vw_prop_casino_slot_01a",
        position: new mp.Vector3(1105.049, 230.845, -50.8409),
        rot: 180.0,
    },
    {
        model: "vw_prop_casino_slot_02a",
        position: new mp.Vector3(1105.781, 230.2973, -50.8409),
        rot: 108.0,
    },
    {
        model: "vw_prop_casino_slot_03a",
        position: new mp.Vector3(1105.486, 229.4322, -50.8409),
        rot: 36.0,
    },
    {
        model: "vw_prop_casino_slot_07a",
        position: new mp.Vector3(1108.005, 233.9177, -50.8409),
        rot: -36.0,
    },
    {
        model: "vw_prop_casino_slot_08a",
        position: new mp.Vector3(1107.735, 234.7909, -50.8409),
        rot: -108.0,
    },
    {
        model: "vw_prop_casino_slot_04a",
        position: new mp.Vector3(1108.482, 235.3176, -50.8409),
        rot: -80.0,
    },
    {
        model: "vw_prop_casino_slot_05a",
        position: new mp.Vector3(1109.214, 234.7699, -50.8409),
        rot: 108.0,
    },
    {
        model: "vw_prop_casino_slot_06a",
        position: new mp.Vector3(1108.919, 233.9048, -50.8409),
        rot: 36.0,
    },
    {
        model: "vw_prop_casino_slot_04a",
        position: new mp.Vector3(1113.64, 233.6755, -50.8409),
        rot: -36.0,
    },
    {
        model: "vw_prop_casino_slot_05a",
        position: new mp.Vector3(1113.37, 234.5486, -50.8409),
        rot: -108.0,
    },
    {
        model: "vw_prop_casino_slot_01a",
        position: new mp.Vector3(1114.117, 235.0753, -50.8409),
        rot: 180.0,
    },
    {
        model: "vw_prop_casino_slot_02a",
        position: new mp.Vector3(1114.848, 234.5277, -50.8409),
        rot: 108.0,
    },
    {
        model: "vw_prop_casino_slot_03a",
        position: new mp.Vector3(1114.554, 233.6625, -50.8409),
        rot: 36.0,
    },
    {
        model: "vw_prop_casino_slot_07a",
        position: new mp.Vector3(1116.662, 228.8896, -50.8409),
        rot: -36.0,
    },
    {
        model: "vw_prop_casino_slot_08a",
        position: new mp.Vector3(1116.392, 229.7628, -50.8409),
        rot: -108.0,
    },
    {
        model: "vw_prop_casino_slot_04a",
        position: new mp.Vector3(1117.139, 230.2895, -50.8409),
        rot: 180.0,
    },
    {
        model: "vw_prop_casino_slot_05a",
        position: new mp.Vector3(1117.871, 229.7419, -50.8409),
        rot: 108.0,
    },
    {
        model: "vw_prop_casino_slot_06a",
        position: new mp.Vector3(1117.576, 228.8767, -50.8409),
        rot: 36.0,
    },
    {
        model: "vw_prop_casino_slot_08a",
        position: new mp.Vector3(1129.64, 250.451, -52.0409),
        rot: 180.0,
    },
    {
        model: "vw_prop_casino_slot_07a",
        position: new mp.Vector3(1130.376, 250.3577, -52.0409),
        rot: 165.0,
    },
    {
        model: "vw_prop_casino_slot_06a",
        position: new mp.Vector3(1131.062, 250.0776, -52.0409),
        rot: 150.0,
    },
    {
        model: "vw_prop_casino_slot_05a",
        position: new mp.Vector3(1131.655, 249.6264, -52.0409),
        rot: 135.0,
    },
    {
        model: "vw_prop_casino_slot_04a",
        position: new mp.Vector3(1132.109, 249.0355, -52.0409),
        rot: 120.0,
    },
    {
        model: "vw_prop_casino_slot_03a",
        position: new mp.Vector3(1132.396, 248.3382, -52.0409),
        rot: 105.0,
    },
    {
        model: "vw_prop_casino_slot_02a",
        position: new mp.Vector3(1132.492, 247.5984, -52.0409),
        rot: 90.0,
    },
    {
        model: "vw_prop_casino_slot_03a",
        position: new mp.Vector3(1133.952, 256.1037, -52.0409),
        rot: -45,
    },
    {
        model: "vw_prop_casino_slot_04a",
        position: new mp.Vector3(1133.827, 256.9098, -52.0409),
        rot: -117,
    },
    {
        model: "vw_prop_casino_slot_05a",
        position: new mp.Vector3(1134.556, 257.2778, -52.0409),
        rot: 171,
    },
    {
        model: "vw_prop_casino_slot_01a",
        position: new mp.Vector3(1135.132, 256.699, -52.0409),
        rot: 99,
    },
    {
        model: "vw_prop_casino_slot_02a",
        position: new mp.Vector3(1134.759, 255.9734, -52.0409),
        rot: 27,
    },
    {
        model: "vw_prop_casino_slot_06a",
        position: new mp.Vector3(1138.195, 251.8611, -52.0409),
        rot: -45,
    },
    {
        model: "vw_prop_casino_slot_07a",
        position: new mp.Vector3(1138.07, 252.6677, -52.0409),
        rot: -117,
    },
    {
        model: "vw_prop_casino_slot_08a",
        position: new mp.Vector3(1138.799, 253.0363, -52.0409),
        rot: 171,
    },
    {
        model: "vw_prop_casino_slot_04a",
        position: new mp.Vector3(1139.372, 252.4563, -52.0409),
        rot: 99,
    },
    {
        model: "vw_prop_casino_slot_05a",
        position: new mp.Vector3(1139, 251.7306, -52.0409),
        rot: 27,
    },
]

mp.events.add('show_slots_text', () => {
    let i = 0;
    SLOTS_MACHINE.forEach((t) => {
        mp.labels.new(t.toString(), t.position,
            {
                los: false,
                font: 1,
                drawDistance: 100,
                dimension: mp.casino_dimension
            });

        mp.checkpoints.new(1, t.position, 1,
            {
                visible: true,
                dimension: mp.casino_dimension,
                color: [255, 255, 255, 50]
            });
        i = i + 1;
        // mp.gui.chat.push(`${i}`)
    });
});

mp.events.add('casino_start_slot', (i) => {
    mp.events.call("displayRadar", false)
    mp.events.call("displayChat", false)
    mp.events.call("hudControl.enable", false)
    mp.casinoActive = true
    setCursor(true)

    var a = SLOTS_MACHINE[i];

    data = SLOTS_MACHINE[i];

    var seatPos = mp.game.object.getObjectOffsetFromCoords(a.position.x, a.position.y, a.position.z, a.rot, 0, -.8, .7);
    var reelsCenterPos = mp.game.object.getObjectOffsetFromCoords(a.position.x, a.position.y, a.position.z, a.rot, 0, .035, 1.1);
    mp.players.local.setVisible(!1, !0);
    mp.players.local.freezePosition(true);

    CreateCamera(new mp.Vector3(seatPos.x, seatPos.y, seatPos.z + .5), new mp.Vector3(0, 0, 0), 50, reelsCenterPos, 800);
});

mp.events.add('casino_exit_slot', () => {
    mp.events.call("displayRadar", true)
    mp.events.call("displayChat", true)
    mp.events.call("hudControl.enable", true)
    setCursor(false)
    mp.casinoActive = false

    data = {};

    ResetCamera();

    mp.players.local.setVisible(!0, !0)
    mp.players.local.freezePosition(false);

    d = null;

});


mp.events.add('casino_spin_slot', (e) => {
    started = true;

    SpitRes(e);
});

mp.events.add('start_slot', (val) => {
    if (!started)
        mp.events.callRemote('casino_start_slot', val);
});



function CreateReels() {

    reels.forEach(e => e.destroy());

    reels =
        [
            mp.objects.new(mp.game.joaat(data.model + `_reels`), mp.game.object.getObjectOffsetFromCoords(data.position.x, data.position.y, data.position.z, data.rot, -.115, .035, 1.1), {
                dimension: mp.casino_dimension,
                rotation: new mp.Vector3(0, 0, data.rot),
            }),
            mp.objects.new(mp.game.joaat(data.model + `_reels`), mp.game.object.getObjectOffsetFromCoords(data.position.x, data.position.y, data.position.z, data.rot, .01, .035, 1.1), {
                dimension: mp.casino_dimension,
                rotation: new mp.Vector3(0, 0, data.rot)
            }),
            mp.objects.new(mp.game.joaat(data.model + `_reels`), mp.game.object.getObjectOffsetFromCoords(data.position.x, data.position.y, data.position.z, data.rot, .125, .035, 1.1), {
                dimension: mp.casino_dimension,
                rotation: new mp.Vector3(0, 0, data.rot)
            }),
        ];
}

function CreateCamera(a, b, c, e, f = 0) {
    null != d && mp.cameras.exists(d) && d.destroy(), d = mp.cameras.new("default", a, b, c), d.pointAtCoord(e.x, e.y, e.z), d.setActive(!0), mp.game.cam.renderScriptCams(!0, 0 < f, f, !0, !1)
}

function ResetCamera(a = 0) {
    null != d && mp.cameras.exists(d) && d.destroy(), mp.game.cam.renderScriptCams(!1, 0 < a, a, !0, !1)
};

function SpitRes(e) {
    CreateReels();

    const n = a(Math.random() * 3) + 0 + (a(Math.random() * 2) + 1);
    let l = 0;
    const c = [280, 320, 360],
        d = [!0, !0, !0],
        p = -1 === e ? [n, n + (.5 < Math.random() ? 1 : 0), n + 2] : [e, e, e];



    const i = setInterval(() => {
        l += 5;
        for (let e = 0; 3 > e; e++) d[e] && (c[e]--, 0 > c[e] ? (reels[e].setRotation(22.5 * p[e], 0, data.rot, 2, !0), d[e] = !1) : reels[e].setRotation(l, 0, data.rot, 2, !0));
        if (!d[2]) return -1 === e ? mp.events.callRemote('casino_stop_slot', -1) : WinSlot(), void clearInterval(i), started = false;
    }, 10);

    mp.events.call("enableSound", "slots-spin.mp3", 0.2)

}

function WinSlot() {
    mp.events.call("enableSound", "slots-win.mp3", 0.2)
    mp.events.callRemote('casino_stop_slot', 1)
}

mp.events.add('client_slots_bet', (act, data) => {
    switch (act) {
        case 'open':
            browserMenu.call(`casino`, `show`, data, 'slots');
            break;
        case 'close':
            browserMenu.call(`casino`, `hide`);
            break;
    }
});

mp.events.add('updateSlotsChips', (data) => {
    browserMenu.call(`casino`, `setChips`, data);
});


}; a; }
{let a = function scriptEntryPoint(mp) {
'use strict';

class Podium {
    static LocalPlayer = mp.players.local;
    static PrizeVehicle;
    static Object;
    static Rotation = 0;
    static OnInit() {
        Podium.CreateObject();
        Podium.CreateRotationShape();
    }
    static CreateObject() {
        mp.game.entity.createModelHideExcludingScriptObjects(1100.0177001953125, 220.02122497558594, -49.989967346191406, 10.0, 2733879850, true);
        Podium.Object = mp.objects.new(2733879850, new mp.Vector3(1100.0177001953125, 220.02122497558594, -49.989967346191406), { dimension: mp.casino_dimension });
    }
    static CreateRotationShape() {
        mp.events.add({ 
            "entityStreamIn": (entity) => {
                if (entity.type == 'vehicle' && entity.handle && entity.getVariable("luckyWheelPrizeVehicle")) {
                    Podium.PrizeVehicle = entity
                    Podium.PrizeVehicle?.setOnGroundProperly();
                    mp.events.add("render", Podium.Rotate);
                }
            },
            "entityStreamOut": (entity) => {
                if (entity.type == 'vehicle' && entity.handle && entity.getVariable("luckyWheelPrizeVehicle")) {
                    mp.events.remove("render", Podium.Rotate);
                    Podium.PrizeVehicle = undefined;
                }
            }
        });
    }
    static Rotate() {
        if (!Podium.Object || !mp.objects.exists(Podium.Object.id))
            return;
        Podium.Rotation += 0.05;
        if (Podium.Rotation >= 360)
            Podium.Rotation = 0;
        Podium.Object.rotation = new mp.Vector3(0, 0, Podium.Rotation);
        if (!Podium.PrizeVehicle || !mp.vehicles.exists(Podium.PrizeVehicle.id))
            return;
        Podium.PrizeVehicle.setHeading(Podium.Rotation);
    }
}
Podium.OnInit();
}; a; }
{let a = function scriptEntryPoint(mp) {
'use strict';

const ECasinoWallType = {
    SKULLS: "CASINO_HLW_PL",
    DIAMONDS: "CASINO_DIA_PL",
    SNOW: "CASINO_SNWFLK_PL",
    WIN: "CASINO_WIN_PL"
};
class CasinoWalls {
    static TARGET_NAME = "casinoscreen_01";
    static TARGET_MODEL_HASH = mp.game.joaat('vw_vwint01_video_overlay');
    static TEXTURE_DICT = "Prop_Screen_Vinewood";
    static TEXTURE_NAME = "BG_Wall_Colour_4x4";
    static RenderTarget;
    static async OnInit() {
        mp.events.add({
            render: CasinoWalls.RenderHandler,
            /* 'C::LoadCasinoWalls': CasinoWalls.LoadAndLinkWalls,
            'C::UnloadCasinoWalls': CasinoWalls.UnloadAndUnlinkWalls, */
            'C::SetCasinoWallType': CasinoWalls.SetScreenType,
        });
    }
    static SetScreenType(screen, chanel = 0, volume = -100) {
        mp.game.graphics.setTvChannelPlaylist(0, screen.toString(), true);
        mp.game.graphics.setTvAudioFrontend(true);
        mp.game.graphics.setTvVolume(volume);
        mp.game.graphics.setTvChannel(chanel);
    }
    static async LoadTextures() {
        if (!mp.game.graphics.hasStreamedTextureDictLoaded(CasinoWalls.TEXTURE_DICT))
            mp.game.graphics.requestStreamedTextureDict(CasinoWalls.TEXTURE_DICT, true);
        for (let i = 0; i < 50 && !mp.game.graphics.hasStreamedTextureDictLoaded(CasinoWalls.TEXTURE_DICT); ++i) {
            await mp.game.waitAsync(100);
        }
        if (!mp.game.graphics.hasStreamedTextureDictLoaded(CasinoWalls.TEXTURE_DICT))
            return mp.console.logError(`Streamed texture ${CasinoWalls.TEXTURE_DICT} faild to load, casino animated walls will not work.`);
    }
    static async LoadAndLinkWalls() {
        if (!CasinoWalls.RenderTarget) {
            if (!mp.game.ui.isNamedRendertargetRegistered(CasinoWalls.TARGET_NAME)) {
                mp.game.ui.registerNamedRendertarget(CasinoWalls.TARGET_NAME, false);
            }
            if (!mp.game.ui.isNamedRendertargetLinked(CasinoWalls.TARGET_MODEL_HASH)) {
                mp.game.ui.linkNamedRendertarget(CasinoWalls.TARGET_MODEL_HASH);
            }
            CasinoWalls.RenderTarget = mp.game.ui.getNamedRendertargetRenderId(CasinoWalls.TARGET_NAME);
        }
        CasinoWalls.SetScreenType(ECasinoWallType.SKULLS);
        //EventsManager.AddEvent(EClientEvent.RENDER, CasinoWalls.RenderHandler);
    }
    /* This seems to bug up the scaleform handle / ids for osme reason */
    static UnloadAndUnlinkWalls() {
        //EventsManager.RemoveEvent(EClientEvent.RENDER, CasinoWalls.RenderHandler);
        /*         CasinoWalls.RenderTarget = undefined;
        
        if (mp.game.misc.isBitSet(CasinoWalls.TARGET_MODEL_HASH, 0)) {
            mp.game.graphics.setTvChannel(-1);
            mp.game.misc.clearBit(CasinoWalls.TARGET_MODEL_HASH, 0);
        }

        if (mp.game.ui.isNamedRendertargetLinked(CasinoWalls.TARGET_MODEL_HASH)) {
            mp.game.ui.releaseNamedRendertarget(CasinoWalls.TARGET_NAME);
        }

        if (mp.game.graphics.hasStreamedTextureDictLoaded(CasinoWalls.TEXTURE_DICT))
            mp.game.graphics.setStreamedTextureDictAsNoLongerNeeded(CasinoWalls.TEXTURE_DICT); */
    }
    static async RenderHandler() {
        if (mp.game.interior.getFromEntity(mp.players.local.handle) != mp.game.interior.getInteriorAtCoords(1100.000, 220.000, -50.000))
            return;
        if (CasinoWalls.RenderTarget == undefined) {
            await CasinoWalls.LoadTextures();
            CasinoWalls.LoadAndLinkWalls();
            return;
        }
        if (CasinoWalls.RenderTarget == undefined)
            return;
        mp.game.ui.setTextRenderId(CasinoWalls.RenderTarget);
        mp.game.graphics.setScriptGfxDrawOrder(4);
        mp.game.graphics.setScriptGfxDrawBehindPausemenu(true);
        mp.game.graphics.drawInteractiveSprite(CasinoWalls.TEXTURE_DICT, CasinoWalls.TEXTURE_NAME, 0.25, 0.5, 0.5, 1.000, 0.0, 255, 255, 255, 255);
        mp.game.graphics.drawTvChannel(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
        mp.game.ui.setTextRenderId(mp.game.ui.getDefaultScriptRendertargetRenderId());
    }
}
CasinoWalls.OnInit();

}; a; }
{let a = function scriptEntryPoint(mp) {
let playingPoker = false;
let pokerBrowser = null;
let pokerTables = [];
let pokerTableModel = ["vitalpokerblue", "vitalpokergreen", "vitalpokerred"];
let deckModel = "vw_prop_casino_cards_01";
let pokerTablesArray = [];
let cardsToSlide = [];
const PokerCards = {
    'c14': 'vw_prop_cas_card_club_ace',
    'c2': 'vw_prop_cas_card_club_02',
    'c3': 'vw_prop_cas_card_club_03',
    'c4': 'vw_prop_cas_card_club_04',
    'c5': 'vw_prop_cas_card_club_05',
    'c6': 'vw_prop_cas_card_club_06',
    'c7': 'vw_prop_cas_card_club_07',
    'c8': 'vw_prop_cas_card_club_08',
    'c9': 'vw_prop_cas_card_club_09',
    'c10': 'vw_prop_cas_card_club_10',
    'c11': 'vw_prop_cas_card_club_jack',
    'c12': 'vw_prop_cas_card_club_queen',
    'c13': 'vw_prop_cas_card_club_king',
    'd14': 'vw_prop_cas_card_dia_ace',
    'd2': 'vw_prop_cas_card_dia_02',
    'd3': 'vw_prop_cas_card_dia_03',
    'd4': 'vw_prop_cas_card_dia_04',
    'd5': 'vw_prop_cas_card_dia_05',
    'd6': 'vw_prop_cas_card_dia_06',
    'd7': 'vw_prop_cas_card_dia_07',
    'd8': 'vw_prop_cas_card_dia_08',
    'd9': 'vw_prop_cas_card_dia_09',
    'd10': 'vw_prop_cas_card_dia_10',
    'd11': 'vw_prop_cas_card_dia_jack',
    'd12': 'vw_prop_cas_card_dia_queen',
    'd13': 'vw_prop_cas_card_dia_king',
    'h14': 'vw_prop_cas_card_hrt_ace',
    'h2': 'vw_prop_cas_card_hrt_02',
    'h3': 'vw_prop_cas_card_hrt_03',
    'h4': 'vw_prop_cas_card_hrt_04',
    'h5': 'vw_prop_cas_card_hrt_05',
    'h6': 'vw_prop_cas_card_hrt_06',
    'h7': 'vw_prop_cas_card_hrt_07',
    'h8': 'vw_prop_cas_card_hrt_08',
    'h9': 'vw_prop_cas_card_hrt_09',
    'h10': 'vw_prop_cas_card_hrt_10',
    'h11': 'vw_prop_cas_card_hrt_jack',
    'h12': 'vw_prop_cas_card_hrt_queen',
    'h13': 'vw_prop_cas_card_hrt_king',
    's14': 'vw_prop_cas_card_spd_ace',
    's2': 'vw_prop_cas_card_spd_02',
    's3': 'vw_prop_cas_card_spd_03',
    's4': 'vw_prop_cas_card_spd_04',
    's5': 'vw_prop_cas_card_spd_05',
    's6': 'vw_prop_cas_card_spd_06',
    's7': 'vw_prop_cas_card_spd_07',
    's8': 'vw_prop_cas_card_spd_08',
    's9': 'vw_prop_cas_card_spd_09',
    's10': 'vw_prop_cas_card_spd_10',
    's11': 'vw_prop_cas_card_spd_jack',
    's12': 'vw_prop_cas_card_spd_queen',
    's13': 'vw_prop_cas_card_spd_king',
};
const CHAIRS = [
    { offset: new mp.Vector3(-0.75, 1.43, -0.45), heading: 310.0 },
    { offset: new mp.Vector3(0.75, 1.43, -0.45), heading: 225.0 },
    { offset: new mp.Vector3(1.1, 0.0, -0.45), heading: 180.0 },
    { offset: new mp.Vector3(0.75, -1.43, -0.45), heading: 130.0 },
    { offset: new mp.Vector3(-0.75, -1.43, -0.45), heading: 45.0 },
];
const CardsOffsets = [
    { offset: new mp.Vector3(-0.35, 1.05, 0.46), offset2: new mp.Vector3(-0.30, 1.03, 0.455), heading: 220.0 },
    { offset: new mp.Vector3(0.35, 1.05, 0.46), offset2: new mp.Vector3(0.30, 1.03, 0.455), heading: 135.0 },
    { offset: new mp.Vector3(0.5, 0.02, 0.46), offset2: new mp.Vector3(0.47, 0.00, 0.455), heading: 90.0 },
    { offset: new mp.Vector3(0.35, -1.05, 0.46), offset2: new mp.Vector3(0.30, -1.03, 0.455), heading: 45.0 },
    { offset: new mp.Vector3(-0.35, -1.05, 0.46), offset2: new mp.Vector3(-0.30, -1.03, 0.455), heading: 135.0 },
];
const DealerCardsOffsets = [
    { offset: new mp.Vector3(-0.06, 0.304, 0.445), heading: 220.0 },
    { offset: new mp.Vector3(-0.06, 0.151, 0.445), heading: 135.0 },
    { offset: new mp.Vector3(-0.06, -0.003, 0.445), heading: 90.0 },
    { offset: new mp.Vector3(-0.06, -0.156, 0.445), heading: 45.0 },
    { offset: new mp.Vector3(-0.06, -0.309, 0.445), heading: 135.0 },
];
function setPedVariations(dealerPed, id) {
    switch (id) {
        case 0:
            dealerPed.setDefaultComponentVariation();
            dealerPed.setComponentVariation(0, 3, 0, 0);
            dealerPed.setComponentVariation(1, 1, 0, 0);
            dealerPed.setComponentVariation(2, 3, 0, 0);
            dealerPed.setComponentVariation(3, 1, 0, 0);
            dealerPed.setComponentVariation(4, 0, 0, 0);
            dealerPed.setComponentVariation(6, 1, 0, 0);
            dealerPed.setComponentVariation(7, 2, 0, 0);
            dealerPed.setComponentVariation(8, 3, 0, 0);
            dealerPed.setComponentVariation(10, 1, 0, 0);
            dealerPed.setComponentVariation(11, 1, 0, 0);
            break;
        case 1:
            dealerPed.setDefaultComponentVariation();
            dealerPed.setComponentVariation(0, 2, 2, 0);
            dealerPed.setComponentVariation(1, 1, 0, 0);
            dealerPed.setComponentVariation(2, 4, 0, 0);
            dealerPed.setComponentVariation(3, 0, 3, 0);
            dealerPed.setComponentVariation(4, 0, 0, 0);
            dealerPed.setComponentVariation(6, 1, 0, 0);
            dealerPed.setComponentVariation(7, 2, 0, 0);
            dealerPed.setComponentVariation(8, 1, 0, 0);
            dealerPed.setComponentVariation(10, 1, 0, 0);
            dealerPed.setComponentVariation(11, 1, 0, 0);
            break;
        case 2:
            dealerPed.setDefaultComponentVariation();
            dealerPed.setComponentVariation(0, 2, 1, 0);
            dealerPed.setComponentVariation(1, 1, 0, 0);
            dealerPed.setComponentVariation(2, 2, 0, 0);
            dealerPed.setComponentVariation(3, 0, 3, 0);
            dealerPed.setComponentVariation(4, 0, 0, 0);
            dealerPed.setComponentVariation(6, 1, 0, 0);
            dealerPed.setComponentVariation(7, 2, 0, 0);
            dealerPed.setComponentVariation(8, 1, 0, 0);
            dealerPed.setComponentVariation(10, 1, 0, 0);
            dealerPed.setComponentVariation(11, 1, 0, 0);
            break;
        case 3:
            dealerPed.setDefaultComponentVariation();
            dealerPed.setComponentVariation(0, 2, 0, 0);
            dealerPed.setComponentVariation(1, 1, 0, 0);
            dealerPed.setComponentVariation(2, 3, 0, 0);
            dealerPed.setComponentVariation(3, 1, 3, 0);
            dealerPed.setComponentVariation(4, 0, 0, 0);
            dealerPed.setComponentVariation(6, 1, 0, 0);
            dealerPed.setComponentVariation(7, 2, 0, 0);
            dealerPed.setComponentVariation(8, 3, 0, 0);
            dealerPed.setComponentVariation(10, 1, 0, 0);
            dealerPed.setComponentVariation(11, 1, 0, 0);
            break;
        case 4:
            dealerPed.setDefaultComponentVariation();
            dealerPed.setComponentVariation(0, 3, 1, 0);
            dealerPed.setComponentVariation(1, 0, 0, 0);
            dealerPed.setComponentVariation(2, 3, 1, 0);
            dealerPed.setComponentVariation(3, 1, 1, 0);
            dealerPed.setComponentVariation(4, 1, 0, 0);
            dealerPed.setComponentVariation(6, 1, 0, 0);
            dealerPed.setComponentVariation(7, 2, 0, 0);
            dealerPed.setComponentVariation(8, 1, 0, 0);
            dealerPed.setComponentVariation(10, 0, 0, 0);
            dealerPed.setComponentVariation(11, 0, 0, 0);
            break;
        case 5:
            dealerPed.setDefaultComponentVariation();
            dealerPed.setComponentVariation(0, 1, 1, 0);
            dealerPed.setComponentVariation(1, 0, 0, 0);
            dealerPed.setComponentVariation(2, 1, 0, 0);
            dealerPed.setComponentVariation(3, 0, 3, 0);
            dealerPed.setComponentVariation(4, 0, 0, 0);
            dealerPed.setComponentVariation(6, 0, 0, 0);
            dealerPed.setComponentVariation(7, 0, 0, 0);
            dealerPed.setComponentVariation(8, 0, 0, 0);
            dealerPed.setComponentVariation(10, 0, 0, 0);
            dealerPed.setComponentVariation(11, 0, 0, 0);
            break;
        case 6:
            dealerPed.setDefaultComponentVariation();
            dealerPed.setComponentVariation(0, 2, 0, 0);
            dealerPed.setComponentVariation(1, 0, 0, 0);
            dealerPed.setComponentVariation(2, 2, 0, 0);
            dealerPed.setComponentVariation(3, 2, 3, 0);
            dealerPed.setComponentVariation(4, 0, 0, 0);
            dealerPed.setComponentVariation(6, 0, 0, 0);
            dealerPed.setComponentVariation(7, 0, 0, 0);
            dealerPed.setComponentVariation(8, 2, 0, 0);
            dealerPed.setComponentVariation(10, 0, 0, 0);
            dealerPed.setComponentVariation(11, 0, 0, 0);
            break;
        case 7:
            dealerPed.setDefaultComponentVariation();
            dealerPed.setComponentVariation(0, 2, 1, 0);
            dealerPed.setComponentVariation(1, 0, 0, 0);
            dealerPed.setComponentVariation(2, 2, 1, 0);
            dealerPed.setComponentVariation(3, 3, 3, 0);
            dealerPed.setComponentVariation(4, 1, 0, 0);
            dealerPed.setComponentVariation(6, 1, 0, 0);
            dealerPed.setComponentVariation(7, 2, 0, 0);
            dealerPed.setComponentVariation(8, 3, 0, 0);
            dealerPed.setComponentVariation(10, 0, 0, 0);
            dealerPed.setComponentVariation(11, 0, 0, 0);
            break;
        default:
            return;
    }
}
let lastCheck = new Date().getTime();
mp.keys.bindEx(0x45, false, () => {
    if (new Date().getTime() - lastCheck < 500)
        return;
    if (mp.gui.cursor.visible === true)
        return;
    if (playingPoker)
        return;
    let nearTable = GetClosestTable(mp.players.local.position);
    if (!nearTable)
        return;
    const nearSeat = GetClosestSeatData(nearTable, mp.players.local.position);
    if (!nearSeat)
        return;
    mp.events.callRemote("TryToJoinPokerTable", nearTable.pokerId, nearSeat.ChairID);
    lastCheck = new Date().getTime();
});
mp.events.add("joinPokerTable", joinPokerTable);
function joinPokerTable(id, chairId, params) {
    if (!pokerTables[id]) return
    let nearTable = GetClosestTable(mp.players.local.position);
    if (!nearTable || nearTable.pokerId != id)
        return;
    const nearSeat = GetClosestSeatData(nearTable, mp.players.local.position);
    if (!nearSeat || nearSeat.ChairID != chairId)
        return;
    SitAtPokerTable(pokerTables[id], nearSeat, playingPoker);
    playingPoker = true;
    mp.interfaceActive = "poker"
    browserMenu.call(`poker`, `set`, params)
    mp.events.callRemote("joinPoker", nearTable.pokerId, nearSeat.ChairID);
}
async function dealerGivePlayerCards(id, chairId) {
    if (!pokerTables[id]) return
    const animations = ["deck_deal_p01", "deck_deal_p02", "deck_deal_p03", "deck_deal_p03", "deck_deal_p04"];
    let anim = pokerTables[id].pokerDealer.male ? animations[chairId] : `female_${animations[chairId]}`;
    const table = pokerTables[id];
    const pokerDealer = table.pokerDealer;
    loadAnimDict(pokerAnimation[2], function () {
        pokerDealer.taskPlayAnim(pokerAnimation[2], anim, 8, 0, 2000, 49, 1, false, false, false);
    });
    while (pokerDealer.handle && pokerDealer.getAnimCurrentTime(pokerAnimation[2], anim) < 0.2) {
        await mp.game.waitAsync(10);
    }
    table.playerCards[chairId][0].attachTo(pokerDealer.handle, pokerDealer.getBoneIndex(64017), 0.0, 0.0, 0.0, 0.0, 190.0, 90.0, false, false, false, true, 2, true);
    table.playerCards[chairId][1].attachTo(pokerDealer.handle, pokerDealer.getBoneIndex(64017), 0.0, 0.0, 0.0, 0.0, 190.0, 90.0, false, false, false, true, 2, true);
    while (pokerDealer.handle && pokerDealer.getAnimCurrentTime(pokerAnimation[2], anim) < 0.5)
        await mp.game.waitAsync(10);
    table.playerCards[chairId][0].detach(false, true);
    let cardPosToSlide = mp.game.object.getObjectOffsetFromCoords(table.position.x, table.position.y, table.position.z, table.rotation.z, CardsOffsets[chairId].offset.x, CardsOffsets[chairId].offset.y, CardsOffsets[chairId].offset.z);
    cardsToSlide.push({ object: pokerTables[id].playerCards[chairId][0], pos: cardPosToSlide, rot: pokerTables[id].rotation.z + CardsOffsets[chairId].heading });
    table.playerCards[chairId][1].detach(false, true);
    cardPosToSlide = mp.game.object.getObjectOffsetFromCoords(table.position.x, table.position.y, table.position.z, table.rotation.z, CardsOffsets[chairId].offset2.x, CardsOffsets[chairId].offset2.y, CardsOffsets[chairId].offset2.z);
    cardsToSlide.push({ object: table.playerCards[chairId][1], pos: cardPosToSlide, rot: table.rotation.z + CardsOffsets[chairId].heading, timer: -100 });
    while (pokerDealer.handle && pokerDealer.getAnimCurrentTime(pokerAnimation[2], anim) < 0.6)
        await mp.game.waitAsync(10);
    anim = pokerDealer.male ? "deck_idle" : `female_deck_idle`;
    pokerDealer.taskPlayAnim(pokerAnimation[2], anim, 8, 0, 2000, 49, 1, false, false, false);
}
async function putPokerDeckDown(id) {
    if (!pokerTables[id]) return
    const anim = pokerTables[id].pokerDealer ? "deck_put_down" : "female_deck_put_down";
    const table = pokerTables[id];
    const pokerDealer = table.pokerDealer;
    loadAnimDict(pokerAnimation[2], function () {
        pokerDealer.taskPlayAnim(pokerAnimation[2], anim, 8, 0, 2000, 49, 1, false, false, false);
    });
    while (pokerDealer.handle && pokerDealer.getAnimCurrentTime(pokerAnimation[2], anim) < 0.5)
        await mp.game.waitAsync(10);
    table.deck.detach(false, true);
    let deckPosition = mp.game.object.getObjectOffsetFromCoords(table.position.x, table.position.y, table.position.z, table.rotation.z, -0.26, 0.28, 0.455);
    table.deck.position = deckPosition;
    table.deck.rotation = new mp.Vector3(0, 180, table.rotation.z - 90);
    dealerPlayIdleAnimation(id);
}
async function prepareDeck(id) {
    if (!pokerTables[id]) return
    let anim = pokerTables[id].pokerDealer.male ? "deck_pick_up" : "female_deck_pick_up";
    const table = pokerTables[id];
    const pokerDealer = table.pokerDealer;
    loadAnimDict(pokerAnimation[2], function () {
        pokerDealer.taskPlayAnim(pokerAnimation[2], anim, 1, 0, 2000, 49, 1, false, false, false);
    });
    while (pokerDealer.handle && pokerDealer.getAnimCurrentTime(pokerAnimation[2], anim) < 0.2)
        await mp.game.waitAsync(10);
    table.deck.attachTo(pokerDealer.handle, pokerDealer.getBoneIndex(60309), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, false, false, false, true, 2, true);
    anim = pokerDealer.male ? "deck_shuffle" : "female_deck_shuffle";
    pokerDealer.taskPlayAnim(pokerAnimation[2], anim, 8, 0, 2000, 49, 1, false, false, false);
    while (pokerDealer.handle && pokerDealer.getAnimCurrentTime(pokerAnimation[2], anim) < 0.3)
        await mp.game.waitAsync(10);
    anim = pokerDealer.male ? "deck_idle" : `female_deck_idle`;
    pokerDealer.taskPlayAnim(pokerAnimation[2], anim, 8, 0, 2000, 49, 1, false, false, false);
}
function SitAtPokerTable(nearTable, nearSeat, situp) {
    const sitAnims = ['sit_enter_left_side', 'sit_enter_right_side'];
    let animationIndex = 1;
    const rotation = nearTable.rotation.z + nearSeat.Rotation;
    if (!situp) {
        let offset = mp.players.local.getOffsetFromGivenWorldCoords(nearSeat.Position.x, nearSeat.Position.y, nearSeat.Position.z);
        if (offset.x > 0)
            animationIndex = 0;
        mp.players.local.taskPlayAnimAdvanced(pokerAnimation[1], sitAnims[animationIndex], nearSeat.Position.x, nearSeat.Position.y, nearSeat.Position.z, 0, 0, rotation, 1e3, -1e3, -1, 5642, 0, 2, 1);
        setTimeout(() => mp.players.local.taskPlayAnim(pokerAnimation[1], "idle_cardgames", 1, 0, -1, 49, 1, false, false, false), 3000);
    }
    else {
        const sitUpAnim = ['sit_exit_left', 'sit_exit_right'][Math.floor(Math.random() * 2)];
        mp.players.local.clearTasksImmediately();
        mp.players.local.taskPlayAnimAdvanced(pokerAnimation[1], sitUpAnim, nearSeat.Position.x, nearSeat.Position.y, nearSeat.Position.z + 1, 0, 0, mp.players.local.getHeading(), 8, -8, -1, 513, 0, 0, 0);
        setTimeout(() => {
            mp.players.local.stopAnimTask(pokerAnimation[1], sitUpAnim, 3);
            mp.players.local.clearTasksImmediately();
            mp.players.local.clearTasks();
            mp.players.local.freezePosition(false);
            playingPoker = false;
        }, 3000);
    }
}
let pokerAnimation = ["anim_casino_b@amb@casino@games@shared@dealer@", "anim_casino_b@amb@casino@games@shared@player@", "anim_casino_b@amb@casino@games@threecardpoker@dealer", "anim_casino_b@amb@casino@games@shared@dealer@"];
function PokerRender() {
    if (mp.players.local.dimension !== mp.casino_dimension) return
    const NearTable = GetClosestTable(mp.players.local.position);
    if (!playingPoker) {
        if (NearTable == null)
            return;
        const Seat = GetClosestSeatData(NearTable, mp.players.local.position);
        if (Seat == null)
            return;
        mp.game.graphics.drawMarker(20, Seat.Position.x, Seat.Position.y, Seat.Position.z + 1, 0.0, 0.0, 0.0, 180.0, 0.0, 0.0, 0.4, 0.4, 0.4, 255, 165, 0, 100, true, true, 2, true, null, null, false);
    }
}
function GetDistanceBetweenPoints3D(v1, v2) {
    return Math.abs(Math.sqrt(Math.pow(v2.x - v1.x, 2) +
        Math.pow(v2.y - v1.y, 2) +
        Math.pow(v2.z - v1.z, 2)));
}
function GetClosestTable(Position) {
    let ClosestTable = null;
    let ClosestDistance = 2.3;
    for (const Table of pokerTablesArray) {
        const Distance = GetDistanceBetweenPoints3D(Position, Table.position);
        if (Distance < ClosestDistance) {
            ClosestTable = Table;
            ClosestDistance = Distance;
        }
    }
    return ClosestTable;
}
function GetClosestSeatData(Table, Position) {
    if (!Table)
        return;
    let ClosestChair = null;
    let ClosestDistance = 1.6;
    for (const Chair of CHAIRS) {
        const ObjectPos = mp.game.object.getObjectOffsetFromCoords(Table.position.x, Table.position.y, Table.position.z, Table.rotation.z, Chair.offset.x, Chair.offset.y, Chair.offset.z);
        const Distance = GetDistanceBetweenPoints3D(Position, ObjectPos);
        if (Distance < ClosestDistance) {
            ClosestChair = {
                Position: ObjectPos,
                Rotation: Chair.heading,
                ChairID: CHAIRS.indexOf(Chair)
            };
            ClosestDistance = Distance;
        }
    }
    return ClosestChair;
}
setInterval(() => {
    pokerCardsSlider();
}, 10);
function pokerCardsSlider() {
    cardsToSlide.forEach(function (card, index) {
        if (!card.timer)
            card.timer = 100;
        if (card.object.handle && card.timer > 100 && card.timer < 700) {
            card.object.slide(card.pos.x, card.pos.y, card.pos.z, 0.012, 0.012, 0.012, true);
            card.object.rotation = new mp.Vector3(0.0, 180.0, 3 + card.object.rotation.z);
            card.timer = card.timer + 10;
        }
        else if (card.object.handle && card.timer > 700) {
            card.object.position = card.pos;
            card.object.rotation = new mp.Vector3(0.0, 180.0, 3 + card.rot);
            cardsToSlide.splice(index, 1);
        }
        else
            card.timer = card.timer + 10;
    });
}
function loadAnimDict(a, b) {
    if (mp.game.streaming.hasAnimDictLoaded(a))
        return void b();
    mp.game.streaming.requestAnimDict(a);
    let c = setInterval(function () {
        if (mp.game.streaming.hasAnimDictLoaded(a)) {
            b();
            clearInterval(c);
        }
    }, 100);
}
mp.events.add("CREATE_POKER_TABLE", (id, position, rotation, pedSex, tableType, pedComp) => {
    CreatePokerTable(id, JSON.parse(position), rotation, pedSex, tableType, pedComp);
});
function CreatePokerTable(id, pos, rot, male, type, compId) {
    if (!pokerTableModel[type])
        return chatDebug("Unknown table type");
    if (!mp.game.streaming.isModelInCdimage(mp.game.joaat(pokerTableModel[type])))
        return chatDebug("Table model not in cdimage");
    if (mp.game.streaming.isModelValid(mp.game.joaat(pokerTableModel[type])) == false)
        return chatDebug("Invalid table model");
    pokerTables[id] = mp.objects.new(mp.game.joaat(pokerTableModel[type]), pos, {
        rotation: new mp.Vector3(0, 0, rot),
        alpha: 255,
        dimension: mp.casino_dimension
    });
    pokerTables[id].compId = compId;
    pokerTables[id].pokerId = id;
    pokerTables[id].pokerTable = true;
    pokerTables[id].streamingRange = 300;
    pokerTables[id].notifyStreaming = true;
    CreateTablePed(id, male);
    createPlayerCards(id);
    pokerTablesArray.push(pokerTables[id]);
}
mp.events.add("entityStreamIn", (entity) => {
    if (entity.pokerPedId || entity.pokerPedId === 0) {
        setPedVariations(entity, entity.compId);
        dealerPlayIdleAnimation(entity.pokerPedId);
    }
});
function CreateTablePed(id, isMale) {
    if (!pokerTables[id]) return
    const PedModel = isMale ? "S_M_Y_Casino_01" : "S_F_Y_Casino_01";
    const PedPosition = mp.game.object.getObjectOffsetFromCoords(pokerTables[id].position.x, pokerTables[id].position.y, pokerTables[id].position.z, pokerTables[id].rotation.z, -0.7, 0.0, 0.5);
    const PedHeading = pokerTables[id].rotation.z - 90;
    //chatDebug(JSON.stringify(PedPosition));
    //chatDebug(`${PedHeading}`);
    const pokerDealer = mp.peds.new(mp.game.joaat(PedModel), PedPosition, PedHeading, mp.casino_dimension);
    pokerDealer.freezePosition(true);
    pokerDealer.setInvincible(true);
    pokerDealer.pokerPedId = id;
    pokerDealer.male = isMale;
    pokerTables[id].pokerDealer = pokerDealer;
}
function createPlayerCards(id) {
    if (!pokerTables[id]) return
    pokerTables[id].playerCards = [];
    pokerTables[id].dealerCards = [];
    let Table = pokerTables[id];
    let deckPosition = mp.game.object.getObjectOffsetFromCoords(Table.position.x, Table.position.y, Table.position.z, Table.rotation.z, -0.26, 0.28, 0.455);
    pokerTables[id].deck = mp.objects.new(mp.game.joaat(deckModel), deckPosition, {
        rotation: new mp.Vector3(0.0, 180.0, pokerTables[id].rotation.z - 90),
        alpha: 255,
        dimension: mp.casino_dimension
    });
    for (let i = 0; i < 5; i++) {
        let cardposition = mp.game.object.getObjectOffsetFromCoords(Table.position.x, Table.position.y, Table.position.z, Table.rotation.z, CardsOffsets[i].offset.x, CardsOffsets[i].offset.y, CardsOffsets[i].offset.z - 0.010);
        pokerTables[id].playerCards[i] = [];
        pokerTables[id].playerCards[i][0] = mp.objects.new(mp.game.joaat(`vw_prop_vw_club_char_a_a`), cardposition, {
            rotation: new mp.Vector3(0.0, 180.0, CardsOffsets[i].heading + pokerTables[id].rotation.z),
            alpha: 255,
            dimension: mp.casino_dimension
        });
        cardposition = mp.game.object.getObjectOffsetFromCoords(Table.position.x, Table.position.y, Table.position.z, Table.rotation.z, CardsOffsets[i].offset2.x, CardsOffsets[i].offset2.y, CardsOffsets[i].offset2.z - 0.015);
        pokerTables[id].playerCards[i][1] = mp.objects.new(mp.game.joaat(`vw_prop_vw_club_char_a_a`), cardposition, {
            rotation: new mp.Vector3(0.0, 180.0, CardsOffsets[i].heading + pokerTables[id].rotation.z),
            alpha: 255,
            dimension: mp.casino_dimension
        });
        cardposition = mp.game.object.getObjectOffsetFromCoords(Table.position.x, Table.position.y, Table.position.z, Table.rotation.z, DealerCardsOffsets[i].offset.x, DealerCardsOffsets[i].offset.y, DealerCardsOffsets[i].offset.z);
        pokerTables[id].dealerCards[i] = mp.objects.new(mp.game.joaat(`vw_prop_vw_club_char_a_a`), cardposition, {
            rotation: new mp.Vector3(0.0, 0.0, pokerTables[id].rotation.z - 90),
            alpha: 255,
            dimension: mp.casino_dimension
        });
    }
}
function dealerPlayIdleAnimation(id) {
    if (!pokerTables[id]) return
    let anim = "female_idle";
    if (pokerTables[id].pokerDealer.male)
        anim = "idle";
    loadAnimDict(pokerAnimation[3], function () {
        pokerTables[id].pokerDealer.taskPlayAnim(pokerAnimation[3], anim, 1, 0, -1, 49, 1, false, false, false);
    });
}
mp.events.add("render", PokerRender);
mp.events.add("PokerLeaveTable", LeavePokerTable);
mp.events.add("displayDealerPokerCards", displayDealerPokerCards);
mp.events.add("hideDealerPokerCards", hideDealerPokerCards);
mp.events.add("displayPlayerPokerCards", displayPlayerPokerCards);
mp.events.add("hidePlayerCards", hidePlayerCards);
mp.events.add("revealPlayerCards", revealPlayerCards);
mp.events.add("dealerGivePlayerCards", dealerGivePlayerCards);
mp.events.add("putPokerDeckDown", putPokerDeckDown);
mp.events.add("prepareDeck", prepareDeck);
function revealPlayerCards(id, chair, cardsJson) {
    if (!pokerTables[id]) return
    const cards = JSON.parse(cardsJson);
    if (chair > -1) {
        for (let i = 0; i < cards.length; i++) {
            pokerTables[id].playerCards[chair][i].rotation = new mp.Vector3(0.0, 0.0, CardsOffsets[chair].heading + pokerTables[id].rotation.z);
            pokerTables[id].playerCards[chair][i].model = mp.game.joaat(PokerCards[cards[i]]);
        }
    }
}
function displayDealerPokerCards(id, cardsJson) {
    if (!pokerTables[id]) return
    let cards = JSON.parse(cardsJson);
    for (let i = 0; i < cards.length; i++) {
        let cardposition = mp.game.object.getObjectOffsetFromCoords(pokerTables[id].position.x, pokerTables[id].position.y, pokerTables[id].position.z, pokerTables[id].rotation.z, DealerCardsOffsets[i].offset.x, DealerCardsOffsets[i].offset.y, 0.455);
        if (pokerTables[id].dealerCards[i].position != cardposition)
            pokerTables[id].dealerCards[i].position = cardposition;
        if (pokerTables[id].dealerCards[i].model != mp.game.joaat(PokerCards[cards[i]])) {
            pokerTables[id].dealerCards[i].model = mp.game.joaat(PokerCards[cards[i]]);
        }
    }
}
function hidePlayerCards(id, chairId) {
    if (!pokerTables[id]) return
    if (chairId > -1) {
        let cardposition = mp.game.object.getObjectOffsetFromCoords(pokerTables[id].position.x, pokerTables[id].position.y, pokerTables[id].position.z, pokerTables[id].rotation.z, CardsOffsets[chairId].offset.x, CardsOffsets[chairId].offset.y, CardsOffsets[chairId].offset.z - 0.010);
        pokerTables[id].playerCards[chairId][0].position = cardposition;
        cardposition = mp.game.object.getObjectOffsetFromCoords(pokerTables[id].position.x, pokerTables[id].position.y, pokerTables[id].position.z, pokerTables[id].rotation.z, CardsOffsets[chairId].offset2.x, CardsOffsets[chairId].offset2.y, CardsOffsets[chairId].offset2.z - 0.015);
        pokerTables[id].playerCards[chairId][1].position = cardposition;
    }
}
function displayPlayerPokerCards(id, players) {
    if (!pokerTables[id]) return
    playerIds = JSON.parse(players);
    for (let i = 0; i < 5; i++) {
        if (playerIds.indexOf(i) != -1) {
            let cardposition = mp.game.object.getObjectOffsetFromCoords(pokerTables[id].position.x, pokerTables[id].position.y, pokerTables[id].position.z, pokerTables[id].rotation.z, CardsOffsets[i].offset.x, CardsOffsets[i].offset.y, CardsOffsets[i].offset.z);
            pokerTables[id].playerCards[i][0].position = cardposition;
            cardposition = mp.game.object.getObjectOffsetFromCoords(pokerTables[id].position.x, pokerTables[id].position.y, pokerTables[id].position.z, pokerTables[id].rotation.z, CardsOffsets[i].offset2.x, CardsOffsets[i].offset2.y, CardsOffsets[i].offset2.z);
            pokerTables[id].playerCards[i][1].position = cardposition;
        }
    }
}
function hideDealerPokerCards(id) {
    if (!pokerTables[id]) return
    dealerPlayIdleAnimation(id);
    for (let i = 0; i < 5; i++) {
        let cardposition = mp.game.object.getObjectOffsetFromCoords(pokerTables[id].position.x, pokerTables[id].position.y, pokerTables[id].position.z, pokerTables[id].rotation.z, DealerCardsOffsets[i].offset.x, DealerCardsOffsets[i].offset.y, DealerCardsOffsets[i].offset.z);
        if (pokerTables[id].dealerCards[i].position != cardposition)
            pokerTables[id].dealerCards[i].position = cardposition;
        cardposition = mp.game.object.getObjectOffsetFromCoords(pokerTables[id].position.x, pokerTables[id].position.y, pokerTables[id].position.z, pokerTables[id].rotation.z, CardsOffsets[i].offset.x, CardsOffsets[i].offset.y, CardsOffsets[i].offset.z - 0.010);
        if (pokerTables[id].playerCards[i][0].position != cardposition)
            pokerTables[id].playerCards[i][0].position = cardposition;
        pokerTables[id].playerCards[i][0].rotation = new mp.Vector3(0.0, 180.0, CardsOffsets[i].heading + pokerTables[id].rotation.z);
        cardposition = mp.game.object.getObjectOffsetFromCoords(pokerTables[id].position.x, pokerTables[id].position.y, pokerTables[id].position.z, pokerTables[id].rotation.z, CardsOffsets[i].offset2.x, CardsOffsets[i].offset2.y, CardsOffsets[i].offset2.z - 0.015);
        if (pokerTables[id].playerCards[i][1].position != cardposition)
            pokerTables[id].playerCards[i][1].position = cardposition;
        pokerTables[id].playerCards[i][1].rotation = new mp.Vector3(0.0, 180.0, CardsOffsets[i].heading + pokerTables[id].rotation.z);
    }
}
function LeavePokerTable() {
    if (!playingPoker)
        return;
    let nearTable = GetClosestTable(mp.players.local.position);
    if (!nearTable)
        return;
    const nearSeat = GetClosestSeatData(nearTable, mp.players.local.position);
    if (!nearSeat)
        return;
    if (mp.interfaceActive && mp.interfaceActive == "poker") {
        mp.interfaceActive = null
        browserMenu.call(`poker`, `set`, null)
    }
    SitAtPokerTable(nearTable, nearSeat, playingPoker);
}
mp.events.add({
    "POKER:createTable": (id, pos, rot) => {
        CreatePokerTable(id, pos, rot);
    },
    "POKER:DestroyUi": () => {
        if (mp.interfaceActive && mp.interfaceActive == "poker") {
            mp.interfaceActive = null
            browserMenu.call(`poker`, `set`, null)
        }
    },
    "enableInputs": () => {
        //global.chatopened = false;
    },
    "blockInputs": () => {
        //global.chatopened = true;
    },
    "POKER::mainpot": (mainpot) => {
        if (playingPoker === true)
            browserMenu.call(`poker`, `updateParam`, `mainpot`, mainpot)
    },
    "POKER::dealercards": (dealercards) => {
        if (playingPoker === true)
            browserMenu.call(`poker`, `updateParam`, `dealercards`, dealercards)
    },
    "POKER::gamestage": (gamestage) => {
        if (playingPoker === true)
            browserMenu.call(`poker`, `updateParam`, `gamestage`, gamestage)
    },
    "POKER::callAmount": (callAmount, minimumRaise) => {
        if (playingPoker === true)
            browserMenu.call(`poker`, `updateCallAndBetAmount`, callAmount, minimumRaise)
    },
    "POKER::timer": (timer) => {
        if (playingPoker === true)
            browserMenu.call(`poker`, `updateParam`, `timer`, timer)
    },
    "POKER::currentplayer": (currentplayer) => {
        if (playingPoker === true)
            browserMenu.call(`poker`, `updateParam`, `currentplayer`, currentplayer)
    },
    "POKER::updateButtons": (canpass, cancall, canthrow, canallin, canbet) => {
        if (playingPoker === true) {
            browserMenu.call(`poker`, `updateParam`, `canpass`, canpass)
            browserMenu.call(`poker`, `updateParam`, `cancall`, cancall)
            browserMenu.call(`poker`, `updateParam`, `canthrow`, canthrow)
            browserMenu.call(`poker`, `updateParam`, `canallin`, canallin)
            browserMenu.call(`poker`, `updateParam`, `canbet`, canbet)
        }
    },
    "POKER::disableallbuttons": (disableallbuttons) => {
        if (playingPoker === true)
            browserMenu.call(`poker`, `updateParam`, `disableallbuttons`, disableallbuttons)
    },
    "POKER::logs": (log) => {
        if (playingPoker === true)
            browserMenu.call(`poker`, `addLog`, log)
    },
    "POKER::players": (players) => {
        if (playingPoker === true) {
            browserMenu.call(`poker`, `updateParam`, `players`, [])
            browserMenu.call(`poker`, `updateParam`, `players`, players)
        }
    },
    "POKER::myPlayerSrc": (myPlayerSrc) => {
        if (playingPoker === true)
            browserMenu.call(`poker`, `updateParam`, `myPlayerSrc`, myPlayerSrc)
    },
    "POKER::update_mycards": (chairId, cards) => {
        if (playingPoker === true)
            browserMenu.call(`poker`, `updateMyCards`, chairId, cards)
    },
    "POKER::opened": (myPlayerSrc) => {
        if (playingPoker === true)
            browserMenu.call(`poker`, `updateParam`, `myPlayerSrc`, myPlayerSrc)
    },
    "POKER:playsound": (sound) => {
        if (playingPoker === true)
            browserMenu.call(`poker`, `PlaySound`, sound)
    },
    "Poker::notify": (msg) => {
        if (playingPoker === true)
            browserMenu.call(`poker`, `Notify`, msg)
    }
});

}; a; }
{let a = function scriptEntryPoint(mp) {
const { ScaleFormRacing } = require('gamemode/scripts/Casino/horses/scaleform.js')

mp.game.streaming.requestAnimDict("anim_casino_a@amb@casino@games@insidetrack@ped_male@engaged@01a@base_big_screen");

const localPlayer = mp.players.local;

const scaleFormRacing = new ScaleFormRacing('HORSE_RACING_WALL');

let isLoad = false;
let trycatchtime = new Date().getTime();

const LoadTexture = (horses) => {
    if (!mp.game.graphics.hasStreamedTextureDictLoaded('Prop_Screen_VW_InsideTrack')) {
        mp.game.graphics.requestStreamedTextureDict('Prop_Screen_VW_InsideTrack', false);
    }

    scaleFormRacing.callbackLoad().then(() => {
        mp.game.invoke("0xE6A9F00D4240B519", scaleFormRacing._handle, true);
        horses.forEach((horse, i) => {
            horsesRacing.setHour(horse.id, horse.name, horse.rate, horse.primaryColour, horse.secondaryColour, horse.horseColour, horse.maneColour);
        });
    }).catch(err => {
        mp.game.graphics.notify(err);
    })
}

let horsesplaying = false;

class horsesRacing {
    constructor() {
        this.timeRacing = 15000.0;
        this.countdown = 5;
        this.renderEvent;
        this.timer;
        this.bets = [];
        this.gamertags = [];
        this.inGame = true;
    }
    static showHourseScreen(gamertags, horse, bets) {
        try {
            this.gamertags = gamertags;
            this.bets = bets;
            for (let i = 0; i < gamertags.length; i++) {
                mp.game.graphics.pushScaleformMovieFunction(scaleFormRacing._handle, 'ADD_PLAYER');
                mp.game.invoke('0x77FE3402004CD1B0', gamertags[i]);
                mp.game.graphics.pushScaleformMovieFunctionParameterInt(parseInt(horse));
                mp.game.graphics.pushScaleformMovieFunctionParameterInt(parseInt(bets[i]));
                mp.game.graphics.popScaleformMovieFunctionVoid();
            }
            scaleFormRacing.callFunction("SHOW_SCREEN", 0);
            scaleFormRacing.callFunction("SET_DETAIL_HORSE", horse);
            scaleFormRacing.callFunction("SHOW_SCREEN", 1);
        }
        catch (e) {
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "showHourseScreen", e.toString());
        }
    }
    static clearAllPlayers() {
        scaleFormRacing.callFunction("CLEAR_ALL_PLAYERS");
    }
    static setCountdown(time) {
        scaleFormRacing.callFunction("SET_COUNTDOWN", time);
        this.countdown = time;
    }
    static setHour(id, name, rate, primaryColour, secondaryColour, horseColour, maneColour) {
        scaleFormRacing.callFunction("SET_HORSE", id, name, `${rate}/1`, primaryColour, secondaryColour, horseColour, maneColour);
    }
    static playSound(sound) {
        try {
            let soundId = mp.game.invoke('0x430386FE9BF80B45');
            mp.game.audio.stopSound(soundId);
            mp.game.audio.releaseSoundId(soundId);
            mp.game.audio.playSoundFromCoord(soundId, sound, 1093.907, 263.1436, -49.49115, 'dlc_vw_casino_inside_track_betting_main_event_sounds', false, 0, false);
            if (mp.game.audio.isAudioSceneActive('dlc_vw_casino_inside_track_live_race')) {
                mp.game.audio.stopAudioScene('dlc_vw_casino_inside_track_live_race');
            }
        }
        catch (e) {
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "playSound", e.toString());
        }
    }
    static showHorseResults(gamertags, results) {
        try {
            for (let i = 0; i < gamertags.length; i++) {
                scaleFormRacing.callFunction("SET_PLAYER_RESULT", gamertags[i], results[i]);
                mp.game.invoke('0x77FE3402004CD1B0', gamertags[i]);
                mp.game.graphics.pushScaleformMovieFunctionParameterInt(parseInt(results[i]));
                mp.game.graphics.popScaleformMovieFunctionVoid();
            }
            scaleFormRacing.callFunction("SHOW_SCREEN", 4);
        }
        catch (e) {
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "showHorseResults", e.toString());
        }
    }
    static startHorseRacing(seed = 1, firstHorse = 0, secondHorse = 1, thirdHorse = 2, fourthHorse = 3, fifthHorse = 4, sixthHorse = 6, sync = true) {
        try {
            this.inGame = true;
            scaleFormRacing.callFunction("START_RACE", 15000.0, seed, firstHorse, secondHorse, thirdHorse, fourthHorse, fifthHorse, sixthHorse, 1.0, sync)
            mp.game.graphics.popScaleformMovieFunctionVoid();
            this.playSound('race_loop');
            setTimeout((function () {
                this.playSound('race_finish');
            }).bind(this), 15000 - 1000);
        }
        catch (e) {
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "startHorseRacing", e.toString());
        }
    }
    static showMenu(data) {
        if (data) mp.interfaceActive = "horses"
        else mp.interfaceActive = false
        browserMenu.call(`horses`, `set`, data)
    }
}

scaleFormRacing.callFunction("SHOW_SCREEN", 5);

mp.events.add({
    'render': () => {
        try {
            if (isLoad && mp.game.invoke('0x2107BA504071A6BB', localPlayer.handle) == 275201 && scaleFormRacing && scaleFormRacing.isLoaded) {
                scaleFormRacing.renderTarget('casinoscreen_02', 'vw_vwint01_betting_screen', 0.5, 0.5, 1.001, 1.001);
            }
        }
        catch (e) {
            if (new Date().getTime() - trycatchtime < 60000) return;
            trycatchtime = new Date().getTime();
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "render", e.toString());
        }
    },
    "client.horse.enterDim": (horses) => {
        try {
            if (!isLoad) {
                isLoad = true;
                LoadTexture(horses);
            }
        }
        catch (e) {
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "client.horse.SLOT", e.toString());
        }

    },
    "client.horse.SLOT": async (game) => {
        try {
            if (mp.game.invoke('0x2107BA504071A6BB', localPlayer.handle) !== 275201)
                return;
            horsesRacing.inGame = game;
            horsesplaying = true;
            localPlayer.freezePosition(true);
        }
        catch (e) {
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "client.horse.SLOT", e.toString());
        }

    },
    "client.horse.START_TIMER": (time) => {
        try {
            // if (mp.game.invoke('0x2107BA504071A6BB', localPlayer.handle) !== 275201)
            //     return;
            horsesRacing.setCountdown(time);
            if (horsesRacing.timer) clearInterval(horsesRacing.timer), delete horsesRacing.timer;
            horsesRacing.timer = setInterval(() => {
                if (horsesRacing.countdown > 0) {
                    horsesRacing.setCountdown(horsesRacing.countdown - 1);
                } else {
                    if (horsesRacing.timer) clearInterval(horsesRacing.timer), delete horsesRacing.timer;
                }
            }, 1000)
        }
        catch (e) {
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "client.horse.START_TIMER", e.toString());
        }
    },
    "client.horse.START_RACING": (seed = 1, firstHorse = 0, secondHorse = 1, thirdHorse = 2, fourthHorse = 3, fifthHorse = 4, sixthHorse = 5) => {
        try {
            if (mp.game.invoke('0x2107BA504071A6BB', localPlayer.handle) !== 275201)
                return;
            if (horsesplaying) browserMenu.call(`horses`, `updateParam`, `allowBets`, false)
            horsesRacing.startHorseRacing(seed, firstHorse, secondHorse, thirdHorse, fourthHorse, fifthHorse, sixthHorse);
        }
        catch (e) {
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "client.horse.START_RACING", e.toString());
        }
    },
    "client.horse.SHOW_RESULTS": (gamertags, results) => {
        try {
            if (mp.game.invoke('0x2107BA504071A6BB', localPlayer.handle) !== 275201)
                return;
            horsesRacing.showHorseResults(gamertags, results);
        }
        catch (e) {
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "client.horse.SHOW_RESULTS", e.toString());
        }
    },
    "client.horse.SHOW_HORSE": (gamertags, horse, bets) => {
        try {
            if (mp.game.invoke('0x2107BA504071A6BB', localPlayer.handle) !== 275201)
                return;
            if (horsesRacing.inGame) return;
            horsesRacing.clearAllPlayers();
            horsesRacing.showHourseScreen(gamertags, horse, bets);
        }
        catch (e) {
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "client.horse.SHOW_HORSE", e.toString());
        }
    },
    "client.horse.GET_HORSE": (horse) => {
        try {
            if (mp.game.invoke('0x2107BA504071A6BB', localPlayer.handle) !== 275201)
                return;
            if (horsesRacing.inGame) return;
            //horsesRacing.clearAllPlayers();
            //horsesRacing.showHourseScreen(horsesRacing.gamertags, horse, horsesRacing.bets);

            scaleFormRacing.callFunction("SHOW_SCREEN", 0);
            scaleFormRacing.callFunction("SET_DETAIL_HORSE", horse);
            scaleFormRacing.callFunction("SHOW_SCREEN", 1);
        }
        catch (e) {
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "client.horse.GET_HORSE", e.toString());
        }
    },
    "client.horse.COUNTDOWN_SCREEN": (horses) => {
        try {
            // if (mp.game.invoke('0x2107BA504071A6BB', localPlayer.handle) !== 275201)
            //     return;
            horsesRacing.clearAllPlayers();
            horses.forEach((horse, i) => {
                horsesRacing.setHour(horse.id, horse.name, horse.rate, horse.primaryColour, horse.secondaryColour, horse.horseColour, horse.maneColour);
            })
            scaleFormRacing.callFunction("SHOW_SCREEN", 0);
            horsesRacing.inGame = false;
            if (horsesplaying) {
                browserMenu.call(`horses`, `updateParam`, `allowBets`, true)
                browserMenu.call(`horses`, `updateParam`, `horses`, horses)
            }
        }
        catch (e) {
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "client.horse.COUNTDOWN_SCREEN", e.toString());
        }
    },
    "client.horse.TEARS_SLOT": () => {
        try {
            if (mp.game.invoke('0x2107BA504071A6BB', localPlayer.handle) !== 275201)
                return;
            if (horsesplaying == false) return;
            horsesplaying = false;
            localPlayer.freezePosition(false);
        }
        catch (e) {
            mp.events.callRemote("server.horse.client_trycatch", "horses/index", "client.horse.TEARS_SLOT", e.toString());
        }
    },
    "client.horse.seatAtComp": (player, x, y, z) => {
        player.taskPlayAnimAdvanced("anim_casino_a@amb@casino@games@insidetrack@ped_male@engaged@01a@base_big_screen", "base_big_screen", x, y, z, 0, 0, 45, 8.0, 1.0, -1, 69, 0, 0, 0);
    },
    "client.horse.exitComp": (player) => {
        player.taskPlayAnim("anim_casino_b@amb@casino@games@shared@player@", "sit_exit_left", 3.0, 1.0, 2500, 2, 0, false, false, false);
    },
    "showHorsesMenu": (data) => {
        horsesRacing.showMenu(data);
    },
    "showHorsesMenu.updateParam": (name, value) => {
        if (horsesplaying) browserMenu.call(`horses`, `updateParam`, name, value);
    },
})
}; a; }
{let a = function scriptEntryPoint(mp) {
class Scalefrom {
    constructor(scaleformStr) {
        this._handle = mp.game.graphics.requestScaleformMovie(scaleformStr);
        this.queueCallFunction = new Map();
        this.renderTargetId = undefined;
    }

    get isLoaded() {
        try {
            return mp.game.graphics.hasScaleformMovieLoaded(this._handle);
        }
        catch (e) {
            mp.events.callRemote("client_trycatch", "horses/scaleform", "isLoaded", e.toString());
        }
    }

    get isValid() {
        return this._handle !== 0;
    }

    get handle() {
        return this._handle;
    }

    callbackLoad() {
        return new Promise((function (resolve, reject) {
            let countCheck = 0;
            const timer = setInterval(() => {
                if (countCheck > 100) {
                    resolve(translateText("Ошибка загрузки"));
                    clearInterval(timer);
                    return;
                }
                if (this.isValid && this.isLoaded) {
                    clearInterval(timer);
                    countCheck++;
                    resolve();
                }
            }, 10);
        }).bind(this));
    }

    callFunction(strFunction, ...args) {
        try {
            if (this.isLoaded && this.isValid) {
                const graphics = mp.game.graphics;
                graphics.pushScaleformMovieFunction(this._handle, strFunction);
                args.forEach(arg => {
                    switch (typeof arg) {
                        case 'string': {
                            graphics.pushScaleformMovieFunctionParameterString(arg);
                            break;
                        }
                        case 'boolean': {
                            graphics.pushScaleformMovieFunctionParameterBool(arg);
                            break;
                        }
                        case 'number': {
                            if (Number(arg) === arg && arg % 1 !== 0) {
                                graphics.pushScaleformMovieFunctionParameterFloat(arg);
                            } else {
                                graphics.pushScaleformMovieFunctionParameterInt(arg);
                            }
                        }
                    }
                });
                graphics.popScaleformMovieFunctionVoid();
            } else {
                this.queueCallFunction.set(strFunction, args);
            }
        }
        catch (e) {
            mp.events.callRemote("client_trycatch", "horses/scaleform", "callFunction", e.toString());
        }
    }

    onUpdate() {
        try {
            if (this.isLoaded && this.isValid) {
                this.queueCallFunction.forEach((args, strFunction) => {
                    this.callFunction(strFunction, ...args);
                    this.queueCallFunction.delete(strFunction);
                });
            }
        }
        catch (e) {
            mp.events.callRemote("client_trycatch", "horses/scaleform", "onUpdate", e.toString());
        }
    }

    renderFullscreen() {
        try {
            this.onUpdate();
            if (this.isLoaded && this.isValid) {
                mp.game.graphics.drawScaleformMovieFullscreen(this._handle, 255, 255, 255, 255, false);
            }
        }
        catch (e) {
            mp.events.callRemote("client_trycatch", "horses/scaleform", "renderFullscreen", e.toString());
        }
    }

    render2D(x, y, width, height) {
        try {
            this.onUpdate();
            if (this.isLoaded && this.isValid) {
                if (typeof x !== 'undefined' && typeof y !== 'undefined' && typeof width !== 'undefined' && typeof height !== 'undefined') {
                    mp.game.graphics.drawScaleformMovie(this._handle, x, y, width, height, 255, 255, 255, 255, 0);
                } else {
                    mp.game.graphics.drawScaleformMovieFullscreen(this._handle, 255, 255, 255, 255, false);
                }
            }
        }
        catch (e) {
            mp.events.callRemote("client_trycatch", "horses/scaleform", "render2D", e.toString());
        }
    }

    render3D(position, rotation, scale) {
        try {
            this.onUpdate();
            if (this.isLoaded && this.isValid) {
                mp.game.graphics.drawScaleformMovie3dNonAdditive(this._handle, position.x, position.y, position.z, rotation.x, rotation.y, rotation.z, 2, 2, 1, scale.x, scale.y, scale.z, 2);
            }
        }
        catch (e) {
            mp.events.callRemote("client_trycatch", "horses/scaleform", "render3D", e.toString());
        }
    }

    render3DAdditive(position, rotation, scale) {
        try {
            this.onUpdate();
            if (this.isLoaded && this.isValid) {
                mp.game.graphics.drawScaleformMovie3d(this._handle, position.x, position.y, position.z, rotation.x, rotation.y, rotation.z, 2, 2, 1, scale.x, scale.y, scale.z, 2);
            }
        }
        catch (e) {
            mp.events.callRemote("client_trycatch", "horses/scaleform", "render3DAdditive", e.toString());
        }
    }

    createRenderTarget(name, model) {
        try {
            if (!mp.game.ui.isNamedRendertargetRegistered(name))
                mp.game.ui.registerNamedRendertarget(name, false); //Register render target
            if (!mp.game.ui.isNamedRendertargetLinked(mp.game.joaat(model)))
                mp.game.ui.linkNamedRendertarget(mp.game.joaat(model)); //Link it to all models
            if (mp.game.ui.isNamedRendertargetRegistered(name))
                return mp.game.ui.getNamedRendertargetRenderId(name); //Get the handle
            return -1;
        }
        catch (e) {
            mp.events.callRemote("client_trycatch", "horses/scaleform", "createRenderTarget", e.toString());
            return -1;
        }
    }

    renderTarget(name, model, x, y, width, height) {
        try {
            this.onUpdate();
            if (this.isLoaded && this.isValid) {
                if (!this.renderTargetId) this.renderTargetId = this.createRenderTarget(name, model);
                if (this.renderTargetId == -1) return mp.gui.chat.push('Could not create render target.')
                mp.game.ui.setTextRenderId(this.renderTargetId);
                mp.game.graphics.set2dLayer(4);
                mp.game.graphics.drawScaleformMovie(this._handle, x, y, width, height, 255, 255, 255, 255, 0);
                mp.game.ui.setTextRenderId(1);
            }
        }
        catch (e) {
            mp.events.callRemote("client_trycatch", "horses/scaleform", "renderTarget", e.toString());
        }
    }

    dispose() {
        mp.game.graphics.setScaleformMovieAsNoLongerNeeded(this._handle);
    }
}

exports = {
    ScaleFormRacing: Scalefrom
};
}; a; }
{let a = function scriptEntryPoint(mp) {
const EArmWrestlingPlayer = {
    PLAYER_ONE: 1,
    PLAYER_TWO: 2
};
class ArmWrestling {
    static GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS = "0x163E252DE035A133";
    static LocalPlayer = mp.players.local;
    static CurrentPosition;
    static CurrentTable;
    static OnInit() {
        mp.events.add({
            render: ArmWrestling.RenderHandler,
            "C::JoinWrestlingTable": ArmWrestling.JoinTable,
            "C::LeaveWrestlingTable": ArmWrestling.LeaveTable,
        });
    }
    static async loadAnimationDict(a) {
        if (mp.game.streaming.hasAnimDictLoaded(a))
            return Promise.resolve(true);
        return new Promise(async (resolve) => {
            mp.game.streaming.requestAnimDict(a);
            const waitCount = mp.user.preferences.lowQualityAssets ? 50 : 35;
            for (let i = 0; !mp.game.streaming.hasAnimDictLoaded(a) && i < waitCount; ++i) {
                await mp.game.waitAsync(100);
            }
            resolve(true);
        });
    }
    /* EVENT HANDLERS */
    static RenderHandler() {
        if (ArmWrestling.CurrentTable != undefined && ArmWrestling.CurrentTable.getVariable("READY") === 1) {
            mp.game.controls.disableControlAction(0, 24 /* LMB */, true);
            if (mp.game.controls.isDisabledControlJustReleased(0, 24)) {
                mp.events.callRemoteUnreliable("S::WrestlingClick", ArmWrestling.CurrentPosition);
            }
        }
        mp.players.forEachInStreamRange((player) => {
            if (player.isPlayingAnim("mini@arm_wrestling", "sweep_a", 3)) {
                const table = mp.objects.atRemoteId(player.getVariable("W_TA"));
                let tableIntension = parseFloat(table.variable_INTENSION).toFixed(3);
                tableIntension = parseFloat(tableIntension);
                if (isNaN(tableIntension)) tableIntension = 0.5;
                player.setAnimSpeed("mini@arm_wrestling", "sweep_a", 1);
                player.setAnimCurrentTime("mini@arm_wrestling", "sweep_a", tableIntension);
            }
            else if (player.isPlayingAnim("mini@arm_wrestling", "sweep_b", 3)) {
                const table = mp.objects.atRemoteId(player.getVariable("W_TA"));
                let tableIntension = parseFloat(table.variable_INTENSION).toFixed(3);
                tableIntension = parseFloat(tableIntension);
                if (isNaN(tableIntension)) tableIntension = 0.5;
                player.setAnimSpeed("mini@arm_wrestling", "sweep_b", 1);
                player.setAnimCurrentTime("mini@arm_wrestling", "sweep_b", tableIntension);
            }
        });
    }
    /* METHODS */
    static async JoinTable(PlayerId, TableId, Place) {
        const Player = mp.players.atRemoteId(PlayerId);
        const Table = mp.objects.atRemoteId(TableId);
        if (!Player || !Player.doesExist() || !Table || !Table.doesExist()) {
            return;
        }
        await ArmWrestling.loadAnimationDict("mini@arm_wrestling");
        const rotation = mp.game.object.getCoordsAndRotationOfClosestOfType(Table.position.x, Table.position.y, Table.position.z, 1, Table.getModel(), 2);
        if (!rotation)
            return;
        // ToDo: cleanup, decouple methods and data per player
        if (Place === EArmWrestlingPlayer.PLAYER_ONE) {
            Player.taskPlayAnim("mini@arm_wrestling", "aw_ig_intro_alt1_a", 2, 1, 1000, 1, 0, false, false, false);
            const interval = setInterval(async () => {
                if (Player.getAnimCurrentTime("mini@arm_wrestling", "aw_ig_intro_alt1_a") < 0.95) {
                    await mp.game.waitAsync(100);
                }
                else {
                    clearInterval(interval);
                }
            }, 100);
            const position = mp.game.invokeVector3(ArmWrestling.GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS, Table.position.x, Table.position.y, Table.position.z, Table.getHeading(), 0.245 / 2, 1.195 / 2, 0.533);
            Player.taskPlayAnimAdvanced("mini@arm_wrestling", "nuetral_idle_a", position.x, position.y, position.z, rotation.outRotation.x, rotation.outRotation.y, rotation.outRotation.z - 180, 1, 0, -1, 1, 0, 2, 1);
        }
        else {
            Player.taskPlayAnim("mini@arm_wrestling", "aw_ig_intro_alt1_b", 2, 1, 1000, 1, 0, false, false, false);
            const interval = setInterval(async () => {
                if (Player.getAnimCurrentTime("mini@arm_wrestling", "aw_ig_intro_alt1_b") < 0.95) {
                    await mp.game.waitAsync(100);
                }
                else {
                    clearInterval(interval);
                }
            }, 100);
            const position = mp.game.invokeVector3(ArmWrestling.GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS, Table.position.x, Table.position.y, Table.position.z, Table.getHeading(), -0.245 / 2, -1.195 / 2, 0.533);
            Player.taskPlayAnimAdvanced("mini@arm_wrestling", "nuetral_idle_b", position.x, position.y, position.z, rotation.outRotation.x, rotation.outRotation.y, rotation.outRotation.z, 1, 0, -1, 1, 0, 2, 1);
        }
        Player.freezePosition(true);
        if (Player == mp.players.local) {
            ArmWrestling.CurrentTable = Table;
            ArmWrestling.CurrentPosition = Place;
        }
    }
    static LeaveTable(PlayerId) {
        const Player = mp.players.atRemoteId(PlayerId);
        if (!Player || !mp.players.exists(Player))
            return;
        Player.freezePosition(false);
        Player.clearTasksImmediately();
        Player.clearTasks();
        if (Player == mp.players.local) {
            ArmWrestling.CurrentTable = undefined;
            ArmWrestling.CurrentPosition = undefined;
        }
    }
}
ArmWrestling.OnInit();

class Countdown {
    static CountdownData;
    static ScaleformHandle;
    static async OnInit() {
        mp.events.add({
            "C::StartCountdown": Countdown.StartCountdown
        });
        mp.game.audio.requestScriptAudioBank("HUD_MINI_GAME_SOUNDSET", false, 0);
    }
    static async StartCountdown(r, g, b, duration = 3) {
        Countdown.ScaleformHandle = mp.game.graphics.requestScaleformMovie("COUNTDOWN");
        for (let i = 0; i < 20 && !mp.game.graphics.hasScaleformMovieLoaded(Countdown.ScaleformHandle); ++i) {
            await mp.game.waitAsync(100);
        }
        Countdown.CountdownData = {
            TimeLeft: duration,
            Color: [r, g, b]
        };
        mp.events.call("enableSound", "button.wav", 0.5)  
        mp.events.add("render", Countdown.RenderHandler);
        const int = setInterval(() => {
            if (!Countdown.CountdownData)
                return;
            Countdown.CountdownData.TimeLeft--;
            if (Countdown.CountdownData.TimeLeft >= 0) mp.events.call("enableSound", "button.wav", 0.5)
            if (Countdown.CountdownData.TimeLeft <= -2) { // -2 to give 2 sec for "CLICK" one to show
                clearInterval(int);
                if (Countdown.ScaleformHandle)
                    mp.game.graphics.setScaleformMovieAsNoLongerNeeded(Countdown.ScaleformHandle);
                Countdown.CountdownData = undefined;
                Countdown.ScaleformHandle = undefined;
                mp.events.remove("render", Countdown.RenderHandler);
                mp.game.audio.playSoundFrontend(-1, "3_2_1_NON_RACE", "HUD_MINI_GAME_SOUNDSET", true);
            }
        }, 1000);
    }
    static RenderHandler() {
        if (!Countdown.CountdownData || !Countdown.ScaleformHandle)
            return;
        if (Countdown.CountdownData.TimeLeft > 0) {
            mp.game.graphics.beginScaleformMovieMethod(Countdown.ScaleformHandle, 'FADE_MP');
            mp.game.graphics.scaleformMovieMethodAddParamTextureNameString(Countdown.CountdownData.TimeLeft.toString());
            mp.game.graphics.scaleformMovieMethodAddParamInt(Countdown.CountdownData.Color[0]);
            mp.game.graphics.scaleformMovieMethodAddParamInt(Countdown.CountdownData.Color[1]);
            mp.game.graphics.scaleformMovieMethodAddParamInt(Countdown.CountdownData.Color[2]);
            mp.game.graphics.endScaleformMovieMethod();
        }
        else if (Countdown.CountdownData.TimeLeft <= 0) {
            mp.game.graphics.beginScaleformMovieMethod(Countdown.ScaleformHandle, 'SET_MESSAGE');
            mp.game.graphics.scaleformMovieMethodAddParamTextureNameString("Клiкай!");
            mp.game.graphics.scaleformMovieMethodAddParamInt(Countdown.CountdownData.Color[0]);
            mp.game.graphics.scaleformMovieMethodAddParamInt(Countdown.CountdownData.Color[1]);
            mp.game.graphics.scaleformMovieMethodAddParamInt(Countdown.CountdownData.Color[2]);
            mp.game.graphics.endScaleformMovieMethod();
        }
        mp.game.graphics.drawScaleformMovieFullscreen(Countdown.ScaleformHandle, Countdown.CountdownData.Color[0], Countdown.CountdownData.Color[1], Countdown.CountdownData.Color[2], 255, false);
    }
}
Countdown.OnInit();
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.game.streaming.requestAnimDict('missfinale_c2ig_11');
mp.isPushingVehicle = false

class PushBrokenDownClient {
    constructor() {
        this.pushingData = []
        this.currentDirection = "center"

        mp.events.add("playerQuit", (entity) => {
            let data = this.pushingData.find((data => data.player == entity.remoteId))
            if (data) this.stopPushVehicle(data.vehicle)
        })

        mp.events.add("entityStreamIn", (entity) => {
            let data = entity.getVariable("pushingPlayer")
            if (data) this.startPushVehicle(data)
        })

        mp.events.add("entityStreamOut", (entity) => {
            let data = entity.getVariable("pushingPlayer")
            if (data) this.stopPushVehicle(data.vehicle)
        })

        mp.events.addDataHandler("pushingPlayer", (entity, value) => {
            if (entity.type != "vehicle") return
            if (!this.isStreamed(entity.remoteId)) return

            if (value) this.startPushVehicle(value)
            else this.stopPushVehicle(entity.remoteId)
        })

        mp.events.add("render", () => {
            let spliceIds = []

            this.pushingData.forEach((data) => {
                const player = mp.players.atRemoteId(data.player)
                const vehicle = mp.vehicles.atRemoteId(data.vehicle)

                if (!isEntityExists(player) || !isEntityExists(vehicle)) return spliceIds.push(data.vehicle)

                if (!player.isPlayingAnim('missfinale_c2ig_11', 'pushcar_offcliff_m', 3)) {
                    player.taskPlayAnim('missfinale_c2ig_11', 'pushcar_offcliff_m', 2.0, -8.0, -1, 35, 0, false, false, false)
                }

                if (!player.isAttachedTo(vehicle.handle)) {
                    const vehicleSize = this.vehicleLayout(vehicle)

                    if (data.front) {
                        player.attachTo(vehicle.handle, 6286, 0.0, vehicleSize.size.max.y + 0.35, vehicleSize.size.z + 0.95, 0.0, 0.0, 180.0, false, false, false, false, 0, true)
                    } else {
                        player.attachTo(vehicle.handle, 6286, 0.0, vehicleSize.size.min.y - 0.6, vehicleSize.size.z + 0.95, 0.0, 0.0, 0.0, false, false, false, false, 0, true)
                    }
                }

                if (player.isPlayingAnim('missfinale_c2ig_11', 'pushcar_offcliff_m', 3) && player.isAttachedTo(vehicle.handle)) {
                    if (player == mp.players.local) {
                        if (mp.keys.isDown(65) && !mp.keys.isDown(68) && this.currentDirection != "left") {
                            this.currentDirection = "left"
                            mp.events.callRemote(`setPushVehicleDirection`, vehicle.remoteId, this.currentDirection)
                        }
                        else if (mp.keys.isDown(68) && !mp.keys.isDown(65) && this.currentDirection != "right") {
                            this.currentDirection = "right"
                            mp.events.callRemote(`setPushVehicleDirection`, vehicle.remoteId, this.currentDirection)
                        }
                        else if (!mp.keys.isDown(65) && !mp.keys.isDown(68) && this.currentDirection != "center") {
                            this.currentDirection = "center"
                            mp.events.callRemote(`setPushVehicleDirection`, vehicle.remoteId, this.currentDirection)
                        }
                    }

                    if (data.direction == "left") {
                        // this.currentVehicle.setSteeringAngle(40); (Not supported yet)
                        player.taskVehicleTempAction(vehicle.handle, 11, 500)
                    }

                    if (data.direction == "right") {
                        // this.currentVehicle.setSteeringAngle(-40); (Not supported yet)
                        player.taskVehicleTempAction(vehicle.handle, 10, 500)
                    }

                    if (vehicle.hasCollidedWithAnything()) {
                        vehicle.setOnGroundProperly()
                    }

                    if (!data.front) {
                        vehicle.setForwardSpeed(1)
                    } else {
                        vehicle.setForwardSpeed(-1)
                    }
                }
            })

            if (spliceIds.length) {
                for (let i = spliceIds.length - 1; i >= 0; i--) this.stopPushVehicle(spliceIds[i])
            }
        })

    }

    isStreamed(remoteId) {
        return mp.vehicles.streamed.find(x => x.remoteId == remoteId)
    }

    startPushVehicle(value) {
        let data = this.pushingData.find((data => data.vehicle == value.vehicle || data.player == value.player))

        if (data) {
            data.direction = value.direction
        }
        else {
            const player = mp.players.atRemoteId(value.player)
            const vehicle = mp.vehicles.atRemoteId(value.vehicle)

            if (!isEntityExists(player) || !isEntityExists(vehicle)) return

            if (player == mp.players.local) mp.isPushingVehicle = true

            this.pushingData.push(value)
        }
    }

    stopPushVehicle(vehicleRemoteId) {
        let data = this.pushingData.find((data => data.vehicle == vehicleRemoteId))

        if (data) {
            const player = mp.players.atRemoteId(data.player)

            if (isEntityExists(player)) {
                player.detach(true, false)
                player.stopAnimTask('missfinale_c2ig_11', 'pushcar_offcliff_m', 2)
                player.freezePosition(false)

                if (player == mp.players.local) mp.isPushingVehicle = false
            }

            this.pushingData.splice(this.pushingData.indexOf(data), 1)
        }
    }

    rotateRect(angle, ox, oy, x, y, w, h) {
        const xAx = Math.cos(angle);  // x axis x
        const xAy = Math.sin(angle);  // x axis y
        x -= ox;  // move rectangle onto origin
        y -= oy;
        return [[ // return array holding the resulting points
            x * xAx - y * xAy + ox,   // Get the top left rotated position
            x * xAy + y * xAx + oy,   // and move it back to the origin
        ], [
            (x + w) * xAx - y * xAy + ox,   // Get the top right rotated position
            (x + w) * xAy + y * xAx + oy,
        ], [
            (x + w) * xAx - (y + h) * xAy + ox,   // Get the bottom right rotated position
            (x + w) * xAy + (y + h) * xAx + oy,
        ], [
            x * xAx - (y + h) * xAy + ox,   // Get the bottom left rotated position
            x * xAy + (y + h) * xAx + oy,
        ]
        ];
    }

    vehicleLayout(vehicle) {
        const sizeofVehicle = mp.game.gameplay.getModelDimensions(vehicle.model);
        const vehicleRotation = vehicle.getRotation(2);
        const Xwidth = (0 - sizeofVehicle.min.x) + (sizeofVehicle.max.x);
        const Ywidth = (0 - sizeofVehicle.min.y) + (sizeofVehicle.max.y);
        const degree = (vehicleRotation.z + 180) * Math.PI / 180;

        const newDegrees = this.rotateRect(degree, vehicle.position.x, vehicle.position.y, vehicle.position.x - sizeofVehicle.max.x, vehicle.position.y - sizeofVehicle.max.y, Xwidth, Ywidth);

        const frontX = newDegrees[0][0] + ((newDegrees[1][0] - newDegrees[0][0]) / 2);
        const frontY = newDegrees[0][1] + ((newDegrees[1][1] - newDegrees[0][1]) / 2);

        const bottomX = newDegrees[2][0] + ((newDegrees[3][0] - newDegrees[2][0]) / 2);
        const bottomY = newDegrees[2][1] + ((newDegrees[3][1] - newDegrees[2][1]) / 2);

        return {
            front: { x: frontX, y: frontY },
            back: { x: bottomX, y: bottomY },
            center: { x: vehicle.position.x, y: vehicle.position.y },
            size: {
                lengthX: Xwidth,
                lengthY: Ywidth,
                min: { x: sizeofVehicle.min.x, y: sizeofVehicle.min.y },
                max: { x: sizeofVehicle.max.x, y: sizeofVehicle.max.y },
                z: sizeofVehicle.min.z
            }
        };

    }

    getVehicleFront(player, vehicle) {
        const vehicleSize = this.vehicleLayout(vehicle);

        const distanceFront = Math.round(mp.game.system.vdist2(vehicleSize.front.x, vehicleSize.front.y, vehicle.position.z,
            player.position.x, player.position.y, player.position.z) / 3);

        const distanceBack = Math.round(mp.game.system.vdist2(vehicleSize.back.x, vehicleSize.back.y, vehicle.position.z,
            player.position.x, player.position.y, player.position.z) / 3);

        const IsInFront = (distanceFront < distanceBack);

        return !!IsInFront
    }
}

const pushVehicle = new PushBrokenDownClient()

mp.events.add("startPushVehicle", (remoteId) => {
    const vehicle = mp.vehicles.atRemoteId(remoteId)
    if (!isEntityExists(vehicle)) return

    if (vehicle.getVariable("pushingPlayer")) {
        mp.events.callRemote(`stopPushVehicle`, remoteId)
    }
    else {
        if (!vehicle.isOnAllWheels()) return rpc.callBrowser(browserMenu, "nError", `Транспортний засіб не на колесах!`)
        mp.events.callRemote(`startPushVehicle`, remoteId, pushVehicle.getVehicleFront(mp.players.local, vehicle))
    }
})
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.consoleActive = false;

mp.events.add("pushConsoleMessage", (type, text) => {
    if (!text) return;
    var types = ['log', 'info', 'warning', 'error', 'debug'];
    var index = types.indexOf(type);
    if (index == -1) return mp.events.call("getConsoleMessage", "common", "Тип лога не распознан!")
    if (typeof text == 'string') {
        mp.events.call("getConsoleMessage", type, text.escape())
    }
    else {
        mp.events.call("getConsoleMessage", type, text)
    }
});


mp.events.add("authCharacter.success", () => {
    try {
        mp.keys.bindEx(0xC0, true, () => { // ~ key
            if (!mp.clientStorage["admin"] && mp.consoleActive) return mp.events.call("showConsole", false)
            if (!mp.clientStorage["admin"] || mp.chatActiveHandler) return;
            mp.events.call("showConsole", !mp.consoleActive)
        })   
    } catch (err) {
        mp.events.callRemote("log", `Error client gamemode\scripts\Console.js authCharacter.success: ${err}`)
    }
}) 

mp.events.add("setAdminCommands", (cmds) => {
    browserMenu.call(`consoleAPI`, `setAdminCommands`, cmds);
})

mp.events.add("getConsoleMessage", (type, message) => {
    browserMenu.call(`consoleAPI`, `getMessage`, type, message);
})

mp.events.add("getReports", () => {
    browserMenu.call(`consoleAPI`, `getReports`);
})

mp.events.add("showConsole", (bool) => {
    browserMenu.call(`consoleAPI`, `show`, bool);
}) 

mp.events.add("setConsoleActive", (enable) => {
    mp.consoleActive = enable;
});


}; a; }
{let a = function scriptEntryPoint(mp) {
function findWeaponDataByHash (hash) {
    let result = undefined
    for (let key in Object.keys(weaponData)) { 
        if (Object.keys(weaponData)[key] == hash) { 
			result = weaponData[hash]
		}
    }
    return result 
}

const weaponData = {
    "2725352035": {
        "HashKey": "WEAPON_UNARMED",
        "NameGXT": "WT_UNARMED",
        "damage": 10,
        "DescriptionGXT": "WTD_UNARMED",
        "Name": "Unarmed",
        "Description": "",
        "Group": "GROUP_UNARMED",
        "ModelHashKey": "",
        "DefaultClipSize": 0,
        "Components": {},
        "Tints": [],
        "LiveryColors": [],
        "DLC": "core"
    },
    "2578778090": {
        "HashKey": "WEAPON_KNIFE",
        "NameGXT": "WT_KNIFE",
        "damage": 20,
        "DescriptionGXT": "WTD_KNIFE",
        "Name": "Knife",
        "Description": "This carbon steel 7\" bladed knife is dual edged with a serrated spine to provide improved stabbing and thrusting capabilities.",
        "Group": "GROUP_MELEE",
        "ModelHashKey": "w_me_knife_01",
        "DefaultClipSize": 0,
        "Components": {},
        "Tints": [],
        "LiveryColors": [],
        "DLC": "core"
    },
    "1703483498": {
      "HashKey": "WEAPON_CANDYCANE",
      "NameGXT": "WT_CANDYCANE",
      "damage": 15,
      "DescriptionGXT": "WTD_CANDYCANE",
      "Name": "Candy Cane",
      "Description": "This year, why not go one step further? Add to the onslaught of music, lights, and merriment by literally beating your peers to death with the festive spirit.",
      "Group": "GROUP_MELEE",
      "ModelHashKey": "W_ME_Candy_XM3",
      "DefaultClipSize": 0,
      "Components": {},
      "Tints": [],
      "LiveryColors": [],
      "DLC": "mpchristmas3"
    },
    "1737195953": {
    "HashKey": "WEAPON_NIGHTSTICK",
    "NameGXT": "WT_NGTSTK",
    "damage": 10,
    "DescriptionGXT": "WTD_NGTSTK",
    "Name": "Nightstick",
    "Description": "24\" polycarbonate side-handled nightstick.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_nightstick",
    "DefaultClipSize": 0,
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "core"
  },
  "1317494643": {
    "HashKey": "WEAPON_HAMMER",
    "NameGXT": "WT_HAMMER",
    "damage": 15,
    "DescriptionGXT": "WTD_HAMMER",
    "Name": "Hammer",
    "Description": "A robust, multi-purpose hammer with wooden handle and curved claw, this old classic still nails the competition.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_hammer",
    "DefaultClipSize": 0,
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "core"
  },
  "2508868239": {
    "HashKey": "WEAPON_BAT",
    "NameGXT": "WT_BAT",
    "damage": 15,
    "DescriptionGXT": "WTD_BAT",
    "Name": "Baseball Bat",
    "Description": "Aluminum baseball bat with leather grip. Lightweight yet powerful for all you big hitters out there.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_bat",
    "DefaultClipSize": 0,
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "core"
  },
  "1141786504": {
    "HashKey": "WEAPON_GOLFCLUB",
    "NameGXT": "WT_GOLFCLUB",
    "damage": 10,
    "DescriptionGXT": "WTD_GOLFCLUB",
    "Name": "Golf Club",
    "Description": "Standard length, mid iron golf club with rubber grip for a lethal short game.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_gclub",
    "DefaultClipSize": 0,
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "core"
  },
  "2227010557": {
    "HashKey": "WEAPON_CROWBAR",
    "NameGXT": "WT_CROWBAR",
    "damage": 13,
    "DescriptionGXT": "WTD_CROWBAR",
    "Name": "Crowbar",
    "Description": "Heavy-duty crowbar forged from high quality, tempered steel for that extra leverage you need to get the job done.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_crowbar",
    "DefaultClipSize": 0,
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "core"
  },
  "453432689": {
    "HashKey": "WEAPON_PISTOL",
    "NameGXT": "WT_PIST",
    "damage": 9,
    "DescriptionGXT": "WT_PIST_DESC",
    "Name": "Pistol",
    "Description": "Standard handgun. A .45 caliber pistol with a magazine capacity of 12 rounds that can be extended to 16.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "W_PI_PISTOL",
    "DefaultClipSize": 12,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "4275109233": {
        "HashKey": "COMPONENT_PISTOL_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_P_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Pistol.",
        "ModelHashKey": "w_pi_pistol_mag1",
        "IsDefault": true
      },
      "3978713628": {
        "HashKey": "COMPONENT_PISTOL_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_P_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Pistol.",
        "ModelHashKey": "w_pi_pistol_mag2",
        "IsDefault": false
      },
      "899381934": {
        "HashKey": "COMPONENT_AT_PI_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_pi_flsh",
        "IsDefault": false
      },
      "1709866683": {
        "HashKey": "COMPONENT_AT_PI_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_PI_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_pi_supp_2",
        "IsDefault": false
      },
      "3610841222": {
        "HashKey": "COMPONENT_PISTOL_VARMOD_LUXE",
        "NameGXT": "WCT_VAR_GOLD",
        "DescriptionGXT": "WCD_VAR_P",
        "Name": "Yusuf Amir Luxury Finish",
        "Description": "",
        "ModelHashKey": "W_PI_Pistol_Luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "1593441988": {
    "HashKey": "WEAPON_COMBATPISTOL",
    "NameGXT": "WT_PIST_CBT",
    "damage": 9,
    "DescriptionGXT": "WTD_PIST_CBT",
    "Name": "Combat Pistol",
    "Description": "A compact, lightweight, semi-automatic pistol designed for law enforcement and personal defense. 12-round magazine with option to extend to 16 rounds.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "W_PI_COMBATPISTOL",
    "DefaultClipSize": 12,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "119648377": {
        "HashKey": "COMPONENT_COMBATPISTOL_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CP_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Combat Pistol.",
        "ModelHashKey": "w_pi_combatpistol_mag1",
        "IsDefault": true
      },
      "3598405421": {
        "HashKey": "COMPONENT_COMBATPISTOL_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CP_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Combat Pistol.",
        "ModelHashKey": "w_pi_combatpistol_mag2",
        "IsDefault": false
      },
      "899381934": {
        "HashKey": "COMPONENT_AT_PI_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_pi_flsh",
        "IsDefault": false
      },
      "3271853210": {
        "HashKey": "COMPONENT_AT_PI_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_PI_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_pi_supp",
        "IsDefault": false
      },
      "3328527730": {
        "HashKey": "COMPONENT_COMBATPISTOL_VARMOD_LOWRIDER",
        "NameGXT": "WCT_VAR_GOLD",
        "DescriptionGXT": "WCD_VAR_CBP",
        "Name": "Yusuf Amir Luxury Finish",
        "Description": "",
        "ModelHashKey": "w_pi_combatpistol_luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "584646201": {
    "HashKey": "WEAPON_APPISTOL",
    "NameGXT": "WT_PIST_AP",
    "damage": 9,
    "DescriptionGXT": "WTD_PIST_AP",
    "Name": "AP Pistol",
    "Description": "High-penetration, fully-automatic pistol. Holds 18 rounds in magazine with option to extend to 36 rounds.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "W_PI_APPISTOL",
    "DefaultClipSize": 18,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "834974250": {
        "HashKey": "COMPONENT_APPISTOL_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_AP_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for AP Pistol.",
        "ModelHashKey": "w_pi_appistol_mag1",
        "IsDefault": true
      },
      "614078421": {
        "HashKey": "COMPONENT_APPISTOL_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_AP_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for AP Pistol.",
        "ModelHashKey": "w_pi_appistol_mag2",
        "IsDefault": false
      },
      "899381934": {
        "HashKey": "COMPONENT_AT_PI_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_pi_flsh",
        "IsDefault": false
      },
      "3271853210": {
        "HashKey": "COMPONENT_AT_PI_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_PI_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_pi_supp",
        "IsDefault": false
      },
      "2608252716": {
        "HashKey": "COMPONENT_APPISTOL_VARMOD_LUXE",
        "NameGXT": "WCT_VAR_METAL",
        "DescriptionGXT": "WCD_VAR_AP",
        "Name": "Gilded Gun Metal Finish",
        "Description": "",
        "ModelHashKey": "W_PI_APPistol_Luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "2578377531": {
    "HashKey": "WEAPON_PISTOL50",
    "NameGXT": "WT_PIST_50",
    "damage": 17,
    "DescriptionGXT": "WTD_PIST_50",
    "Name": "Pistol .50",
    "Description": "High-impact pistol that delivers immense power but with extremely strong recoil. Holds 9 rounds in magazine.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "W_PI_PISTOL50",
    "DefaultClipSize": 9,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "580369945": {
        "HashKey": "COMPONENT_PISTOL50_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_P50_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Pistol .50.",
        "ModelHashKey": "W_PI_PISTOL50_Mag1",
        "IsDefault": true
      },
      "3654528146": {
        "HashKey": "COMPONENT_PISTOL50_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_P50_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Pistol .50.",
        "ModelHashKey": "W_PI_PISTOL50_Mag2",
        "IsDefault": false
      },
      "899381934": {
        "HashKey": "COMPONENT_AT_PI_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_pi_flsh",
        "IsDefault": false
      },
      "2805810788": {
        "HashKey": "COMPONENT_AT_AR_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP2",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp_02",
        "IsDefault": false
      },
      "2008591151": {
        "HashKey": "COMPONENT_PISTOL50_VARMOD_LUXE",
        "NameGXT": "WCT_VAR_SIL",
        "DescriptionGXT": "WCD_VAR_P50",
        "Name": "Platinum Pearl Deluxe Finish",
        "Description": "",
        "ModelHashKey": "W_PI_Pistol50_Luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "324215364": {
    "HashKey": "WEAPON_MICROSMG",
    "NameGXT": "WT_SMG_MCR",
    "damage": 7,
    "DescriptionGXT": "WTD_SMG_MCR",
    "Name": "Micro SMG",
    "Description": "Combines compact design with a high rate of fire at approximately 700-900 rounds per minute.",
    "Group": "GROUP_SMG",
    "ModelHashKey": "w_sb_microsmg",
    "DefaultClipSize": 16,
    "AmmoType": "AMMO_SMG",
    "Components": {
      "3410538224": {
        "HashKey": "COMPONENT_MICROSMG_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCDMSMG_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Micro SMG.",
        "ModelHashKey": "w_sb_microsmg_mag1",
        "IsDefault": true
      },
      "283556395": {
        "HashKey": "COMPONENT_MICROSMG_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCDMSMG_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Micro SMG.",
        "ModelHashKey": "w_sb_microsmg_mag2",
        "IsDefault": false
      },
      "899381934": {
        "HashKey": "COMPONENT_AT_PI_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_pi_flsh",
        "IsDefault": false
      },
      "2637152041": {
        "HashKey": "COMPONENT_AT_SCOPE_MACRO",
        "NameGXT": "WCT_SCOPE_MAC",
        "DescriptionGXT": "WCD_SCOPE_MAC",
        "Name": "Scope",
        "Description": "Standard-range zoom functionality.",
        "ModelHashKey": "w_at_scope_macro",
        "IsDefault": false
      },
      "2805810788": {
        "HashKey": "COMPONENT_AT_AR_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP2",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp_02",
        "IsDefault": false
      },
      "1215999497": {
        "HashKey": "COMPONENT_MICROSMG_VARMOD_LUXE",
        "NameGXT": "WCT_VAR_GOLD",
        "DescriptionGXT": "WCD_VAR_MSMG",
        "Name": "Yusuf Amir Luxury Finish",
        "Description": "",
        "ModelHashKey": "W_SB_MicroSMG_Luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "736523883": {
    "HashKey": "WEAPON_SMG",
    "NameGXT": "WT_SMG",
    "damage": 8,
    "DescriptionGXT": "WTD_SMG",
    "Name": "SMG",
    "Description": "This is known as a good all-round submachine gun. Lightweight with an accurate sight and 30-round magazine capacity.",
    "Group": "GROUP_SMG",
    "ModelHashKey": "w_sb_smg",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_SMG",
    "Components": {
      "643254679": {
        "HashKey": "COMPONENT_SMG_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_SMG_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for SMG.",
        "ModelHashKey": "w_sb_smg_mag1",
        "IsDefault": true
      },
      "889808635": {
        "HashKey": "COMPONENT_SMG_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_SMG_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for SMG.",
        "ModelHashKey": "w_sb_smg_mag2",
        "IsDefault": false
      },
      "2043113590": {
        "HashKey": "COMPONENT_SMG_CLIP_03",
        "NameGXT": "WCT_CLIP_DRM",
        "DescriptionGXT": "WCD_CLIP3",
        "Name": "Drum Magazine",
        "Description": "Expanded capacity and slower reload.",
        "ModelHashKey": "w_sb_smg_boxmag",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "1019656791": {
        "HashKey": "COMPONENT_AT_SCOPE_MACRO_02",
        "NameGXT": "WCT_SCOPE_MAC",
        "DescriptionGXT": "WCD_SCOPE_MAC",
        "Name": "Scope",
        "Description": "Standard-range zoom functionality.",
        "ModelHashKey": "w_at_scope_macro_2",
        "IsDefault": false
      },
      "3271853210": {
        "HashKey": "COMPONENT_AT_PI_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_PI_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_pi_supp",
        "IsDefault": false
      },
      "663170192": {
        "HashKey": "COMPONENT_SMG_VARMOD_LUXE",
        "NameGXT": "WCT_VAR_GOLD",
        "DescriptionGXT": "WCD_VAR_SMG",
        "Name": "Yusuf Amir Luxury Finish",
        "Description": "",
        "ModelHashKey": "W_SB_SMG_Luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "4024951519": {
    "HashKey": "WEAPON_ASSAULTSMG",
    "NameGXT": "WT_SMG_ASL",
    "damage": 7.5,
    "DescriptionGXT": "WTD_SMG_ASL",
    "Name": "Assault SMG",
    "Description": "A high-capacity submachine gun that is both compact and lightweight. Holds up to 30 bullets in one magazine.",
    "Group": "GROUP_SMG",
    "ModelHashKey": "w_sb_assaultsmg",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_SMG",
    "Components": {
      "2366834608": {
        "HashKey": "COMPONENT_ASSAULTSMG_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Default Clip",
        "Description": "",
        "ModelHashKey": "W_SB_ASSAULTSMG_Mag1",
        "IsDefault": true
      },
      "3141985303": {
        "HashKey": "COMPONENT_ASSAULTSMG_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Extended Clip",
        "Description": "",
        "ModelHashKey": "W_SB_ASSAULTSMG_Mag2",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2637152041": {
        "HashKey": "COMPONENT_AT_SCOPE_MACRO",
        "NameGXT": "WCT_SCOPE_MAC",
        "DescriptionGXT": "WCD_SCOPE_MAC",
        "Name": "Scope",
        "Description": "Standard-range zoom functionality.",
        "ModelHashKey": "w_at_scope_macro",
        "IsDefault": false
      },
      "2805810788": {
        "HashKey": "COMPONENT_AT_AR_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP2",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp_02",
        "IsDefault": false
      },
      "663517359": {
        "HashKey": "COMPONENT_ASSAULTSMG_VARMOD_LOWRIDER",
        "NameGXT": "WCT_VAR_GOLD",
        "DescriptionGXT": "WCD_VAR_ASMG",
        "Name": "Yusuf Amir Luxury Finish",
        "Description": "",
        "ModelHashKey": "w_sb_assaultsmg_luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "3220176749": {
    "HashKey": "WEAPON_ASSAULTRIFLE",
    "NameGXT": "WT_RIFLE_ASL",
    "damage": 10,
    "DescriptionGXT": "WTD_RIFLE_ASL",
    "Name": "Assault Rifle",
    "Description": "This standard assault rifle boasts a large capacity magazine and long distance accuracy.",
    "Group": "GROUP_RIFLE",
    "ModelHashKey": "W_AR_ASSAULTRIFLE",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_RIFLE",
    "Components": {
      "3193891350": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_AR_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Assault Rifle.",
        "ModelHashKey": "w_ar_assaultrifle_mag1",
        "IsDefault": true
      },
      "2971750299": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_AR_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Assault Rifle.",
        "ModelHashKey": "w_ar_assaultrifle_mag2",
        "IsDefault": false
      },
      "3689981245": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_CLIP_03",
        "NameGXT": "WCT_CLIP_DRM",
        "DescriptionGXT": "WCD_CLIP3",
        "Name": "Drum Magazine",
        "Description": "Expanded capacity and slower reload.",
        "ModelHashKey": "w_ar_assaultrifle_boxmag",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2637152041": {
        "HashKey": "COMPONENT_AT_SCOPE_MACRO",
        "NameGXT": "WCT_SCOPE_MAC",
        "DescriptionGXT": "WCD_SCOPE_MAC",
        "Name": "Scope",
        "Description": "Standard-range zoom functionality.",
        "ModelHashKey": "w_at_scope_macro",
        "IsDefault": false
      },
      "2805810788": {
        "HashKey": "COMPONENT_AT_AR_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP2",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp_02",
        "IsDefault": false
      },
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      },
      "1319990579": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_VARMOD_LUXE",
        "NameGXT": "WCT_VAR_GOLD",
        "DescriptionGXT": "WCD_VAR_AR",
        "Name": "Yusuf Amir Luxury Finish",
        "Description": "",
        "ModelHashKey": "W_AR_AssaultRifle_Luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "2210333304": {
    "HashKey": "WEAPON_CARBINERIFLE",
    "NameGXT": "WT_RIFLE_CBN",
    "damage": 10.5,
    "DescriptionGXT": "WTD_RIFLE_CBN",
    "Name": "Carbine Rifle",
    "Description": "Combining long distance accuracy with a high-capacity magazine, the carbine rifle can be relied on to make the hit.",
    "Group": "GROUP_RIFLE",
    "ModelHashKey": "W_AR_CARBINERIFLE",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_RIFLE",
    "Components": {
      "2680042476": {
        "HashKey": "COMPONENT_CARBINERIFLE_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CR_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Carbine Rifle.",
        "ModelHashKey": "w_ar_carbinerifle_mag1",
        "IsDefault": true
      },
      "2433783441": {
        "HashKey": "COMPONENT_CARBINERIFLE_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CR_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Carbine Rifle.",
        "ModelHashKey": "w_ar_carbinerifle_mag2",
        "IsDefault": false
      },
      "3127044405": {
        "HashKey": "COMPONENT_CARBINERIFLE_CLIP_03",
        "NameGXT": "WCT_CLIP_BOX",
        "DescriptionGXT": "WCD_CLIP3",
        "Name": "Box Magazine",
        "Description": "Expanded capacity and slower reload.",
        "ModelHashKey": "w_ar_carbinerifle_boxmag",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "1967214384": {
        "HashKey": "COMPONENT_AT_RAILCOVER_01",
        "NameGXT": "WCT_RAIL",
        "DescriptionGXT": "WCD_AT_RAIL",
        "Name": "",
        "Description": "",
        "ModelHashKey": "w_at_railcover_01",
        "IsDefault": false
      },
      "2698550338": {
        "HashKey": "COMPONENT_AT_SCOPE_MEDIUM",
        "NameGXT": "WCT_SCOPE_MED",
        "DescriptionGXT": "WCD_SCOPE_MED",
        "Name": "Scope",
        "Description": "Extended-range zoom functionality.",
        "ModelHashKey": "w_at_scope_medium",
        "IsDefault": false
      },
      "2205435306": {
        "HashKey": "COMPONENT_AT_AR_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp",
        "IsDefault": false
      },
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      },
      "3634075224": {
        "HashKey": "COMPONENT_CARBINERIFLE_VARMOD_LUXE",
        "NameGXT": "WCT_VAR_GOLD",
        "DescriptionGXT": "WCD_VAR_CR",
        "Name": "Yusuf Amir Luxury Finish",
        "Description": "",
        "ModelHashKey": "W_AR_CarbineRifle_Luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "2937143193": {
    "HashKey": "WEAPON_ADVANCEDRIFLE",
    "NameGXT": "WT_RIFLE_ADV",
    "damage": 11.5,
    "DescriptionGXT": "WTD_RIFLE_ADV",
    "Name": "Advanced Rifle",
    "Description": "The most lightweight and compact of all assault rifles, without compromising accuracy and rate of fire.",
    "Group": "GROUP_RIFLE",
    "ModelHashKey": "W_AR_ADVANCEDRIFLE",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_RIFLE",
    "Components": {
      "4203716879": {
        "HashKey": "COMPONENT_ADVANCEDRIFLE_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_AR_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Assault Rifle.",
        "ModelHashKey": "w_ar_advancedrifle_mag1",
        "IsDefault": true
      },
      "2395064697": {
        "HashKey": "COMPONENT_ADVANCEDRIFLE_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_AR_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Assault Rifle.",
        "ModelHashKey": "w_ar_advancedrifle_mag2",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2855028148": {
        "HashKey": "COMPONENT_AT_SCOPE_SMALL",
        "NameGXT": "WCT_SCOPE_SML",
        "DescriptionGXT": "WCD_SCOPE_SML",
        "Name": "Scope",
        "Description": "Medium-range zoom functionality.",
        "ModelHashKey": "w_at_scope_small",
        "IsDefault": false
      },
      "2205435306": {
        "HashKey": "COMPONENT_AT_AR_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp",
        "IsDefault": false
      },
      "930927479": {
        "HashKey": "COMPONENT_ADVANCEDRIFLE_VARMOD_LUXE",
        "NameGXT": "WCT_VAR_METAL",
        "DescriptionGXT": "WCD_VAR_ADR",
        "Name": "Gilded Gun Metal Finish",
        "Description": "",
        "ModelHashKey": "W_AR_AdvancedRifle_Luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "2634544996": {
    "HashKey": "WEAPON_MG",
    "NameGXT": "WT_MG",
    "damage": 13.5,
    "DescriptionGXT": "WTD_MG",
    "Name": "MG",
    "Description": "General purpose machine gun that combines rugged design with dependable performance. Long range penetrative power. Very effective against large groups.",
    "Group": "GROUP_MG",
    "ModelHashKey": "w_mg_mg",
    "DefaultClipSize": 54,
    "AmmoType": "AMMO_MG",
    "Components": {
      "4097109892": {
        "HashKey": "COMPONENT_MG_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_MG_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for MG.",
        "ModelHashKey": "w_mg_mg_mag1",
        "IsDefault": true
      },
      "2182449991": {
        "HashKey": "COMPONENT_MG_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_MG_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for MG.",
        "ModelHashKey": "w_mg_mg_mag2",
        "IsDefault": false
      },
      "1006677997": {
        "HashKey": "COMPONENT_AT_SCOPE_SMALL_02",
        "NameGXT": "WCT_SCOPE_SML",
        "DescriptionGXT": "WCD_SCOPE_SML",
        "Name": "Scope",
        "Description": "Medium-range zoom functionality.",
        "ModelHashKey": "w_at_scope_small_2",
        "IsDefault": false
      },
      "3604658878": {
        "HashKey": "COMPONENT_MG_VARMOD_LOWRIDER",
        "NameGXT": "WCT_VAR_GOLD",
        "DescriptionGXT": "WCD_VAR_MG",
        "Name": "Yusuf Amir Luxury Finish",
        "Description": "",
        "ModelHashKey": "w_mg_mg_luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "2144741730": {
    "HashKey": "WEAPON_COMBATMG",
    "NameGXT": "WT_MG_CBT",
    "damage": 15,
    "DescriptionGXT": "WTD_MG_CBT",
    "Name": "Combat MG",
    "Description": "Lightweight, compact machine gun that combines excellent maneuverability with a high rate of fire to devastating effect.",
    "Group": "GROUP_MG",
    "ModelHashKey": "w_mg_combatmg",
    "DefaultClipSize": 100,
    "AmmoType": "AMMO_MG",
    "Components": {
      "3791631178": {
        "HashKey": "COMPONENT_COMBATMG_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCDCMG_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Combat MG.",
        "ModelHashKey": "w_mg_combatmg_mag1",
        "IsDefault": true
      },
      "3603274966": {
        "HashKey": "COMPONENT_COMBATMG_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCDCMG_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Combat MG.",
        "ModelHashKey": "w_mg_combatmg_mag2",
        "IsDefault": false
      },
      "2698550338": {
        "HashKey": "COMPONENT_AT_SCOPE_MEDIUM",
        "NameGXT": "WCT_SCOPE_MED",
        "DescriptionGXT": "WCD_SCOPE_MED",
        "Name": "Scope",
        "Description": "Extended-range zoom functionality.",
        "ModelHashKey": "w_at_scope_medium",
        "IsDefault": false
      },
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      },
      "2466172125": {
        "HashKey": "COMPONENT_COMBATMG_VARMOD_LOWRIDER",
        "NameGXT": "WCT_VAR_ETCHM",
        "DescriptionGXT": "WCD_VAR_CBMG",
        "Name": "Etched Gun Metal Finish",
        "Description": "",
        "ModelHashKey": "w_mg_combatmg_luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },

  "487013001": {
    "HashKey": "WEAPON_PUMPSHOTGUN",
    "NameGXT": "WT_SG_PMP",
    "damage": 4,
    "DescriptionGXT": "WTD_SG_PMP",
    "Name": "Pump Shotgun",
    "Description": "Standard shotgun ideal for short-range combat. A high-projectile spread makes up for its lower accuracy at long range.",
    "Group": "GROUP_SHOTGUN",
    "ModelHashKey": "w_sg_pumpshotgun",
    "DefaultClipSize": 8,
    "AmmoType": "AMMO_SHOTGUN",
    "Components": {
      "3513717816": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_CLIP_01",
        "NameGXT": "WCT_INVALID",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "",
        "Description": "",
        "ModelHashKey": "",
        "IsDefault": true
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "3859329886": {
        "HashKey": "COMPONENT_AT_SR_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_SR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_sr_supp_2",
        "IsDefault": false
      },
      "2732039643": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_VARMOD_LOWRIDER",
        "NameGXT": "WCT_VAR_GOLD",
        "DescriptionGXT": "WCD_VAR_PSHT",
        "Name": "Yusuf Amir Luxury Finish",
        "Description": "",
        "ModelHashKey": "w_sg_pumpshotgun_luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "2017895192": {
    "HashKey": "WEAPON_SAWNOFFSHOTGUN",
    "NameGXT": "WT_SG_SOF",
    "damage": 4,
    "DescriptionGXT": "WTD_SG_SOF",
    "Name": "Sawed-Off Shotgun",
    "Description": "This single-barrel, sawed-off shotgun compensates for its low range and ammo capacity with devastating efficiency in close combat.",
    "Group": "GROUP_SHOTGUN",
    "ModelHashKey": "w_sg_sawnoff",
    "DefaultClipSize": 8,
    "AmmoType": "AMMO_SHOTGUN",
    "Components": {
      "3352699429": {
        "HashKey": "COMPONENT_SAWNOFFSHOTGUN_CLIP_01",
        "NameGXT": "WCT_INVALID",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "",
        "Description": "",
        "ModelHashKey": "",
        "IsDefault": true
      },
      "2242268665": {
        "HashKey": "COMPONENT_SAWNOFFSHOTGUN_VARMOD_LUXE",
        "NameGXT": "WCT_VAR_METAL",
        "DescriptionGXT": "WCD_VAR_SOF",
        "Name": "Gilded Gun Metal Finish",
        "Description": "",
        "ModelHashKey": "W_SG_Sawnoff_Luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "3800352039": {
    "HashKey": "WEAPON_ASSAULTSHOTGUN",
    "NameGXT": "WT_SG_ASL",
    "damage": 3,
    "DescriptionGXT": "WTD_SG_ASL",
    "Name": "Assault Shotgun",
    "Description": "Fully automatic shotgun with 8 round magazine and high rate of fire.",
    "Group": "GROUP_SHOTGUN",
    "ModelHashKey": "w_sg_assaultshotgun",
    "DefaultClipSize": 8,
    "AmmoType": "AMMO_SHOTGUN",
    "Components": {
      "2498239431": {
        "HashKey": "COMPONENT_ASSAULTSHOTGUN_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_AS_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Assault Shotgun.",
        "ModelHashKey": "w_sg_assaultshotgun_mag1",
        "IsDefault": true
      },
      "2260565874": {
        "HashKey": "COMPONENT_ASSAULTSHOTGUN_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_AS_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Assault Shotgun.",
        "ModelHashKey": "w_sg_assaultshotgun_mag2",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2205435306": {
        "HashKey": "COMPONENT_AT_AR_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp",
        "IsDefault": false
      },
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "2640438543": {
    "HashKey": "WEAPON_BULLPUPSHOTGUN",
    "NameGXT": "WT_SG_BLP",
    "damage": 3,
    "DescriptionGXT": "WTD_SG_BLP",
    "Name": "Bullpup Shotgun",
    "Description": "More than makes up for its slow, pump-action rate of fire with its range and spread.  Decimates anything in its projectile path.",
    "Group": "GROUP_SHOTGUN",
    "ModelHashKey": "w_sg_bullpupshotgun",
    "DefaultClipSize": 14,
    "AmmoType": "AMMO_SHOTGUN",
    "Components": {
      "3377353998": {
        "HashKey": "COMPONENT_BULLPUPSHOTGUN_CLIP_01",
        "NameGXT": "WCT_INVALID",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "",
        "Description": "",
        "ModelHashKey": "",
        "IsDefault": true
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2805810788": {
        "HashKey": "COMPONENT_AT_AR_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP2",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp_02",
        "IsDefault": false
      },
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "911657153": {
    "HashKey": "WEAPON_STUNGUN",
    "NameGXT": "WT_STUN",
    "DescriptionGXT": "WTD_STUN",
    "Name": "Stun Gun",
    "Description": "Fires a projectile that administers a voltage capable of temporarily stunning an assailant. Takes approximately 4 seconds to recharge after firing.",
    "Group": "GROUP_STUNGUN",
    "ModelHashKey": "w_pi_stungun",
    "DefaultClipSize": 2104529083,
    "AmmoType": "AMMO_STUNGUN",
    "Components": {},
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "100416529": {
    "HashKey": "WEAPON_SNIPERRIFLE",
    "NameGXT": "WT_SNIP_RIF",
    "damage": 30,
    "DescriptionGXT": "WTD_SNIP_RIF",
    "Name": "Sniper Rifle",
    "Description": "Standard sniper rifle. Ideal for situations that require accuracy at long range. Limitations include slow reload speed and very low rate of fire.",
    "Group": "GROUP_SNIPER",
    "ModelHashKey": "w_sr_sniperrifle",
    "DefaultClipSize": 10,
    "AmmoType": "AMMO_SNIPER",
    "Components": {
      "2613461129": {
        "HashKey": "COMPONENT_SNIPERRIFLE_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_SR_CLIP1",
        "Name": "Default Clip",
        "Description": "",
        "ModelHashKey": "w_sr_sniperrifle_mag1",
        "IsDefault": true
      },
      "2805810788": {
        "HashKey": "COMPONENT_AT_AR_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP2",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp_02",
        "IsDefault": false
      },
      "3527687644": {
        "HashKey": "COMPONENT_AT_SCOPE_LARGE",
        "NameGXT": "WCT_SCOPE_LRG",
        "DescriptionGXT": "WCD_SCOPE_LRG",
        "Name": "Scope",
        "Description": "Long-range zoom functionality.",
        "ModelHashKey": "w_at_scope_large",
        "IsDefault": true
      },
      "3159677559": {
        "HashKey": "COMPONENT_AT_SCOPE_MAX",
        "NameGXT": "WCT_SCOPE_MAX",
        "DescriptionGXT": "WCD_SCOPE_MAX",
        "Name": "Advanced Scope",
        "Description": "Maximum zoom functionality.",
        "ModelHashKey": "w_at_scope_max",
        "IsDefault": true
      },
      "1077065191": {
        "HashKey": "COMPONENT_SNIPERRIFLE_VARMOD_LUXE",
        "NameGXT": "WCT_VAR_WOOD",
        "DescriptionGXT": "WCD_VAR_SNP",
        "Name": "Etched Wood Grip Finish",
        "Description": "",
        "ModelHashKey": "W_SR_SniperRifle_Luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "205991906": {
    "HashKey": "WEAPON_HEAVYSNIPER",
    "NameGXT": "WT_SNIP_HVY",
    "damage": 90,
    "DescriptionGXT": "WTD_SNIP_HVY",
    "Name": "Heavy Sniper",
    "Description": "Features armor-piercing rounds for heavy damage. Comes with laser scope as standard.",
    "Group": "GROUP_SNIPER",
    "ModelHashKey": "w_sr_heavysniper",
    "DefaultClipSize": 6,
    "AmmoType": "AMMO_SNIPER",
    "Components": {
      "1198478068": {
        "HashKey": "COMPONENT_HEAVYSNIPER_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_HS_CLIP1",
        "Name": "Default Clip",
        "Description": "",
        "ModelHashKey": "w_sr_heavysniper_mag1",
        "IsDefault": true
      },
      "3527687644": {
        "HashKey": "COMPONENT_AT_SCOPE_LARGE",
        "NameGXT": "WCT_SCOPE_LRG",
        "DescriptionGXT": "WCD_SCOPE_LRG",
        "Name": "Scope",
        "Description": "Long-range zoom functionality.",
        "ModelHashKey": "w_at_scope_large",
        "IsDefault": true
      },
      "3159677559": {
        "HashKey": "COMPONENT_AT_SCOPE_MAX",
        "NameGXT": "WCT_SCOPE_MAX",
        "DescriptionGXT": "WCD_SCOPE_MAX",
        "Name": "Advanced Scope",
        "Description": "Maximum zoom functionality.",
        "ModelHashKey": "w_at_scope_max",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "2726580491": {
    "HashKey": "WEAPON_GRENADELAUNCHER",
    "NameGXT": "WT_GL",
    "DescriptionGXT": "WTD_GL",
    "Name": "Grenade Launcher",
    "Description": "A compact, lightweight grenade launcher with semi-automatic functionality. Holds up to 10 rounds.",
    "Group": "GROUP_HEAVY",
    "ModelHashKey": "w_lr_grenadelauncher",
    "DefaultClipSize": 10,
    "AmmoType": "AMMO_GRENADELAUNCHER",
    "Components": {
      "296639639": {
        "HashKey": "COMPONENT_GRENADELAUNCHER_CLIP_01",
        "NameGXT": "WCT_INVALID",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "",
        "Description": "",
        "ModelHashKey": "w_lr_40mm",
        "IsDefault": true
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      },
      "2855028148": {
        "HashKey": "COMPONENT_AT_SCOPE_SMALL",
        "NameGXT": "WCT_SCOPE_SML",
        "DescriptionGXT": "WCD_SCOPE_SML",
        "Name": "Scope",
        "Description": "Medium-range zoom functionality.",
        "ModelHashKey": "w_at_scope_small",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "1305664598": {
    "HashKey": "WEAPON_GRENADELAUNCHER_SMOKE",
    "NameGXT": "WT_GL_SMOKE",
    "DescriptionGXT": "WTD_GL_SMOKE",
    "Name": "Tear Gas Launcher",
    "Description": "",
    "Group": "GROUP_HEAVY",
    "ModelHashKey": "w_lr_grenadelauncher",
    "DefaultClipSize": 10,
    "AmmoType": "AMMO_GRENADELAUNCHER_SMOKE",
    "Components": {
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      },
      "2855028148": {
        "HashKey": "COMPONENT_AT_SCOPE_SMALL",
        "NameGXT": "WCT_SCOPE_SML",
        "DescriptionGXT": "WCD_SCOPE_SML",
        "Name": "Scope",
        "Description": "Medium-range zoom functionality.",
        "ModelHashKey": "w_at_scope_small",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "2982836145": {
    "HashKey": "WEAPON_RPG",
    "NameGXT": "WT_RPG",
    "DescriptionGXT": "WTD_RPG",
    "Name": "RPG",
    "Description": "A portable, shoulder-launched, anti-tank weapon that fires explosive warheads. Very effective for taking down vehicles or large groups of assailants.",
    "Group": "GROUP_HEAVY",
    "ModelHashKey": "w_lr_rpg",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_RPG",
    "Components": {
      "1319465907": {
        "HashKey": "COMPONENT_RPG_CLIP_01",
        "NameGXT": "WCT_INVALID",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "",
        "Description": "",
        "ModelHashKey": "",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "1119849093": {
    "HashKey": "WEAPON_MINIGUN",
    "NameGXT": "WT_MINIGUN",
    "damage": 10,
    "DescriptionGXT": "WTD_MINIGUN",
    "Name": "Minigun",
    "Description": "A devastating 6-barrel machine gun that features Gatling-style rotating barrels. Very high rate of fire (2000 to 6000 rounds per minute).",
    "Group": "GROUP_HEAVY",
    "ModelHashKey": "w_mg_minigun",
    "DefaultClipSize": 15000,
    "AmmoType": "AMMO_MINIGUN",
    "Components": {
      "3370020614": {
        "HashKey": "COMPONENT_MINIGUN_CLIP_01",
        "NameGXT": "WCT_INVALID",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "",
        "Description": "",
        "ModelHashKey": "",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "2481070269": {
    "HashKey": "WEAPON_GRENADE",
    "NameGXT": "WT_GNADE",
    "DescriptionGXT": "WTD_GNADE",
    "Name": "Grenade",
    "Description": "Standard fragmentation grenade. Pull pin, throw, then find cover. Ideal for eliminating clustered assailants.",
    "Group": "GROUP_THROWN",
    "ModelHashKey": "w_ex_grenadefrag",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_GRENADE",
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "core"
  },
  "741814745": {
    "HashKey": "WEAPON_STICKYBOMB",
    "NameGXT": "WT_GNADE_STK",
    "DescriptionGXT": "WTD_GNADE_STK",
    "Name": "Sticky Bomb",
    "Description": "A plastic explosive charge fitted with a remote detonator. Can be thrown and then detonated or attached to a vehicle then detonated.",
    "Group": "GROUP_THROWN",
    "ModelHashKey": "w_ex_pe",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_STICKYBOMB",
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "core"
  },
  "4256991824": {
    "HashKey": "WEAPON_SMOKEGRENADE",
    "NameGXT": "WT_GNADE_SMK",
    "DescriptionGXT": "WTD_GNADE_SMK",
    "Name": "Tear Gas",
    "Description": "Tear gas grenade, particularly effective at incapacitating multiple assailants. Sustained exposure can be lethal.",
    "Group": "GROUP_THROWN",
    "ModelHashKey": "w_ex_grenadesmoke",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_SMOKEGRENADE",
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "core"
  },
  "2694266206": {
    "HashKey": "WEAPON_BZGAS",
    "NameGXT": "WT_BZGAS",
    "DescriptionGXT": "WTD_BZGAS",
    "Name": "BZ Gas",
    "Description": "",
    "Group": "GROUP_THROWN",
    "ModelHashKey": "w_ex_grenadesmoke",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_BZGAS",
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "core"
  },
  "615608432": {
    "HashKey": "WEAPON_MOLOTOV",
    "NameGXT": "WT_MOLOTOV",
    "DescriptionGXT": "WTD_MOLOTOV",
    "Name": "Molotov",
    "Description": "Crude yet highly effective incendiary weapon. No happy hour with this cocktail.",
    "Group": "GROUP_THROWN",
    "ModelHashKey": "w_ex_molotov",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_MOLOTOV",
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "core"
  },
  "101631238": {
    "HashKey": "WEAPON_FIREEXTINGUISHER",
    "NameGXT": "WT_FIRE",
    "DescriptionGXT": "WTD_FIRE",
    "Name": "Fire Extinguisher",
    "Description": "",
    "Group": "GROUP_FIREEXTINGUISHER",
    "ModelHashKey": "w_am_fire_exting",
    "DefaultClipSize": 2000,
    "AmmoType": "AMMO_FIREEXTINGUISHER",
    "Components": {},
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "883325847": {
    "HashKey": "WEAPON_PETROLCAN",
    "NameGXT": "WT_PETROL",
    "DescriptionGXT": "WTD_PETROL",
    "Name": "Jerry Can",
    "Description": "Leaves a trail of gasoline that can be ignited.",
    "Group": "GROUP_PETROLCAN",
    "ModelHashKey": "w_am_jerrycan",
    "DefaultClipSize": 4500,
    "AmmoType": "AMMO_PETROLCAN",
    "Components": {},
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "core"
  },
  "600439132": {
    "HashKey": "WEAPON_BALL",
    "NameGXT": "WT_BALL",
    "DescriptionGXT": "WTD_BALL",
    "Name": "Ball",
    "Description": "",
    "Group": "GROUP_THROWN",
    "ModelHashKey": "w_am_baseball",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_BALL",
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "core"
  },
  "1233104067": {
    "HashKey": "WEAPON_FLARE",
    "NameGXT": "WT_FLARE",
    "DescriptionGXT": "WTD_FLARE",
    "Name": "Flare",
    "Description": "",
    "Group": "GROUP_THROWN",
    "ModelHashKey": "w_am_flare",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_FLARE",
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "core"
  },
  "3249783761": {
    "HashKey": "WEAPON_REVOLVER",
    "NameGXT": "WT_REVOLVER", 
    "damage": 40,
    "DescriptionGXT": "WTD_REVOLVER",
    "Name": "Heavy Revolver",
    "Description": "A handgun with enough stopping power to drop a crazed rhino, and heavy enough to beat it to death if you're out of ammo. Part of Executives and Other Criminals.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "w_pi_revolver",
    "DefaultClipSize": 6,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "384708672": {
        "HashKey": "COMPONENT_REVOLVER_VARMOD_BOSS",
        "NameGXT": "WCT_REV_VARB",
        "DescriptionGXT": "WCD_REV_VARB",
        "Name": "VIP Variant",
        "Description": "",
        "ModelHashKey": "w_pi_revolver_b",
        "IsDefault": false
      },
      "2492708877": {
        "HashKey": "COMPONENT_REVOLVER_VARMOD_GOON",
        "NameGXT": "WCT_REV_VARG",
        "DescriptionGXT": "WCD_REV_VARG",
        "Name": "Bodyguard Variant",
        "Description": "",
        "ModelHashKey": "w_pi_revolver_g",
        "IsDefault": false
      },
      "3917905123": {
        "HashKey": "COMPONENT_REVOLVER_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_REV_CLIP1",
        "Name": "Default Clip",
        "Description": "",
        "ModelHashKey": "w_pi_revolver_Mag1",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpapartment"
  },
  "3756226112": {
    "HashKey": "WEAPON_SWITCHBLADE",
    "NameGXT": "WT_SWBLADE",
    "damage": 15,
    "DescriptionGXT": "WTD_SWBLADE",
    "Name": "Switchblade",
    "Description": "From your pocket to hilt-deep in the other guy's ribs in under a second: folding knives will never go out of style. Part of Executives and Other Criminals.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_switchblade",
    "DefaultClipSize": 0,
    "Components": {
      "2436343040": {
        "HashKey": "COMPONENT_SWITCHBLADE_VARMOD_BASE",
        "NameGXT": "WCT_SB_BASE",
        "DescriptionGXT": "WCD_VAR_DESC",
        "Name": "Default Handle",
        "Description": "",
        "ModelHashKey": "w_me_switchblade",
        "IsDefault": false
      },
      "1530822070": {
        "HashKey": "COMPONENT_SWITCHBLADE_VARMOD_VAR1",
        "NameGXT": "WCT_SB_VAR1",
        "DescriptionGXT": "WCD_VAR_DESC",
        "Name": "VIP Variant",
        "Description": "",
        "ModelHashKey": "w_me_switchblade_b",
        "IsDefault": false
      },
      "3885209186": {
        "HashKey": "COMPONENT_SWITCHBLADE_VARMOD_VAR2",
        "NameGXT": "WCT_SB_VAR2",
        "DescriptionGXT": "WCD_VAR_DESC",
        "Name": "Bodyguard Variant",
        "Description": "",
        "ModelHashKey": "w_me_switchblade_g",
        "IsDefault": false
      }
    },
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mpapartment"
  },
  "940833800": {
    "HashKey": "WEAPON_STONE_HATCHET",
    "NameGXT": "WT_SHATCHET",
    "DescriptionGXT": "WTD_SHATCHET",
    "Name": "Stone Hatchet",
    "Description": "There's retro, there's vintage, and there's this. After 500 years of technological development and spiritual apocalypse, pre-Colombian chic is back.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_stonehatchet",
    "DefaultClipSize": 0,
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mpbattle"
  },
  "4192643659": {
    "HashKey": "WEAPON_BOTTLE",
    "NameGXT": "WT_BOTTLE",
    "damage": 15,
    "DescriptionGXT": "WTD_BOTTLE",
    "Name": "Bottle",
    "Description": "It's not clever and it's not pretty but, most of the time, neither is the guy coming at you with a knife. When all else fails, this gets the job done. Part of the Beach Bum Pack.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_bottle",
    "DefaultClipSize": 0,
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mpbeach"
  },
  "3218215474": {
    "HashKey": "WEAPON_SNSPISTOL",
    "NameGXT": "WT_SNSPISTOL",
    "damage": 10,
    "DescriptionGXT": "WTD_SNSPISTOL",
    "Name": "SNS Pistol",
    "Description": "Like condoms or hairspray, this fits in your pocket for a night out in a Vinewood club. It's half as accurate as a champagne cork but twice as deadly. Part of the Beach Bum Pack.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "w_pi_sns_pistol",
    "DefaultClipSize": 6,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "4169150169": {
        "HashKey": "COMPONENT_SNSPISTOL_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_SNSP_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for SNS Pistol.",
        "ModelHashKey": "w_pi_sns_pistol_mag1",
        "IsDefault": true
      },
      "2063610803": {
        "HashKey": "COMPONENT_SNSPISTOL_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_SNSP_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for SNS Pistol.",
        "ModelHashKey": "w_pi_sns_pistol_mag2",
        "IsDefault": false
      },
      "2150886575": {
        "HashKey": "COMPONENT_SNSPISTOL_VARMOD_LOWRIDER",
        "NameGXT": "WCT_VAR_WOOD",
        "DescriptionGXT": "WCD_VAR_SNS",
        "Name": "Etched Wood Grip Finish",
        "Description": "",
        "ModelHashKey": "w_pi_sns_pistol_luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpbeach"
  },
  "317205821": {
    "HashKey": "WEAPON_AUTOSHOTGUN",
    "NameGXT": "WT_AUTOSHGN",
    "damage": 4,
    "DescriptionGXT": "WTD_AUTOSHGN",
    "Name": "Sweeper Shotgun",
    "Description": "How many effective tools for riot control can you tuck into your pants? OK, two. But this is the other one. Part of Bikers.",
    "Group": "GROUP_SHOTGUN",
    "ModelHashKey": "w_sg_sweeper",
    "DefaultClipSize": 10,
    "AmmoType": "AMMO_SHOTGUN",
    "Components": {
      "169463950": {
        "HashKey": "COMPONENT_AUTOSHOTGUN_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "",
        "Name": "Default Clip",
        "Description": "",
        "ModelHashKey": "w_sg_sweeper_mag1",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpbiker"
  },
  "3441901897": {
    "HashKey": "WEAPON_BATTLEAXE",
    "NameGXT": "WT_BATTLEAXE",
    "damage": 25,
    "DescriptionGXT": "WTD_BATTLEAXE",
    "Name": "Battle Axe",
    "Description": "If it's good enough for medieval foot soldiers, modern border guards and pushy soccer moms, it's good enough for you. Part of Bikers.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_battleaxe",
    "DefaultClipSize": 0,
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mpbiker"
  },
  "3520460075": {
    "HashKey": "WEAPON_TACTICALRIFLE",
    "NameGXT": "WT_TACRIFLE",
    "DescriptionGXT": "WTD_TACRIFLE",
    "Name": "Service Carbine",
    "damage": 10.5,
    "Description": "This season's must-have hardware for law enforcement, military personnel and anyone locked in a fight to the death with either law enforcement or military personnel.",
    "Group": "GROUP_RIFLE",
    "ModelHashKey": "W_AR_CARBINERIFLE_REH",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_RIFLE",
    "Components": {
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      },
      "927578299": {
        "HashKey": "COMPONENT_TACTICALRIFLE_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CR_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Carbine Rifle.",
        "ModelHashKey": "w_ar_carbinerifle_mag1",
        "IsDefault": true
      },
      "2241090895": {
        "HashKey": "COMPONENT_TACTICALRIFLE_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CR_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Carbine Rifle.",
        "ModelHashKey": "w_ar_carbinerifle_mag2",
        "IsDefault": false
      },
      "2645680163": {
        "HashKey": "COMPONENT_AT_AR_FLSH_REH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "W_AT_AR_Flsh_REH",
        "IsDefault": false
      },
      "2805810788": {
        "HashKey": "COMPONENT_AT_AR_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp_02",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpsum2"
  },
  "125959754": {
    "HashKey": "WEAPON_COMPACTLAUNCHER",
    "NameGXT": "WT_CMPGL",
    "DescriptionGXT": "WTD_CMPGL",
    "Name": "Compact Grenade Launcher",
    "Description": "Focus groups using the regular model suggested it was too accurate and found it awkward to use with one hand on the throttle. Easy fix. Part of Bikers.",
    "Group": "GROUP_HEAVY",
    "ModelHashKey": "w_lr_compactgl",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_GRENADELAUNCHER",
    "Components": {
      "1235472140": {
        "HashKey": "COMPONENT_COMPACTLAUNCHER_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "",
        "Name": "Default Clip",
        "Description": "",
        "ModelHashKey": "w_lr_compactgl_mag1",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpbiker"
  },
  "3173288789": {
    "HashKey": "WEAPON_MINISMG",
    "NameGXT": "WT_MINISMG",
    "damage": 7.5,
    "DescriptionGXT": "WTD_MINISMG",
    "Name": "Mini SMG",
    "Description": "Increasingly popular since the marketing team looked beyond spec ops units and started caring about the little guys in low income areas. Part of Bikers.",
    "Group": "GROUP_SMG",
    "ModelHashKey": "w_sb_minismg",
    "DefaultClipSize": 20,
    "AmmoType": "AMMO_SMG",
    "Components": {
      "2227745491": {
        "HashKey": "COMPONENT_MINISMG_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_MIMG_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Mini SMG.",
        "ModelHashKey": "w_sb_minismg_mag1",
        "IsDefault": true
      },
      "2474561719": {
        "HashKey": "COMPONENT_MINISMG_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_MIMG_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Mini SMG.",
        "ModelHashKey": "w_sb_minismg_mag2",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpbiker"
  },
  "3125143736": {
    "HashKey": "WEAPON_PIPEBOMB",
    "NameGXT": "WT_PIPEBOMB",
    "DescriptionGXT": "WTD_PIPEBOMB",
    "Name": "Pipe Bomb",
    "Description": "Remember, it doesn't count as an IED when you buy it in a store and use it in a first world country. Part of Bikers.",
    "Group": "GROUP_THROWN",
    "ModelHashKey": "w_ex_pipebomb",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_PIPEBOMB",
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mpbiker"
  },
  "2484171525": {
    "HashKey": "WEAPON_POOLCUE",
    "NameGXT": "WT_POOLCUE",
    "damage": 10,
    "DescriptionGXT": "WTD_POOLCUE",
    "Name": "Pool Cue",
    "Description": "Ah, there's no sound as satisfying as the crack of a perfect break, especially when it's the other guy's spine. Part of Bikers.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_poolcue",
    "DefaultClipSize": 0,
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mpbiker"
  },
  "419712736": {
    "HashKey": "WEAPON_WRENCH",
    "NameGXT": "WT_WRENCH",
    "damage": 15,
    "DescriptionGXT": "WTD_WRENCH",
    "Name": "Pipe Wrench",
    "Description": "Perennial favourite of apocalyptic survivalists and violent fathers the world over, apparently it also doubles as some kind of tool. Part of Bikers.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_wrench",
    "DefaultClipSize": 0,
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mpbiker"
  },
  "3523564046": {
    "HashKey": "WEAPON_HEAVYPISTOL",
    "NameGXT": "WT_HVYPISTOL",
    "damage": 14,
    "DescriptionGXT": "WTD_HVYPISTOL",
    "Name": "Heavy Pistol",
    "Description": "The heavyweight champion of the magazine fed, semi-automatic handgun world. Delivers a serious forearm workout every time. Part of The Business Update.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "w_pi_heavypistol",
    "DefaultClipSize": 18,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "222992026": {
        "HashKey": "COMPONENT_HEAVYPISTOL_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_HPST_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Heavy Pistol.",
        "ModelHashKey": "w_pi_heavypistol_mag1",
        "IsDefault": true
      },
      "1694090795": {
        "HashKey": "COMPONENT_HEAVYPISTOL_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_HPST_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Heavy Pistol.",
        "ModelHashKey": "w_pi_heavypistol_mag2",
        "IsDefault": false
      },
      "899381934": {
        "HashKey": "COMPONENT_AT_PI_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_pi_flsh",
        "IsDefault": false
      },
      "3271853210": {
        "HashKey": "COMPONENT_AT_PI_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_PI_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_pi_supp",
        "IsDefault": false
      },
      "2053798779": {
        "HashKey": "COMPONENT_HEAVYPISTOL_VARMOD_LUXE",
        "NameGXT": "WCT_VAR_WOOD",
        "DescriptionGXT": "WCD_VAR_HPST",
        "Name": "Etched Wood Grip Finish",
        "Description": "",
        "ModelHashKey": "W_PI_HeavyPistol_Luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpbusiness"
  },
  "3231910285": {
    "HashKey": "WEAPON_SPECIALCARBINE",
    "NameGXT": "WT_SPCARBINE",
    "damage": 10.5,
    "DescriptionGXT": "WTD_SPCARBINE",
    "Name": "Special Carbine",
    "Description": "Combining accuracy, maneuverability and low recoil, this is an extremely versatile assault rifle for any combat situation. Part of The Business Update.",
    "Group": "GROUP_RIFLE",
    "ModelHashKey": "w_ar_specialcarbine",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_RIFLE",
    "Components": {
      "3334989185": {
        "HashKey": "COMPONENT_SPECIALCARBINE_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_SCRB_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Special Carbine.",
        "ModelHashKey": "w_ar_specialcarbine_mag1",
        "IsDefault": true
      },
      "2089537806": {
        "HashKey": "COMPONENT_SPECIALCARBINE_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_SCRB_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Special Carbine.",
        "ModelHashKey": "w_ar_specialcarbine_mag2",
        "IsDefault": false
      },
      "1801039530": {
        "HashKey": "COMPONENT_SPECIALCARBINE_CLIP_03",
        "NameGXT": "WCT_CLIP_DRM",
        "DescriptionGXT": "WCD_CLIP3",
        "Name": "Drum Magazine",
        "Description": "Expanded capacity and slower reload.",
        "ModelHashKey": "w_ar_specialcarbine_boxmag",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2698550338": {
        "HashKey": "COMPONENT_AT_SCOPE_MEDIUM",
        "NameGXT": "WCT_SCOPE_MED",
        "DescriptionGXT": "WCD_SCOPE_MED",
        "Name": "Scope",
        "Description": "Extended-range zoom functionality.",
        "ModelHashKey": "w_at_scope_medium",
        "IsDefault": false
      },
      "2805810788": {
        "HashKey": "COMPONENT_AT_AR_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP2",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp_02",
        "IsDefault": false
      },
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      },
      "1929467122": {
        "HashKey": "COMPONENT_SPECIALCARBINE_VARMOD_LOWRIDER",
        "NameGXT": "WCT_VAR_ETCHM",
        "DescriptionGXT": "WCD_VAR_SCAR",
        "Name": "Etched Gun Metal Finish",
        "Description": "",
        "ModelHashKey": "w_ar_specialcarbine_luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpbusiness"
  },
  "2132975508": {
    "HashKey": "WEAPON_BULLPUPRIFLE",
    "NameGXT": "WT_BULLRIFLE",
    "damage": 10.5,
    "DescriptionGXT": "WTD_BULLRIFLE",
    "Name": "Bullpup Rifle",
    "Description": "The latest Chinese import taking America by storm, this rifle is known for its balanced handling. Lightweight and very controllable in automatic fire. Part of The High Life Update.",
    "Group": "GROUP_RIFLE",
    "ModelHashKey": "w_ar_bullpuprifle",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_RIFLE",
    "Components": {
      "3315675008": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_BRIF_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Bullpup Rifle.",
        "ModelHashKey": "w_ar_bullpuprifle_mag1",
        "IsDefault": true
      },
      "3009973007": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_BRIF_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Bullpup Rifle.",
        "ModelHashKey": "w_ar_bullpuprifle_mag2",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2855028148": {
        "HashKey": "COMPONENT_AT_SCOPE_SMALL",
        "NameGXT": "WCT_SCOPE_SML",
        "DescriptionGXT": "WCD_SCOPE_SML",
        "Name": "Scope",
        "Description": "Medium-range zoom functionality.",
        "ModelHashKey": "w_at_scope_small",
        "IsDefault": false
      },
      "2205435306": {
        "HashKey": "COMPONENT_AT_AR_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp",
        "IsDefault": false
      },
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      },
      "2824322168": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_VARMOD_LOW",
        "NameGXT": "WCT_VAR_METAL",
        "DescriptionGXT": "WCD_VAR_BPR",
        "Name": "Gilded Gun Metal Finish",
        "Description": "",
        "ModelHashKey": "w_ar_bullpuprifle_luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpbusiness2"
  },
  "1672152130": {
    "HashKey": "WEAPON_HOMINGLAUNCHER",
    "NameGXT": "WT_HOMLNCH",
    "DescriptionGXT": "WTD_HOMLNCH",
    "Name": "Homing Launcher",
    "Description": "Infrared guided fire-and-forget missile launcher. For all your moving target needs. Part of the Festive Surprise.",
    "Group": "GROUP_HEAVY",
    "ModelHashKey": "w_lr_homing",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_HOMINGLAUNCHER",
    "Components": {
      "4162006335": {
        "HashKey": "COMPONENT_HOMINGLAUNCHER_CLIP_01",
        "NameGXT": "WCT_INVALID",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "",
        "Description": "",
        "ModelHashKey": "",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpchristmas2"
  },
  "2874559379": {
    "HashKey": "WEAPON_PROXMINE",
    "NameGXT": "WT_PRXMINE",
    "DescriptionGXT": "WTD_PRXMINE",
    "Name": "Proximity Mine",
    "Description": "Leave a present for your friends with these motion sensor landmines. Short delay after activation. Part of the Festive Surprise.",
    "Group": "GROUP_THROWN",
    "ModelHashKey": "w_ex_apmine",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_PROXMINE",
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mpchristmas2"
  },
  "126349499": {
    "HashKey": "WEAPON_SNOWBALL",
    "NameGXT": "WT_SNWBALL",
    "damage": 1,
    "DescriptionGXT": "WTD_SNWBALL",
    "Name": "Snowball",
    "Description": "",
    "Group": "GROUP_THROWN",
    "ModelHashKey": "w_ex_snowball",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_SNOWBALL",
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mpchristmas2"
  },
  "2228681469": {
    "HashKey": "WEAPON_BULLPUPRIFLE_MK2",
    "NameGXT": "WT_BULLRIFLE2",
    "damage": 11,
    "DescriptionGXT": "WTD_BULLRIFLE2",
    "Name": "Bullpup Rifle Mk II",
    "Description": "So precise, so exquisite, it's not so much a hail of bullets as a symphony.",
    "Group": "GROUP_RIFLE",
    "ModelHashKey": "w_ar_bullpupriflemk2",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_RIFLE",
    "Components": {
      "25766362": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for regular ammo.",
        "ModelHashKey": "w_ar_bullpupriflemk2_mag1",
        "IsDefault": true
      },
      "4021290536": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for regular ammo.",
        "ModelHashKey": "w_ar_bullpupriflemk2_mag2",
        "IsDefault": false
      },
      "2183159977": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CLIP_TRACER",
        "NameGXT": "WCT_CLIP_TR",
        "DescriptionGXT": "WCD_CLIP_TR",
        "Name": "Tracer Rounds",
        "Description": "Bullets with bright visible markers that match the tint of the gun. Standard capacity.",
        "ModelHashKey": "W_AR_BullpupRifleMK2_Mag_TR",
        "AmmoType": "AMMO_RIFLE_TRACER",
        "IsDefault": false
      },
      "2845636954": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CLIP_INCENDIARY",
        "NameGXT": "WCT_CLIP_INC",
        "DescriptionGXT": "WCD_CLIP_INC",
        "Name": "Incendiary Rounds",
        "Description": "Bullets which include a chance to set targets on fire when shot. Reduced capacity.",
        "ModelHashKey": "W_AR_BullpupRifleMK2_Mag_INC",
        "AmmoType": "AMMO_RIFLE_INCENDIARY",
        "IsDefault": false
      },
      "4205311469": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CLIP_ARMORPIERCING",
        "NameGXT": "WCT_CLIP_AP",
        "DescriptionGXT": "WCD_CLIP_AP",
        "Name": "Armor Piercing Rounds",
        "Description": "Increased penetration of Body Armor. Reduced capacity.",
        "ModelHashKey": "W_AR_BullpupRifleMK2_Mag_AP",
        "AmmoType": "AMMO_RIFLE_ARMORPIERCING",
        "IsDefault": false
      },
      "1130501904": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CLIP_FMJ",
        "NameGXT": "WCT_CLIP_FMJ",
        "DescriptionGXT": "WCD_CLIP_FMJ",
        "Name": "Full Metal Jacket Rounds",
        "Description": "Increased damage to vehicles. Also penetrates bullet resistant and bulletproof vehicle glass. Reduced capacity.",
        "ModelHashKey": "W_AR_BullpupRifleMK2_Mag_FMJ",
        "AmmoType": "AMMO_RIFLE_FMJ",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "1108334355": {
        "HashKey": "COMPONENT_AT_SIGHTS",
        "NameGXT": "WCT_HOLO",
        "DescriptionGXT": "WCD_HOLO",
        "Name": "Holographic Sight",
        "Description": "Accurate sight for close quarters combat.",
        "ModelHashKey": "w_at_sights_1",
        "IsDefault": false
      },
      "3350057221": {
        "HashKey": "COMPONENT_AT_SCOPE_MACRO_02_MK2",
        "NameGXT": "WCT_SCOPE_MAC2",
        "DescriptionGXT": "WCD_SCOPE_MAC",
        "Name": "Small Scope",
        "Description": "Standard-range zoom functionality.",
        "ModelHashKey": "w_at_scope_macro_2",
        "IsDefault": false
      },
      "1060929921": {
        "HashKey": "COMPONENT_AT_SCOPE_SMALL_MK2",
        "NameGXT": "WCT_SCOPE_SML2",
        "DescriptionGXT": "WCD_SCOPE_SML",
        "Name": "Medium Scope",
        "Description": "Medium-range zoom functionality.",
        "ModelHashKey": "w_at_scope_small",
        "IsDefault": false
      },
      "1704640795": {
        "HashKey": "COMPONENT_AT_BP_BARREL_01",
        "NameGXT": "WCT_BARR",
        "DescriptionGXT": "WCD_BARR",
        "Name": "Default Barrel",
        "Description": "Stock barrel attachment.",
        "ModelHashKey": "W_AR_BP_MK2_Barrel1",
        "IsDefault": true
      },
      "1005743559": {
        "HashKey": "COMPONENT_AT_BP_BARREL_02",
        "NameGXT": "WCT_BARR2",
        "DescriptionGXT": "WCD_BARR2",
        "Name": "Heavy Barrel",
        "Description": "Increases damage dealt to long-range targets.",
        "ModelHashKey": "W_AR_BP_MK2_Barrel2",
        "IsDefault": false
      },
      "2205435306": {
        "HashKey": "COMPONENT_AT_AR_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp",
        "IsDefault": false
      },
      "3113485012": {
        "HashKey": "COMPONENT_AT_MUZZLE_01",
        "NameGXT": "WCT_MUZZ1",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Flat Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_1",
        "IsDefault": false
      },
      "3362234491": {
        "HashKey": "COMPONENT_AT_MUZZLE_02",
        "NameGXT": "WCT_MUZZ2",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Tactical Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_2",
        "IsDefault": false
      },
      "3725708239": {
        "HashKey": "COMPONENT_AT_MUZZLE_03",
        "NameGXT": "WCT_MUZZ3",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Fat-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_3",
        "IsDefault": false
      },
      "3968886988": {
        "HashKey": "COMPONENT_AT_MUZZLE_04",
        "NameGXT": "WCT_MUZZ4",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Precision Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_4",
        "IsDefault": false
      },
      "48731514": {
        "HashKey": "COMPONENT_AT_MUZZLE_05",
        "NameGXT": "WCT_MUZZ5",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Heavy Duty Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_5",
        "IsDefault": false
      },
      "880736428": {
        "HashKey": "COMPONENT_AT_MUZZLE_06",
        "NameGXT": "WCT_MUZZ6",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Slanted Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_6",
        "IsDefault": false
      },
      "1303784126": {
        "HashKey": "COMPONENT_AT_MUZZLE_07",
        "NameGXT": "WCT_MUZZ7",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Split-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_7",
        "IsDefault": false
      },
      "2640679034": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP_02",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_afgrip_2",
        "IsDefault": false
      },
      "2923451831": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CAMO",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "w_ar_bullpupriflemk2_camo1",
        "IsDefault": false
      },
      "3104173419": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CAMO_02",
        "NameGXT": "WCT_CAMO_2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Brushstroke Camo",
        "Description": "",
        "ModelHashKey": "w_ar_bullpupriflemk2_camo2",
        "IsDefault": false
      },
      "2797881576": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CAMO_03",
        "NameGXT": "WCT_CAMO_3",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Woodland Camo",
        "Description": "",
        "ModelHashKey": "w_ar_bullpupriflemk2_camo3",
        "IsDefault": false
      },
      "2491819116": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CAMO_04",
        "NameGXT": "WCT_CAMO_4",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Skull",
        "Description": "",
        "ModelHashKey": "w_ar_bullpupriflemk2_camo4",
        "IsDefault": false
      },
      "2318995410": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CAMO_05",
        "NameGXT": "WCT_CAMO_5",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Sessanta Nove",
        "Description": "",
        "ModelHashKey": "w_ar_bullpupriflemk2_camo5",
        "IsDefault": false
      },
      "36929477": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CAMO_06",
        "NameGXT": "WCT_CAMO_6",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Perseus",
        "Description": "",
        "ModelHashKey": "w_ar_bullpupriflemk2_camo6",
        "IsDefault": false
      },
      "4026522462": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CAMO_07",
        "NameGXT": "WCT_CAMO_7",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Leopard",
        "Description": "",
        "ModelHashKey": "w_ar_bullpupriflemk2_camo7",
        "IsDefault": false
      },
      "3720197850": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CAMO_08",
        "NameGXT": "WCT_CAMO_8",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Zebra",
        "Description": "",
        "ModelHashKey": "w_ar_bullpupriflemk2_camo8",
        "IsDefault": false
      },
      "3412267557": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CAMO_09",
        "NameGXT": "WCT_CAMO_9",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Geometric",
        "Description": "",
        "ModelHashKey": "w_ar_bullpupriflemk2_camo9",
        "IsDefault": false
      },
      "2826785822": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CAMO_10",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "w_ar_bullpupriflemk2_camo10",
        "IsDefault": false
      },
      "3320426066": {
        "HashKey": "COMPONENT_BULLPUPRIFLE_MK2_CAMO_IND_01",
        "NameGXT": "WCT_CAMO_IND",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Patriotic",
        "Description": "",
        "ModelHashKey": "w_ar_bullpupriflemk2_camo_ind1",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WCT_TINT_0",
        "Name": "Classic Black"
      },
      {
        "NameGXT": "WCT_TINT_1",
        "Name": "Classic Gray"
      },
      {
        "NameGXT": "WCT_TINT_2",
        "Name": "Classic Two-Tone"
      },
      {
        "NameGXT": "WCT_TINT_3",
        "Name": "Classic White"
      },
      {
        "NameGXT": "WCT_TINT_4",
        "Name": "Classic Beige"
      },
      {
        "NameGXT": "WCT_TINT_5",
        "Name": "Classic Green"
      },
      {
        "NameGXT": "WCT_TINT_6",
        "Name": "Classic Blue"
      },
      {
        "NameGXT": "WCT_TINT_7",
        "Name": "Classic Earth"
      },
      {
        "NameGXT": "WCT_TINT_8",
        "Name": "Classic Brown & Black"
      },
      {
        "NameGXT": "WCT_TINT_9",
        "Name": "Red Contrast"
      },
      {
        "NameGXT": "WCT_TINT_10",
        "Name": "Blue Contrast"
      },
      {
        "NameGXT": "WCT_TINT_11",
        "Name": "Yellow Contrast"
      },
      {
        "NameGXT": "WCT_TINT_12",
        "Name": "Orange Contrast"
      },
      {
        "NameGXT": "WCT_TINT_13",
        "Name": "Bold Pink"
      },
      {
        "NameGXT": "WCT_TINT_14",
        "Name": "Bold Purple & Yellow"
      },
      {
        "NameGXT": "WCT_TINT_15",
        "Name": "Bold Orange"
      },
      {
        "NameGXT": "WCT_TINT_16",
        "Name": "Bold Green & Purple"
      },
      {
        "NameGXT": "WCT_TINT_17",
        "Name": "Bold Red Features"
      },
      {
        "NameGXT": "WCT_TINT_18",
        "Name": "Bold Green Features"
      },
      {
        "NameGXT": "WCT_TINT_19",
        "Name": "Bold Cyan Features"
      },
      {
        "NameGXT": "WCT_TINT_20",
        "Name": "Bold Yellow Features"
      },
      {
        "NameGXT": "WCT_TINT_21",
        "Name": "Bold Red & White"
      },
      {
        "NameGXT": "WCT_TINT_22",
        "Name": "Bold Blue & White"
      },
      {
        "NameGXT": "WCT_TINT_23",
        "Name": "Metallic Gold"
      },
      {
        "NameGXT": "WCT_TINT_24",
        "Name": "Metallic Platinum"
      },
      {
        "NameGXT": "WCT_TINT_25",
        "Name": "Metallic Gray & Lilac"
      },
      {
        "NameGXT": "WCT_TINT_26",
        "Name": "Metallic Purple & Lime"
      },
      {
        "NameGXT": "WCT_TINT_27",
        "Name": "Metallic Red"
      },
      {
        "NameGXT": "WCT_TINT_28",
        "Name": "Metallic Green"
      },
      {
        "NameGXT": "WCT_TINT_29",
        "Name": "Metallic Blue"
      },
      {
        "NameGXT": "WCT_TINT_30",
        "Name": "Metallic White & Aqua"
      },
      {
        "NameGXT": "WCT_TINT_31",
        "Name": "Metallic Red & Yellow"
      }
    ],
    "LiveryColors": [
      {
        "NameGXT": "WCT_C_TINT_0",
        "Name": "Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_1",
        "Name": "Dark Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_2",
        "Name": "Black"
      },
      {
        "NameGXT": "WCT_C_TINT_3",
        "Name": "White"
      },
      {
        "NameGXT": "WCT_C_TINT_4",
        "Name": "Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_5",
        "Name": "Cyan"
      },
      {
        "NameGXT": "WCT_C_TINT_6",
        "Name": "Aqua"
      },
      {
        "NameGXT": "WCT_C_TINT_7",
        "Name": "Cool Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_8",
        "Name": "Dark Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_9",
        "Name": "Royal Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_10",
        "Name": "Plum"
      },
      {
        "NameGXT": "WCT_C_TINT_11",
        "Name": "Dark Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_12",
        "Name": "Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_13",
        "Name": "Red"
      },
      {
        "NameGXT": "WCT_C_TINT_14",
        "Name": "Wine Red"
      },
      {
        "NameGXT": "WCT_C_TINT_15",
        "Name": "Magenta"
      },
      {
        "NameGXT": "WCT_C_TINT_16",
        "Name": "Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_17",
        "Name": "Salmon"
      },
      {
        "NameGXT": "WCT_C_TINT_18",
        "Name": "Hot Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_19",
        "Name": "Rust Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_20",
        "Name": "Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_21",
        "Name": "Earth"
      },
      {
        "NameGXT": "WCT_C_TINT_22",
        "Name": "Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_23",
        "Name": "Light Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_24",
        "Name": "Dark Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_25",
        "Name": "Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_26",
        "Name": "Light Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_27",
        "Name": "Lime Green"
      },
      {
        "NameGXT": "WCT_C_TINT_28",
        "Name": "Olive"
      },
      {
        "NameGXT": "WCT_C_TINT_29",
        "Name": "Moss"
      },
      {
        "NameGXT": "WCT_C_TINT_30",
        "Name": "Turquoise"
      },
      {
        "NameGXT": "WCT_C_TINT_31",
        "Name": "Dark Green"
      }
    ],
    "DLC": "mpchristmas2017"
  },
  "2548703416": {
    "HashKey": "WEAPON_DOUBLEACTION",
    "NameGXT": "WT_REV_DA",
    "damage": 27,
    "DescriptionGXT": "WTD_REV_DA",
    "Name": "Double-Action Revolver",
    "Description": "Because sometimes revenge is a dish best served six times, in quick succession, right between the eyes. Part of The Doomsday Heist.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "w_pi_wep1_gun",
    "DefaultClipSize": 6,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "1328622785": {
        "HashKey": "COMPONENT_DOUBLEACTION_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_REV_DA_CLIP",
        "Name": "Default Clip",
        "Description": "Standard ammo capacity.",
        "ModelHashKey": "w_pi_wep1_mag1",
        "IsDefault": true
      }
    },
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mpchristmas2017"
  },
  "1785463520": {
    "HashKey": "WEAPON_MARKSMANRIFLE_MK2",
    "NameGXT": "WT_MKRIFLE2",
    "damage": 25,
    "DescriptionGXT": "WTD_MKRIFLE2",
    "Name": "Marksman Rifle Mk II",
    "Description": "Known in military circles as The Dislocator, this mod set will destroy both the target and your shoulder, in that order.",
    "Group": "GROUP_SNIPER",
    "ModelHashKey": "w_sr_marksmanriflemk2",
    "DefaultClipSize": 8,
    "AmmoType": "AMMO_SNIPER",
    "Components": {
      "2497785294": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for regular ammo.",
        "ModelHashKey": "w_sr_marksmanriflemk2_mag1",
        "IsDefault": true
      },
      "3872379306": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for regular ammo.",
        "ModelHashKey": "w_sr_marksmanriflemk2_mag2",
        "IsDefault": false
      },
      "3615105746": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CLIP_TRACER",
        "NameGXT": "WCT_CLIP_TR",
        "DescriptionGXT": "WCD_CLIP_TR",
        "Name": "Tracer Rounds",
        "Description": "Bullets with bright visible markers that match the tint of the gun. Standard capacity.",
        "ModelHashKey": "w_sr_marksmanriflemk2_mag_tr",
        "AmmoType": "AMMO_SNIPER_TRACER",
        "IsDefault": false
      },
      "1842849902": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CLIP_INCENDIARY",
        "NameGXT": "WCT_CLIP_INC",
        "DescriptionGXT": "WCD_CLIP_INC",
        "Name": "Incendiary Rounds",
        "Description": "Bullets which include a chance to set targets on fire when shot. Reduced capacity.",
        "ModelHashKey": "w_sr_marksmanriflemk2_mag_inc",
        "AmmoType": "AMMO_SNIPER_INCENDIARY",
        "IsDefault": false
      },
      "4100968569": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CLIP_ARMORPIERCING",
        "NameGXT": "WCT_CLIP_AP",
        "DescriptionGXT": "WCD_CLIP_AP",
        "Name": "Armor Piercing Rounds",
        "Description": "Increased penetration of Body Armor. Reduced capacity.",
        "ModelHashKey": "w_sr_marksmanriflemk2_mag_ap",
        "AmmoType": "AMMO_SNIPER_ARMORPIERCING",
        "IsDefault": false
      },
      "3779763923": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CLIP_FMJ",
        "NameGXT": "WCT_CLIP_FMJ",
        "DescriptionGXT": "WCD_CLIP_FMJ",
        "Name": "Full Metal Jacket Rounds",
        "Description": "Increased damage to vehicles. Also penetrates bullet resistant and bulletproof vehicle glass. Reduced capacity.",
        "ModelHashKey": "w_sr_marksmanriflemk2_mag_fmj",
        "AmmoType": "AMMO_SNIPER_FMJ",
        "IsDefault": false
      },
      "1108334355": {
        "HashKey": "COMPONENT_AT_SIGHTS",
        "NameGXT": "WCT_HOLO",
        "DescriptionGXT": "WCD_HOLO",
        "Name": "Holographic Sight",
        "Description": "Accurate sight for close quarters combat.",
        "ModelHashKey": "w_at_sights_1",
        "IsDefault": false
      },
      "3328927042": {
        "HashKey": "COMPONENT_AT_SCOPE_MEDIUM_MK2",
        "NameGXT": "WCT_SCOPE_MED2",
        "DescriptionGXT": "WCD_SCOPE_MED",
        "Name": "Large Scope",
        "Description": "Extended-range zoom functionality.",
        "ModelHashKey": "w_at_scope_medium_2",
        "IsDefault": false
      },
      "1528590652": {
        "HashKey": "COMPONENT_AT_SCOPE_LARGE_FIXED_ZOOM_MK2",
        "NameGXT": "WCT_SCOPE_LRG2",
        "DescriptionGXT": "WCD_SCOPE_LRF",
        "Name": "Zoom Scope",
        "Description": "Long-range fixed zoom functionality.",
        "ModelHashKey": "w_at_scope_large",
        "IsDefault": true
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2205435306": {
        "HashKey": "COMPONENT_AT_AR_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp",
        "IsDefault": false
      },
      "3113485012": {
        "HashKey": "COMPONENT_AT_MUZZLE_01",
        "NameGXT": "WCT_MUZZ1",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Flat Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_1",
        "IsDefault": false
      },
      "3362234491": {
        "HashKey": "COMPONENT_AT_MUZZLE_02",
        "NameGXT": "WCT_MUZZ2",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Tactical Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_2",
        "IsDefault": false
      },
      "3725708239": {
        "HashKey": "COMPONENT_AT_MUZZLE_03",
        "NameGXT": "WCT_MUZZ3",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Fat-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_3",
        "IsDefault": false
      },
      "3968886988": {
        "HashKey": "COMPONENT_AT_MUZZLE_04",
        "NameGXT": "WCT_MUZZ4",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Precision Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_4",
        "IsDefault": false
      },
      "48731514": {
        "HashKey": "COMPONENT_AT_MUZZLE_05",
        "NameGXT": "WCT_MUZZ5",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Heavy Duty Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_5",
        "IsDefault": false
      },
      "880736428": {
        "HashKey": "COMPONENT_AT_MUZZLE_06",
        "NameGXT": "WCT_MUZZ6",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Slanted Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_6",
        "IsDefault": false
      },
      "1303784126": {
        "HashKey": "COMPONENT_AT_MUZZLE_07",
        "NameGXT": "WCT_MUZZ7",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Split-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_7",
        "IsDefault": false
      },
      "941317513": {
        "HashKey": "COMPONENT_AT_MRFL_BARREL_01",
        "NameGXT": "WCT_BARR",
        "DescriptionGXT": "WCD_BARR",
        "Name": "Default Barrel",
        "Description": "Stock barrel attachment.",
        "ModelHashKey": "w_sr_mr_mk2_barrel_1",
        "IsDefault": true
      },
      "1748450780": {
        "HashKey": "COMPONENT_AT_MRFL_BARREL_02",
        "NameGXT": "WCT_BARR2",
        "DescriptionGXT": "WCD_BARR2",
        "Name": "Heavy Barrel",
        "Description": "Increases damage dealt to long-range targets.",
        "ModelHashKey": "w_sr_mr_mk2_barrel_2",
        "IsDefault": false
      },
      "2640679034": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP_02",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_afgrip_2",
        "IsDefault": false
      },
      "2425682848": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CAMO",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "w_sr_marksmanriflemk2_camo1",
        "IsDefault": false
      },
      "1931539634": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CAMO_02",
        "NameGXT": "WCT_CAMO_2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Brushstroke Camo",
        "Description": "",
        "ModelHashKey": "w_sr_marksmanriflemk2_camo2",
        "IsDefault": false
      },
      "1624199183": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CAMO_03",
        "NameGXT": "WCT_CAMO_3",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Woodland Camo",
        "Description": "",
        "ModelHashKey": "w_sr_marksmanriflemk2_camo3",
        "IsDefault": false
      },
      "4268133183": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CAMO_04",
        "NameGXT": "WCT_CAMO_4",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Skull",
        "Description": "",
        "ModelHashKey": "w_sr_marksmanriflemk2_camo4",
        "IsDefault": false
      },
      "4084561241": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CAMO_05",
        "NameGXT": "WCT_CAMO_5",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Sessanta Nove",
        "Description": "",
        "ModelHashKey": "w_sr_marksmanriflemk2_camo5",
        "IsDefault": false
      },
      "423313640": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CAMO_06",
        "NameGXT": "WCT_CAMO_6",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Perseus",
        "Description": "",
        "ModelHashKey": "w_sr_marksmanriflemk2_camo6",
        "IsDefault": false
      },
      "276639596": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CAMO_07",
        "NameGXT": "WCT_CAMO_7",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Leopard",
        "Description": "",
        "ModelHashKey": "w_sr_marksmanriflemk2_camo7",
        "IsDefault": false
      },
      "3303610433": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CAMO_08",
        "NameGXT": "WCT_CAMO_8",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Zebra",
        "Description": "",
        "ModelHashKey": "w_sr_marksmanriflemk2_camo8",
        "IsDefault": false
      },
      "2612118995": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CAMO_09",
        "NameGXT": "WCT_CAMO_9",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Geometric",
        "Description": "",
        "ModelHashKey": "w_sr_marksmanriflemk2_camo9",
        "IsDefault": false
      },
      "996213771": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CAMO_10",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "w_sr_marksmanriflemk2_camo10",
        "IsDefault": false
      },
      "3080918746": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_MK2_CAMO_IND_01",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "w_sr_marksmanriflemk2_camo_ind",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WCT_TINT_0",
        "Name": "Classic Black"
      },
      {
        "NameGXT": "WCT_TINT_1",
        "Name": "Classic Gray"
      },
      {
        "NameGXT": "WCT_TINT_2",
        "Name": "Classic Two-Tone"
      },
      {
        "NameGXT": "WCT_TINT_3",
        "Name": "Classic White"
      },
      {
        "NameGXT": "WCT_TINT_4",
        "Name": "Classic Beige"
      },
      {
        "NameGXT": "WCT_TINT_5",
        "Name": "Classic Green"
      },
      {
        "NameGXT": "WCT_TINT_6",
        "Name": "Classic Blue"
      },
      {
        "NameGXT": "WCT_TINT_7",
        "Name": "Classic Earth"
      },
      {
        "NameGXT": "WCT_TINT_8",
        "Name": "Classic Brown & Black"
      },
      {
        "NameGXT": "WCT_TINT_9",
        "Name": "Red Contrast"
      },
      {
        "NameGXT": "WCT_TINT_10",
        "Name": "Blue Contrast"
      },
      {
        "NameGXT": "WCT_TINT_11",
        "Name": "Yellow Contrast"
      },
      {
        "NameGXT": "WCT_TINT_12",
        "Name": "Orange Contrast"
      },
      {
        "NameGXT": "WCT_TINT_13",
        "Name": "Bold Pink"
      },
      {
        "NameGXT": "WCT_TINT_14",
        "Name": "Bold Purple & Yellow"
      },
      {
        "NameGXT": "WCT_TINT_15",
        "Name": "Bold Orange"
      },
      {
        "NameGXT": "WCT_TINT_16",
        "Name": "Bold Green & Purple"
      },
      {
        "NameGXT": "WCT_TINT_17",
        "Name": "Bold Red Features"
      },
      {
        "NameGXT": "WCT_TINT_18",
        "Name": "Bold Green Features"
      },
      {
        "NameGXT": "WCT_TINT_19",
        "Name": "Bold Cyan Features"
      },
      {
        "NameGXT": "WCT_TINT_20",
        "Name": "Bold Yellow Features"
      },
      {
        "NameGXT": "WCT_TINT_21",
        "Name": "Bold Red & White"
      },
      {
        "NameGXT": "WCT_TINT_22",
        "Name": "Bold Blue & White"
      },
      {
        "NameGXT": "WCT_TINT_23",
        "Name": "Metallic Gold"
      },
      {
        "NameGXT": "WCT_TINT_24",
        "Name": "Metallic Platinum"
      },
      {
        "NameGXT": "WCT_TINT_25",
        "Name": "Metallic Gray & Lilac"
      },
      {
        "NameGXT": "WCT_TINT_26",
        "Name": "Metallic Purple & Lime"
      },
      {
        "NameGXT": "WCT_TINT_27",
        "Name": "Metallic Red"
      },
      {
        "NameGXT": "WCT_TINT_28",
        "Name": "Metallic Green"
      },
      {
        "NameGXT": "WCT_TINT_29",
        "Name": "Metallic Blue"
      },
      {
        "NameGXT": "WCT_TINT_30",
        "Name": "Metallic White & Aqua"
      },
      {
        "NameGXT": "WCT_TINT_31",
        "Name": "Metallic Red & Yellow"
      }
    ],
    "LiveryColors": [
      {
        "NameGXT": "WCT_C_TINT_0",
        "Name": "Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_1",
        "Name": "Dark Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_2",
        "Name": "Black"
      },
      {
        "NameGXT": "WCT_C_TINT_3",
        "Name": "White"
      },
      {
        "NameGXT": "WCT_C_TINT_4",
        "Name": "Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_5",
        "Name": "Cyan"
      },
      {
        "NameGXT": "WCT_C_TINT_6",
        "Name": "Aqua"
      },
      {
        "NameGXT": "WCT_C_TINT_7",
        "Name": "Cool Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_8",
        "Name": "Dark Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_9",
        "Name": "Royal Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_10",
        "Name": "Plum"
      },
      {
        "NameGXT": "WCT_C_TINT_11",
        "Name": "Dark Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_12",
        "Name": "Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_13",
        "Name": "Red"
      },
      {
        "NameGXT": "WCT_C_TINT_14",
        "Name": "Wine Red"
      },
      {
        "NameGXT": "WCT_C_TINT_15",
        "Name": "Magenta"
      },
      {
        "NameGXT": "WCT_C_TINT_16",
        "Name": "Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_17",
        "Name": "Salmon"
      },
      {
        "NameGXT": "WCT_C_TINT_18",
        "Name": "Hot Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_19",
        "Name": "Rust Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_20",
        "Name": "Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_21",
        "Name": "Earth"
      },
      {
        "NameGXT": "WCT_C_TINT_22",
        "Name": "Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_23",
        "Name": "Light Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_24",
        "Name": "Dark Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_25",
        "Name": "Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_26",
        "Name": "Light Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_27",
        "Name": "Lime Green"
      },
      {
        "NameGXT": "WCT_C_TINT_28",
        "Name": "Olive"
      },
      {
        "NameGXT": "WCT_C_TINT_29",
        "Name": "Moss"
      },
      {
        "NameGXT": "WCT_C_TINT_30",
        "Name": "Turquoise"
      },
      {
        "NameGXT": "WCT_C_TINT_31",
        "Name": "Dark Green"
      }
    ],
    "DLC": "mpchristmas2017"
  },
  "1432025498": {
    "HashKey": "WEAPON_PUMPSHOTGUN_MK2",
    "NameGXT": "WT_SG_PMP2",
    "damage": 4,
    "DescriptionGXT": "WTD_SG_PMP2",
    "Name": "Pump Shotgun Mk II",
    "Description": "Only one thing pumps more action than a pump action: watch out, the recoil is almost as deadly as the shot.",
    "Group": "GROUP_SHOTGUN",
    "ModelHashKey": "w_sg_pumpshotgunmk2",
    "DefaultClipSize": 8,
    "AmmoType": "AMMO_SHOTGUN",
    "Components": {
      "3449028929": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CLIP_01",
        "NameGXT": "WCT_SHELL",
        "DescriptionGXT": "WCD_SHELL",
        "Name": "Default Shells",
        "Description": "Standard shotgun ammunition.",
        "ModelHashKey": "w_sg_pumpshotgunmk2_mag1",
        "IsDefault": true
      },
      "2676628469": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CLIP_INCENDIARY",
        "NameGXT": "WCT_SHELL_INC",
        "DescriptionGXT": "WCD_SHELL_INC",
        "Name": "Dragon's Breath Shells",
        "Description": "Has a chance to set targets on fire when shot.",
        "ModelHashKey": "w_sg_pumpshotgunmk2_mag_inc",
        "AmmoType": "AMMO_SHOTGUN_INCENDIARY",
        "IsDefault": false
      },
      "1315288101": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CLIP_ARMORPIERCING",
        "NameGXT": "WCT_SHELL_AP",
        "DescriptionGXT": "WCD_SHELL_AP",
        "Name": "Steel Buckshot Shells",
        "Description": "Increased penetration of Body Armor.",
        "ModelHashKey": "w_sg_pumpshotgunmk2_mag_ap",
        "AmmoType": "AMMO_SHOTGUN_ARMORPIERCING",
        "IsDefault": false
      },
      "3914869031": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CLIP_HOLLOWPOINT",
        "NameGXT": "WCT_SHELL_HP",
        "DescriptionGXT": "WCD_SHELL_HP",
        "Name": "Flechette Shells",
        "Description": "Increased damage to targets without Body Armor.",
        "ModelHashKey": "w_sg_pumpshotgunmk2_mag_hp",
        "AmmoType": "AMMO_SHOTGUN_HOLLOWPOINT",
        "IsDefault": false
      },
      "1004815965": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CLIP_EXPLOSIVE",
        "NameGXT": "WCT_SHELL_EX",
        "DescriptionGXT": "WCD_SHELL_EX",
        "Name": "Explosive Slugs",
        "Description": "Projectile which explodes on impact.",
        "ModelHashKey": "w_sg_pumpshotgunmk2_mag_exp",
        "AmmoType": "AMMO_SHOTGUN_EXPLOSIVE",
        "IsDefault": false
      },
      "1108334355": {
        "HashKey": "COMPONENT_AT_SIGHTS",
        "NameGXT": "WCT_HOLO",
        "DescriptionGXT": "WCD_HOLO",
        "Name": "Holographic Sight",
        "Description": "Accurate sight for close quarters combat.",
        "ModelHashKey": "w_at_sights_1",
        "IsDefault": false
      },
      "77277509": {
        "HashKey": "COMPONENT_AT_SCOPE_MACRO_MK2",
        "NameGXT": "WCT_SCOPE_MAC2",
        "DescriptionGXT": "WCD_SCOPE_MAC",
        "Name": "Small Scope",
        "Description": "Standard-range zoom functionality.",
        "ModelHashKey": "w_at_scope_macro",
        "IsDefault": false
      },
      "1060929921": {
        "HashKey": "COMPONENT_AT_SCOPE_SMALL_MK2",
        "NameGXT": "WCT_SCOPE_SML2",
        "DescriptionGXT": "WCD_SCOPE_SML",
        "Name": "Medium Scope",
        "Description": "Medium-range zoom functionality.",
        "ModelHashKey": "w_at_scope_small",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2890063729": {
        "HashKey": "COMPONENT_AT_SR_SUPP_03",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_SR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_sr_supp3",
        "IsDefault": false
      },
      "1602080333": {
        "HashKey": "COMPONENT_AT_MUZZLE_08",
        "NameGXT": "WCT_MUZZ8",
        "DescriptionGXT": "WCD_MUZZ_SR",
        "Name": "Squared Muzzle Brake",
        "Description": "Reduces recoil when firing.",
        "ModelHashKey": "w_at_muzzle_8_xm17",
        "IsDefault": false
      },
      "3820854852": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CAMO",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "w_sg_pumpshotgunmk2_camo1",
        "IsDefault": false
      },
      "387223451": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CAMO_02",
        "NameGXT": "WCT_CAMO_2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Brushstroke Camo",
        "Description": "",
        "ModelHashKey": "w_sg_pumpshotgunmk2_camo2",
        "IsDefault": false
      },
      "617753366": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CAMO_03",
        "NameGXT": "WCT_CAMO_3",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Woodland Camo",
        "Description": "",
        "ModelHashKey": "w_sg_pumpshotgunmk2_camo3",
        "IsDefault": false
      },
      "4072589040": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CAMO_04",
        "NameGXT": "WCT_CAMO_4",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Skull",
        "Description": "",
        "ModelHashKey": "w_sg_pumpshotgunmk2_camo4",
        "IsDefault": false
      },
      "8741501": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CAMO_05",
        "NameGXT": "WCT_CAMO_5",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Sessanta Nove",
        "Description": "",
        "ModelHashKey": "w_sg_pumpshotgunmk2_camo5",
        "IsDefault": false
      },
      "3693681093": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CAMO_06",
        "NameGXT": "WCT_CAMO_6",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Perseus",
        "Description": "",
        "ModelHashKey": "w_sg_pumpshotgunmk2_camo6",
        "IsDefault": false
      },
      "3783533691": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CAMO_07",
        "NameGXT": "WCT_CAMO_7",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Leopard",
        "Description": "",
        "ModelHashKey": "w_sg_pumpshotgunmk2_camo7",
        "IsDefault": false
      },
      "3639579478": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CAMO_08",
        "NameGXT": "WCT_CAMO_8",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Zebra",
        "Description": "",
        "ModelHashKey": "w_sg_pumpshotgunmk2_camo8",
        "IsDefault": false
      },
      "4012490698": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CAMO_09",
        "NameGXT": "WCT_CAMO_9",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Geometric",
        "Description": "",
        "ModelHashKey": "w_sg_pumpshotgunmk2_camo9",
        "IsDefault": false
      },
      "1739501925": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CAMO_10",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "w_sg_pumpshotgunmk2_camo10",
        "IsDefault": false
      },
      "1178671645": {
        "HashKey": "COMPONENT_PUMPSHOTGUN_MK2_CAMO_IND_01",
        "NameGXT": "WCT_CAMO_IND",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Patriotic",
        "Description": "",
        "ModelHashKey": "w_sg_pumpshotgunmk2_camo_ind1",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WCT_TINT_0",
        "Name": "Classic Black"
      },
      {
        "NameGXT": "WCT_TINT_1",
        "Name": "Classic Gray"
      },
      {
        "NameGXT": "WCT_TINT_2",
        "Name": "Classic Two-Tone"
      },
      {
        "NameGXT": "WCT_TINT_3",
        "Name": "Classic White"
      },
      {
        "NameGXT": "WCT_TINT_4",
        "Name": "Classic Beige"
      },
      {
        "NameGXT": "WCT_TINT_5",
        "Name": "Classic Green"
      },
      {
        "NameGXT": "WCT_TINT_6",
        "Name": "Classic Blue"
      },
      {
        "NameGXT": "WCT_TINT_7",
        "Name": "Classic Earth"
      },
      {
        "NameGXT": "WCT_TINT_8",
        "Name": "Classic Brown & Black"
      },
      {
        "NameGXT": "WCT_TINT_9",
        "Name": "Red Contrast"
      },
      {
        "NameGXT": "WCT_TINT_10",
        "Name": "Blue Contrast"
      },
      {
        "NameGXT": "WCT_TINT_11",
        "Name": "Yellow Contrast"
      },
      {
        "NameGXT": "WCT_TINT_12",
        "Name": "Orange Contrast"
      },
      {
        "NameGXT": "WCT_TINT_13",
        "Name": "Bold Pink"
      },
      {
        "NameGXT": "WCT_TINT_14",
        "Name": "Bold Purple & Yellow"
      },
      {
        "NameGXT": "WCT_TINT_15",
        "Name": "Bold Orange"
      },
      {
        "NameGXT": "WCT_TINT_16",
        "Name": "Bold Green & Purple"
      },
      {
        "NameGXT": "WCT_TINT_17",
        "Name": "Bold Red Features"
      },
      {
        "NameGXT": "WCT_TINT_18",
        "Name": "Bold Green Features"
      },
      {
        "NameGXT": "WCT_TINT_19",
        "Name": "Bold Cyan Features"
      },
      {
        "NameGXT": "WCT_TINT_20",
        "Name": "Bold Yellow Features"
      },
      {
        "NameGXT": "WCT_TINT_21",
        "Name": "Bold Red & White"
      },
      {
        "NameGXT": "WCT_TINT_22",
        "Name": "Bold Blue & White"
      },
      {
        "NameGXT": "WCT_TINT_23",
        "Name": "Metallic Gold"
      },
      {
        "NameGXT": "WCT_TINT_24",
        "Name": "Metallic Platinum"
      },
      {
        "NameGXT": "WCT_TINT_25",
        "Name": "Metallic Gray & Lilac"
      },
      {
        "NameGXT": "WCT_TINT_26",
        "Name": "Metallic Purple & Lime"
      },
      {
        "NameGXT": "WCT_TINT_27",
        "Name": "Metallic Red"
      },
      {
        "NameGXT": "WCT_TINT_28",
        "Name": "Metallic Green"
      },
      {
        "NameGXT": "WCT_TINT_29",
        "Name": "Metallic Blue"
      },
      {
        "NameGXT": "WCT_TINT_30",
        "Name": "Metallic White & Aqua"
      },
      {
        "NameGXT": "WCT_TINT_31",
        "Name": "Metallic Red & Yellow"
      }
    ],
    "LiveryColors": [
      {
        "NameGXT": "WCT_C_TINT_0",
        "Name": "Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_1",
        "Name": "Dark Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_2",
        "Name": "Black"
      },
      {
        "NameGXT": "WCT_C_TINT_3",
        "Name": "White"
      },
      {
        "NameGXT": "WCT_C_TINT_4",
        "Name": "Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_5",
        "Name": "Cyan"
      },
      {
        "NameGXT": "WCT_C_TINT_6",
        "Name": "Aqua"
      },
      {
        "NameGXT": "WCT_C_TINT_7",
        "Name": "Cool Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_8",
        "Name": "Dark Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_9",
        "Name": "Royal Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_10",
        "Name": "Plum"
      },
      {
        "NameGXT": "WCT_C_TINT_11",
        "Name": "Dark Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_12",
        "Name": "Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_13",
        "Name": "Red"
      },
      {
        "NameGXT": "WCT_C_TINT_14",
        "Name": "Wine Red"
      },
      {
        "NameGXT": "WCT_C_TINT_15",
        "Name": "Magenta"
      },
      {
        "NameGXT": "WCT_C_TINT_16",
        "Name": "Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_17",
        "Name": "Salmon"
      },
      {
        "NameGXT": "WCT_C_TINT_18",
        "Name": "Hot Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_19",
        "Name": "Rust Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_20",
        "Name": "Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_21",
        "Name": "Earth"
      },
      {
        "NameGXT": "WCT_C_TINT_22",
        "Name": "Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_23",
        "Name": "Light Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_24",
        "Name": "Dark Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_25",
        "Name": "Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_26",
        "Name": "Light Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_27",
        "Name": "Lime Green"
      },
      {
        "NameGXT": "WCT_C_TINT_28",
        "Name": "Olive"
      },
      {
        "NameGXT": "WCT_C_TINT_29",
        "Name": "Moss"
      },
      {
        "NameGXT": "WCT_C_TINT_30",
        "Name": "Turquoise"
      },
      {
        "NameGXT": "WCT_C_TINT_31",
        "Name": "Dark Green"
      }
    ],
    "DLC": "mpchristmas2017"
  },
  "3415619887": {
    "HashKey": "WEAPON_REVOLVER_MK2",
    "NameGXT": "WT_REVOLVER2",
    "damage": 45,
    "DescriptionGXT": "WTD_REVOLVER2",
    "Name": "Heavy Revolver Mk II",
    "Description": "If you can lift it, this is the closest you'll get to shooting someone with a freight train.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "w_pi_revolvermk2",
    "DefaultClipSize": 6,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "3122911422": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CLIP_01",
        "NameGXT": "WCT_CLIP1_RV",
        "DescriptionGXT": "WCD_CLIP1_RV",
        "Name": "Default Rounds",
        "Description": "Standard revolver ammunition.",
        "ModelHashKey": "w_pi_revolvermk2_mag1",
        "IsDefault": true
      },
      "3336103030": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CLIP_TRACER",
        "NameGXT": "WCT_CLIP_TR",
        "DescriptionGXT": "WCD_CLIP_TR_RV",
        "Name": "Tracer Rounds",
        "Description": "Bullets with bright visible markers that match the tint of the gun.",
        "ModelHashKey": "w_pi_revolvermk2_mag4",
        "AmmoType": "AMMO_PISTOL_TRACER",
        "IsDefault": false
      },
      "15712037": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CLIP_INCENDIARY",
        "NameGXT": "WCT_CLIP_INC",
        "DescriptionGXT": "WCD_CLIP_INC_RV",
        "Name": "Incendiary Rounds",
        "Description": "Bullets which set targets on fire when shot.",
        "ModelHashKey": "w_pi_revolvermk2_mag3",
        "AmmoType": "AMMO_PISTOL_INCENDIARY",
        "IsDefault": false
      },
      "284438159": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CLIP_HOLLOWPOINT",
        "NameGXT": "WCT_CLIP_HP",
        "DescriptionGXT": "WCD_CLIP_HP_RV",
        "Name": "Hollow Point Rounds",
        "Description": "Increased damage to targets without Body Armor.",
        "ModelHashKey": "w_pi_revolvermk2_mag2",
        "AmmoType": "AMMO_PISTOL_HOLLOWPOINT",
        "IsDefault": false
      },
      "231258687": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CLIP_FMJ",
        "NameGXT": "WCT_CLIP_FMJ",
        "DescriptionGXT": "WCD_CLIP_FMJ_RV",
        "Name": "Full Metal Jacket Rounds",
        "Description": "Increased damage to vehicles. Also penetrates bullet resistant and bulletproof vehicle glass.",
        "ModelHashKey": "w_pi_revolvermk2_mag5",
        "AmmoType": "AMMO_PISTOL_FMJ",
        "IsDefault": false
      },
      "1108334355": {
        "HashKey": "COMPONENT_AT_SIGHTS",
        "NameGXT": "WCT_HOLO",
        "DescriptionGXT": "WCD_HOLO",
        "Name": "Holographic Sight",
        "Description": "Accurate sight for close quarters combat.",
        "ModelHashKey": "w_at_sights_1",
        "IsDefault": false
      },
      "77277509": {
        "HashKey": "COMPONENT_AT_SCOPE_MACRO_MK2",
        "NameGXT": "WCT_SCOPE_MAC2",
        "DescriptionGXT": "WCD_SCOPE_MAC",
        "Name": "Small Scope",
        "Description": "Standard-range zoom functionality.",
        "ModelHashKey": "w_at_scope_macro",
        "IsDefault": false
      },
      "899381934": {
        "HashKey": "COMPONENT_AT_PI_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_pi_flsh",
        "IsDefault": false
      },
      "654802123": {
        "HashKey": "COMPONENT_AT_PI_COMP_03",
        "NameGXT": "WCT_COMP",
        "DescriptionGXT": "WCD_COMP",
        "Name": "Compensator",
        "Description": "Reduces recoil for rapid fire.",
        "ModelHashKey": "w_at_pi_comp_3",
        "IsDefault": false
      },
      "3225415071": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CAMO",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "w_pi_revolvermk2_camo1",
        "IsDefault": false
      },
      "11918884": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CAMO_02",
        "NameGXT": "WCT_CAMO_2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Brushstroke Camo",
        "Description": "",
        "ModelHashKey": "w_pi_revolvermk2_camo2",
        "IsDefault": false
      },
      "176157112": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CAMO_03",
        "NameGXT": "WCT_CAMO_3",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Woodland Camo",
        "Description": "",
        "ModelHashKey": "w_pi_revolvermk2_camo3",
        "IsDefault": false
      },
      "4074914441": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CAMO_04",
        "NameGXT": "WCT_CAMO_4",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Skull",
        "Description": "",
        "ModelHashKey": "w_pi_revolvermk2_camo4",
        "IsDefault": false
      },
      "288456487": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CAMO_05",
        "NameGXT": "WCT_CAMO_5",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Sessanta Nove",
        "Description": "",
        "ModelHashKey": "w_pi_revolvermk2_camo5",
        "IsDefault": false
      },
      "398658626": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CAMO_06",
        "NameGXT": "WCT_CAMO_6",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Perseus",
        "Description": "",
        "ModelHashKey": "w_pi_revolvermk2_camo6",
        "IsDefault": false
      },
      "628697006": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CAMO_07",
        "NameGXT": "WCT_CAMO_7",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Leopard",
        "Description": "",
        "ModelHashKey": "w_pi_revolvermk2_camo7",
        "IsDefault": false
      },
      "925911836": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CAMO_08",
        "NameGXT": "WCT_CAMO_8",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Zebra",
        "Description": "",
        "ModelHashKey": "w_pi_revolvermk2_camo8",
        "IsDefault": false
      },
      "1222307441": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CAMO_09",
        "NameGXT": "WCT_CAMO_9",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Geometric",
        "Description": "",
        "ModelHashKey": "w_pi_revolvermk2_camo9",
        "IsDefault": false
      },
      "552442715": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CAMO_10",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "w_pi_revolvermk2_camo10",
        "IsDefault": false
      },
      "3646023783": {
        "HashKey": "COMPONENT_REVOLVER_MK2_CAMO_IND_01",
        "NameGXT": "WCT_CAMO_IND",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Patriotic",
        "Description": "",
        "ModelHashKey": "w_pi_revolvermk2_camo_ind",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WCT_TINT_0",
        "Name": "Classic Black"
      },
      {
        "NameGXT": "WCT_TINT_1",
        "Name": "Classic Gray"
      },
      {
        "NameGXT": "WCT_TINT_2",
        "Name": "Classic Two-Tone"
      },
      {
        "NameGXT": "WCT_TINT_3",
        "Name": "Classic White"
      },
      {
        "NameGXT": "WCT_TINT_4",
        "Name": "Classic Beige"
      },
      {
        "NameGXT": "WCT_TINT_5",
        "Name": "Classic Green"
      },
      {
        "NameGXT": "WCT_TINT_6",
        "Name": "Classic Blue"
      },
      {
        "NameGXT": "WCT_TINT_7",
        "Name": "Classic Earth"
      },
      {
        "NameGXT": "WCT_TINT_8",
        "Name": "Classic Brown & Black"
      },
      {
        "NameGXT": "WCT_TINT_9",
        "Name": "Red Contrast"
      },
      {
        "NameGXT": "WCT_TINT_10",
        "Name": "Blue Contrast"
      },
      {
        "NameGXT": "WCT_TINT_11",
        "Name": "Yellow Contrast"
      },
      {
        "NameGXT": "WCT_TINT_12",
        "Name": "Orange Contrast"
      },
      {
        "NameGXT": "WCT_TINT_13",
        "Name": "Bold Pink"
      },
      {
        "NameGXT": "WCT_TINT_14",
        "Name": "Bold Purple & Yellow"
      },
      {
        "NameGXT": "WCT_TINT_15",
        "Name": "Bold Orange"
      },
      {
        "NameGXT": "WCT_TINT_16",
        "Name": "Bold Green & Purple"
      },
      {
        "NameGXT": "WCT_TINT_17",
        "Name": "Bold Red Features"
      },
      {
        "NameGXT": "WCT_TINT_18",
        "Name": "Bold Green Features"
      },
      {
        "NameGXT": "WCT_TINT_19",
        "Name": "Bold Cyan Features"
      },
      {
        "NameGXT": "WCT_TINT_20",
        "Name": "Bold Yellow Features"
      },
      {
        "NameGXT": "WCT_TINT_21",
        "Name": "Bold Red & White"
      },
      {
        "NameGXT": "WCT_TINT_22",
        "Name": "Bold Blue & White"
      },
      {
        "NameGXT": "WCT_TINT_23",
        "Name": "Metallic Gold"
      },
      {
        "NameGXT": "WCT_TINT_24",
        "Name": "Metallic Platinum"
      },
      {
        "NameGXT": "WCT_TINT_25",
        "Name": "Metallic Gray & Lilac"
      },
      {
        "NameGXT": "WCT_TINT_26",
        "Name": "Metallic Purple & Lime"
      },
      {
        "NameGXT": "WCT_TINT_27",
        "Name": "Metallic Red"
      },
      {
        "NameGXT": "WCT_TINT_28",
        "Name": "Metallic Green"
      },
      {
        "NameGXT": "WCT_TINT_29",
        "Name": "Metallic Blue"
      },
      {
        "NameGXT": "WCT_TINT_30",
        "Name": "Metallic White & Aqua"
      },
      {
        "NameGXT": "WCT_TINT_31",
        "Name": "Metallic Red & Yellow"
      }
    ],
    "LiveryColors": [
      {
        "NameGXT": "WCT_C_TINT_0",
        "Name": "Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_1",
        "Name": "Dark Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_2",
        "Name": "Black"
      },
      {
        "NameGXT": "WCT_C_TINT_3",
        "Name": "White"
      },
      {
        "NameGXT": "WCT_C_TINT_4",
        "Name": "Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_5",
        "Name": "Cyan"
      },
      {
        "NameGXT": "WCT_C_TINT_6",
        "Name": "Aqua"
      },
      {
        "NameGXT": "WCT_C_TINT_7",
        "Name": "Cool Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_8",
        "Name": "Dark Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_9",
        "Name": "Royal Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_10",
        "Name": "Plum"
      },
      {
        "NameGXT": "WCT_C_TINT_11",
        "Name": "Dark Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_12",
        "Name": "Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_13",
        "Name": "Red"
      },
      {
        "NameGXT": "WCT_C_TINT_14",
        "Name": "Wine Red"
      },
      {
        "NameGXT": "WCT_C_TINT_15",
        "Name": "Magenta"
      },
      {
        "NameGXT": "WCT_C_TINT_16",
        "Name": "Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_17",
        "Name": "Salmon"
      },
      {
        "NameGXT": "WCT_C_TINT_18",
        "Name": "Hot Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_19",
        "Name": "Rust Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_20",
        "Name": "Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_21",
        "Name": "Earth"
      },
      {
        "NameGXT": "WCT_C_TINT_22",
        "Name": "Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_23",
        "Name": "Light Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_24",
        "Name": "Dark Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_25",
        "Name": "Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_26",
        "Name": "Light Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_27",
        "Name": "Lime Green"
      },
      {
        "NameGXT": "WCT_C_TINT_28",
        "Name": "Olive"
      },
      {
        "NameGXT": "WCT_C_TINT_29",
        "Name": "Moss"
      },
      {
        "NameGXT": "WCT_C_TINT_30",
        "Name": "Turquoise"
      },
      {
        "NameGXT": "WCT_C_TINT_31",
        "Name": "Dark Green"
      }
    ],
    "DLC": "mpchristmas2017"
  },
  "2285322324": {
    "HashKey": "WEAPON_SNSPISTOL_MK2",
    "NameGXT": "WT_SNSPISTOL2",
    "damage": 10,
    "DescriptionGXT": "WTD_SNSPISTOL2",
    "Name": "SNS Pistol Mk II",
    "Description": "The ultimate purse-filler: if you want to make Saturday Night really special, this is your ticket.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "w_pi_sns_pistolmk2",
    "DefaultClipSize": 6,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "21392614": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for regular ammo.",
        "ModelHashKey": "w_pi_sns_pistolmk2_mag1",
        "IsDefault": true
      },
      "3465283442": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for regular ammo.",
        "ModelHashKey": "w_pi_sns_pistolmk2_mag2",
        "IsDefault": false
      },
      "2418909806": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CLIP_TRACER",
        "NameGXT": "WCT_CLIP_TR",
        "DescriptionGXT": "WCD_CLIP_TR_RV",
        "Name": "Tracer Rounds",
        "Description": "Bullets with bright visible markers that match the tint of the gun.",
        "ModelHashKey": "W_PI_SNS_PistolMK2_Mag_TR",
        "AmmoType": "AMMO_PISTOL_TRACER",
        "IsDefault": false
      },
      "3870121849": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CLIP_INCENDIARY",
        "NameGXT": "WCT_CLIP_INC",
        "DescriptionGXT": "WCD_CLIP_INC_NS",
        "Name": "Incendiary Rounds",
        "Description": "Bullets which include a chance to set targets on fire when shot.",
        "ModelHashKey": "W_PI_SNS_PistolMK2_Mag_INC",
        "AmmoType": "AMMO_PISTOL_INCENDIARY",
        "IsDefault": false
      },
      "2366665730": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CLIP_HOLLOWPOINT",
        "NameGXT": "WCT_CLIP_HP",
        "DescriptionGXT": "WCD_CLIP_HP_RV",
        "Name": "Hollow Point Rounds",
        "Description": "Increased damage to targets without Body Armor.",
        "ModelHashKey": "W_PI_SNS_PistolMK2_Mag_HP",
        "AmmoType": "AMMO_PISTOL_HOLLOWPOINT",
        "IsDefault": false
      },
      "3239176998": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CLIP_FMJ",
        "NameGXT": "WCT_CLIP_FMJ",
        "DescriptionGXT": "WCD_CLIP_FMJ_RV",
        "Name": "Full Metal Jacket Rounds",
        "Description": "Increased damage to vehicles. Also penetrates bullet resistant and bulletproof vehicle glass.",
        "ModelHashKey": "W_PI_SNS_PistolMK2_Mag_FMJ",
        "AmmoType": "AMMO_PISTOL_FMJ",
        "IsDefault": false
      },
      "1246324211": {
        "HashKey": "COMPONENT_AT_PI_FLSH_03",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_pi_snsmk2_flsh_1",
        "IsDefault": false
      },
      "1205768792": {
        "HashKey": "COMPONENT_AT_PI_RAIL_02",
        "NameGXT": "WCT_SCOPE_PI",
        "DescriptionGXT": "WCD_SCOPE_PI",
        "Name": "Mounted Scope",
        "Description": "Standard-range zoom functionality.",
        "ModelHashKey": "w_at_pi_rail_2",
        "IsDefault": false
      },
      "1709866683": {
        "HashKey": "COMPONENT_AT_PI_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_PI_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_pi_supp_2",
        "IsDefault": false
      },
      "2860680127": {
        "HashKey": "COMPONENT_AT_PI_COMP_02",
        "NameGXT": "WCT_COMP",
        "DescriptionGXT": "WCD_COMP",
        "Name": "Compensator",
        "Description": "Reduces recoil for rapid fire.",
        "ModelHashKey": "w_at_pi_comp_2",
        "IsDefault": false
      },
      "259780317": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_Camo1",
        "IsDefault": false
      },
      "2321624822": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_02",
        "NameGXT": "WCT_CAMO_2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Brushstroke Camo",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_Camo2",
        "IsDefault": false
      },
      "1996130345": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_03",
        "NameGXT": "WCT_CAMO_3",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Woodland Camo",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_Camo3",
        "IsDefault": false
      },
      "2839309484": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_04",
        "NameGXT": "WCT_CAMO_4",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Skull",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_Camo4",
        "IsDefault": false
      },
      "2626704212": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_05",
        "NameGXT": "WCT_CAMO_5",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Sessanta Nove",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_Camo5",
        "IsDefault": false
      },
      "1308243489": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_06",
        "NameGXT": "WCT_CAMO_6",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Perseus",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_Camo6",
        "IsDefault": false
      },
      "1122574335": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_07",
        "NameGXT": "WCT_CAMO_7",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Leopard",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_Camo7",
        "IsDefault": false
      },
      "1420313469": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_08",
        "NameGXT": "WCT_CAMO_8",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Zebra",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_Camo8",
        "IsDefault": false
      },
      "109848390": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_09",
        "NameGXT": "WCT_CAMO_9",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Geometric",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_Camo9",
        "IsDefault": false
      },
      "593945703": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_10",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_Camo10",
        "IsDefault": false
      },
      "1142457062": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_IND_01",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "w_pi_sns_pistolmk2_camo_ind1",
        "IsDefault": false
      },
      "3891161322": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_SLIDE",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_SL_Camo1",
        "IsDefault": false
      },
      "691432737": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_02_SLIDE",
        "NameGXT": "WCT_CAMO_2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Brushstroke Camo",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_SL_Camo2",
        "IsDefault": false
      },
      "987648331": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_03_SLIDE",
        "NameGXT": "WCT_CAMO_3",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Woodland Camo",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_SL_Camo3",
        "IsDefault": false
      },
      "3863286761": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_04_SLIDE",
        "NameGXT": "WCT_CAMO_4",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Skull",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_SL_Camo4",
        "IsDefault": false
      },
      "3447384986": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_05_SLIDE",
        "NameGXT": "WCT_CAMO_5",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Sessanta Nove",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_SL_Camo5",
        "IsDefault": false
      },
      "4202375078": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_06_SLIDE",
        "NameGXT": "WCT_CAMO_6",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Perseus",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_SL_Camo6",
        "IsDefault": false
      },
      "3800418970": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_07_SLIDE",
        "NameGXT": "WCT_CAMO_7",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Leopard",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_SL_Camo7",
        "IsDefault": false
      },
      "730876697": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_08_SLIDE",
        "NameGXT": "WCT_CAMO_8",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Zebra",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_SL_Camo8",
        "IsDefault": false
      },
      "583159708": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_09_SLIDE",
        "NameGXT": "WCT_CAMO_9",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Geometric",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_SL_Camo9",
        "IsDefault": false
      },
      "2366463693": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_10_SLIDE",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMk2_SL_Camo10",
        "IsDefault": false
      },
      "520557834": {
        "HashKey": "COMPONENT_SNSPISTOL_MK2_CAMO_IND_01_SLIDE",
        "NameGXT": "WCT_CAMO_IND",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Patriotic",
        "Description": "",
        "ModelHashKey": "W_PI_SNS_PistolMK2_SL_Camo_Ind1",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WCT_TINT_0",
        "Name": "Classic Black"
      },
      {
        "NameGXT": "WCT_TINT_1",
        "Name": "Classic Gray"
      },
      {
        "NameGXT": "WCT_TINT_2",
        "Name": "Classic Two-Tone"
      },
      {
        "NameGXT": "WCT_TINT_3",
        "Name": "Classic White"
      },
      {
        "NameGXT": "WCT_TINT_4",
        "Name": "Classic Beige"
      },
      {
        "NameGXT": "WCT_TINT_5",
        "Name": "Classic Green"
      },
      {
        "NameGXT": "WCT_TINT_6",
        "Name": "Classic Blue"
      },
      {
        "NameGXT": "WCT_TINT_7",
        "Name": "Classic Earth"
      },
      {
        "NameGXT": "WCT_TINT_8",
        "Name": "Classic Brown & Black"
      },
      {
        "NameGXT": "WCT_TINT_9",
        "Name": "Red Contrast"
      },
      {
        "NameGXT": "WCT_TINT_10",
        "Name": "Blue Contrast"
      },
      {
        "NameGXT": "WCT_TINT_11",
        "Name": "Yellow Contrast"
      },
      {
        "NameGXT": "WCT_TINT_12",
        "Name": "Orange Contrast"
      },
      {
        "NameGXT": "WCT_TINT_13",
        "Name": "Bold Pink"
      },
      {
        "NameGXT": "WCT_TINT_14",
        "Name": "Bold Purple & Yellow"
      },
      {
        "NameGXT": "WCT_TINT_15",
        "Name": "Bold Orange"
      },
      {
        "NameGXT": "WCT_TINT_16",
        "Name": "Bold Green & Purple"
      },
      {
        "NameGXT": "WCT_TINT_17",
        "Name": "Bold Red Features"
      },
      {
        "NameGXT": "WCT_TINT_18",
        "Name": "Bold Green Features"
      },
      {
        "NameGXT": "WCT_TINT_19",
        "Name": "Bold Cyan Features"
      },
      {
        "NameGXT": "WCT_TINT_20",
        "Name": "Bold Yellow Features"
      },
      {
        "NameGXT": "WCT_TINT_21",
        "Name": "Bold Red & White"
      },
      {
        "NameGXT": "WCT_TINT_22",
        "Name": "Bold Blue & White"
      },
      {
        "NameGXT": "WCT_TINT_23",
        "Name": "Metallic Gold"
      },
      {
        "NameGXT": "WCT_TINT_24",
        "Name": "Metallic Platinum"
      },
      {
        "NameGXT": "WCT_TINT_25",
        "Name": "Metallic Gray & Lilac"
      },
      {
        "NameGXT": "WCT_TINT_26",
        "Name": "Metallic Purple & Lime"
      },
      {
        "NameGXT": "WCT_TINT_27",
        "Name": "Metallic Red"
      },
      {
        "NameGXT": "WCT_TINT_28",
        "Name": "Metallic Green"
      },
      {
        "NameGXT": "WCT_TINT_29",
        "Name": "Metallic Blue"
      },
      {
        "NameGXT": "WCT_TINT_30",
        "Name": "Metallic White & Aqua"
      },
      {
        "NameGXT": "WCT_TINT_31",
        "Name": "Metallic Red & Yellow"
      }
    ],
    "LiveryColors": [
      {
        "NameGXT": "WCT_C_TINT_0",
        "Name": "Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_1",
        "Name": "Dark Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_2",
        "Name": "Black"
      },
      {
        "NameGXT": "WCT_C_TINT_3",
        "Name": "White"
      },
      {
        "NameGXT": "WCT_C_TINT_4",
        "Name": "Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_5",
        "Name": "Cyan"
      },
      {
        "NameGXT": "WCT_C_TINT_6",
        "Name": "Aqua"
      },
      {
        "NameGXT": "WCT_C_TINT_7",
        "Name": "Cool Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_8",
        "Name": "Dark Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_9",
        "Name": "Royal Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_10",
        "Name": "Plum"
      },
      {
        "NameGXT": "WCT_C_TINT_11",
        "Name": "Dark Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_12",
        "Name": "Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_13",
        "Name": "Red"
      },
      {
        "NameGXT": "WCT_C_TINT_14",
        "Name": "Wine Red"
      },
      {
        "NameGXT": "WCT_C_TINT_15",
        "Name": "Magenta"
      },
      {
        "NameGXT": "WCT_C_TINT_16",
        "Name": "Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_17",
        "Name": "Salmon"
      },
      {
        "NameGXT": "WCT_C_TINT_18",
        "Name": "Hot Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_19",
        "Name": "Rust Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_20",
        "Name": "Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_21",
        "Name": "Earth"
      },
      {
        "NameGXT": "WCT_C_TINT_22",
        "Name": "Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_23",
        "Name": "Light Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_24",
        "Name": "Dark Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_25",
        "Name": "Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_26",
        "Name": "Light Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_27",
        "Name": "Lime Green"
      },
      {
        "NameGXT": "WCT_C_TINT_28",
        "Name": "Olive"
      },
      {
        "NameGXT": "WCT_C_TINT_29",
        "Name": "Moss"
      },
      {
        "NameGXT": "WCT_C_TINT_30",
        "Name": "Turquoise"
      },
      {
        "NameGXT": "WCT_C_TINT_31",
        "Name": "Dark Green"
      }
    ],
    "DLC": "mpchristmas2017"
  },
  "2526821735": {
    "HashKey": "WEAPON_SPECIALCARBINE_MK2",
    "NameGXT": "WT_SPCARBINE2",
    "damage": 10.5,
    "DescriptionGXT": "WTD_SPCARBINE2",
    "Name": "Special Carbine Mk II",
    "Description": "The jack of all trades just got a serious upgrade: bow to the master.",
    "Group": "GROUP_RIFLE",
    "ModelHashKey": "w_ar_specialcarbinemk2",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_RIFLE",
    "Components": {
      "382112385": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for regular ammo.",
        "ModelHashKey": "w_ar_specialcarbinemk2_mag1",
        "IsDefault": true
      },
      "3726614828": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for regular ammo.",
        "ModelHashKey": "w_ar_specialcarbinemk2_mag2",
        "IsDefault": false
      },
      "2271594122": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CLIP_TRACER",
        "NameGXT": "WCT_CLIP_TR",
        "DescriptionGXT": "WCD_CLIP_TR",
        "Name": "Tracer Rounds",
        "Description": "Bullets with bright visible markers that match the tint of the gun. Standard capacity.",
        "ModelHashKey": "w_ar_specialcarbinemk2_mag_tr",
        "AmmoType": "AMMO_RIFLE_TRACER",
        "IsDefault": false
      },
      "3724612230": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CLIP_INCENDIARY",
        "NameGXT": "WCT_CLIP_INC",
        "DescriptionGXT": "WCD_CLIP_INC",
        "Name": "Incendiary Rounds",
        "Description": "Bullets which include a chance to set targets on fire when shot. Reduced capacity.",
        "ModelHashKey": "w_ar_specialcarbinemk2_mag_inc",
        "AmmoType": "AMMO_RIFLE_INCENDIARY",
        "IsDefault": false
      },
      "1362433589": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CLIP_ARMORPIERCING",
        "NameGXT": "WCT_CLIP_AP",
        "DescriptionGXT": "WCD_CLIP_AP",
        "Name": "Armor Piercing Rounds",
        "Description": "Increased penetration of Body Armor. Reduced capacity.",
        "ModelHashKey": "w_ar_specialcarbinemk2_mag_ap",
        "AmmoType": "AMMO_RIFLE_ARMORPIERCING",
        "IsDefault": false
      },
      "1346235024": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CLIP_FMJ",
        "NameGXT": "WCT_CLIP_FMJ",
        "DescriptionGXT": "WCD_CLIP_FMJ",
        "Name": "Full Metal Jacket Rounds",
        "Description": "Increased damage to vehicles. Also penetrates bullet resistant and bulletproof vehicle glass. Reduced capacity.",
        "ModelHashKey": "w_ar_specialcarbinemk2_mag_fmj",
        "AmmoType": "AMMO_RIFLE_FMJ",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "1108334355": {
        "HashKey": "COMPONENT_AT_SIGHTS",
        "NameGXT": "WCT_HOLO",
        "DescriptionGXT": "WCD_HOLO",
        "Name": "Holographic Sight",
        "Description": "Accurate sight for close quarters combat.",
        "ModelHashKey": "w_at_sights_1",
        "IsDefault": false
      },
      "77277509": {
        "HashKey": "COMPONENT_AT_SCOPE_MACRO_MK2",
        "NameGXT": "WCT_SCOPE_MAC2",
        "DescriptionGXT": "WCD_SCOPE_MAC",
        "Name": "Small Scope",
        "Description": "Standard-range zoom functionality.",
        "ModelHashKey": "w_at_scope_macro",
        "IsDefault": false
      },
      "3328927042": {
        "HashKey": "COMPONENT_AT_SCOPE_MEDIUM_MK2",
        "NameGXT": "WCT_SCOPE_MED2",
        "DescriptionGXT": "WCD_SCOPE_MED",
        "Name": "Large Scope",
        "Description": "Extended-range zoom functionality.",
        "ModelHashKey": "w_at_scope_medium_2",
        "IsDefault": false
      },
      "2805810788": {
        "HashKey": "COMPONENT_AT_AR_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP2",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp_02",
        "IsDefault": false
      },
      "3113485012": {
        "HashKey": "COMPONENT_AT_MUZZLE_01",
        "NameGXT": "WCT_MUZZ1",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Flat Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_1",
        "IsDefault": false
      },
      "3362234491": {
        "HashKey": "COMPONENT_AT_MUZZLE_02",
        "NameGXT": "WCT_MUZZ2",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Tactical Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_2",
        "IsDefault": false
      },
      "3725708239": {
        "HashKey": "COMPONENT_AT_MUZZLE_03",
        "NameGXT": "WCT_MUZZ3",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Fat-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_3",
        "IsDefault": false
      },
      "3968886988": {
        "HashKey": "COMPONENT_AT_MUZZLE_04",
        "NameGXT": "WCT_MUZZ4",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Precision Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_4",
        "IsDefault": false
      },
      "48731514": {
        "HashKey": "COMPONENT_AT_MUZZLE_05",
        "NameGXT": "WCT_MUZZ5",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Heavy Duty Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_5",
        "IsDefault": false
      },
      "880736428": {
        "HashKey": "COMPONENT_AT_MUZZLE_06",
        "NameGXT": "WCT_MUZZ6",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Slanted Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_6",
        "IsDefault": false
      },
      "1303784126": {
        "HashKey": "COMPONENT_AT_MUZZLE_07",
        "NameGXT": "WCT_MUZZ7",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Split-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_7",
        "IsDefault": false
      },
      "2640679034": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP_02",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_afgrip_2",
        "IsDefault": false
      },
      "3879097257": {
        "HashKey": "COMPONENT_AT_SC_BARREL_01",
        "NameGXT": "WCT_BARR",
        "DescriptionGXT": "WCD_BARR",
        "Name": "Default Barrel",
        "Description": "Stock barrel attachment.",
        "ModelHashKey": "w_ar_sc_barrel_1",
        "IsDefault": true
      },
      "4185880635": {
        "HashKey": "COMPONENT_AT_SC_BARREL_02",
        "NameGXT": "WCT_BARR2",
        "DescriptionGXT": "WCD_BARR2",
        "Name": "Heavy Barrel",
        "Description": "Increases damage dealt to long-range targets.",
        "ModelHashKey": "w_ar_sc_barrel_2",
        "IsDefault": false
      },
      "3557537083": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CAMO",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "w_ar_specialcarbinemk2_camo1",
        "IsDefault": false
      },
      "1125852043": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CAMO_02",
        "NameGXT": "WCT_CAMO_2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Brushstroke Camo",
        "Description": "",
        "ModelHashKey": "w_ar_specialcarbinemk2_camo2",
        "IsDefault": false
      },
      "886015732": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CAMO_03",
        "NameGXT": "WCT_CAMO_3",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Woodland Camo",
        "Description": "",
        "ModelHashKey": "w_ar_specialcarbinemk2_camo3",
        "IsDefault": false
      },
      "3032680157": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CAMO_04",
        "NameGXT": "WCT_CAMO_4",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Skull",
        "Description": "",
        "ModelHashKey": "w_ar_specialcarbinemk2_camo4",
        "IsDefault": false
      },
      "3999758885": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CAMO_05",
        "NameGXT": "WCT_CAMO_5",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Sessanta Nove",
        "Description": "",
        "ModelHashKey": "w_ar_specialcarbinemk2_camo5",
        "IsDefault": false
      },
      "3750812792": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CAMO_06",
        "NameGXT": "WCT_CAMO_6",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Perseus",
        "Description": "",
        "ModelHashKey": "w_ar_specialcarbinemk2_camo6",
        "IsDefault": false
      },
      "172765678": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CAMO_07",
        "NameGXT": "WCT_CAMO_7",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Leopard",
        "Description": "",
        "ModelHashKey": "w_ar_specialcarbinemk2_camo7",
        "IsDefault": false
      },
      "2312089847": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CAMO_08",
        "NameGXT": "WCT_CAMO_8",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Zebra",
        "Description": "",
        "ModelHashKey": "w_ar_specialcarbinemk2_camo8",
        "IsDefault": false
      },
      "2072122460": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CAMO_09",
        "NameGXT": "WCT_CAMO_9",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Geometric",
        "Description": "",
        "ModelHashKey": "w_ar_specialcarbinemk2_camo9",
        "IsDefault": false
      },
      "2308747125": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CAMO_10",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "w_ar_specialcarbinemk2_camo10",
        "IsDefault": false
      },
      "1377355801": {
        "HashKey": "COMPONENT_SPECIALCARBINE_MK2_CAMO_IND_01",
        "NameGXT": "WCT_CAMO_IND",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Patriotic",
        "Description": "",
        "ModelHashKey": "w_ar_specialcarbinemk2_camo_ind",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WCT_TINT_0",
        "Name": "Classic Black"
      },
      {
        "NameGXT": "WCT_TINT_1",
        "Name": "Classic Gray"
      },
      {
        "NameGXT": "WCT_TINT_2",
        "Name": "Classic Two-Tone"
      },
      {
        "NameGXT": "WCT_TINT_3",
        "Name": "Classic White"
      },
      {
        "NameGXT": "WCT_TINT_4",
        "Name": "Classic Beige"
      },
      {
        "NameGXT": "WCT_TINT_5",
        "Name": "Classic Green"
      },
      {
        "NameGXT": "WCT_TINT_6",
        "Name": "Classic Blue"
      },
      {
        "NameGXT": "WCT_TINT_7",
        "Name": "Classic Earth"
      },
      {
        "NameGXT": "WCT_TINT_8",
        "Name": "Classic Brown & Black"
      },
      {
        "NameGXT": "WCT_TINT_9",
        "Name": "Red Contrast"
      },
      {
        "NameGXT": "WCT_TINT_10",
        "Name": "Blue Contrast"
      },
      {
        "NameGXT": "WCT_TINT_11",
        "Name": "Yellow Contrast"
      },
      {
        "NameGXT": "WCT_TINT_12",
        "Name": "Orange Contrast"
      },
      {
        "NameGXT": "WCT_TINT_13",
        "Name": "Bold Pink"
      },
      {
        "NameGXT": "WCT_TINT_14",
        "Name": "Bold Purple & Yellow"
      },
      {
        "NameGXT": "WCT_TINT_15",
        "Name": "Bold Orange"
      },
      {
        "NameGXT": "WCT_TINT_16",
        "Name": "Bold Green & Purple"
      },
      {
        "NameGXT": "WCT_TINT_17",
        "Name": "Bold Red Features"
      },
      {
        "NameGXT": "WCT_TINT_18",
        "Name": "Bold Green Features"
      },
      {
        "NameGXT": "WCT_TINT_19",
        "Name": "Bold Cyan Features"
      },
      {
        "NameGXT": "WCT_TINT_20",
        "Name": "Bold Yellow Features"
      },
      {
        "NameGXT": "WCT_TINT_21",
        "Name": "Bold Red & White"
      },
      {
        "NameGXT": "WCT_TINT_22",
        "Name": "Bold Blue & White"
      },
      {
        "NameGXT": "WCT_TINT_23",
        "Name": "Metallic Gold"
      },
      {
        "NameGXT": "WCT_TINT_24",
        "Name": "Metallic Platinum"
      },
      {
        "NameGXT": "WCT_TINT_25",
        "Name": "Metallic Gray & Lilac"
      },
      {
        "NameGXT": "WCT_TINT_26",
        "Name": "Metallic Purple & Lime"
      },
      {
        "NameGXT": "WCT_TINT_27",
        "Name": "Metallic Red"
      },
      {
        "NameGXT": "WCT_TINT_28",
        "Name": "Metallic Green"
      },
      {
        "NameGXT": "WCT_TINT_29",
        "Name": "Metallic Blue"
      },
      {
        "NameGXT": "WCT_TINT_30",
        "Name": "Metallic White & Aqua"
      },
      {
        "NameGXT": "WCT_TINT_31",
        "Name": "Metallic Red & Yellow"
      }
    ],
    "LiveryColors": [
      {
        "NameGXT": "WCT_C_TINT_0",
        "Name": "Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_1",
        "Name": "Dark Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_2",
        "Name": "Black"
      },
      {
        "NameGXT": "WCT_C_TINT_3",
        "Name": "White"
      },
      {
        "NameGXT": "WCT_C_TINT_4",
        "Name": "Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_5",
        "Name": "Cyan"
      },
      {
        "NameGXT": "WCT_C_TINT_6",
        "Name": "Aqua"
      },
      {
        "NameGXT": "WCT_C_TINT_7",
        "Name": "Cool Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_8",
        "Name": "Dark Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_9",
        "Name": "Royal Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_10",
        "Name": "Plum"
      },
      {
        "NameGXT": "WCT_C_TINT_11",
        "Name": "Dark Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_12",
        "Name": "Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_13",
        "Name": "Red"
      },
      {
        "NameGXT": "WCT_C_TINT_14",
        "Name": "Wine Red"
      },
      {
        "NameGXT": "WCT_C_TINT_15",
        "Name": "Magenta"
      },
      {
        "NameGXT": "WCT_C_TINT_16",
        "Name": "Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_17",
        "Name": "Salmon"
      },
      {
        "NameGXT": "WCT_C_TINT_18",
        "Name": "Hot Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_19",
        "Name": "Rust Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_20",
        "Name": "Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_21",
        "Name": "Earth"
      },
      {
        "NameGXT": "WCT_C_TINT_22",
        "Name": "Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_23",
        "Name": "Light Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_24",
        "Name": "Dark Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_25",
        "Name": "Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_26",
        "Name": "Light Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_27",
        "Name": "Lime Green"
      },
      {
        "NameGXT": "WCT_C_TINT_28",
        "Name": "Olive"
      },
      {
        "NameGXT": "WCT_C_TINT_29",
        "Name": "Moss"
      },
      {
        "NameGXT": "WCT_C_TINT_30",
        "Name": "Turquoise"
      },
      {
        "NameGXT": "WCT_C_TINT_31",
        "Name": "Dark Green"
      }
    ],
    "DLC": "mpchristmas2017"
  },
  "2939590305": {
    "HashKey": "WEAPON_RAYPISTOL",
    "NameGXT": "WT_RAYPISTOL",
    "damage": 24,
    "DescriptionGXT": "WTD_RAYPISTOL",
    "Name": "Up-n-Atomizer",
    "Description": "Republican Space Ranger Special, fresh from the galactic war on socialism: no ammo, no mag, just one brutal energy pulse after another.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "w_pi_raygun",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_RAYPISTOL",
    "Components": {
      "3621517063": {
        "HashKey": "COMPONENT_RAYPISTOL_VARMOD_XMAS18",
        "NameGXT": "WCT_VAR_RAY18",
        "DescriptionGXT": "WCD_VAR_RAY18",
        "Name": "Festive tint",
        "Description": "The Festive tint for the Up-n-Atomizer.",
        "ModelHashKey": "w_pi_raygun_ev",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "RWT_TINT0",
        "Name": "Blue tint"
      },
      {
        "NameGXT": "RWT_TINT1",
        "Name": "Purple tint"
      },
      {
        "NameGXT": "RWT_TINT2",
        "Name": "Green tint"
      },
      {
        "NameGXT": "RWT_TINT3",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "RWT_TINT4",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "RWT_TINT5",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "RWT_TINT6",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpchristmas2018"
  },
  "1198256469": {
    "HashKey": "WEAPON_RAYCARBINE",
    "NameGXT": "WT_RAYCARBINE",
    "damage": 15,
    "DescriptionGXT": "WTD_RAYCARBINE",
    "Name": "Unholy Hellbringer",
    "Description": "Republican Space Ranger Special. If you want to turn a little green man into little green goo, this is the only American way to do it.",
    "Group": "GROUP_MG",
    "ModelHashKey": "w_ar_srifle",
    "DefaultClipSize": 9999,
    "AmmoType": "AMMO_MG",
    "Components": {},
    "Tints": [
      {
        "NameGXT": "RWT_TINT7",
        "Name": "Space Ranger tint"
      },
      {
        "NameGXT": "RWT_TINT1",
        "Name": "Purple tint"
      },
      {
        "NameGXT": "RWT_TINT2",
        "Name": "Green tint"
      },
      {
        "NameGXT": "RWT_TINT3",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "RWT_TINT4",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "RWT_TINT5",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "RWT_TINT6",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpchristmas2018"
  },
  "3056410471": {
    "HashKey": "WEAPON_RAYMINIGUN",
    "NameGXT": "WT_RAYMINIGUN",
    "damage": 10,
    "DescriptionGXT": "WTD_RAYMINIGUN",
    "Name": "Widowmaker",
    "Description": "Republican Space Ranger Special. GO AHEAD, SAY I'M COMPENSATING FOR SOMETHING. I DARE YOU.",
    "Group": "GROUP_HEAVY",
    "ModelHashKey": "w_mg_sminigun",
    "DefaultClipSize": 15000,
    "AmmoType": "AMMO_MINIGUN",
    "Components": {
      "3370020614": {
        "HashKey": "COMPONENT_MINIGUN_CLIP_01",
        "NameGXT": "WCT_INVALID",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "",
        "Description": "",
        "ModelHashKey": "",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "RWT_TINT7",
        "Name": "Space Ranger tint"
      },
      {
        "NameGXT": "RWT_TINT1",
        "Name": "Purple tint"
      },
      {
        "NameGXT": "RWT_TINT2",
        "Name": "Green tint"
      },
      {
        "NameGXT": "RWT_TINT3",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "RWT_TINT4",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "RWT_TINT5",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "RWT_TINT6",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpchristmas2018"
  },
  "961495388": {
    "HashKey": "WEAPON_ASSAULTRIFLE_MK2",
    "NameGXT": "WT_RIFLE_ASL2",
    "damage": 13.5,
    "DescriptionGXT": "WTD_RIFLE_ASL2",
    "Name": "Assault Rifle Mk II",
    "Description": "The definitive revision of an all-time classic: all it takes is a little work, and looks can kill after all.",
    "Group": "GROUP_RIFLE",
    "ModelHashKey": "w_ar_assaultriflemk2",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_RIFLE",
    "Components": {
      "2249208895": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for regular ammo.",
        "ModelHashKey": "w_ar_assaultriflemk2_mag1",
        "IsDefault": true
      },
      "3509242479": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for regular ammo.",
        "ModelHashKey": "w_ar_assaultriflemk2_mag2",
        "IsDefault": false
      },
      "4012669121": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CLIP_TRACER",
        "NameGXT": "WCT_CLIP_TR",
        "DescriptionGXT": "WCD_CLIP_TR",
        "Name": "Tracer Rounds",
        "Description": "Bullets with bright visible markers that match the tint of the gun. Standard capacity.",
        "ModelHashKey": "w_ar_assaultriflemk2_mag_tr",
        "AmmoType": "AMMO_RIFLE_TRACER",
        "IsDefault": false
      },
      "4218476627": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CLIP_INCENDIARY",
        "NameGXT": "WCT_CLIP_INC",
        "DescriptionGXT": "WCD_CLIP_INC",
        "Name": "Incendiary Rounds",
        "Description": "Bullets which include a chance to set targets on fire when shot. Reduced capacity.",
        "ModelHashKey": "w_ar_assaultriflemk2_mag_inc",
        "AmmoType": "AMMO_RIFLE_INCENDIARY",
        "IsDefault": false
      },
      "2816286296": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CLIP_ARMORPIERCING",
        "NameGXT": "WCT_CLIP_AP",
        "DescriptionGXT": "WCD_CLIP_AP",
        "Name": "Armor Piercing Rounds",
        "Description": "Increased penetration of Body Armor. Reduced capacity.",
        "ModelHashKey": "w_ar_assaultriflemk2_mag_ap",
        "AmmoType": "AMMO_RIFLE_ARMORPIERCING",
        "IsDefault": false
      },
      "1675665560": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CLIP_FMJ",
        "NameGXT": "WCT_CLIP_FMJ",
        "DescriptionGXT": "WCD_CLIP_FMJ",
        "Name": "Full Metal Jacket Rounds",
        "Description": "Increased damage to vehicles. Also penetrates bullet resistant and bulletproof vehicle glass. Reduced capacity.",
        "ModelHashKey": "w_ar_assaultriflemk2_mag_fmj",
        "AmmoType": "AMMO_RIFLE_FMJ",
        "IsDefault": false
      },
      "2640679034": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP_02",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_afgrip_2",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "1108334355": {
        "HashKey": "COMPONENT_AT_SIGHTS",
        "NameGXT": "WCT_HOLO",
        "DescriptionGXT": "WCD_HOLO",
        "Name": "Holographic Sight",
        "Description": "Accurate sight for close quarters combat.",
        "ModelHashKey": "w_at_sights_1",
        "IsDefault": false
      },
      "77277509": {
        "HashKey": "COMPONENT_AT_SCOPE_MACRO_MK2",
        "NameGXT": "WCT_SCOPE_MAC2",
        "DescriptionGXT": "WCD_SCOPE_MAC",
        "Name": "Small Scope",
        "Description": "Standard-range zoom functionality.",
        "ModelHashKey": "w_at_scope_macro",
        "IsDefault": false
      },
      "3328927042": {
        "HashKey": "COMPONENT_AT_SCOPE_MEDIUM_MK2",
        "NameGXT": "WCT_SCOPE_MED2",
        "DescriptionGXT": "WCD_SCOPE_MED",
        "Name": "Large Scope",
        "Description": "Extended-range zoom functionality.",
        "ModelHashKey": "w_at_scope_medium_2",
        "IsDefault": false
      },
      "2805810788": {
        "HashKey": "COMPONENT_AT_AR_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP2",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp_02",
        "IsDefault": false
      },
      "3113485012": {
        "HashKey": "COMPONENT_AT_MUZZLE_01",
        "NameGXT": "WCT_MUZZ1",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Flat Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_1",
        "IsDefault": false
      },
      "3362234491": {
        "HashKey": "COMPONENT_AT_MUZZLE_02",
        "NameGXT": "WCT_MUZZ2",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Tactical Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_2",
        "IsDefault": false
      },
      "3725708239": {
        "HashKey": "COMPONENT_AT_MUZZLE_03",
        "NameGXT": "WCT_MUZZ3",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Fat-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_3",
        "IsDefault": false
      },
      "3968886988": {
        "HashKey": "COMPONENT_AT_MUZZLE_04",
        "NameGXT": "WCT_MUZZ4",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Precision Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_4",
        "IsDefault": false
      },
      "48731514": {
        "HashKey": "COMPONENT_AT_MUZZLE_05",
        "NameGXT": "WCT_MUZZ5",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Heavy Duty Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_5",
        "IsDefault": false
      },
      "880736428": {
        "HashKey": "COMPONENT_AT_MUZZLE_06",
        "NameGXT": "WCT_MUZZ6",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Slanted Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_6",
        "IsDefault": false
      },
      "1303784126": {
        "HashKey": "COMPONENT_AT_MUZZLE_07",
        "NameGXT": "WCT_MUZZ7",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Split-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_7",
        "IsDefault": false
      },
      "1134861606": {
        "HashKey": "COMPONENT_AT_AR_BARREL_01",
        "NameGXT": "WCT_BARR",
        "DescriptionGXT": "WCD_BARR",
        "Name": "Default Barrel",
        "Description": "Stock barrel attachment.",
        "ModelHashKey": "w_at_ar_barrel_1",
        "IsDefault": true
      },
      "1447477866": {
        "HashKey": "COMPONENT_AT_AR_BARREL_02",
        "NameGXT": "WCT_BARR2",
        "DescriptionGXT": "WCD_BARR2",
        "Name": "Heavy Barrel",
        "Description": "Increases damage dealt to long-range targets.",
        "ModelHashKey": "w_at_ar_barrel_2",
        "IsDefault": false
      },
      "2434475183": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CAMO",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "w_at_armk2_camo1",
        "IsDefault": false
      },
      "937772107": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CAMO_02",
        "NameGXT": "WCT_CAMO_2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Brushstroke Camo",
        "Description": "",
        "ModelHashKey": "w_at_armk2_camo2",
        "IsDefault": false
      },
      "1401650071": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CAMO_03",
        "NameGXT": "WCT_CAMO_3",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Woodland Camo",
        "Description": "",
        "ModelHashKey": "w_at_armk2_camo3",
        "IsDefault": false
      },
      "628662130": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CAMO_04",
        "NameGXT": "WCT_CAMO_4",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Skull",
        "Description": "",
        "ModelHashKey": "w_at_armk2_camo4",
        "IsDefault": false
      },
      "3309920045": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CAMO_05",
        "NameGXT": "WCT_CAMO_5",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Sessanta Nove",
        "Description": "",
        "ModelHashKey": "w_at_armk2_camo5",
        "IsDefault": false
      },
      "3482022833": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CAMO_06",
        "NameGXT": "WCT_CAMO_6",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Perseus",
        "Description": "",
        "ModelHashKey": "w_at_armk2_camo6",
        "IsDefault": false
      },
      "2847614993": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CAMO_07",
        "NameGXT": "WCT_CAMO_7",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Leopard",
        "Description": "",
        "ModelHashKey": "w_at_armk2_camo7",
        "IsDefault": false
      },
      "4234628436": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CAMO_08",
        "NameGXT": "WCT_CAMO_8",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Zebra",
        "Description": "",
        "ModelHashKey": "w_at_armk2_camo8",
        "IsDefault": false
      },
      "2088750491": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CAMO_09",
        "NameGXT": "WCT_CAMO_9",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Geometric",
        "Description": "",
        "ModelHashKey": "w_at_armk2_camo9",
        "IsDefault": false
      },
      "2781053842": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CAMO_10",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "w_at_armk2_camo10",
        "IsDefault": false
      },
      "3115408816": {
        "HashKey": "COMPONENT_ASSAULTRIFLE_MK2_CAMO_IND_01",
        "NameGXT": "WCT_CAMO_IND",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Patriotic",
        "Description": "",
        "ModelHashKey": "w_at_armk2_camo_ind1",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WCT_TINT_0",
        "Name": "Classic Black"
      },
      {
        "NameGXT": "WCT_TINT_1",
        "Name": "Classic Gray"
      },
      {
        "NameGXT": "WCT_TINT_2",
        "Name": "Classic Two-Tone"
      },
      {
        "NameGXT": "WCT_TINT_3",
        "Name": "Classic White"
      },
      {
        "NameGXT": "WCT_TINT_4",
        "Name": "Classic Beige"
      },
      {
        "NameGXT": "WCT_TINT_5",
        "Name": "Classic Green"
      },
      {
        "NameGXT": "WCT_TINT_6",
        "Name": "Classic Blue"
      },
      {
        "NameGXT": "WCT_TINT_7",
        "Name": "Classic Earth"
      },
      {
        "NameGXT": "WCT_TINT_8",
        "Name": "Classic Brown & Black"
      },
      {
        "NameGXT": "WCT_TINT_9",
        "Name": "Red Contrast"
      },
      {
        "NameGXT": "WCT_TINT_10",
        "Name": "Blue Contrast"
      },
      {
        "NameGXT": "WCT_TINT_11",
        "Name": "Yellow Contrast"
      },
      {
        "NameGXT": "WCT_TINT_12",
        "Name": "Orange Contrast"
      },
      {
        "NameGXT": "WCT_TINT_13",
        "Name": "Bold Pink"
      },
      {
        "NameGXT": "WCT_TINT_14",
        "Name": "Bold Purple & Yellow"
      },
      {
        "NameGXT": "WCT_TINT_15",
        "Name": "Bold Orange"
      },
      {
        "NameGXT": "WCT_TINT_16",
        "Name": "Bold Green & Purple"
      },
      {
        "NameGXT": "WCT_TINT_17",
        "Name": "Bold Red Features"
      },
      {
        "NameGXT": "WCT_TINT_18",
        "Name": "Bold Green Features"
      },
      {
        "NameGXT": "WCT_TINT_19",
        "Name": "Bold Cyan Features"
      },
      {
        "NameGXT": "WCT_TINT_20",
        "Name": "Bold Yellow Features"
      },
      {
        "NameGXT": "WCT_TINT_21",
        "Name": "Bold Red & White"
      },
      {
        "NameGXT": "WCT_TINT_22",
        "Name": "Bold Blue & White"
      },
      {
        "NameGXT": "WCT_TINT_23",
        "Name": "Metallic Gold"
      },
      {
        "NameGXT": "WCT_TINT_24",
        "Name": "Metallic Platinum"
      },
      {
        "NameGXT": "WCT_TINT_25",
        "Name": "Metallic Gray & Lilac"
      },
      {
        "NameGXT": "WCT_TINT_26",
        "Name": "Metallic Purple & Lime"
      },
      {
        "NameGXT": "WCT_TINT_27",
        "Name": "Metallic Red"
      },
      {
        "NameGXT": "WCT_TINT_28",
        "Name": "Metallic Green"
      },
      {
        "NameGXT": "WCT_TINT_29",
        "Name": "Metallic Blue"
      },
      {
        "NameGXT": "WCT_TINT_30",
        "Name": "Metallic White & Aqua"
      },
      {
        "NameGXT": "WCT_TINT_31",
        "Name": "Metallic Red & Yellow"
      }
    ],
    "LiveryColors": [
      {
        "NameGXT": "WCT_C_TINT_0",
        "Name": "Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_1",
        "Name": "Dark Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_2",
        "Name": "Black"
      },
      {
        "NameGXT": "WCT_C_TINT_3",
        "Name": "White"
      },
      {
        "NameGXT": "WCT_C_TINT_4",
        "Name": "Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_5",
        "Name": "Cyan"
      },
      {
        "NameGXT": "WCT_C_TINT_6",
        "Name": "Aqua"
      },
      {
        "NameGXT": "WCT_C_TINT_7",
        "Name": "Cool Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_8",
        "Name": "Dark Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_9",
        "Name": "Royal Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_10",
        "Name": "Plum"
      },
      {
        "NameGXT": "WCT_C_TINT_11",
        "Name": "Dark Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_12",
        "Name": "Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_13",
        "Name": "Red"
      },
      {
        "NameGXT": "WCT_C_TINT_14",
        "Name": "Wine Red"
      },
      {
        "NameGXT": "WCT_C_TINT_15",
        "Name": "Magenta"
      },
      {
        "NameGXT": "WCT_C_TINT_16",
        "Name": "Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_17",
        "Name": "Salmon"
      },
      {
        "NameGXT": "WCT_C_TINT_18",
        "Name": "Hot Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_19",
        "Name": "Rust Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_20",
        "Name": "Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_21",
        "Name": "Earth"
      },
      {
        "NameGXT": "WCT_C_TINT_22",
        "Name": "Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_23",
        "Name": "Light Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_24",
        "Name": "Dark Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_25",
        "Name": "Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_26",
        "Name": "Light Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_27",
        "Name": "Lime Green"
      },
      {
        "NameGXT": "WCT_C_TINT_28",
        "Name": "Olive"
      },
      {
        "NameGXT": "WCT_C_TINT_29",
        "Name": "Moss"
      },
      {
        "NameGXT": "WCT_C_TINT_30",
        "Name": "Turquoise"
      },
      {
        "NameGXT": "WCT_C_TINT_31",
        "Name": "Dark Green"
      }
    ],
    "DLC": "mpgunrunning"
  },
  "4208062921": {
    "HashKey": "WEAPON_CARBINERIFLE_MK2",
    "NameGXT": "WT_RIFLE_CBN2",
    "damage": 11,
    "DescriptionGXT": "WTD_RIFLE_CBN2",
    "Name": "Carbine Rifle Mk II",
    "Description": "This is bespoke, artisan firepower: you couldn't deliver a hail of bullets with more love and care if you inserted them by hand.",
    "Group": "GROUP_RIFLE",
    "ModelHashKey": "w_ar_carbineriflemk2",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_RIFLE",
    "Components": {
      "1283078430": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for regular ammo.",
        "ModelHashKey": "w_ar_carbineriflemk2_mag1",
        "IsDefault": true
      },
      "1574296533": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for regular ammo.",
        "ModelHashKey": "w_ar_carbineriflemk2_mag2",
        "IsDefault": false
      },
      "391640422": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CLIP_TRACER",
        "NameGXT": "WCT_CLIP_TR",
        "DescriptionGXT": "WCD_CLIP_TR",
        "Name": "Tracer Rounds",
        "Description": "Bullets with bright visible markers that match the tint of the gun. Standard capacity.",
        "ModelHashKey": "w_ar_carbineriflemk2_mag_tr",
        "AmmoType": "AMMO_RIFLE_TRACER",
        "IsDefault": false
      },
      "1025884839": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CLIP_INCENDIARY",
        "NameGXT": "WCT_CLIP_INC",
        "DescriptionGXT": "WCD_CLIP_INC",
        "Name": "Incendiary Rounds",
        "Description": "Bullets which include a chance to set targets on fire when shot. Reduced capacity.",
        "ModelHashKey": "w_ar_carbineriflemk2_mag_inc",
        "AmmoType": "AMMO_RIFLE_INCENDIARY",
        "IsDefault": false
      },
      "626875735": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CLIP_ARMORPIERCING",
        "NameGXT": "WCT_CLIP_AP",
        "DescriptionGXT": "WCD_CLIP_AP",
        "Name": "Armor Piercing Rounds",
        "Description": "Increased penetration of Body Armor. Reduced capacity.",
        "ModelHashKey": "w_ar_carbineriflemk2_mag_ap",
        "AmmoType": "AMMO_RIFLE_ARMORPIERCING",
        "IsDefault": false
      },
      "1141059345": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CLIP_FMJ",
        "NameGXT": "WCT_CLIP_FMJ",
        "DescriptionGXT": "WCD_CLIP_FMJ",
        "Name": "Full Metal Jacket Rounds",
        "Description": "Increased damage to vehicles. Also penetrates bullet resistant and bulletproof vehicle glass. Reduced capacity.",
        "ModelHashKey": "w_ar_carbineriflemk2_mag_fmj",
        "AmmoType": "AMMO_RIFLE_FMJ",
        "IsDefault": false
      },
      "2640679034": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP_02",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_afgrip_2",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "1108334355": {
        "HashKey": "COMPONENT_AT_SIGHTS",
        "NameGXT": "WCT_HOLO",
        "DescriptionGXT": "WCD_HOLO",
        "Name": "Holographic Sight",
        "Description": "Accurate sight for close quarters combat.",
        "ModelHashKey": "w_at_sights_1",
        "IsDefault": false
      },
      "77277509": {
        "HashKey": "COMPONENT_AT_SCOPE_MACRO_MK2",
        "NameGXT": "WCT_SCOPE_MAC2",
        "DescriptionGXT": "WCD_SCOPE_MAC",
        "Name": "Small Scope",
        "Description": "Standard-range zoom functionality.",
        "ModelHashKey": "w_at_scope_macro",
        "IsDefault": false
      },
      "3328927042": {
        "HashKey": "COMPONENT_AT_SCOPE_MEDIUM_MK2",
        "NameGXT": "WCT_SCOPE_MED2",
        "DescriptionGXT": "WCD_SCOPE_MED",
        "Name": "Large Scope",
        "Description": "Extended-range zoom functionality.",
        "ModelHashKey": "w_at_scope_medium_2",
        "IsDefault": false
      },
      "2205435306": {
        "HashKey": "COMPONENT_AT_AR_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp",
        "IsDefault": false
      },
      "3113485012": {
        "HashKey": "COMPONENT_AT_MUZZLE_01",
        "NameGXT": "WCT_MUZZ1",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Flat Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_1",
        "IsDefault": false
      },
      "3362234491": {
        "HashKey": "COMPONENT_AT_MUZZLE_02",
        "NameGXT": "WCT_MUZZ2",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Tactical Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_2",
        "IsDefault": false
      },
      "3725708239": {
        "HashKey": "COMPONENT_AT_MUZZLE_03",
        "NameGXT": "WCT_MUZZ3",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Fat-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_3",
        "IsDefault": false
      },
      "3968886988": {
        "HashKey": "COMPONENT_AT_MUZZLE_04",
        "NameGXT": "WCT_MUZZ4",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Precision Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_4",
        "IsDefault": false
      },
      "48731514": {
        "HashKey": "COMPONENT_AT_MUZZLE_05",
        "NameGXT": "WCT_MUZZ5",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Heavy Duty Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_5",
        "IsDefault": false
      },
      "880736428": {
        "HashKey": "COMPONENT_AT_MUZZLE_06",
        "NameGXT": "WCT_MUZZ6",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Slanted Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_6",
        "IsDefault": false
      },
      "1303784126": {
        "HashKey": "COMPONENT_AT_MUZZLE_07",
        "NameGXT": "WCT_MUZZ7",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Split-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_7",
        "IsDefault": false
      },
      "2201368575": {
        "HashKey": "COMPONENT_AT_CR_BARREL_01",
        "NameGXT": "WCT_BARR",
        "DescriptionGXT": "WCD_BARR",
        "Name": "Default Barrel",
        "Description": "Stock barrel attachment.",
        "ModelHashKey": "w_at_cr_barrel_1",
        "IsDefault": true
      },
      "2335983627": {
        "HashKey": "COMPONENT_AT_CR_BARREL_02",
        "NameGXT": "WCT_BARR2",
        "DescriptionGXT": "WCD_BARR2",
        "Name": "Heavy Barrel",
        "Description": "Increases damage dealt to long-range targets.",
        "ModelHashKey": "w_at_cr_barrel_2",
        "IsDefault": false
      },
      "1272803094": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CAMO",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "w_ar_carbineriflemk2_camo1",
        "IsDefault": false
      },
      "1080719624": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CAMO_02",
        "NameGXT": "WCT_CAMO_2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Brushstroke Camo",
        "Description": "",
        "ModelHashKey": "w_ar_carbineriflemk2_camo2",
        "IsDefault": false
      },
      "792221348": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CAMO_03",
        "NameGXT": "WCT_CAMO_3",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Woodland Camo",
        "Description": "",
        "ModelHashKey": "w_ar_carbineriflemk2_camo3",
        "IsDefault": false
      },
      "3842785869": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CAMO_04",
        "NameGXT": "WCT_CAMO_4",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Skull",
        "Description": "",
        "ModelHashKey": "w_ar_carbineriflemk2_camo4",
        "IsDefault": false
      },
      "3548192559": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CAMO_05",
        "NameGXT": "WCT_CAMO_5",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Sessanta Nove",
        "Description": "",
        "ModelHashKey": "w_ar_carbineriflemk2_camo5",
        "IsDefault": false
      },
      "2250671235": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CAMO_06",
        "NameGXT": "WCT_CAMO_6",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Perseus",
        "Description": "",
        "ModelHashKey": "w_ar_carbineriflemk2_camo6",
        "IsDefault": false
      },
      "4095795318": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CAMO_07",
        "NameGXT": "WCT_CAMO_7",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Leopard",
        "Description": "",
        "ModelHashKey": "w_ar_carbineriflemk2_camo7",
        "IsDefault": false
      },
      "2866892280": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CAMO_08",
        "NameGXT": "WCT_CAMO_8",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Zebra",
        "Description": "",
        "ModelHashKey": "w_ar_carbineriflemk2_camo8",
        "IsDefault": false
      },
      "2559813981": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CAMO_09",
        "NameGXT": "WCT_CAMO_9",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Geometric",
        "Description": "",
        "ModelHashKey": "w_ar_carbineriflemk2_camo9",
        "IsDefault": false
      },
      "1796459838": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CAMO_10",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "w_ar_carbineriflemk2_camo10",
        "IsDefault": false
      },
      "3663056191": {
        "HashKey": "COMPONENT_CARBINERIFLE_MK2_CAMO_IND_01",
        "NameGXT": "WCT_CAMO_IND",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Patriotic",
        "Description": "",
        "ModelHashKey": "w_ar_carbineriflemk2_camo_ind1",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WCT_TINT_0",
        "Name": "Classic Black"
      },
      {
        "NameGXT": "WCT_TINT_1",
        "Name": "Classic Gray"
      },
      {
        "NameGXT": "WCT_TINT_2",
        "Name": "Classic Two-Tone"
      },
      {
        "NameGXT": "WCT_TINT_3",
        "Name": "Classic White"
      },
      {
        "NameGXT": "WCT_TINT_4",
        "Name": "Classic Beige"
      },
      {
        "NameGXT": "WCT_TINT_5",
        "Name": "Classic Green"
      },
      {
        "NameGXT": "WCT_TINT_6",
        "Name": "Classic Blue"
      },
      {
        "NameGXT": "WCT_TINT_7",
        "Name": "Classic Earth"
      },
      {
        "NameGXT": "WCT_TINT_8",
        "Name": "Classic Brown & Black"
      },
      {
        "NameGXT": "WCT_TINT_9",
        "Name": "Red Contrast"
      },
      {
        "NameGXT": "WCT_TINT_10",
        "Name": "Blue Contrast"
      },
      {
        "NameGXT": "WCT_TINT_11",
        "Name": "Yellow Contrast"
      },
      {
        "NameGXT": "WCT_TINT_12",
        "Name": "Orange Contrast"
      },
      {
        "NameGXT": "WCT_TINT_13",
        "Name": "Bold Pink"
      },
      {
        "NameGXT": "WCT_TINT_14",
        "Name": "Bold Purple & Yellow"
      },
      {
        "NameGXT": "WCT_TINT_15",
        "Name": "Bold Orange"
      },
      {
        "NameGXT": "WCT_TINT_16",
        "Name": "Bold Green & Purple"
      },
      {
        "NameGXT": "WCT_TINT_17",
        "Name": "Bold Red Features"
      },
      {
        "NameGXT": "WCT_TINT_18",
        "Name": "Bold Green Features"
      },
      {
        "NameGXT": "WCT_TINT_19",
        "Name": "Bold Cyan Features"
      },
      {
        "NameGXT": "WCT_TINT_20",
        "Name": "Bold Yellow Features"
      },
      {
        "NameGXT": "WCT_TINT_21",
        "Name": "Bold Red & White"
      },
      {
        "NameGXT": "WCT_TINT_22",
        "Name": "Bold Blue & White"
      },
      {
        "NameGXT": "WCT_TINT_23",
        "Name": "Metallic Gold"
      },
      {
        "NameGXT": "WCT_TINT_24",
        "Name": "Metallic Platinum"
      },
      {
        "NameGXT": "WCT_TINT_25",
        "Name": "Metallic Gray & Lilac"
      },
      {
        "NameGXT": "WCT_TINT_26",
        "Name": "Metallic Purple & Lime"
      },
      {
        "NameGXT": "WCT_TINT_27",
        "Name": "Metallic Red"
      },
      {
        "NameGXT": "WCT_TINT_28",
        "Name": "Metallic Green"
      },
      {
        "NameGXT": "WCT_TINT_29",
        "Name": "Metallic Blue"
      },
      {
        "NameGXT": "WCT_TINT_30",
        "Name": "Metallic White & Aqua"
      },
      {
        "NameGXT": "WCT_TINT_31",
        "Name": "Metallic Red & Yellow"
      }
    ],
    "LiveryColors": [
      {
        "NameGXT": "WCT_C_TINT_0",
        "Name": "Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_1",
        "Name": "Dark Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_2",
        "Name": "Black"
      },
      {
        "NameGXT": "WCT_C_TINT_3",
        "Name": "White"
      },
      {
        "NameGXT": "WCT_C_TINT_4",
        "Name": "Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_5",
        "Name": "Cyan"
      },
      {
        "NameGXT": "WCT_C_TINT_6",
        "Name": "Aqua"
      },
      {
        "NameGXT": "WCT_C_TINT_7",
        "Name": "Cool Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_8",
        "Name": "Dark Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_9",
        "Name": "Royal Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_10",
        "Name": "Plum"
      },
      {
        "NameGXT": "WCT_C_TINT_11",
        "Name": "Dark Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_12",
        "Name": "Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_13",
        "Name": "Red"
      },
      {
        "NameGXT": "WCT_C_TINT_14",
        "Name": "Wine Red"
      },
      {
        "NameGXT": "WCT_C_TINT_15",
        "Name": "Magenta"
      },
      {
        "NameGXT": "WCT_C_TINT_16",
        "Name": "Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_17",
        "Name": "Salmon"
      },
      {
        "NameGXT": "WCT_C_TINT_18",
        "Name": "Hot Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_19",
        "Name": "Rust Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_20",
        "Name": "Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_21",
        "Name": "Earth"
      },
      {
        "NameGXT": "WCT_C_TINT_22",
        "Name": "Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_23",
        "Name": "Light Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_24",
        "Name": "Dark Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_25",
        "Name": "Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_26",
        "Name": "Light Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_27",
        "Name": "Lime Green"
      },
      {
        "NameGXT": "WCT_C_TINT_28",
        "Name": "Olive"
      },
      {
        "NameGXT": "WCT_C_TINT_29",
        "Name": "Moss"
      },
      {
        "NameGXT": "WCT_C_TINT_30",
        "Name": "Turquoise"
      },
      {
        "NameGXT": "WCT_C_TINT_31",
        "Name": "Dark Green"
      }
    ],
    "DLC": "mpgunrunning"
  },
  "3686625920": {
    "HashKey": "WEAPON_COMBATMG_MK2",
    "NameGXT": "WT_MG_CBT2",
    "damage": 11,
    "DescriptionGXT": "WTD_MG_CBT2",
    "Name": "Combat MG Mk II",
    "Description": "You can never have too much of a good thing: after all, if the first shot counts, then the next hundred or so must count for double.",
    "Group": "GROUP_MG",
    "ModelHashKey": "w_mg_combatmgmk2",
    "DefaultClipSize": 100,
    "AmmoType": "AMMO_MG",
    "Components": {
      "1227564412": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for regular ammo.",
        "ModelHashKey": "w_mg_combatmgmk2_mag1",
        "IsDefault": true
      },
      "400507625": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for regular ammo.",
        "ModelHashKey": "w_mg_combatmgmk2_mag2",
        "IsDefault": false
      },
      "4133787461": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CLIP_TRACER",
        "NameGXT": "WCT_CLIP_TR",
        "DescriptionGXT": "WCD_CLIP_TR",
        "Name": "Tracer Rounds",
        "Description": "Bullets with bright visible markers that match the tint of the gun. Standard capacity.",
        "ModelHashKey": "w_mg_combatmgmk2_mag_tr",
        "AmmoType": "AMMO_MG_TRACER",
        "IsDefault": false
      },
      "3274096058": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CLIP_INCENDIARY",
        "NameGXT": "WCT_CLIP_INC",
        "DescriptionGXT": "WCD_CLIP_INC",
        "Name": "Incendiary Rounds",
        "Description": "Bullets which include a chance to set targets on fire when shot. Reduced capacity.",
        "ModelHashKey": "w_mg_combatmgmk2_mag_inc",
        "AmmoType": "AMMO_MG_INCENDIARY",
        "IsDefault": false
      },
      "696788003": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CLIP_ARMORPIERCING",
        "NameGXT": "WCT_CLIP_AP",
        "DescriptionGXT": "WCD_CLIP_AP",
        "Name": "Armor Piercing Rounds",
        "Description": "Increased penetration of Body Armor. Reduced capacity.",
        "ModelHashKey": "w_mg_combatmgmk2_mag_ap",
        "AmmoType": "AMMO_MG_ARMORPIERCING",
        "IsDefault": false
      },
      "1475288264": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CLIP_FMJ",
        "NameGXT": "WCT_CLIP_FMJ",
        "DescriptionGXT": "WCD_CLIP_FMJ",
        "Name": "Full Metal Jacket Rounds",
        "Description": "Increased damage to vehicles. Also penetrates bullet resistant and bulletproof vehicle glass. Reduced capacity.",
        "ModelHashKey": "w_mg_combatmgmk2_mag_fmj",
        "AmmoType": "AMMO_MG_FMJ",
        "IsDefault": false
      },
      "2640679034": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP_02",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_afgrip_2",
        "IsDefault": false
      },
      "1108334355": {
        "HashKey": "COMPONENT_AT_SIGHTS",
        "NameGXT": "WCT_HOLO",
        "DescriptionGXT": "WCD_HOLO",
        "Name": "Holographic Sight",
        "Description": "Accurate sight for close quarters combat.",
        "ModelHashKey": "w_at_sights_1",
        "IsDefault": false
      },
      "1060929921": {
        "HashKey": "COMPONENT_AT_SCOPE_SMALL_MK2",
        "NameGXT": "WCT_SCOPE_SML2",
        "DescriptionGXT": "WCD_SCOPE_SML",
        "Name": "Medium Scope",
        "Description": "Medium-range zoom functionality.",
        "ModelHashKey": "w_at_scope_small",
        "IsDefault": false
      },
      "3328927042": {
        "HashKey": "COMPONENT_AT_SCOPE_MEDIUM_MK2",
        "NameGXT": "WCT_SCOPE_MED2",
        "DescriptionGXT": "WCD_SCOPE_MED",
        "Name": "Large Scope",
        "Description": "Extended-range zoom functionality.",
        "ModelHashKey": "w_at_scope_medium_2",
        "IsDefault": false
      },
      "3113485012": {
        "HashKey": "COMPONENT_AT_MUZZLE_01",
        "NameGXT": "WCT_MUZZ1",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Flat Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_1",
        "IsDefault": false
      },
      "3362234491": {
        "HashKey": "COMPONENT_AT_MUZZLE_02",
        "NameGXT": "WCT_MUZZ2",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Tactical Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_2",
        "IsDefault": false
      },
      "3725708239": {
        "HashKey": "COMPONENT_AT_MUZZLE_03",
        "NameGXT": "WCT_MUZZ3",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Fat-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_3",
        "IsDefault": false
      },
      "3968886988": {
        "HashKey": "COMPONENT_AT_MUZZLE_04",
        "NameGXT": "WCT_MUZZ4",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Precision Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_4",
        "IsDefault": false
      },
      "48731514": {
        "HashKey": "COMPONENT_AT_MUZZLE_05",
        "NameGXT": "WCT_MUZZ5",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Heavy Duty Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_5",
        "IsDefault": false
      },
      "880736428": {
        "HashKey": "COMPONENT_AT_MUZZLE_06",
        "NameGXT": "WCT_MUZZ6",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Slanted Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_6",
        "IsDefault": false
      },
      "1303784126": {
        "HashKey": "COMPONENT_AT_MUZZLE_07",
        "NameGXT": "WCT_MUZZ7",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Split-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_7",
        "IsDefault": false
      },
      "3276730932": {
        "HashKey": "COMPONENT_AT_MG_BARREL_01",
        "NameGXT": "WCT_BARR",
        "DescriptionGXT": "WCD_BARR",
        "Name": "Default Barrel",
        "Description": "Stock barrel attachment.",
        "ModelHashKey": "w_at_mg_barrel_1",
        "IsDefault": true
      },
      "3051509595": {
        "HashKey": "COMPONENT_AT_MG_BARREL_02",
        "NameGXT": "WCT_BARR2",
        "DescriptionGXT": "WCD_BARR2",
        "Name": "Heavy Barrel",
        "Description": "Increases damage dealt to long-range targets.",
        "ModelHashKey": "w_at_mg_barrel_2",
        "IsDefault": false
      },
      "1249283253": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CAMO",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "w_mg_combatmgmk2_camo1",
        "IsDefault": false
      },
      "3437259709": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CAMO_02",
        "NameGXT": "WCT_CAMO_2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Brushstroke Camo",
        "Description": "",
        "ModelHashKey": "w_mg_combatmgmk2_camo2",
        "IsDefault": false
      },
      "3197423398": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CAMO_03",
        "NameGXT": "WCT_CAMO_3",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Woodland Camo",
        "Description": "",
        "ModelHashKey": "w_mg_combatmgmk2_camo3",
        "IsDefault": false
      },
      "1980349969": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CAMO_04",
        "NameGXT": "WCT_CAMO_4",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Skull",
        "Description": "",
        "ModelHashKey": "w_mg_combatmgmk2_camo4",
        "IsDefault": false
      },
      "1219453777": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CAMO_05",
        "NameGXT": "WCT_CAMO_5",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Sessanta Nove",
        "Description": "",
        "ModelHashKey": "w_mg_combatmgmk2_camo5",
        "IsDefault": false
      },
      "2441508106": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CAMO_06",
        "NameGXT": "WCT_CAMO_6",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Perseus",
        "Description": "",
        "ModelHashKey": "w_mg_combatmgmk2_camo6",
        "IsDefault": false
      },
      "2220186280": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CAMO_07",
        "NameGXT": "WCT_CAMO_7",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Leopard",
        "Description": "",
        "ModelHashKey": "w_mg_combatmgmk2_camo7",
        "IsDefault": false
      },
      "457967755": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CAMO_08",
        "NameGXT": "WCT_CAMO_8",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Zebra",
        "Description": "",
        "ModelHashKey": "w_mg_combatmgmk2_camo8",
        "IsDefault": false
      },
      "235171324": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CAMO_09",
        "NameGXT": "WCT_CAMO_9",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Geometric",
        "Description": "",
        "ModelHashKey": "w_mg_combatmgmk2_camo9",
        "IsDefault": false
      },
      "42685294": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CAMO_10",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "w_mg_combatmgmk2_camo10",
        "IsDefault": false
      },
      "3607349581": {
        "HashKey": "COMPONENT_COMBATMG_MK2_CAMO_IND_01",
        "NameGXT": "WCT_CAMO_IND",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Patriotic",
        "Description": "",
        "ModelHashKey": "w_mg_combatmgmk2_camo_ind1",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WCT_TINT_0",
        "Name": "Classic Black"
      },
      {
        "NameGXT": "WCT_TINT_1",
        "Name": "Classic Gray"
      },
      {
        "NameGXT": "WCT_TINT_2",
        "Name": "Classic Two-Tone"
      },
      {
        "NameGXT": "WCT_TINT_3",
        "Name": "Classic White"
      },
      {
        "NameGXT": "WCT_TINT_4",
        "Name": "Classic Beige"
      },
      {
        "NameGXT": "WCT_TINT_5",
        "Name": "Classic Green"
      },
      {
        "NameGXT": "WCT_TINT_6",
        "Name": "Classic Blue"
      },
      {
        "NameGXT": "WCT_TINT_7",
        "Name": "Classic Earth"
      },
      {
        "NameGXT": "WCT_TINT_8",
        "Name": "Classic Brown & Black"
      },
      {
        "NameGXT": "WCT_TINT_9",
        "Name": "Red Contrast"
      },
      {
        "NameGXT": "WCT_TINT_10",
        "Name": "Blue Contrast"
      },
      {
        "NameGXT": "WCT_TINT_11",
        "Name": "Yellow Contrast"
      },
      {
        "NameGXT": "WCT_TINT_12",
        "Name": "Orange Contrast"
      },
      {
        "NameGXT": "WCT_TINT_13",
        "Name": "Bold Pink"
      },
      {
        "NameGXT": "WCT_TINT_14",
        "Name": "Bold Purple & Yellow"
      },
      {
        "NameGXT": "WCT_TINT_15",
        "Name": "Bold Orange"
      },
      {
        "NameGXT": "WCT_TINT_16",
        "Name": "Bold Green & Purple"
      },
      {
        "NameGXT": "WCT_TINT_17",
        "Name": "Bold Red Features"
      },
      {
        "NameGXT": "WCT_TINT_18",
        "Name": "Bold Green Features"
      },
      {
        "NameGXT": "WCT_TINT_19",
        "Name": "Bold Cyan Features"
      },
      {
        "NameGXT": "WCT_TINT_20",
        "Name": "Bold Yellow Features"
      },
      {
        "NameGXT": "WCT_TINT_21",
        "Name": "Bold Red & White"
      },
      {
        "NameGXT": "WCT_TINT_22",
        "Name": "Bold Blue & White"
      },
      {
        "NameGXT": "WCT_TINT_23",
        "Name": "Metallic Gold"
      },
      {
        "NameGXT": "WCT_TINT_24",
        "Name": "Metallic Platinum"
      },
      {
        "NameGXT": "WCT_TINT_25",
        "Name": "Metallic Gray & Lilac"
      },
      {
        "NameGXT": "WCT_TINT_26",
        "Name": "Metallic Purple & Lime"
      },
      {
        "NameGXT": "WCT_TINT_27",
        "Name": "Metallic Red"
      },
      {
        "NameGXT": "WCT_TINT_28",
        "Name": "Metallic Green"
      },
      {
        "NameGXT": "WCT_TINT_29",
        "Name": "Metallic Blue"
      },
      {
        "NameGXT": "WCT_TINT_30",
        "Name": "Metallic White & Aqua"
      },
      {
        "NameGXT": "WCT_TINT_31",
        "Name": "Metallic Red & Yellow"
      }
    ],
    "LiveryColors": [
      {
        "NameGXT": "WCT_C_TINT_0",
        "Name": "Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_1",
        "Name": "Dark Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_2",
        "Name": "Black"
      },
      {
        "NameGXT": "WCT_C_TINT_3",
        "Name": "White"
      },
      {
        "NameGXT": "WCT_C_TINT_4",
        "Name": "Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_5",
        "Name": "Cyan"
      },
      {
        "NameGXT": "WCT_C_TINT_6",
        "Name": "Aqua"
      },
      {
        "NameGXT": "WCT_C_TINT_7",
        "Name": "Cool Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_8",
        "Name": "Dark Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_9",
        "Name": "Royal Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_10",
        "Name": "Plum"
      },
      {
        "NameGXT": "WCT_C_TINT_11",
        "Name": "Dark Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_12",
        "Name": "Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_13",
        "Name": "Red"
      },
      {
        "NameGXT": "WCT_C_TINT_14",
        "Name": "Wine Red"
      },
      {
        "NameGXT": "WCT_C_TINT_15",
        "Name": "Magenta"
      },
      {
        "NameGXT": "WCT_C_TINT_16",
        "Name": "Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_17",
        "Name": "Salmon"
      },
      {
        "NameGXT": "WCT_C_TINT_18",
        "Name": "Hot Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_19",
        "Name": "Rust Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_20",
        "Name": "Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_21",
        "Name": "Earth"
      },
      {
        "NameGXT": "WCT_C_TINT_22",
        "Name": "Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_23",
        "Name": "Light Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_24",
        "Name": "Dark Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_25",
        "Name": "Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_26",
        "Name": "Light Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_27",
        "Name": "Lime Green"
      },
      {
        "NameGXT": "WCT_C_TINT_28",
        "Name": "Olive"
      },
      {
        "NameGXT": "WCT_C_TINT_29",
        "Name": "Moss"
      },
      {
        "NameGXT": "WCT_C_TINT_30",
        "Name": "Turquoise"
      },
      {
        "NameGXT": "WCT_C_TINT_31",
        "Name": "Dark Green"
      }
    ],
    "DLC": "mpgunrunning"
  },
  "177293209": {
    "HashKey": "WEAPON_HEAVYSNIPER_MK2",
    "NameGXT": "WT_SNIP_HVY2",
    "damage": 110,
    "DescriptionGXT": "WTD_SNIP_HVY2",
    "Name": "Heavy Sniper Mk II",
    "Description": "Far away, yet always intimate: if you're looking for a secure foundation for that long-distance relationship, this is it.",
    "Group": "GROUP_SNIPER",
    "ModelHashKey": "w_sr_heavysnipermk2",
    "DefaultClipSize": 6,
    "AmmoType": "AMMO_SNIPER",
    "Components": {
      "4196276776": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for regular ammo.",
        "ModelHashKey": "w_sr_heavysnipermk2_mag1",
        "IsDefault": true
      },
      "752418717": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for regular ammo.",
        "ModelHashKey": "w_sr_heavysnipermk2_mag2",
        "IsDefault": false
      },
      "247526935": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CLIP_INCENDIARY",
        "NameGXT": "WCT_CLIP_INC",
        "DescriptionGXT": "WCD_CLIP_INC_SN",
        "Name": "Incendiary Rounds",
        "Description": "Bullets which set targets on fire when shot. Reduced capacity.",
        "ModelHashKey": "w_sr_heavysnipermk2_mag_inc",
        "AmmoType": "AMMO_SNIPER_INCENDIARY",
        "IsDefault": false
      },
      "4164277972": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CLIP_ARMORPIERCING",
        "NameGXT": "WCT_CLIP_AP",
        "DescriptionGXT": "WCD_CLIP_AP",
        "Name": "Armor Piercing Rounds",
        "Description": "Increased penetration of Body Armor. Reduced capacity.",
        "ModelHashKey": "w_sr_heavysnipermk2_mag_ap",
        "AmmoType": "AMMO_SNIPER_ARMORPIERCING",
        "IsDefault": false
      },
      "1005144310": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CLIP_FMJ",
        "NameGXT": "WCT_CLIP_FMJ",
        "DescriptionGXT": "WCD_CLIP_FMJ",
        "Name": "Full Metal Jacket Rounds",
        "Description": "Increased damage to vehicles. Also penetrates bullet resistant and bulletproof vehicle glass. Reduced capacity.",
        "ModelHashKey": "w_sr_heavysnipermk2_mag_fmj",
        "AmmoType": "AMMO_SNIPER_FMJ",
        "IsDefault": false
      },
      "2313935527": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CLIP_EXPLOSIVE",
        "NameGXT": "WCT_CLIP_EX",
        "DescriptionGXT": "WCD_CLIP_EX",
        "Name": "Explosive Rounds",
        "Description": "Bullets which explode on impact. Reduced capacity.",
        "ModelHashKey": "w_sr_heavysnipermk2_mag_ap2",
        "AmmoType": "AMMO_SNIPER_EXPLOSIVE",
        "IsDefault": false
      },
      "2193687427": {
        "HashKey": "COMPONENT_AT_SCOPE_LARGE_MK2",
        "NameGXT": "WCT_SCOPE_LRG2",
        "DescriptionGXT": "WCD_SCOPE_LRG",
        "Name": "Zoom Scope",
        "Description": "Long-range zoom functionality.",
        "ModelHashKey": "w_at_scope_large",
        "IsDefault": false
      },
      "3159677559": {
        "HashKey": "COMPONENT_AT_SCOPE_MAX",
        "NameGXT": "WCT_SCOPE_MAX",
        "DescriptionGXT": "WCD_SCOPE_MAX",
        "Name": "Advanced Scope",
        "Description": "Maximum zoom functionality.",
        "ModelHashKey": "w_at_scope_max",
        "IsDefault": true
      },
      "3061846192": {
        "HashKey": "COMPONENT_AT_SCOPE_NV",
        "NameGXT": "WCT_SCOPE_NV",
        "DescriptionGXT": "WCD_SCOPE_NV",
        "Name": "Night Vision Scope",
        "Description": "Long-range zoom with toggleable night vision.",
        "ModelHashKey": "w_at_scope_nv",
        "IsDefault": false
      },
      "776198721": {
        "HashKey": "COMPONENT_AT_SCOPE_THERMAL",
        "NameGXT": "WCT_SCOPE_TH",
        "DescriptionGXT": "WCD_SCOPE_TH",
        "Name": "Thermal Scope",
        "Description": "Long-range zoom with toggleable thermal vision.",
        "ModelHashKey": "w_at_scope_nv",
        "IsDefault": false
      },
      "2890063729": {
        "HashKey": "COMPONENT_AT_SR_SUPP_03",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_SR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_sr_supp3",
        "IsDefault": false
      },
      "1602080333": {
        "HashKey": "COMPONENT_AT_MUZZLE_08",
        "NameGXT": "WCT_MUZZ8",
        "DescriptionGXT": "WCD_MUZZ_SR",
        "Name": "Squared Muzzle Brake",
        "Description": "Reduces recoil when firing.",
        "ModelHashKey": "w_at_muzzle_8_xm17",
        "IsDefault": false
      },
      "1764221345": {
        "HashKey": "COMPONENT_AT_MUZZLE_09",
        "NameGXT": "WCT_MUZZ9",
        "DescriptionGXT": "WCD_MUZZ_SR",
        "Name": "Bell-End Muzzle Brake",
        "Description": "Reduces recoil when firing.",
        "ModelHashKey": "w_at_muzzle_9",
        "IsDefault": false
      },
      "2425761975": {
        "HashKey": "COMPONENT_AT_SR_BARREL_01",
        "NameGXT": "WCT_BARR",
        "DescriptionGXT": "WCD_BARR",
        "Name": "Default Barrel",
        "Description": "Stock barrel attachment.",
        "ModelHashKey": "w_at_sr_barrel_1",
        "IsDefault": true
      },
      "277524638": {
        "HashKey": "COMPONENT_AT_SR_BARREL_02",
        "NameGXT": "WCT_BARR2",
        "DescriptionGXT": "WCD_BARR2",
        "Name": "Heavy Barrel",
        "Description": "Increases damage dealt to long-range targets.",
        "ModelHashKey": "w_at_sr_barrel_2",
        "IsDefault": false
      },
      "4164123906": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CAMO",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "w_at_heavysnipermk2_camo1",
        "IsDefault": false
      },
      "3317620069": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CAMO_02",
        "NameGXT": "WCT_CAMO_2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Brushstroke Camo",
        "Description": "",
        "ModelHashKey": "w_at_heavysnipermk2_camo2",
        "IsDefault": false
      },
      "3916506229": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CAMO_03",
        "NameGXT": "WCT_CAMO_3",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Woodland Camo",
        "Description": "",
        "ModelHashKey": "w_at_heavysnipermk2_camo3",
        "IsDefault": false
      },
      "329939175": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CAMO_04",
        "NameGXT": "WCT_CAMO_4",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Skull",
        "Description": "",
        "ModelHashKey": "w_at_heavysnipermk2_camo4",
        "IsDefault": false
      },
      "643374672": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CAMO_05",
        "NameGXT": "WCT_CAMO_5",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Sessanta Nove",
        "Description": "",
        "ModelHashKey": "w_at_heavysnipermk2_camo5",
        "IsDefault": false
      },
      "807875052": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CAMO_06",
        "NameGXT": "WCT_CAMO_6",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Perseus",
        "Description": "",
        "ModelHashKey": "w_at_heavysnipermk2_camo6",
        "IsDefault": false
      },
      "2893163128": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CAMO_07",
        "NameGXT": "WCT_CAMO_7",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Leopard",
        "Description": "",
        "ModelHashKey": "w_at_heavysnipermk2_camo7",
        "IsDefault": false
      },
      "3198471901": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CAMO_08",
        "NameGXT": "WCT_CAMO_8",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Zebra",
        "Description": "",
        "ModelHashKey": "w_at_heavysnipermk2_camo8",
        "IsDefault": false
      },
      "3447155842": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CAMO_09",
        "NameGXT": "WCT_CAMO_9",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Geometric",
        "Description": "",
        "ModelHashKey": "w_at_heavysnipermk2_camo9",
        "IsDefault": false
      },
      "2881858759": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CAMO_10",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "w_at_heavysnipermk2_camo10",
        "IsDefault": false
      },
      "1815270123": {
        "HashKey": "COMPONENT_HEAVYSNIPER_MK2_CAMO_IND_01",
        "NameGXT": "WCT_CAMO_IND",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Patriotic",
        "Description": "",
        "ModelHashKey": "w_at_heavysnipermk2_camo_ind1",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WCT_TINT_0",
        "Name": "Classic Black"
      },
      {
        "NameGXT": "WCT_TINT_1",
        "Name": "Classic Gray"
      },
      {
        "NameGXT": "WCT_TINT_2",
        "Name": "Classic Two-Tone"
      },
      {
        "NameGXT": "WCT_TINT_3",
        "Name": "Classic White"
      },
      {
        "NameGXT": "WCT_TINT_4",
        "Name": "Classic Beige"
      },
      {
        "NameGXT": "WCT_TINT_5",
        "Name": "Classic Green"
      },
      {
        "NameGXT": "WCT_TINT_6",
        "Name": "Classic Blue"
      },
      {
        "NameGXT": "WCT_TINT_7",
        "Name": "Classic Earth"
      },
      {
        "NameGXT": "WCT_TINT_8",
        "Name": "Classic Brown & Black"
      },
      {
        "NameGXT": "WCT_TINT_9",
        "Name": "Red Contrast"
      },
      {
        "NameGXT": "WCT_TINT_10",
        "Name": "Blue Contrast"
      },
      {
        "NameGXT": "WCT_TINT_11",
        "Name": "Yellow Contrast"
      },
      {
        "NameGXT": "WCT_TINT_12",
        "Name": "Orange Contrast"
      },
      {
        "NameGXT": "WCT_TINT_13",
        "Name": "Bold Pink"
      },
      {
        "NameGXT": "WCT_TINT_14",
        "Name": "Bold Purple & Yellow"
      },
      {
        "NameGXT": "WCT_TINT_15",
        "Name": "Bold Orange"
      },
      {
        "NameGXT": "WCT_TINT_16",
        "Name": "Bold Green & Purple"
      },
      {
        "NameGXT": "WCT_TINT_17",
        "Name": "Bold Red Features"
      },
      {
        "NameGXT": "WCT_TINT_18",
        "Name": "Bold Green Features"
      },
      {
        "NameGXT": "WCT_TINT_19",
        "Name": "Bold Cyan Features"
      },
      {
        "NameGXT": "WCT_TINT_20",
        "Name": "Bold Yellow Features"
      },
      {
        "NameGXT": "WCT_TINT_21",
        "Name": "Bold Red & White"
      },
      {
        "NameGXT": "WCT_TINT_22",
        "Name": "Bold Blue & White"
      },
      {
        "NameGXT": "WCT_TINT_23",
        "Name": "Metallic Gold"
      },
      {
        "NameGXT": "WCT_TINT_24",
        "Name": "Metallic Platinum"
      },
      {
        "NameGXT": "WCT_TINT_25",
        "Name": "Metallic Gray & Lilac"
      },
      {
        "NameGXT": "WCT_TINT_26",
        "Name": "Metallic Purple & Lime"
      },
      {
        "NameGXT": "WCT_TINT_27",
        "Name": "Metallic Red"
      },
      {
        "NameGXT": "WCT_TINT_28",
        "Name": "Metallic Green"
      },
      {
        "NameGXT": "WCT_TINT_29",
        "Name": "Metallic Blue"
      },
      {
        "NameGXT": "WCT_TINT_30",
        "Name": "Metallic White & Aqua"
      },
      {
        "NameGXT": "WCT_TINT_31",
        "Name": "Metallic Red & Yellow"
      }
    ],
    "LiveryColors": [
      {
        "NameGXT": "WCT_C_TINT_0",
        "Name": "Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_1",
        "Name": "Dark Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_2",
        "Name": "Black"
      },
      {
        "NameGXT": "WCT_C_TINT_3",
        "Name": "White"
      },
      {
        "NameGXT": "WCT_C_TINT_4",
        "Name": "Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_5",
        "Name": "Cyan"
      },
      {
        "NameGXT": "WCT_C_TINT_6",
        "Name": "Aqua"
      },
      {
        "NameGXT": "WCT_C_TINT_7",
        "Name": "Cool Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_8",
        "Name": "Dark Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_9",
        "Name": "Royal Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_10",
        "Name": "Plum"
      },
      {
        "NameGXT": "WCT_C_TINT_11",
        "Name": "Dark Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_12",
        "Name": "Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_13",
        "Name": "Red"
      },
      {
        "NameGXT": "WCT_C_TINT_14",
        "Name": "Wine Red"
      },
      {
        "NameGXT": "WCT_C_TINT_15",
        "Name": "Magenta"
      },
      {
        "NameGXT": "WCT_C_TINT_16",
        "Name": "Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_17",
        "Name": "Salmon"
      },
      {
        "NameGXT": "WCT_C_TINT_18",
        "Name": "Hot Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_19",
        "Name": "Rust Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_20",
        "Name": "Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_21",
        "Name": "Earth"
      },
      {
        "NameGXT": "WCT_C_TINT_22",
        "Name": "Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_23",
        "Name": "Light Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_24",
        "Name": "Dark Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_25",
        "Name": "Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_26",
        "Name": "Light Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_27",
        "Name": "Lime Green"
      },
      {
        "NameGXT": "WCT_C_TINT_28",
        "Name": "Olive"
      },
      {
        "NameGXT": "WCT_C_TINT_29",
        "Name": "Moss"
      },
      {
        "NameGXT": "WCT_C_TINT_30",
        "Name": "Turquoise"
      },
      {
        "NameGXT": "WCT_C_TINT_31",
        "Name": "Dark Green"
      }
    ],
    "DLC": "mpgunrunning"
  },
  "3219281620": {
    "HashKey": "WEAPON_PISTOL_MK2",
    "NameGXT": "WT_PIST2",
    "damage": 11,
    "DescriptionGXT": "WTD_PIST2",
    "Name": "Pistol Mk II",
    "Description": "Balance, simplicity, precision: nothing keeps the peace like an extended barrel in the other guy's mouth.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "w_pi_pistolmk2",
    "DefaultClipSize": 12,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "2499030370": {
        "HashKey": "COMPONENT_PISTOL_MK2_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for regular ammo.",
        "ModelHashKey": "w_pi_pistolmk2_mag1",
        "IsDefault": true
      },
      "1591132456": {
        "HashKey": "COMPONENT_PISTOL_MK2_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for regular ammo.",
        "ModelHashKey": "w_pi_pistolmk2_mag2",
        "IsDefault": false
      },
      "634039983": {
        "HashKey": "COMPONENT_PISTOL_MK2_CLIP_TRACER",
        "NameGXT": "WCT_CLIP_TR",
        "DescriptionGXT": "WCD_CLIP_TR",
        "Name": "Tracer Rounds",
        "Description": "Bullets with bright visible markers that match the tint of the gun. Standard capacity.",
        "ModelHashKey": "w_pi_pistolmk2_mag_tr",
        "AmmoType": "AMMO_PISTOL_TRACER",
        "IsDefault": false
      },
      "733837882": {
        "HashKey": "COMPONENT_PISTOL_MK2_CLIP_INCENDIARY",
        "NameGXT": "WCT_CLIP_INC",
        "DescriptionGXT": "WCD_CLIP_INC",
        "Name": "Incendiary Rounds",
        "Description": "Bullets which include a chance to set targets on fire when shot. Reduced capacity.",
        "ModelHashKey": "w_pi_pistolmk2_mag_inc",
        "AmmoType": "AMMO_PISTOL_INCENDIARY",
        "IsDefault": false
      },
      "2248057097": {
        "HashKey": "COMPONENT_PISTOL_MK2_CLIP_HOLLOWPOINT",
        "NameGXT": "WCT_CLIP_HP",
        "DescriptionGXT": "WCD_CLIP_HP",
        "Name": "Hollow Point Rounds",
        "Description": "Increased damage to targets without Body Armor. Reduced capacity.",
        "ModelHashKey": "w_pi_pistolmk2_mag_hp",
        "AmmoType": "AMMO_PISTOL_HOLLOWPOINT",
        "IsDefault": false
      },
      "1329061674": {
        "HashKey": "COMPONENT_PISTOL_MK2_CLIP_FMJ",
        "NameGXT": "WCT_CLIP_FMJ",
        "DescriptionGXT": "WCD_CLIP_FMJ",
        "Name": "Full Metal Jacket Rounds",
        "Description": "Increased damage to vehicles. Also penetrates bullet resistant and bulletproof vehicle glass. Reduced capacity.",
        "ModelHashKey": "w_pi_pistolmk2_mag_fmj",
        "AmmoType": "AMMO_PISTOL_FMJ",
        "IsDefault": false
      },
      "2396306288": {
        "HashKey": "COMPONENT_AT_PI_RAIL",
        "NameGXT": "WCT_SCOPE_PI",
        "DescriptionGXT": "WCD_SCOPE_PI",
        "Name": "Mounted Scope",
        "Description": "Standard-range zoom functionality.",
        "ModelHashKey": "w_at_pi_rail_1",
        "IsDefault": false
      },
      "1140676955": {
        "HashKey": "COMPONENT_AT_PI_FLSH_02",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_pi_flsh_2",
        "IsDefault": false
      },
      "1709866683": {
        "HashKey": "COMPONENT_AT_PI_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_PI_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_pi_supp_2",
        "IsDefault": false
      },
      "568543123": {
        "HashKey": "COMPONENT_AT_PI_COMP",
        "NameGXT": "WCT_COMP",
        "DescriptionGXT": "WCD_COMP",
        "Name": "Compensator",
        "Description": "Reduces recoil for rapid fire.",
        "ModelHashKey": "w_at_pi_comp_1",
        "IsDefault": false
      },
      "1550611612": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "w_pi_pistolmk2_camo1",
        "IsDefault": false
      },
      "368550800": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_02",
        "NameGXT": "WCT_CAMO_2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Brushstroke Camo",
        "Description": "",
        "ModelHashKey": "w_pi_pistolmk2_camo2",
        "IsDefault": false
      },
      "2525897947": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_03",
        "NameGXT": "WCT_CAMO_3",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Woodland Camo",
        "Description": "",
        "ModelHashKey": "w_pi_pistolmk2_camo3",
        "IsDefault": false
      },
      "24902297": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_04",
        "NameGXT": "WCT_CAMO_4",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Skull",
        "Description": "",
        "ModelHashKey": "w_pi_pistolmk2_camo4",
        "IsDefault": false
      },
      "4066925682": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_05",
        "NameGXT": "WCT_CAMO_5",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Sessanta Nove",
        "Description": "",
        "ModelHashKey": "w_pi_pistolmk2_camo5",
        "IsDefault": false
      },
      "3710005734": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_06",
        "NameGXT": "WCT_CAMO_6",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Perseus",
        "Description": "",
        "ModelHashKey": "w_pi_pistolmk2_camo6",
        "IsDefault": false
      },
      "3141791350": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_07",
        "NameGXT": "WCT_CAMO_7",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Leopard",
        "Description": "",
        "ModelHashKey": "w_pi_pistolmk2_camo7",
        "IsDefault": false
      },
      "1301287696": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_08",
        "NameGXT": "WCT_CAMO_8",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Zebra",
        "Description": "",
        "ModelHashKey": "w_pi_pistolmk2_camo8",
        "IsDefault": false
      },
      "1597093459": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_09",
        "NameGXT": "WCT_CAMO_9",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Geometric",
        "Description": "",
        "ModelHashKey": "w_pi_pistolmk2_camo9",
        "IsDefault": false
      },
      "1769871776": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_10",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "w_pi_pistolmk2_camo10",
        "IsDefault": false
      },
      "2467084625": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_IND_01",
        "NameGXT": "WCT_CAMO_IND",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Patriotic",
        "Description": "",
        "ModelHashKey": "w_pi_pistolmk2_camo_ind1",
        "IsDefault": false
      },
      "3036451504": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_SLIDE",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "W_PI_PistolMK2_Slide_Camo1",
        "IsDefault": false
      },
      "438243936": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_02_SLIDE",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "W_PI_PistolMK2_Slide_Camo2",
        "IsDefault": false
      },
      "3839888240": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_03_SLIDE",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "W_PI_PistolMK2_Slide_Camo3",
        "IsDefault": false
      },
      "740920107": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_04_SLIDE",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "W_PI_PistolMK2_Slide_Camo4",
        "IsDefault": false
      },
      "3753350949": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_05_SLIDE",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "W_PI_PistolMK2_Slide_Camo5",
        "IsDefault": false
      },
      "1809261196": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_06_SLIDE",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "W_PI_PistolMK2_Slide_Camo6",
        "IsDefault": false
      },
      "2648428428": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_07_SLIDE",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "W_PI_PistolMK2_Slide_Camo7",
        "IsDefault": false
      },
      "3004802348": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_08_SLIDE",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "W_PI_PistolMK2_Slide_Camo8",
        "IsDefault": false
      },
      "3330502162": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_09_SLIDE",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "W_PI_PistolMK2_Slide_Camo9",
        "IsDefault": false
      },
      "1135718771": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_10_SLIDE",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "W_PI_PistolMK2_Slide_Camo10",
        "IsDefault": false
      },
      "1253942266": {
        "HashKey": "COMPONENT_PISTOL_MK2_CAMO_IND_01_SLIDE",
        "NameGXT": "WCT_CAMO_IND",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Patriotic",
        "Description": "",
        "ModelHashKey": "W_PI_PistolMK2_Camo_Sl_Ind1",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WCT_TINT_0",
        "Name": "Classic Black"
      },
      {
        "NameGXT": "WCT_TINT_1",
        "Name": "Classic Gray"
      },
      {
        "NameGXT": "WCT_TINT_2",
        "Name": "Classic Two-Tone"
      },
      {
        "NameGXT": "WCT_TINT_3",
        "Name": "Classic White"
      },
      {
        "NameGXT": "WCT_TINT_4",
        "Name": "Classic Beige"
      },
      {
        "NameGXT": "WCT_TINT_5",
        "Name": "Classic Green"
      },
      {
        "NameGXT": "WCT_TINT_6",
        "Name": "Classic Blue"
      },
      {
        "NameGXT": "WCT_TINT_7",
        "Name": "Classic Earth"
      },
      {
        "NameGXT": "WCT_TINT_8",
        "Name": "Classic Brown & Black"
      },
      {
        "NameGXT": "WCT_TINT_9",
        "Name": "Red Contrast"
      },
      {
        "NameGXT": "WCT_TINT_10",
        "Name": "Blue Contrast"
      },
      {
        "NameGXT": "WCT_TINT_11",
        "Name": "Yellow Contrast"
      },
      {
        "NameGXT": "WCT_TINT_12",
        "Name": "Orange Contrast"
      },
      {
        "NameGXT": "WCT_TINT_13",
        "Name": "Bold Pink"
      },
      {
        "NameGXT": "WCT_TINT_14",
        "Name": "Bold Purple & Yellow"
      },
      {
        "NameGXT": "WCT_TINT_15",
        "Name": "Bold Orange"
      },
      {
        "NameGXT": "WCT_TINT_16",
        "Name": "Bold Green & Purple"
      },
      {
        "NameGXT": "WCT_TINT_17",
        "Name": "Bold Red Features"
      },
      {
        "NameGXT": "WCT_TINT_18",
        "Name": "Bold Green Features"
      },
      {
        "NameGXT": "WCT_TINT_19",
        "Name": "Bold Cyan Features"
      },
      {
        "NameGXT": "WCT_TINT_20",
        "Name": "Bold Yellow Features"
      },
      {
        "NameGXT": "WCT_TINT_21",
        "Name": "Bold Red & White"
      },
      {
        "NameGXT": "WCT_TINT_22",
        "Name": "Bold Blue & White"
      },
      {
        "NameGXT": "WCT_TINT_23",
        "Name": "Metallic Gold"
      },
      {
        "NameGXT": "WCT_TINT_24",
        "Name": "Metallic Platinum"
      },
      {
        "NameGXT": "WCT_TINT_25",
        "Name": "Metallic Gray & Lilac"
      },
      {
        "NameGXT": "WCT_TINT_26",
        "Name": "Metallic Purple & Lime"
      },
      {
        "NameGXT": "WCT_TINT_27",
        "Name": "Metallic Red"
      },
      {
        "NameGXT": "WCT_TINT_28",
        "Name": "Metallic Green"
      },
      {
        "NameGXT": "WCT_TINT_29",
        "Name": "Metallic Blue"
      },
      {
        "NameGXT": "WCT_TINT_30",
        "Name": "Metallic White & Aqua"
      },
      {
        "NameGXT": "WCT_TINT_31",
        "Name": "Metallic Red & Yellow"
      }
    ],
    "LiveryColors": [
      {
        "NameGXT": "WCT_C_TINT_0",
        "Name": "Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_1",
        "Name": "Dark Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_2",
        "Name": "Black"
      },
      {
        "NameGXT": "WCT_C_TINT_3",
        "Name": "White"
      },
      {
        "NameGXT": "WCT_C_TINT_4",
        "Name": "Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_5",
        "Name": "Cyan"
      },
      {
        "NameGXT": "WCT_C_TINT_6",
        "Name": "Aqua"
      },
      {
        "NameGXT": "WCT_C_TINT_7",
        "Name": "Cool Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_8",
        "Name": "Dark Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_9",
        "Name": "Royal Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_10",
        "Name": "Plum"
      },
      {
        "NameGXT": "WCT_C_TINT_11",
        "Name": "Dark Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_12",
        "Name": "Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_13",
        "Name": "Red"
      },
      {
        "NameGXT": "WCT_C_TINT_14",
        "Name": "Wine Red"
      },
      {
        "NameGXT": "WCT_C_TINT_15",
        "Name": "Magenta"
      },
      {
        "NameGXT": "WCT_C_TINT_16",
        "Name": "Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_17",
        "Name": "Salmon"
      },
      {
        "NameGXT": "WCT_C_TINT_18",
        "Name": "Hot Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_19",
        "Name": "Rust Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_20",
        "Name": "Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_21",
        "Name": "Earth"
      },
      {
        "NameGXT": "WCT_C_TINT_22",
        "Name": "Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_23",
        "Name": "Light Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_24",
        "Name": "Dark Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_25",
        "Name": "Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_26",
        "Name": "Light Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_27",
        "Name": "Lime Green"
      },
      {
        "NameGXT": "WCT_C_TINT_28",
        "Name": "Olive"
      },
      {
        "NameGXT": "WCT_C_TINT_29",
        "Name": "Moss"
      },
      {
        "NameGXT": "WCT_C_TINT_30",
        "Name": "Turquoise"
      },
      {
        "NameGXT": "WCT_C_TINT_31",
        "Name": "Dark Green"
      }
    ],
    "DLC": "mpgunrunning"
  },
  "2024373456": {
    "HashKey": "WEAPON_SMG_MK2",
    "NameGXT": "WT_SMG2",
    "damage": 9,
    "DescriptionGXT": "WTD_SMG2",
    "Name": "SMG Mk II",
    "Description": "Lightweight, compact, with a rate of fire to die very messily for: turn any confined space into a kill box at the click of a well-oiled trigger.",
    "Group": "GROUP_SMG",
    "ModelHashKey": "w_sb_smgmk2",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_SMG",
    "Components": {
      "1277460590": {
        "HashKey": "COMPONENT_SMG_MK2_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for regular ammo.",
        "ModelHashKey": "w_sb_smgmk2_mag1",
        "IsDefault": true
      },
      "3112393518": {
        "HashKey": "COMPONENT_SMG_MK2_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for regular ammo.",
        "ModelHashKey": "w_sb_smgmk2_mag2",
        "IsDefault": false
      },
      "2146055916": {
        "HashKey": "COMPONENT_SMG_MK2_CLIP_TRACER",
        "NameGXT": "WCT_CLIP_TR",
        "DescriptionGXT": "WCD_CLIP_TR",
        "Name": "Tracer Rounds",
        "Description": "Bullets with bright visible markers that match the tint of the gun. Standard capacity.",
        "ModelHashKey": "w_sb_smgmk2_mag_tr",
        "AmmoType": "AMMO_SMG_TRACER",
        "IsDefault": false
      },
      "3650233061": {
        "HashKey": "COMPONENT_SMG_MK2_CLIP_INCENDIARY",
        "NameGXT": "WCT_CLIP_INC",
        "DescriptionGXT": "WCD_CLIP_INC",
        "Name": "Incendiary Rounds",
        "Description": "Bullets which include a chance to set targets on fire when shot. Reduced capacity.",
        "ModelHashKey": "w_sb_smgmk2_mag_inc",
        "AmmoType": "AMMO_SMG_INCENDIARY",
        "IsDefault": false
      },
      "974903034": {
        "HashKey": "COMPONENT_SMG_MK2_CLIP_HOLLOWPOINT",
        "NameGXT": "WCT_CLIP_HP",
        "DescriptionGXT": "WCD_CLIP_HP",
        "Name": "Hollow Point Rounds",
        "Description": "Increased damage to targets without Body Armor. Reduced capacity.",
        "ModelHashKey": "w_sb_smgmk2_mag_hp",
        "AmmoType": "AMMO_SMG_HOLLOWPOINT",
        "IsDefault": false
      },
      "190476639": {
        "HashKey": "COMPONENT_SMG_MK2_CLIP_FMJ",
        "NameGXT": "WCT_CLIP_FMJ",
        "DescriptionGXT": "WCD_CLIP_FMJ",
        "Name": "Full Metal Jacket Rounds",
        "Description": "Increased damage to vehicles. Also penetrates bullet resistant and bulletproof vehicle glass. Reduced capacity.",
        "ModelHashKey": "w_sb_smgmk2_mag_fmj",
        "AmmoType": "AMMO_SMG_FMJ",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2681951826": {
        "HashKey": "COMPONENT_AT_SIGHTS_SMG",
        "NameGXT": "WCT_HOLO",
        "DescriptionGXT": "WCD_HOLO",
        "Name": "Holographic Sight",
        "Description": "Accurate sight for close quarters combat.",
        "ModelHashKey": "w_at_sights_smg",
        "IsDefault": false
      },
      "3842157419": {
        "HashKey": "COMPONENT_AT_SCOPE_MACRO_02_SMG_MK2",
        "NameGXT": "WCT_SCOPE_MAC2",
        "DescriptionGXT": "WCD_SCOPE_MAC",
        "Name": "Small Scope",
        "Description": "Standard-range zoom functionality.",
        "ModelHashKey": "w_at_scope_macro_2_mk2",
        "IsDefault": false
      },
      "1038927834": {
        "HashKey": "COMPONENT_AT_SCOPE_SMALL_SMG_MK2",
        "NameGXT": "WCT_SCOPE_SML2",
        "DescriptionGXT": "WCD_SCOPE_SML",
        "Name": "Medium Scope",
        "Description": "Medium-range zoom functionality.",
        "ModelHashKey": "w_at_scope_small_mk2",
        "IsDefault": false
      },
      "3271853210": {
        "HashKey": "COMPONENT_AT_PI_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_PI_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_pi_supp",
        "IsDefault": false
      },
      "3113485012": {
        "HashKey": "COMPONENT_AT_MUZZLE_01",
        "NameGXT": "WCT_MUZZ1",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Flat Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_1",
        "IsDefault": false
      },
      "3362234491": {
        "HashKey": "COMPONENT_AT_MUZZLE_02",
        "NameGXT": "WCT_MUZZ2",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Tactical Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_2",
        "IsDefault": false
      },
      "3725708239": {
        "HashKey": "COMPONENT_AT_MUZZLE_03",
        "NameGXT": "WCT_MUZZ3",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Fat-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_3",
        "IsDefault": false
      },
      "3968886988": {
        "HashKey": "COMPONENT_AT_MUZZLE_04",
        "NameGXT": "WCT_MUZZ4",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Precision Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_4",
        "IsDefault": false
      },
      "48731514": {
        "HashKey": "COMPONENT_AT_MUZZLE_05",
        "NameGXT": "WCT_MUZZ5",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Heavy Duty Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_5",
        "IsDefault": false
      },
      "880736428": {
        "HashKey": "COMPONENT_AT_MUZZLE_06",
        "NameGXT": "WCT_MUZZ6",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Slanted Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_6",
        "IsDefault": false
      },
      "1303784126": {
        "HashKey": "COMPONENT_AT_MUZZLE_07",
        "NameGXT": "WCT_MUZZ7",
        "DescriptionGXT": "WCD_MUZZ",
        "Name": "Split-End Muzzle Brake",
        "Description": "Reduces recoil during rapid fire.",
        "ModelHashKey": "w_at_muzzle_7",
        "IsDefault": false
      },
      "3641720545": {
        "HashKey": "COMPONENT_AT_SB_BARREL_01",
        "NameGXT": "WCT_BARR",
        "DescriptionGXT": "WCD_BARR",
        "Name": "Default Barrel",
        "Description": "Stock barrel attachment.",
        "ModelHashKey": "w_at_sb_barrel_1",
        "IsDefault": true
      },
      "2774849419": {
        "HashKey": "COMPONENT_AT_SB_BARREL_02",
        "NameGXT": "WCT_BARR2",
        "DescriptionGXT": "WCD_BARR2",
        "Name": "Heavy Barrel",
        "Description": "Increases damage dealt to long-range targets.",
        "ModelHashKey": "w_at_sb_barrel_2",
        "IsDefault": false
      },
      "3298267239": {
        "HashKey": "COMPONENT_SMG_MK2_CAMO",
        "NameGXT": "WCT_CAMO_1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Digital Camo",
        "Description": "",
        "ModelHashKey": "w_at_smgmk2_camo1",
        "IsDefault": false
      },
      "940943685": {
        "HashKey": "COMPONENT_SMG_MK2_CAMO_02",
        "NameGXT": "WCT_CAMO_2",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Brushstroke Camo",
        "Description": "",
        "ModelHashKey": "w_at_smgmk2_camo2",
        "IsDefault": false
      },
      "1263226800": {
        "HashKey": "COMPONENT_SMG_MK2_CAMO_03",
        "NameGXT": "WCT_CAMO_3",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Woodland Camo",
        "Description": "",
        "ModelHashKey": "w_at_smgmk2_camo3",
        "IsDefault": false
      },
      "3966931456": {
        "HashKey": "COMPONENT_SMG_MK2_CAMO_04",
        "NameGXT": "WCT_CAMO_4",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Skull",
        "Description": "",
        "ModelHashKey": "w_at_smgmk2_camo4",
        "IsDefault": false
      },
      "1224100642": {
        "HashKey": "COMPONENT_SMG_MK2_CAMO_05",
        "NameGXT": "WCT_CAMO_5",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Sessanta Nove",
        "Description": "",
        "ModelHashKey": "w_at_smgmk2_camo5",
        "IsDefault": false
      },
      "899228776": {
        "HashKey": "COMPONENT_SMG_MK2_CAMO_06",
        "NameGXT": "WCT_CAMO_6",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Perseus",
        "Description": "",
        "ModelHashKey": "w_at_smgmk2_camo6",
        "IsDefault": false
      },
      "616006309": {
        "HashKey": "COMPONENT_SMG_MK2_CAMO_07",
        "NameGXT": "WCT_CAMO_7",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Leopard",
        "Description": "",
        "ModelHashKey": "w_at_smgmk2_camo7",
        "IsDefault": false
      },
      "2733014785": {
        "HashKey": "COMPONENT_SMG_MK2_CAMO_08",
        "NameGXT": "WCT_CAMO_8",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Zebra",
        "Description": "",
        "ModelHashKey": "w_at_smgmk2_camo8",
        "IsDefault": false
      },
      "572063080": {
        "HashKey": "COMPONENT_SMG_MK2_CAMO_09",
        "NameGXT": "WCT_CAMO_9",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Geometric",
        "Description": "",
        "ModelHashKey": "w_at_smgmk2_camo9",
        "IsDefault": false
      },
      "1170588613": {
        "HashKey": "COMPONENT_SMG_MK2_CAMO_10",
        "NameGXT": "WCT_CAMO_10",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Boom!",
        "Description": "",
        "ModelHashKey": "w_at_smgmk2_camo10",
        "IsDefault": false
      },
      "966612367": {
        "HashKey": "COMPONENT_SMG_MK2_CAMO_IND_01",
        "NameGXT": "WCT_CAMO_IND",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Patriotic",
        "Description": "",
        "ModelHashKey": "w_at_smgmk2_camo_ind1",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WCT_TINT_0",
        "Name": "Classic Black"
      },
      {
        "NameGXT": "WCT_TINT_1",
        "Name": "Classic Gray"
      },
      {
        "NameGXT": "WCT_TINT_2",
        "Name": "Classic Two-Tone"
      },
      {
        "NameGXT": "WCT_TINT_3",
        "Name": "Classic White"
      },
      {
        "NameGXT": "WCT_TINT_4",
        "Name": "Classic Beige"
      },
      {
        "NameGXT": "WCT_TINT_5",
        "Name": "Classic Green"
      },
      {
        "NameGXT": "WCT_TINT_6",
        "Name": "Classic Blue"
      },
      {
        "NameGXT": "WCT_TINT_7",
        "Name": "Classic Earth"
      },
      {
        "NameGXT": "WCT_TINT_8",
        "Name": "Classic Brown & Black"
      },
      {
        "NameGXT": "WCT_TINT_9",
        "Name": "Red Contrast"
      },
      {
        "NameGXT": "WCT_TINT_10",
        "Name": "Blue Contrast"
      },
      {
        "NameGXT": "WCT_TINT_11",
        "Name": "Yellow Contrast"
      },
      {
        "NameGXT": "WCT_TINT_12",
        "Name": "Orange Contrast"
      },
      {
        "NameGXT": "WCT_TINT_13",
        "Name": "Bold Pink"
      },
      {
        "NameGXT": "WCT_TINT_14",
        "Name": "Bold Purple & Yellow"
      },
      {
        "NameGXT": "WCT_TINT_15",
        "Name": "Bold Orange"
      },
      {
        "NameGXT": "WCT_TINT_16",
        "Name": "Bold Green & Purple"
      },
      {
        "NameGXT": "WCT_TINT_17",
        "Name": "Bold Red Features"
      },
      {
        "NameGXT": "WCT_TINT_18",
        "Name": "Bold Green Features"
      },
      {
        "NameGXT": "WCT_TINT_19",
        "Name": "Bold Cyan Features"
      },
      {
        "NameGXT": "WCT_TINT_20",
        "Name": "Bold Yellow Features"
      },
      {
        "NameGXT": "WCT_TINT_21",
        "Name": "Bold Red & White"
      },
      {
        "NameGXT": "WCT_TINT_22",
        "Name": "Bold Blue & White"
      },
      {
        "NameGXT": "WCT_TINT_23",
        "Name": "Metallic Gold"
      },
      {
        "NameGXT": "WCT_TINT_24",
        "Name": "Metallic Platinum"
      },
      {
        "NameGXT": "WCT_TINT_25",
        "Name": "Metallic Gray & Lilac"
      },
      {
        "NameGXT": "WCT_TINT_26",
        "Name": "Metallic Purple & Lime"
      },
      {
        "NameGXT": "WCT_TINT_27",
        "Name": "Metallic Red"
      },
      {
        "NameGXT": "WCT_TINT_28",
        "Name": "Metallic Green"
      },
      {
        "NameGXT": "WCT_TINT_29",
        "Name": "Metallic Blue"
      },
      {
        "NameGXT": "WCT_TINT_30",
        "Name": "Metallic White & Aqua"
      },
      {
        "NameGXT": "WCT_TINT_31",
        "Name": "Metallic Red & Yellow"
      }
    ],
    "LiveryColors": [
      {
        "NameGXT": "WCT_C_TINT_0",
        "Name": "Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_1",
        "Name": "Dark Gray"
      },
      {
        "NameGXT": "WCT_C_TINT_2",
        "Name": "Black"
      },
      {
        "NameGXT": "WCT_C_TINT_3",
        "Name": "White"
      },
      {
        "NameGXT": "WCT_C_TINT_4",
        "Name": "Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_5",
        "Name": "Cyan"
      },
      {
        "NameGXT": "WCT_C_TINT_6",
        "Name": "Aqua"
      },
      {
        "NameGXT": "WCT_C_TINT_7",
        "Name": "Cool Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_8",
        "Name": "Dark Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_9",
        "Name": "Royal Blue"
      },
      {
        "NameGXT": "WCT_C_TINT_10",
        "Name": "Plum"
      },
      {
        "NameGXT": "WCT_C_TINT_11",
        "Name": "Dark Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_12",
        "Name": "Purple"
      },
      {
        "NameGXT": "WCT_C_TINT_13",
        "Name": "Red"
      },
      {
        "NameGXT": "WCT_C_TINT_14",
        "Name": "Wine Red"
      },
      {
        "NameGXT": "WCT_C_TINT_15",
        "Name": "Magenta"
      },
      {
        "NameGXT": "WCT_C_TINT_16",
        "Name": "Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_17",
        "Name": "Salmon"
      },
      {
        "NameGXT": "WCT_C_TINT_18",
        "Name": "Hot Pink"
      },
      {
        "NameGXT": "WCT_C_TINT_19",
        "Name": "Rust Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_20",
        "Name": "Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_21",
        "Name": "Earth"
      },
      {
        "NameGXT": "WCT_C_TINT_22",
        "Name": "Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_23",
        "Name": "Light Orange"
      },
      {
        "NameGXT": "WCT_C_TINT_24",
        "Name": "Dark Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_25",
        "Name": "Yellow"
      },
      {
        "NameGXT": "WCT_C_TINT_26",
        "Name": "Light Brown"
      },
      {
        "NameGXT": "WCT_C_TINT_27",
        "Name": "Lime Green"
      },
      {
        "NameGXT": "WCT_C_TINT_28",
        "Name": "Olive"
      },
      {
        "NameGXT": "WCT_C_TINT_29",
        "Name": "Moss"
      },
      {
        "NameGXT": "WCT_C_TINT_30",
        "Name": "Turquoise"
      },
      {
        "NameGXT": "WCT_C_TINT_31",
        "Name": "Dark Green"
      }
    ],
    "DLC": "mpgunrunning"
  },
  "2343591895": {
    "HashKey": "WEAPON_FLASHLIGHT",
    "NameGXT": "WT_FLASHLIGHT",
    "damage": 10,
    "DescriptionGXT": "WTD_FLASHLIGHT",
    "Name": "Flashlight",
    "Description": "Intensify your fear of the dark with this short range, battery-powered light source. Handy for blunt force trauma. Part of The Halloween Surprise.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_flashlight",
    "DefaultClipSize": 0,
    "Components": {
      "3719772431": {
        "HashKey": "COMPONENT_FLASHLIGHT_LIGHT",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_me_flashlight_flash",
        "IsDefault": true
      }
    },
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mphalloween"
  },
  "1198879012": {
    "HashKey": "WEAPON_FLAREGUN",
    "NameGXT": "WT_FLAREGUN",
    "DescriptionGXT": "WTD_FLAREGUN",
    "Name": "Flare Gun",
    "Description": "Use to signal distress or drunken excitement. Warning: pointing directly at individuals may cause spontaneous combustion. Part of The Heists Update.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "w_pi_flaregun",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_FLAREGUN",
    "Components": {
      "2481569177": {
        "HashKey": "COMPONENT_FLAREGUN_CLIP_01",
        "NameGXT": "WCT_INVALID",
        "DescriptionGXT": "WCT_INVALID",
        "Name": "",
        "Description": "",
        "ModelHashKey": "w_pi_flaregun_mag1",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINTDF",
        "Name": "Default tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpheist"
  },
  "727643628": {
    "HashKey": "WEAPON_CERAMICPISTOL",
    "NameGXT": "WT_CERPST",
    "damage": 11,
    "DescriptionGXT": "WTD_CERPST",
    "Name": "Ceramic Pistol",
    "Description": "Not your grandma's ceramics. Although this pint-sized pistol is small enough to fit into her purse and won't set off a metal detector.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "w_pi_ceramic_pistol",
    "DefaultClipSize": 12,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "1423184737": {
        "HashKey": "COMPONENT_CERAMICPISTOL_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for regular ammo.",
        "ModelHashKey": "W_PI_Ceramic_Mag1",
        "IsDefault": true
      },
      "2172153001": {
        "HashKey": "COMPONENT_CERAMICPISTOL_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for regular ammo.",
        "ModelHashKey": "w_pi_sns_pistol_mag2",
        "IsDefault": false
      },
      "2466764538": {
        "HashKey": "COMPONENT_CERAMICPISTOL_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_PI_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "W_PI_Ceramic_Supp",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpheist3"
  },
  "3126027122": {
    "HashKey": "WEAPON_HAZARDCAN",
    "NameGXT": "WT_HAZARDCAN",
    "DescriptionGXT": "WTD_HAZARDCAN",
    "Name": "Hazardous Jerry Can",
    "Description": "",
    "Group": "GROUP_PETROLCAN",
    "ModelHashKey": "w_ch_jerrycan",
    "DefaultClipSize": 4500,
    "AmmoType": "AMMO_HAZARDCAN",
    "Components": {},
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpheist3"
  },
  "2441047180": {
    "HashKey": "WEAPON_NAVYREVOLVER",
    "NameGXT": "WT_REV_NV",
    "damage": 53,
    "DescriptionGXT": "WTD_REV_NV",
    "Name": "Navy Revolver",
    "Description": "A true museum piece. You want to know how the West was won - slow reload speeds and a whole heap of bloodshed.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "w_pi_wep2_gun",
    "DefaultClipSize": 6,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "2556346983": {
        "HashKey": "COMPONENT_NAVYREVOLVER_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_REV_NV_CLIP",
        "Name": "Default Clip",
        "Description": "",
        "ModelHashKey": "w_pi_wep2_gun_mag1",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINTDF",
        "Name": "Default tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpheist3"
  },
  "94989220": {
    "HashKey": "WEAPON_COMBATSHOTGUN",
    "NameGXT": "WT_CMBSHGN",
    "damage": 4,
    "DescriptionGXT": "WTD_CMBSHGN",
    "Name": "Combat Shotgun",
    "Description": "There's only one semi-automatic shotgun with a fire rate that sets the LSFD alarm bells ringing, and you're looking at it.",
    "Group": "GROUP_SHOTGUN",
    "ModelHashKey": "w_sg_pumpshotgunh4",
    "DefaultClipSize": 6,
    "AmmoType": "AMMO_SHOTGUN",
    "Components": {
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2205435306": {
        "HashKey": "COMPONENT_AT_AR_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp",
        "IsDefault": false
      },
      "3323278933": {
        "HashKey": "COMPONENT_COMBATSHOTGUN_CLIP_01",
        "NameGXT": "WCT_SHELL",
        "DescriptionGXT": "WCD_SHELL",
        "Name": "Default Shells",
        "Description": "Standard shotgun ammunition.",
        "ModelHashKey": "w_sg_pumpshotgunh4_mag1",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpheist4"
  },
  "1470379660": {
    "HashKey": "WEAPON_GADGETPISTOL",
    "damage": 65,
    "NameGXT": "WT_GDGTPST",
    "DescriptionGXT": "WTD_GDGTPST",
    "Name": "Perico Pistol",
    "Description": "A deadly shot. Don't be precious. You won't scuff the titanium nitride finish.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "w_pi_singleshoth4",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "2871488073": {
        "HashKey": "COMPONENT_GADGETPISTOL_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Default Clip",
        "Description": "",
        "ModelHashKey": "w_pi_singleshoth4_shell",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpheist4"
  },
  "2636060646": {
    "HashKey": "WEAPON_MILITARYRIFLE",
    "NameGXT": "WT_MLTRYRFL",
    "damage": 12.5,
    "DescriptionGXT": "WTD_MLTRYRFL",
    "Name": "Military Rifle",
    "Description": "This immensely powerful assault rifle was designed for highly qualified, exceptionally skilled soldiers. Yes, you can buy it.",
    "Group": "GROUP_RIFLE",
    "ModelHashKey": "w_ar_bullpuprifleh4",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_RIFLE",
    "Components": {
      "759617595": {
        "HashKey": "COMPONENT_MILITARYRIFLE_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for regular ammo.",
        "ModelHashKey": "w_ar_bullpuprifleh4_mag1",
        "IsDefault": true
      },
      "1749732930": {
        "HashKey": "COMPONENT_MILITARYRIFLE_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for regular ammo.",
        "ModelHashKey": "w_ar_bullpuprifleh4_mag2",
        "IsDefault": false
      },
      "1803744149": {
        "HashKey": "COMPONENT_MILITARYRIFLE_SIGHT_01",
        "NameGXT": "WCT_MRFL_SIGHT",
        "DescriptionGXT": "WCD_MRFL_SIGHT",
        "Name": "Iron Sights",
        "Description": "Default rail-mounted iron sights.",
        "ModelHashKey": "w_ar_bullpuprifleh4_sight",
        "IsDefault": true
      },
      "2855028148": {
        "HashKey": "COMPONENT_AT_SCOPE_SMALL",
        "NameGXT": "WCT_SCOPE_SML",
        "DescriptionGXT": "WCD_SCOPE_SML",
        "Name": "Scope",
        "Description": "Medium-range zoom functionality.",
        "ModelHashKey": "w_at_scope_small",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2205435306": {
        "HashKey": "COMPONENT_AT_AR_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpheist4"
  },
  "2460120199": {
    "HashKey": "WEAPON_DAGGER",
    "NameGXT": "WT_DAGGER",
    "damage": 18,
    "DescriptionGXT": "WTD_DAGGER",
    "Name": "Antique Cavalry Dagger",
    "Description": "You've been rocking the pirate-chic look for a while, but no vicious weapon to complete the look? Get this dagger with guarded hilt. Part of The \"I'm Not a Hipster\" Update.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_dagger",
    "DefaultClipSize": 0,
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mphipster"
  },
  "137902532": {
    "HashKey": "WEAPON_VINTAGEPISTOL",
    "NameGXT": "WT_VPISTOL",
    "damage": 12,
    "DescriptionGXT": "WTD_VPISTOL",
    "Name": "Vintage Pistol",
    "Description": "What you really need is a more recognizable gun. Stand out from the crowd at an armed robbery with this engraved pistol. Part of The \"I'm Not a Hipster\" Update.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "w_pi_vintage_pistol",
    "DefaultClipSize": 7,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "1168357051": {
        "HashKey": "COMPONENT_VINTAGEPISTOL_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_VPST_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Vintage Pistol.",
        "ModelHashKey": "w_pi_vintage_pistol_mag1",
        "IsDefault": true
      },
      "867832552": {
        "HashKey": "COMPONENT_VINTAGEPISTOL_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_VPST_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Vintage Pistol.",
        "ModelHashKey": "w_pi_vintage_pistol_mag2",
        "IsDefault": false
      },
      "3271853210": {
        "HashKey": "COMPONENT_AT_PI_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_PI_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_pi_supp",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mphipster"
  },
  "2138347493": {
    "HashKey": "WEAPON_FIREWORK",
    "NameGXT": "WT_FIREWRK",
    "DescriptionGXT": "WTD_FIREWRK",
    "Name": "Firework Launcher",
    "Description": "Put the flair back in flare with this firework launcher, guaranteed to raise some oohs and aahs from the crowd. Part of the Independence Day Special.",
    "Group": "GROUP_HEAVY",
    "ModelHashKey": "w_lr_firework",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_FIREWORK",
    "Components": {
      "3840197261": {
        "HashKey": "COMPONENT_FIREWORK_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_FWRK_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Firework Launcher.",
        "ModelHashKey": "",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINTDF",
        "Name": "Default tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpindependence"
  },
  "2828843422": {
    "HashKey": "WEAPON_MUSKET",
    "NameGXT": "WT_MUSKET",
    "damage": 5,
    "DescriptionGXT": "WTD_MUSKET",
    "Name": "Musket",
    "Description": "Armed with nothing but muskets and a superiority complex, the Brits took over half the world. Own the gun that built an empire. Part of the Independence Day Special.",
    "Group": "GROUP_SNIPER",
    "ModelHashKey": "w_ar_musket",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_SHOTGUN",
    "Components": {
      "1322387263": {
        "HashKey": "COMPONENT_MUSKET_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_MSKT_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Musket.",
        "ModelHashKey": "p_w_ar_musket_chrg",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINTDF",
        "Name": "Default tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpindependence"
  },
  "3713923289": {
    "HashKey": "WEAPON_MACHETE",
    "NameGXT": "WT_MACHETE",
    "damage": 25,
    "DescriptionGXT": "WTD_MACHETE",
    "Name": "Machete",
    "Description": "America's West African arms trade isn't just about giving. Rediscover the simple life with this rusty cleaver. Part of Lowriders.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_machette_lr",
    "DefaultClipSize": 0,
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mplowrider"
  },
  "3675956304": {
    "HashKey": "WEAPON_MACHINEPISTOL",
    "NameGXT": "WT_MCHPIST",
    "damage": 9,
    "DescriptionGXT": "WTD_MCHPIST",
    "Name": "Machine Pistol",
    "Description": "This fully automatic is the snare drum to your twin-engine V8 bass: no drive-by sounds quite right without it. Part of Lowriders.",
    "Group": "GROUP_SMG",
    "ModelHashKey": "w_sb_compactsmg",
    "DefaultClipSize": 12,
    "AmmoType": "AMMO_SMG",
    "Components": {
      "1198425599": {
        "HashKey": "COMPONENT_MACHINEPISTOL_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_MCHP_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Machine Pistol.",
        "ModelHashKey": "w_sb_compactsmg_mag1",
        "IsDefault": true
      },
      "3106695545": {
        "HashKey": "COMPONENT_MACHINEPISTOL_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_MCHP_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Machine Pistol.",
        "ModelHashKey": "w_sb_compactsmg_mag2",
        "IsDefault": false
      },
      "2850671348": {
        "HashKey": "COMPONENT_MACHINEPISTOL_CLIP_03",
        "NameGXT": "WCT_CLIP_DRM",
        "DescriptionGXT": "WCD_CLIP3",
        "Name": "Drum Magazine",
        "Description": "Expanded capacity and slower reload.",
        "ModelHashKey": "w_sb_compactsmg_boxmag",
        "IsDefault": false
      },
      "3271853210": {
        "HashKey": "COMPONENT_AT_PI_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_PI_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_pi_supp",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mplowrider"
  },
  "1649403952": {
    "HashKey": "WEAPON_COMPACTRIFLE",
    "NameGXT": "WT_CMPRIFLE",
    "damage": 11.5,
    "DescriptionGXT": "WTD_CMPRIFLE",
    "Name": "Compact Rifle",
    "Description": "Half the size, all the power, double the recoil: there's no riskier way to say \"I'm compensating for something\". Part of Lowriders: Custom Classics.",
    "Group": "GROUP_RIFLE",
    "ModelHashKey": "w_ar_assaultrifle_smg",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_RIFLE",
    "Components": {
      "1363085923": {
        "HashKey": "COMPONENT_COMPACTRIFLE_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CMPR_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Compact Rifle.",
        "ModelHashKey": "w_ar_assaultrifle_smg_mag1",
        "IsDefault": true
      },
      "1509923832": {
        "HashKey": "COMPONENT_COMPACTRIFLE_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_CMPR_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Compact Rifle.",
        "ModelHashKey": "w_ar_assaultrifle_smg_mag2",
        "IsDefault": false
      },
      "3322377230": {
        "HashKey": "COMPONENT_COMPACTRIFLE_CLIP_03",
        "NameGXT": "WCT_CLIP_DRM",
        "DescriptionGXT": "WCD_CLIP3",
        "Name": "Drum Magazine",
        "Description": "Expanded capacity and slower reload.",
        "ModelHashKey": "w_ar_assaultrifle_boxmag",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mplowrider2"
  },
  "4019527611": {
    "HashKey": "WEAPON_DBSHOTGUN",
    "NameGXT": "WT_DBSHGN",
    "damage": 5,
    "DescriptionGXT": "WTD_DBSHGN",
    "Name": "Double Barrel Shotgun",
    "Description": "Do one thing, do it well. Who needs a high rate of fire when your first shot turns the other guy into a fine mist? Part of Lowriders: Custom Classics.",
    "Group": "GROUP_SHOTGUN",
    "ModelHashKey": "w_sg_doublebarrel",
    "DefaultClipSize": 2,
    "AmmoType": "AMMO_SHOTGUN",
    "Components": {
      "703231006": {
        "HashKey": "COMPONENT_DBSHOTGUN_CLIP_01",
        "NameGXT": "WCT_INVALID",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "",
        "Description": "",
        "ModelHashKey": "w_sg_doublebarrel_mag1",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINTDF",
        "Name": "Default tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mplowrider2"
  },
  "984333226": {
    "HashKey": "WEAPON_HEAVYSHOTGUN",
    "NameGXT": "WT_HVYSHGN",
    "damage": 25,
    "DescriptionGXT": "WTD_HVYSHGN",
    "Name": "Heavy Shotgun",
    "Description": "The weapon to reach for when you absolutely need to make a horrible mess of the room. Best used near easy-wipe surfaces only. Part of the Last Team Standing Update.",
    "Group": "GROUP_SHOTGUN",
    "ModelHashKey": "w_sg_heavyshotgun",
    "DefaultClipSize": 6,
    "AmmoType": "AMMO_SHOTGUN",
    "Components": {
      "844049759": {
        "HashKey": "COMPONENT_HEAVYSHOTGUN_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_HVSG_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Heavy Shotgun.",
        "ModelHashKey": "w_sg_heavyshotgun_mag1",
        "IsDefault": true
      },
      "2535257853": {
        "HashKey": "COMPONENT_HEAVYSHOTGUN_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_HVSG_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Heavy Shotgun.",
        "ModelHashKey": "w_sg_heavyshotgun_mag2",
        "IsDefault": false
      },
      "2294798931": {
        "HashKey": "COMPONENT_HEAVYSHOTGUN_CLIP_03",
        "NameGXT": "WCT_CLIP_DRM",
        "DescriptionGXT": "WCD_CLIP3",
        "Name": "Drum Magazine",
        "Description": "Expanded capacity and slower reload.",
        "ModelHashKey": "w_sg_heavyshotgun_boxmag",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2805810788": {
        "HashKey": "COMPONENT_AT_AR_SUPP_02",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP2",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp_02",
        "IsDefault": false
      },
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mplts"
  },
  "3342088282": {
    "HashKey": "WEAPON_MARKSMANRIFLE",
    "NameGXT": "WT_MKRIFLE",
    "damage": 21.5,
    "DescriptionGXT": "WTD_MKRIFLE",
    "Name": "Marksman Rifle",
    "Description": "Whether you're up close or a disconcertingly long way away, this weapon will get the job done. A multi-range tool for tools. Part of the Last Team Standing Update.",
    "Group": "GROUP_SNIPER",
    "ModelHashKey": "w_sr_marksmanrifle",
    "DefaultClipSize": 8,
    "AmmoType": "AMMO_SNIPER",
    "Components": {
      "3627761985": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_MKRF_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Marksman Rifle.",
        "ModelHashKey": "w_sr_marksmanrifle_mag1",
        "IsDefault": true
      },
      "3439143621": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_MKRF_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Marksman Rifle.",
        "ModelHashKey": "w_sr_marksmanrifle_mag2",
        "IsDefault": false
      },
      "471997210": {
        "HashKey": "COMPONENT_AT_SCOPE_LARGE_FIXED_ZOOM",
        "NameGXT": "WCT_SCOPE_LRG",
        "DescriptionGXT": "WCD_SCOPE_LRF",
        "Name": "Scope",
        "Description": "Long-range fixed zoom functionality.",
        "ModelHashKey": "w_at_scope_large",
        "IsDefault": true
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2205435306": {
        "HashKey": "COMPONENT_AT_AR_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp",
        "IsDefault": false
      },
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      },
      "371102273": {
        "HashKey": "COMPONENT_MARKSMANRIFLE_VARMOD_LUXE",
        "NameGXT": "WCT_VAR_GOLD",
        "DescriptionGXT": "WCD_VAR_MKRF",
        "Name": "Yusuf Amir Luxury Finish",
        "Description": "",
        "ModelHashKey": "W_SR_MarksmanRifle_Luxe",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mplts"
  },
  "3347935668": {
    "HashKey": "WEAPON_HEAVYRIFLE",
    "NameGXT": "WT_HEAVYRIFLE",
    "DescriptionGXT": "WTD_HEAVYRIFLE",
    "Name": "Heavy Rifle",
    "damage": 10,
    "Description": "The no-holds-barred 30-round answer to that eternal question, how do I get this guy off my back?",
    "Group": "GROUP_RIFLE",
    "ModelHashKey": "w_ar_heavyrifleh",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_RIFLE",
    "Components": {
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      },
      "1525977990": {
        "HashKey": "COMPONENT_HEAVYRIFLE_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_HVRFL_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Heavy Rifle.",
        "ModelHashKey": "W_AR_SpecialCarbine_mag1",
        "IsDefault": true
      },
      "1824470811": {
        "HashKey": "COMPONENT_HEAVYRIFLE_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_HVRFL_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Heavy Rifle.",
        "ModelHashKey": "W_AR_SpecialCarbine_mag2",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "2205435306": {
        "HashKey": "COMPONENT_AT_AR_SUPP",
        "NameGXT": "WCT_SUPP",
        "DescriptionGXT": "WCD_AR_SUPP",
        "Name": "Suppressor",
        "Description": "Reduces noise and muzzle flash.",
        "ModelHashKey": "w_at_ar_supp",
        "IsDefault": false
      },
      "2698550338": {
        "HashKey": "COMPONENT_AT_SCOPE_MEDIUM",
        "NameGXT": "WCT_SCOPE_LRG",
        "DescriptionGXT": "WCD_SCOPE_LRG",
        "Name": "Scope",
        "Description": "Long-range zoom functionality.",
        "ModelHashKey": "w_at_scope_medium",
        "IsDefault": false
      },
      "3017917522": {
        "HashKey": "COMPONENT_HEAVYRIFLE_SIGHT_01",
        "NameGXT": "WCT_HVYRFLE_SIG",
        "DescriptionGXT": "WCD_HVRFL_SIG",
        "Name": "Iron Sights",
        "Description": "Default rail-mounted iron sights.",
        "ModelHashKey": "W_AR_HeavyRifleH_Sight",
        "IsDefault": true
      },
      "3969903833": {
        "HashKey": "COMPONENT_HEAVYRIFLE_CAMO1",
        "NameGXT": "WCT_VAR_FAM",
        "DescriptionGXT": "WCD_VAR_HRF",
        "Name": "Families Finish",
        "Description": "",
        "ModelHashKey": "W_AT_HRH_Camo1",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpsecurity"
  },
  "171789620": {
    "HashKey": "WEAPON_COMBATPDW",
    "NameGXT": "WT_COMBATPDW",
    "damage": 9.5,
    "DescriptionGXT": "WTD_COMBATPDW",
    "Name": "Combat PDW",
    "Description": "Who said personal weaponry couldn't be worthy of military personnel? Thanks to our lobbyists, not Congress. Integral suppressor. Part of the Ill-Gotten Gains Update Part 1.",
    "Group": "GROUP_SMG",
    "ModelHashKey": "W_SB_PDW",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_SMG",
    "Components": {
      "1125642654": {
        "HashKey": "COMPONENT_COMBATPDW_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_PDW_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Combat PDW.",
        "ModelHashKey": "W_SB_PDW_Mag1",
        "IsDefault": true
      },
      "860508675": {
        "HashKey": "COMPONENT_COMBATPDW_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_PDW_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Combat PDW.",
        "ModelHashKey": "W_SB_PDW_Mag2",
        "IsDefault": false
      },
      "1857603803": {
        "HashKey": "COMPONENT_COMBATPDW_CLIP_03",
        "NameGXT": "WCT_CLIP_DRM",
        "DescriptionGXT": "WCD_CLIP3",
        "Name": "Drum Magazine",
        "Description": "Expanded capacity and slower reload.",
        "ModelHashKey": "w_sb_pdw_boxmag",
        "IsDefault": false
      },
      "2076495324": {
        "HashKey": "COMPONENT_AT_AR_FLSH",
        "NameGXT": "WCT_FLASH",
        "DescriptionGXT": "WCD_FLASH",
        "Name": "Flashlight",
        "Description": "Aids low light target acquisition.",
        "ModelHashKey": "w_at_ar_flsh",
        "IsDefault": false
      },
      "202788691": {
        "HashKey": "COMPONENT_AT_AR_AFGRIP",
        "NameGXT": "WCT_GRIP",
        "DescriptionGXT": "WCD_GRIP",
        "Name": "Grip",
        "Description": "Improves weapon accuracy.",
        "ModelHashKey": "w_at_ar_afgrip",
        "IsDefault": false
      },
      "2855028148": {
        "HashKey": "COMPONENT_AT_SCOPE_SMALL",
        "NameGXT": "WCT_SCOPE_SML",
        "DescriptionGXT": "WCD_SCOPE_SML",
        "Name": "Scope",
        "Description": "Medium-range zoom functionality.",
        "ModelHashKey": "w_at_scope_small",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpluxe"
  },
  "3638508604": {
    "HashKey": "WEAPON_KNUCKLE",
    "NameGXT": "WT_KNUCKLE",
    "damage": 10,
    "DescriptionGXT": "WTD_KNUCKLE",
    "Name": "Knuckle Duster",
    "Description": "Perfect for knocking out gold teeth, or as a gift to the trophy partner who has everything. Part of The Ill-Gotten Gains Update Part 2.",
    "Group": "GROUP_UNARMED",
    "ModelHashKey": "W_ME_Knuckle",
    "DefaultClipSize": 0,
    "Components": {
      "4081463091": {
        "HashKey": "COMPONENT_KNUCKLE_VARMOD_BASE",
        "NameGXT": "WCT_KNUCK_01",
        "DescriptionGXT": "WCD_VAR_DESC",
        "Name": "Base Model",
        "Description": "",
        "ModelHashKey": "W_ME_Knuckle",
        "IsDefault": false
      },
      "3323197061": {
        "HashKey": "COMPONENT_KNUCKLE_VARMOD_PIMP",
        "NameGXT": "WCT_KNUCK_02",
        "DescriptionGXT": "WCD_VAR_DESC",
        "Name": "The Pimp",
        "Description": "",
        "ModelHashKey": "W_ME_Knuckle_02",
        "IsDefault": false
      },
      "4007263587": {
        "HashKey": "COMPONENT_KNUCKLE_VARMOD_BALLAS",
        "NameGXT": "WCT_KNUCK_BG",
        "DescriptionGXT": "WCD_VAR_DESC",
        "Name": "The Ballas",
        "Description": "",
        "ModelHashKey": "W_ME_Knuckle_BG",
        "IsDefault": false
      },
      "1351683121": {
        "HashKey": "COMPONENT_KNUCKLE_VARMOD_DOLLAR",
        "NameGXT": "WCT_KNUCK_DLR",
        "DescriptionGXT": "WCD_VAR_DESC",
        "Name": "The Hustler",
        "Description": "",
        "ModelHashKey": "W_ME_Knuckle_DLR",
        "IsDefault": false
      },
      "2539772380": {
        "HashKey": "COMPONENT_KNUCKLE_VARMOD_DIAMOND",
        "NameGXT": "WCT_KNUCK_DMD",
        "DescriptionGXT": "WCD_VAR_DESC",
        "Name": "The Rock",
        "Description": "",
        "ModelHashKey": "W_ME_Knuckle_DMD",
        "IsDefault": false
      },
      "2112683568": {
        "HashKey": "COMPONENT_KNUCKLE_VARMOD_HATE",
        "NameGXT": "WCT_KNUCK_HT",
        "DescriptionGXT": "WCD_VAR_DESC",
        "Name": "The Hater",
        "Description": "",
        "ModelHashKey": "W_ME_Knuckle_HT",
        "IsDefault": false
      },
      "1062111910": {
        "HashKey": "COMPONENT_KNUCKLE_VARMOD_LOVE",
        "NameGXT": "WCT_KNUCK_LV",
        "DescriptionGXT": "WCD_VAR_DESC",
        "Name": "The Lover",
        "Description": "",
        "ModelHashKey": "W_ME_Knuckle_LV",
        "IsDefault": false
      },
      "146278587": {
        "HashKey": "COMPONENT_KNUCKLE_VARMOD_PLAYER",
        "NameGXT": "WCT_KNUCK_PC",
        "DescriptionGXT": "WCD_VAR_DESC",
        "Name": "The Player",
        "Description": "",
        "ModelHashKey": "W_ME_Knuckle_PC",
        "IsDefault": false
      },
      "3800804335": {
        "HashKey": "COMPONENT_KNUCKLE_VARMOD_KING",
        "NameGXT": "WCT_KNUCK_SLG",
        "DescriptionGXT": "WCD_VAR_DESC",
        "Name": "The King",
        "Description": "",
        "ModelHashKey": "W_ME_Knuckle_SLG",
        "IsDefault": false
      },
      "2062808965": {
        "HashKey": "COMPONENT_KNUCKLE_VARMOD_VAGOS",
        "NameGXT": "WCT_KNUCK_VG",
        "DescriptionGXT": "WCD_VAR_DESC",
        "Name": "The Vagos",
        "Description": "",
        "ModelHashKey": "W_ME_Knuckle_VG",
        "IsDefault": false
      }
    },
    "Tints": [],
    "LiveryColors": [],
    "DLC": "mpluxe2"
  },
  "3696079510": {
    "HashKey": "WEAPON_MARKSMANPISTOL",
    "NameGXT": "WT_MKPISTOL",
    "damage": 73,
    "DescriptionGXT": "WTD_MKPISTOL",
    "Name": "Marksman Pistol",
    "Description": "Not for the risk averse. Make it count as you'll be reloading as much as you shoot. Part of The Ill-Gotten Gains Update Part 2.",
    "Group": "GROUP_PISTOL",
    "ModelHashKey": "W_PI_SingleShot",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_PISTOL",
    "Components": {
      "3416146413": {
        "HashKey": "COMPONENT_MARKSMANPISTOL_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_INVALID",
        "Name": "Default Clip",
        "Description": "",
        "ModelHashKey": "W_PI_SingleShot_Shell",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINTDF",
        "Name": "Default tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpluxe2"
  },
  "1853742572": {
    "HashKey": "WEAPON_PRECISIONRIFLE",
    "NameGXT": "WT_PRCSRIFLE",
    "DescriptionGXT": "WTD_PRCSRIFLE",
    "Name": "Precision Rifle",
    "damage": 25,
    "Description": "A rifle for perfectionists. Because why settle for right-between-the-eyes, when you could have right-through-the-superior-frontal-gyrus?",
    "Group": "GROUP_SNIPER",
    "ModelHashKey": "W_SR_PrecisionRifle_REH",
    "DefaultClipSize": 10,
    "AmmoType": "AMMO_SNIPER",
    "Components": {
      "4075474698": {
        "HashKey": "COMPONENT_PRECISIONRIFLE_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_CR_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Carbine Rifle.",
        "ModelHashKey": "w_sr_w_sr_precisionrifle_reh_mag1",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpsum2"
  },
  "1627465347": {
    "HashKey": "WEAPON_GUSENBERG",
    "NameGXT": "WT_GUSNBRG",
    "damage": 11,
    "DescriptionGXT": "WTD_GUSNBRG",
    "Name": "Gusenberg Sweeper",
    "Description": "Complete your look with a Prohibition gun. Looks great being fired from an Albany Roosevelt or paired with a pinstripe suit. Part of the Valentine's Day Massacre Special.",
    "Group": "GROUP_MG",
    "ModelHashKey": "w_sb_gusenberg",
    "DefaultClipSize": 30,
    "AmmoType": "AMMO_MG",
    "Components": {
      "484812453": {
        "HashKey": "COMPONENT_GUSENBERG_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_GSNB_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Gusenberg Sweeper.",
        "ModelHashKey": "w_sb_gusenberg_mag1",
        "IsDefault": true
      },
      "3939025520": {
        "HashKey": "COMPONENT_GUSENBERG_CLIP_02",
        "NameGXT": "WCT_CLIP2",
        "DescriptionGXT": "WCD_GSNB_CLIP2",
        "Name": "Extended Clip",
        "Description": "Extended capacity for Gusenberg Sweeper.",
        "ModelHashKey": "w_sb_gusenberg_mag2",
        "IsDefault": false
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "mpvalentines"
  },
  "4191993645": {
    "HashKey": "WEAPON_HATCHET",
    "NameGXT": "WT_HATCHET",
    "damage": 23,
    "DescriptionGXT": "WTD_HATCHET",
    "Name": "Hatchet",
    "Description": "Make kindling... of your pals with this easy to wield, easy to hide hatchet. Exclusive content for returning players.",
    "Group": "GROUP_MELEE",
    "ModelHashKey": "w_me_hatchet",
    "DefaultClipSize": 0,
    "Components": {},
    "Tints": [],
    "LiveryColors": [],
    "DLC": "spupgrade"
  },
  "1834241177": {
    "HashKey": "WEAPON_RAILGUN",
    "NameGXT": "WT_RAILGUN",
    "DescriptionGXT": "WTD_RAILGUN",
    "Name": "Railgun",
    "Description": "All you need to know is - magnets, and it does horrible things to the things it's pointed at. Exclusive content for returning players.",
    "Group": "GROUP_HEAVY",
    "ModelHashKey": "w_ar_railgun",
    "DefaultClipSize": 1,
    "AmmoType": "AMMO_RAILGUN",
    "Components": {
      "59044840": {
        "HashKey": "COMPONENT_RAILGUN_CLIP_01",
        "NameGXT": "WCT_CLIP1",
        "DescriptionGXT": "WCD_RLGN_CLIP1",
        "Name": "Default Clip",
        "Description": "Standard capacity for Railgun.",
        "ModelHashKey": "w_ar_railgun_mag1",
        "IsDefault": true
      }
    },
    "Tints": [
      {
        "NameGXT": "WM_TINT0",
        "Name": "Black tint"
      },
      {
        "NameGXT": "WM_TINT1",
        "Name": "Green tint"
      },
      {
        "NameGXT": "WM_TINT2",
        "Name": "Gold tint"
      },
      {
        "NameGXT": "WM_TINT3",
        "Name": "Pink tint"
      },
      {
        "NameGXT": "WM_TINT4",
        "Name": "Army tint"
      },
      {
        "NameGXT": "WM_TINT5",
        "Name": "LSPD tint"
      },
      {
        "NameGXT": "WM_TINT6",
        "Name": "Orange tint"
      },
      {
        "NameGXT": "WM_TINT7",
        "Name": "Platinum tint"
      }
    ],
    "LiveryColors": [],
    "DLC": "spupgrade"
  }
}

mp.events.add("setDuplicateWeaponsData", (data) => {
  data.forEach((value) => {
      if (weaponData[value.clientHash]) {
        value.duplicateHashes.forEach((hash) => {
          weaponData[hash] = weaponData[value.clientHash]
        })
      }
  })
  browserMenu.call(`setDuplicateWeaponsData`, data)
})

exports = {
  findWeaponDataByHash,
  weaponData
}
}; a; }
{let a = function scriptEntryPoint(mp) {
mp.interactionEntity = null 

mp.events.add("interactionMenu.showPlayerMenu", (player, values = null) => {
    if(mp.modalActive || mp.isPhoneActive) return 
    if(player == null) player = mp.players.local
    mp.interactionEntity = player;
    if (values) values = JSON.stringify(values);
    // debug(`interactionMenu.showPlayerMenu: ${player.name} ${values}`)
    browserMenu.call("interactionMenuAPI", 'showPlayerMenu', values)
    setCursor(true);
});

mp.events.add("interactionMenu.showVehicleMenu", (vehicle, values = null) => {
    if(mp.modalActive || mp.isPhoneActive) return 
    mp.interactionEntity = vehicle;
    if (values) values = JSON.stringify(values);
    browserMenu.call("interactionMenuAPI", 'showVehicleMenu', values)
    setCursor(true);
});

mp.events.add("interactionMenu.showDynamicMenu", (entity, values = null) => {
    if (mp.modalActive || mp.isPhoneActive) return
    if (entity) mp.interactionEntity = entity
    browserMenu.call("interactionMenuAPI", 'showDynamicMenu', values)
    setCursor(true);
});

mp.events.add("interactionMenu.hide", () => {
    if (!!mp.interactionEntity) { 
        mp.interactionEntity = null;
        setCursor(false)
        browserMenu.call("interactionMenuAPI", 'hide')
    }
});

var playerItemHandlers = { 
    "Обмінятися": () => {
        mp.events.callRemote(`trade.createOffer`, mp.interactionEntity.remoteId);
    },
    "Документи": () => { 
        mp.events.callRemote("lookPassport")
    },
    "Подивитись документи": () => { 
        mp.events.callRemote("checkPassport", mp.interactionEntity.remoteId)
    },
    "Познайомитись": () => { 
        mp.events.callRemote("familiar.createOffer", mp.interactionEntity.remoteId)
    },
    "Показати посвідчення": () => { 
        mp.events.callRemote("showID::choiceMenu", mp.interactionEntity.remoteId)
    },
    "Відмінити знайомство": () => { 
        mp.events.callRemote("familiar.removeOffer", mp.interactionEntity.remoteId)
    },
    "Викликати на дуель": () => { 
        mp.events.callRemote("duels.start", mp.interactionEntity.remoteId)
    },
    "Спустити на землю": () => { 
        mp.events.callRemote("playerRemoveCarryPlayer", mp.players.local.getVariable("carry"))
    },
    "Вилізти з багажнику": () => {
        if (!mp.isHideInTrunk?.self) return
        const vehicle = mp.vehicles.atRemoteId(mp.isHideInTrunk.vehicle)
        if (isEntityExists(vehicle) && vehicle.getSpeed() < 1) mp.events.callRemote(`removeFromTrunk`, mp.isHideInTrunk.vehicle)
    },
    "Перестати йти за ручку": () => { 
        mp.events.callRemote("playerRemoveTakeHandPlayer", mp.players.local.getVariable("takeHandTo"))
    },
    "Взяти на себе": () => { 
        mp.events.callRemote("playerCarryPlayer", mp.interactionEntity.remoteId);
    },
    "Взятись за ручку": () => {
        mp.events.callRemote("playerTakeHandPlayer", mp.interactionEntity.remoteId);
    },
    "Тягти на собі": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote("medicCarryPlayer", mp.interactionEntity.remoteId);
    },
    "Передати гроші": () => { 
        mp.events.callRemote("server::showModalGiveMoney", mp.interactionEntity.remoteId)
    },
    "Запропонувати кинути кістки": () => {
        mp.events.callRemote("playerOfferDice", mp.interactionEntity.remoteId)
    },
    "Вилікувати аптечкою": () => {
        mp.events.callRemote("item.useFAidKit", mp.interactionEntity.remoteId)
    },
    "Запросити до бригади": () => {
        mp.events.callRemote("playerInviteToBrigade", mp.interactionEntity.remoteId);
    },
    "Зібрати зброю": () => {
        mp.events.callRemote("playerCollectWeapon", "", mp.interactionEntity.remoteId);
    },
    "Пограбувати": () => {
        mp.events.callRemote("playerRobPlayer", mp.interactionEntity.remoteId);
    },
    "Побрити": () => {
        mp.events.callRemote("playerShavePlayer", mp.interactionEntity.remoteId);
    },
    "Використати відмичку": () => {
        mp.events.callRemote("playerUntiePlayer", mp.interactionEntity.remoteId);
    },
    "Зв’язати стяжкою": () => {
        mp.events.callRemote("playerTiePlayer", mp.interactionEntity.remoteId);
    },
    "Звiльнити з в’язницi": () => {
        mp.events.callRemote("releaseFromPrison", mp.interactionEntity.remoteId); 
    },
    "Одягнути мішок": () => {
        mp.events.callRemote("playerBagPlayer", mp.interactionEntity.remoteId, true);
    },
    "Зняти мішок": () => {
        mp.events.callRemote("playerBagPlayer", mp.interactionEntity.remoteId, false);
    },
    "Вигнати з бригади": () => {
        mp.events.callRemote("playerUninviteFromBrigade", mp.interactionEntity.remoteId);
    },
    "Запросити до сім’ї": () => {
        mp.events.callRemote(`playerInviteToFamily`, mp.interactionEntity.remoteId);
    },
    "Запросити до фракції": () => {
        mp.events.callRemote(`playerInviteToFaction`, mp.interactionEntity.remoteId);
    },
    "Видати військовий квиток": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote(`giveLicMilitary`, mp.interactionEntity.remoteId);
    },
    "Вилучити зброю": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote(`playerRemoveFactionWeapon`, mp.interactionEntity.remoteId);
    },
    "Зірвати маску": () => {
        mp.events.callRemote(`playerTakeMask`, mp.interactionEntity.remoteId);
    },
    "Підвищити у ранзі": () => {
        mp.events.callRemote(`playerSetFactionRank`, mp.interactionEntity.remoteId, true);
    },
    "Зменшити в ранзі": () => {
        mp.events.callRemote(`playerSetFactionRank`, mp.interactionEntity.remoteId, false);
    },
    "Вигнати із сім’ї": () => {
        mp.events.callRemote(`playerUninviteFromFamilyByID`, mp.interactionEntity.remoteId);
    },
    "Підвищити ранг": () => {
        mp.events.callRemote(`playerSetFamilyRank`, mp.interactionEntity.remoteId, true);
    },
    "Зменшити ранг": () => {
        mp.events.callRemote(`playerSetFamilyRank`, mp.interactionEntity.remoteId, false);
    },
    "Вигнати із фракції": () => {
        mp.events.callRemote(`playerUninviteFromFactionByID`, mp.interactionEntity.remoteId);
    },
    "Заключити союз": () => {
        mp.events.callRemote(`playerAllianceWithFactionByID`, mp.interactionEntity.remoteId);
    },
    "Розторгнути союз": () => {
        mp.events.callRemote(`playerRemoveAllianceWithFactionByID`, mp.interactionEntity.remoteId);
    },
    "Вдягти кайданки": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote(`startHandcuff`, mp.interactionEntity.remoteId, true);
    },
    "Зняти кайданки": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote(`startHandcuff`, mp.interactionEntity.remoteId, false);
    },
    "Фракція": () => { 
        mp.events.call("interactionMenu.showPlayerMenu", mp.interactionEntity, {
            action: "showFaction",
            hasCuffs: mp.interactionEntity.getVariable("cuffedBy"),
            followTo: mp.interactionEntity.getVariable("followTo"),
            hasBag: mp.interactionEntity.getVariable("bagBy"),
            hasBounds: mp.interactionEntity.getVariable("boundedBy") != null,

        });
        return "notclose"
    },
    "Сім’я": () => { 
        mp.events.call("interactionMenu.showPlayerMenu", mp.interactionEntity, { action: "showFamily" });
        return "notclose"
    },
    "Інше": () => { 
        mp.events.call("interactionMenu.showPlayerMenu", mp.interactionEntity, {
            action: "showOther"
        });
        return "notclose"
    },
    "Обшукати": () => {
        mp.events.callRemote(`startFrisk`, mp.interactionEntity.remoteId, mp.interactionEntity.type);
    },
    "Вилучити ліцензію зброї": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote(`takeGunLic`, mp.interactionEntity.remoteId);
    },
    "Показати документи": () => {
        mp.events.callRemote(`showPassportChoiceMenu`, mp.interactionEntity.remoteId);
    },
    "Видати мед.карту": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote(`giveLicMed`, mp.interactionEntity.remoteId);
    },
    "Видати ліцензію на зброю": () => {
        mp.events.callRemote(`giveLic`, mp.interactionEntity.remoteId, "gunLic");
    },
    "Видати ліцензію на полювання": () => {
        mp.events.callRemote(`giveLic`, mp.interactionEntity.remoteId, "huntLic");
    },
    "Видати ліцензію на рибалку": () => {
        mp.events.callRemote(`giveLic`, mp.interactionEntity.remoteId, "fishLic");
    },
    "Вилучити заборонене": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote(`takeBannedItems`, mp.interactionEntity.remoteId);
    },
    "Видати розшук": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote(`showWantedModal`, mp.interactionEntity.remoteId);
    },
    "Тягнути за собою": () => {
        mp.events.callRemote(`startFollow`, mp.interactionEntity.remoteId, true);
    },
    "Звільнити": () => {
        mp.events.callRemote(`startFollow`, mp.interactionEntity.remoteId, false);
    },
    "Запхати в авто": () => { 
        let veh = getClosestVehicle(5);
        if (!mp.vehicles.exists(veh)) return  rpc.callBrowser(browserMenu, "nError", `Авто не знайдено!`);
        let pos = veh.position;
        let localPos = mp.players.local.position;
        let dist = mp.game.system.vdist(pos.x, pos.y, pos.z, localPos.x, localPos.y, localPos.z);
        if (dist > 10) return  rpc.callBrowser(browserMenu, "nError", `Транспорт занадто далеко!`);
        mp.events.callRemote(`putIntoVehicle`, mp.interactionEntity.remoteId, veh.remoteId);
    },
    "Запхати в багажник": () => { 
        let veh = getClosestVehicle(5);
        if (!mp.vehicles.exists(veh)) return  rpc.callBrowser(browserMenu, "nError", `Авто не знайдено!`);
        let pos = veh.position;
        let localPos = mp.players.local.position;
        let dist = mp.game.system.vdist(pos.x, pos.y, pos.z, localPos.x, localPos.y, localPos.z);
        if (dist > 10) return  rpc.callBrowser(browserMenu, "nError", `Транспорт занадто далеко!`);
        mp.events.callRemote(`putIntoTrunk`, mp.interactionEntity.remoteId, veh.remoteId);
    },
    "Виписати штраф": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote(`showFinesModal`, mp.interactionEntity.remoteId);
    },
    "Вилучити військовий квиток": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote(`takeMilitaryLic`, mp.interactionEntity.remoteId);
    },
    "Арештувати": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote(`startArrest`, mp.interactionEntity.remoteId);
    }, 
    "Продати пігулки": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.call("modal.show", "sell_pills", JSON.stringify({
            remoteId: mp.interactionEntity.remoteId
        })) 
    },
    "Продати аптечку": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.call("modal.show", "sell_fAidKit", JSON.stringify({
            remoteId: mp.interactionEntity.remoteId
        })) 
    },
    "Продати вітаміни": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.call("modal.show", "sell_vitamins", JSON.stringify({
            remoteId: mp.interactionEntity.remoteId
        })) 
    },
    "Пластична операція": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote('server::plasticOperation', mp.interactionEntity.remoteId)
    },
    "Реанімувати": () => {
        let duty = mp.players.local.getVariable("isFactionDuty")
        if (!duty) return rpc.callBrowser(browserMenu, "nError", `Ти не на чергуванні!`)
        mp.events.callRemote('server::reanimatePlayer', mp.interactionEntity.remoteId)
    },
    "Обійняти": () => {
        mp.events.callRemote(`usePairAnim`, mp.interactionEntity.remoteId, "hugs");
    },
    "Поцілувати": () => {
        mp.events.callRemote(`usePairAnim`, mp.interactionEntity.remoteId, "kiss");
    },
    "Дати ляпоса": () => {
        mp.events.callRemote(`usePairAnim`, mp.interactionEntity.remoteId, "slap");
    },
    "Дати п’ять": () => {
        mp.events.callRemote(`usePairAnim`, mp.interactionEntity.remoteId, "five");
    },
    "Звичайний": () => {
        mp.events.callRemote(`emotions.set`, 0);
    },
    "Похмурий": () => {
        mp.events.callRemote(`emotions.set`, 1);
    },
    "Сердитий": () => {
        mp.events.callRemote(`emotions.set`, 2);
    },
    "Щасливий": () => {
        mp.events.callRemote(`emotions.set`, 3);
    },
    "Зайти до будинку": () => {
        mp.events.callRemote(`goEnterHouseFromGarage`)
        mp.events.call("setSelectMenuInteraction", false)
    },  
    "Вийти на вулицю": () => {
        mp.events.callRemote(`goExitGarage`)
        mp.events.call("setSelectMenuInteraction", false)
    },
    "Закрити": () => {
        mp.events.call("interactionMenu.hide")
        mp.events.call("setSelectMenuInteraction", false)
    },
    "Стрес": () => {
        mp.events.callRemote(`emotions.set`, 4);
    },
    "Незадоволений": () => {
        mp.events.callRemote(`emotions.set`, 5);
    },
    "П’яний": () => {
        mp.events.callRemote(`emotions.set`, 6);
    },
    "Постраждалий": () => {
        mp.events.callRemote(`emotions.set`, 7);
    },
    "Звичайна": () => {
        mp.events.callRemote(`walking.set`, 0);
    },
    "Хоробра": () => {
        mp.events.callRemote(`walking.set`, 1);
    },
    "Упевнена": () => {
        mp.events.callRemote(`walking.set`, 2);
    },
    "Крута": () => {
        mp.events.callRemote(`walking.set`, 3);
    },
    "Швидка": () => {
        mp.events.callRemote(`walking.set`, 4);
    },
    "Сумна": () => {
        mp.events.callRemote(`walking.set`, 5);
    },
    "Крилата": () => {
        mp.events.callRemote(`walking.set`, 6);
    },
    "П’яна": () => {
        mp.events.callRemote(`walking.set`, 7);
    },
    "Сексуальна": () => {
        mp.events.callRemote(`walking.set`, 8);
    },
    "Літня": () => {
        mp.events.callRemote(`walking.set`, 9);
    },
    "Сидіти напівлежачи": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_picnic@female@base", "base", 8, 1);
    },
    "Сісти навпочіпки": () => {
        mp.events.callRemote(`animation.set`, "amb@medic@standing@tendtodead@base", "base", 8, 1);
    },
    "Сидіти на землі": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_stupor@male@base", "base", 8, 1);
    },
    "Легти на землю": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_sunbathe@male@back@base", "base", 8, 1);
    },
    "Валятися на землі": () => {
        mp.events.callRemote(`animation.set`, "missfinale_c1@", "lying_dead_player0", 8, 1);
    },
    "Встати на коліно": () => {
        mp.events.callRemote(`animation.set`, "amb@medic@standing@kneel@base", "base", 8, 1);
    },
    "Сидіти спокійно": () => {
        mp.events.callRemote(`animation.set`, "mp_safehouse", "lap_dance_player", 8, 1);
    },
    "Сісти на сходи": () => {
        mp.events.callRemote(`animation.set`, "misstrevor2", "gang_chatting_idle02_a", 8, 1);
    },
    "Засмагати на животі": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_sunbathe@female@front@base", "base", 8, 1);
    },
    "Засмагати на спині": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_sunbathe@male@back@idle_a", "idle_a", 8, 1);
    },
    "Підняти руки": () => {
        mp.events.callRemote(`animation.set`, "random@arrests@busted", "idle_c", 8, 49);
    },
    "Оглянути та записати": () => {
        mp.events.callRemote(`animation.set`, "amb@medic@standing@timeofdeath@idle_a", "idle_a", 8, 49);
    },
    "Палець вгору": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intselfiethumbs_up", "idle_a", 8, 49);
    },
    "Військове привітання": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intuppersalute", "idle_a", 8, 49);
    },
    "Крутити біля скроні двома руками": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperyou_loco", "idle_a", 8, 49);
    },
    "Королівське привітання": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperwave", "idle_a", 8, 49);
    },
    "Понтуватися": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperv_sign", "idle_a", 8, 49);
    },
    "Подвійний лайк": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperthumbs_up", "idle_a", 8, 49);
    },
    "Злякати": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperthumb_on_ears", "idle_a", 8, 49);
    },
    "Здатись": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intuppersurrender", "idle_a", 8, 49);
    },
    "Повільно плескати": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperslow_clap", "idle_a", 8, 49);
    },
    "Мир": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperpeace", "idle_a", 8, 49);
    },
    "Відмова": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperno_way", "idle_a", 8, 49);
    },
    "Радість": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperjazz_hands", "idle_a", 8, 49);
    },
    "Показати рибку": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperfind_the_fish", "idle_a", 8, 49);
    },
    "Фейспалм": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperface_palm", "idle_a", 8, 49);
    },
    "Показати курочку": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperchicken_taunt", "idle_a", 8, 49);
    },
    "Показати ОК": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intselfiedock", "idle_a", 8, 49);
    },
    "Покликати за собою": () => {
        mp.events.callRemote(`animation.set`, "friends@frf@ig_1", "over_here_idle_b", 8, 49);
    },
    "РОК": () => {
        mp.events.callRemote(`animation.set`, "mp_player_int_upperrock", "mp_player_int_rock", 8, 49);
    },
    "Повітряний поцілунок": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intcelebrationfemale@blow_kiss", "blow_kiss", 8, 49);
    },
    "Викинути сигу": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intcelebrationmale@smoke_flick", "smoke_flick", 8, 49);
    },
    "Показати підійти": () => {
        mp.events.callRemote(`animation.set`, "misscommon@response", "bring_it_on", 8, 1);
    },
    "Грати на гітарі": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intcelebrationfemale@air_guitar", "air_guitar", 8, 1);
    },
    "Грати на піаніно": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intcelebrationfemale@air_synth", "air_synth", 8, 1);
    },
    "Мир усім": () => {
        mp.events.callRemote(`animation.set`, "mp_player_int_upperpeace_sign", "mp_player_int_peace_sign", 8, 49);
    },
    "Зарядка 1": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_yoga@female@base", "base_a", 8, 1);
    },
    "Зарядка 2": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_yoga@male@base", "base_b", 8, 1);
    },
    "Качати прес": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_sit_ups@male@base", "base", 8, 1);
    },
    "Віджиматися": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_push_ups@male@base", "base", 8, 1);
    },
    "Медитувати": () => {
        mp.events.callRemote(`animation.set`, "rcmcollect_paperleadinout@", "meditiate_idle", 8, 1);
    },
    "Ходьба на місці": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_power_walker@female@static", "static", 8, 1);
    },
    "Показати середній палець": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intselfiethe_bird", "idle_a", 8, 49);
    },
    "Показати щось ще": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intincardockstd@ps@", "idle_a", 8, 49);
    },
    "Ковирятися у носі": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intuppernose_pick", "idle_a", 8, 49);
    },
    "Показати середній палець усім": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperfinger", "idle_a", 8, 49);
    },
    "Показати середній палець затято": () => {
        mp.events.callRemote(`animation.set`, "mp_player_intfinger", "mp_player_int_finger", 8, 1);
    },
    "Мати когось": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intcelebrationfemale@air_shagging", "air_shagging", 8, 1);
    },
    "Стати раком": () => {
        mp.events.callRemote(`animation.set`, "switch@trevor@mocks_lapdance", "001443_01_trvs_28_idle_stripper", 8, 1);
    },
    "Чесати зад": () => {
        mp.events.callRemote(`animation.set`, "mp_freemode_return@f@idle", "idle_a", 8, 49);
    },
    "Обссати": () => {
        mp.events.callRemote(`animation.set`, "missbigscore1switch_trevor_piss", "piss_loop", 8, 1);
    },
    "Вбитись": () => {
        mp.events.callRemote(`animation.set`, "mp_suicide", "pistol_fp", 8, 1);
    },
    "Зайнятися сексом": () => {
        mp.events.callRemote(`animation.set`, "timetable@trevor@skull_loving_bear", "skull_loving_bear", 8, 1);
    },
    "Руки на поясі": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_cop_idles@male@base", "base", 8, 49);
    },
    "Розім’яти руки": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intupperknuckle_crunch", "idle_a", 8, 49);
    },
    "Схрестити руки на грудях": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@peds@", "rcmme_amanda1_stand_loop_cop", 8, 1);
    },
    "Прогнати людину": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@peds@", "mini_strip_club_idles_bouncer_go_away_go_away", 8, 1);
    },
    "Відмовити у проході": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@peds@", "mini_strip_club_idles_bouncer_stop_stop", 8, 1);
    },
    "Показати біцепс 1": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@peds@", "amb_world_human_muscle_flex_arms_in_front_base", 8, 1);
    },
    "Показати біцепс 2": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_muscle_flex@arms_at_side@base", "base", 8, 1);
    },
    "Показати біцепс 3": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_muscle_flex@arms_at_side@idle_a", "idle_a", 8, 1);
    },
    "Показати біцепс 4": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_muscle_flex@arms_at_side@idle_a", "idle_c", 8, 1);
    },
    "Показати біцепс 5": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_muscle_flex@arms_in_front@idle_a", "idle_a", 8, 1);
    },
    "Показати біцепс 6": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_muscle_flex@arms_in_front@idle_a", "idle_b", 8, 1);
    },
    "Дурнитися": () => {
        mp.events.callRemote(`animation.set`, "rcm_barry2", "clown_idle_6", 8, 1);
    },
    "Руки вгору": () => {
        mp.events.callRemote(`animation.set`, "mp_am_hold_up", "handsup_base", 8, 49);
    },
    "Свистіти і махати рукою": () => {
        mp.events.callRemote(`animation.set`, "rcmnigel1c", "hailing_whistle_waive_a", 8, 49);
    },
    "Заводити натовп": () => {
        mp.events.callRemote(`animation.set`, "random@street_race", "_streetracer_accepted", 8, 1);
    },
    "Паніка": () => {
        mp.events.callRemote(`animation.set`, "oddjobs@assassinate@hotel@", "alert_gunshot", 8, 1);
    },
    "Грітись біля вогнища": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_stand_fire@male@idle_a", "idle_a", 8, 1);
    },
    "Стійка охоронця": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_stand_guard@male@base", "base", 8, 49);
    },
    "Струшувати з себе пил": () => {
        mp.events.callRemote(`animation.set`, "reaction@shake_it_off@", "dustoff", 8, 49);
    },
    "Качатися": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intcelebrationmale@peace", "peace", 8, 1);
    },
    "Висіти на турніку": () => {
        mp.events.callRemote(`animation.set`, "missfam1_yachtbattleonyacht02_", "onboom_twohand_hang_idle", 8, 1);
    },
    "Розминка": () => {
        mp.events.callRemote(`animation.set`, "mini@triathlon", "idle_a", 8, 1);
    },
    "Розминка 2": () => {
        mp.events.callRemote(`animation.set`, "mini@triathlon", "idle_b", 8, 1);
    },
    "Розминка 3": () => {
        mp.events.callRemote(`animation.set`, "mini@triathlon", "idle_d", 8, 1);
    },
    "Розминка 4": () => {
        mp.events.callRemote(`animation.set`, "mini@triathlon", "idle_f", 8, 1);
    },
    "Показати біцепс 7": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_muscle_flex@arms_in_front@base", "base", 8, 1);
    },
    "Медитувати 2": () => {
        mp.events.callRemote(`animation.set`, "missfam5_yoga", "f_yogapose_a", 8, 1);
    },
    "Медитувати 3": () => {
        mp.events.callRemote(`animation.set`, "missfam5_yoga", "c8_pose", 8, 1);
    },
    "Медитувати 4": () => {
        mp.events.callRemote(`animation.set`, "missfam5_yoga", "b4_fail_to_start", 8, 1);
    },
    "Медитувати 5": () => {
        mp.events.callRemote(`animation.set`, "missfam5_yoga", "start_to_c1", 8, 1);
    },
    "Медитувати 6": () => {
        mp.events.callRemote(`animation.set`, "missfam5_yoga", "start_to_a1", 8, 1);
    },
    "Медитувати 7": () => {
        mp.events.callRemote(`animation.set`, "missfam5_yoga", "a2_to_a3", 8, 1);
    },
    "Медитувати 8": () => {
        mp.events.callRemote(`animation.set`, "missfam5_yoga", "a3_fail_to_start", 8, 1);
    },
    "Йога": () => {
        mp.events.callRemote(`animation.set`, "mini@yoga", "outro_2", 8, 1);
    },
    "Йога 2": () => {
        mp.events.callRemote(`animation.set`, "missfam5_yoga", "c5_pose", 8, 1);
    },
    "Йога 3": () => {
        mp.events.callRemote(`animation.set`, "missfam5_yoga", "a2_pose", 8, 1);
    },
    "Йога 4": () => {
        mp.events.callRemote(`animation.set`, "missfam5_yoga", "c6_pose", 8, 1);
    },
    "Йога 5": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_yoga@female@base", "base_c", 8, 1);
    },
    "Повітряний поцілунок 2": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intcelebrationfemale@chin_brush", "chin_brush", 8, 1);
    },
    "Повітряний поцілунок 3": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intcelebrationfemale@finger_kiss", "finger_kiss", 8, 1);
    },
    "Повітряний поцілунок 4": () => {
        mp.events.callRemote(`animation.set`, "mini@hookers_spvanilla", "idle_a", 8, 1);
    },
    "Тримати груди": () => {
        mp.events.callRemote(`animation.set`, "amb@code_human_in_car_mp_actions@tit_squeeze@low@ps@base", "idle_a", 8, 49);
    },
    "Показувати щось": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intcelebrationfemale@dock", "dock", 8, 1);
    },
    "Мати когось": () => {
        mp.events.callRemote(`animation.set`, "rcmpaparazzo_2", "shag_loop_a", 8, 1);
    },
    "Давати комусь": () => {
        mp.events.callRemote(`animation.set`, "rcmpaparazzo_2", "shag_loop_poppy", 8, 1);
    },
    "Незвичайна поза": () => {
        mp.events.callRemote(`animation.set`, "misscarsteal2pimpsex", "shagloop_hooker", 8, 1);
    },
    "Повільні рухи": () => {
        mp.events.callRemote(`animation.set`, "misscarsteal2pimpsex", "shagloop_pimp", 8, 1);
    },
    "Приватний танець": () => {
        mp.events.callRemote(`animation.set`, "mini@strip_club@private_dance@idle", "priv_dance_idle", 8, 1);
    },
    "Приватний танець 2": () => {
        mp.events.callRemote(`animation.set`, "mp_am_stripper", "lap_dance_girl", 8, 1);
    },
    "Приватний танець 3": () => {
        mp.events.callRemote(`animation.set`, "mini@strip_club@private_dance@part3", "priv_dance_p3", 8, 1);
    },
    "Приватний танець 4": () => {
        mp.events.callRemote(`animation.set`, "mini@strip_club@private_dance@part2", "priv_dance_p2", 8, 1);
    },
    "Приватний танець 5": () => {
        mp.events.callRemote(`animation.set`, "mini@strip_club@idles@stripper", "stripper_idle_04", 8, 1);
    },
    "Приватний танець 6": () => {
        mp.events.callRemote(`animation.set`, "mini@strip_club@lap_dance@ld_girl_a_song_a_p2", "ld_girl_a_song_a_p2_f", 8, 1);
    },
    "Приватний танець 7": () => {
        mp.events.callRemote(`animation.set`, "mini@strip_club@lap_dance@ld_girl_a_song_a_p3", "ld_girl_a_song_a_p3_f", 8, 1);
    },
    "На жердині": () => {
        mp.events.callRemote(`animation.set`, "mini@strip_club@pole_dance@pole_dance3", "pd_dance_03", 8, 1);
    },
    "Біля стіни": () => {
        mp.events.callRemote(`animation.set`, "amb@lo_res_idles@", "world_human_lean_male_hands_together_lo_res_base", 8, 1);
    },
    "Біля стіни 2": () => {
        mp.events.callRemote(`animation.set`, "amb@lo_res_idles@", "world_human_lean_female_holding_elbow_lo_res_base", 8, 1);
    },
    "Біля стіни 3": () => {
        mp.events.callRemote(`animation.set`, "random@hitch_lift", "idle_a", 8, 1);
    },
    "Спертися": () => {
        mp.events.callRemote(`animation.set`, "rcmnigel1aig_1", "base_02_willie", 8, 1);
    },
    "Спертися 2": () => {
        mp.events.callRemote(`animation.set`, "missfbi4leadinoutfbi_4_int", "fbi_4_int_trv_idle_dave", 8, 1);
    },
    "Схрестити руки": () => {
        mp.events.callRemote(`animation.set`, "switch@franklin@gang_taunt_p5", "fras_ig_6_p5_loop_g2", 8, 1);
    },
    "Схрестити руки 2": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_hang_out_street@female_arms_crossed@base", "base", 8, 1);
    },
    "Спертися 3": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_leaning@male@wall@back@foot_up@idle_a", "idle_a", 8, 1);
    },
    "Спертися 4": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@clubhouse@bar@bartender@", "base_bartender", 8, 1);
    },
    "Підняти руки на коленах": () => {
        mp.events.callRemote(`animation.set`, "random@arrests", "kneeling_arrest_idle", 8, 1);
    },
    "Боятися": () => {
        mp.events.callRemote(`animation.set`, "anim@heists@fleeca_bank@hostages@ped_d@", "flinch_loop", 8, 1);
    },
    "Боятися 2": () => {
        mp.events.callRemote(`animation.set`, "anim@heists@ornate_bank@hostages@ped_g@", "flinch_loop", 8, 1);
    },
    "Стрес": () => {
        mp.events.callRemote(`animation.set`, "random@hitch_lift", "f_distressed_loop", 8, 1);
    },
    "Руки за спину": () => {
        mp.events.callRemote(`animation.set`, "anim@miss@low@fin@vagos@", "idle_ped06", 8, 1);
    },
    "Поза охоронника": () => {
        mp.events.callRemote(`animation.set`, "missfbi4mcs_2", "loop_sec_b", 8, 1);
    },
    "Невпевненно": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_freemode_return@f@idle", "idle_c", 8, 1);
    },
    "Заручник": () => {
        mp.events.callRemote(`animation.set`, "missprologueig_2", "idle_on_floor_malehostage02", 8, 1);
    },
    "Боляче": () => {
        mp.events.callRemote(`animation.set`, "missheistdockssetup1ig_13@kick_idle", "guard_beatup_kickidle_dockworker", 8, 1);
    },
    "Спати": () => {
        mp.events.callRemote(`animation.set`, "timetable@tracy@sleep@", "idle_c", 8, 1);
    },
    "Невдоволено стояти": () => {
        mp.events.callRemote(`animation.set`, "anim@arena@celeb@podium@no_prop@", "regal_c_3rd", 8, 1);
    },
    "Невдоволено стояти 2": () => {
        mp.events.callRemote(`animation.set`, "anim@arena@celeb@podium@no_prop@", "dance_b_3rd", 8, 1);
    },
    "Невдоволено стояти 3": () => {
        mp.events.callRemote(`animation.set`, "anim@arena@celeb@podium@no_prop@", "crowd_point_a_2nd", 8, 1);
    },
    "Стояти важко": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@business@bgen@bgen_no_work@", "stand_phone_phoneputdown_stretching", 8, 1);
    },
    "Стояти Тревор": () => {
        mp.events.callRemote(`animation.set`, "friends@frt@ig_1", "trevor_impatient_wait_4", 8, 1);
    },
    "Стояти соромно": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@business@bgen@bgen_no_work@", "stand_phone_phoneputdown_sleeping_nowork", 8, 1);
    },
    "Стояти винним": () => {
        mp.events.callRemote(`animation.set`, "anim@miss@low@fin@vagos@", "idle_ped05", 8, 1);
    },
    "Стояти винним 2": () => {
        mp.events.callRemote(`animation.set`, "low_fun_mcs1-3", "mp_m_g_vagfun_01^12_dual-3", 8, 1);
    },
    "Стояти впевненно": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@hangout@ped_female@stand@01a@idles", "idle_d", 8, 1);
    },
    "Дивитись у телефон": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@business@bgen@bgen_no_work@", "stand_phone_lookaround_nowork", 8, 1);
    },
    "Стояти сумно": () => {
        mp.events.callRemote(`animation.set`, "switch@michael@parkbench_smoke_ranger", "ranger_nervous_loop", 8, 1);
    },
    "Руки у сторони": () => {
        mp.events.callRemote(`animation.set`, "martin_1_int-0", "cs_martinmadrazo_dual-0", 8, 1);
    },
    "Лежати пораненим": () => {
        mp.events.callRemote(`animation.set`, "missfbi5ig_0", "lyinginpain_loop_steve", 8, 1);
    },
    "Лежати зв’язаним": () => {
        mp.events.callRemote(`animation.set`, "random@burial", "b_burial", 8, 1);
    },
    "Т-Поза": () => {
        mp.events.callRemote(`animation.set`, "armenian_1_int-0", "a_f_y_bevhills_01-0", 8, 1);
    },
    "Стояти нервуючи": () => {
        mp.events.callRemote(`animation.set`, "rcmme_tracey1", "nervous_loop", 8, 1);
    },
    "Вибивала": () => {
        mp.events.callRemote(`animation.set`, "mini@strip_club@idles@bouncer@idle_a", "idle_a", 8, 1);
    },
    "Готовий до бійки": () => {
        mp.events.callRemote(`animation.set`, "misschinese1leadinoutchinese_1_int", "russ_leadin_loop", 8, 1);
    },
    "Обуритися": () => {
        mp.events.callRemote(`animation.set`, "special_ped@baygor@monologue_6@monologue_6k", "salvation_comes_at_a_price_10", 8, 1);
    },
    "Злитися": () => {
        mp.events.callRemote(`animation.set`, "oddjobs@towingangryidle_a", "idle_c", 8, 49);
    },
    "Заспокоїти": () => {
        mp.events.callRemote(`animation.set`, "amb@code_human_police_crowd_control@idle_a", "idle_c", 8, 1);
    },
    "Вау": () => {
        mp.events.callRemote(`animation.set`, "random@bus_tour_guide@idle_a", "idle_b", 8, 49);
    },
    "Повага": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intcelebrationfemale@bro_love", "bro_love", 8, 1);
    },
    "І крапка": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_hand_down", 8, 49);
    },
    "Шо за нах": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_celebration@draw@male", "draw_react_male_a", 8, 49);
    },
    "Це моє!": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "getsure_its_mine", 8, 49);
    },
    "Повільне ні": () => {
        mp.events.callRemote(`animation.set`, "anim@heists@ornate_bank@chat_manager", "fail", 8, 49);
    },
    "Чорт": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_damn", 8, 49);
    },
    "Відвали": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_bye_hard", 8, 49);
    },
    "Тільки не це": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_displeased", 8, 49);
    },
    "Відмовити": () => {
        mp.events.callRemote(`animation.set`, "amb@code_human_in_car_mp_actions@nod@bodhi@ds@base", "nod_no_fp", 8, 1);
    },
    "Це я": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_me", 8, 49);
    },
    "За мною грубо": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_you_hard", 8, 49);
    },
    "Ти!": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_point", 8, 49);
    },
    "Без варіантів": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_no_way", 8, 49);
    },
    "О так!": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_nod_yes_soft", 8, 49);
    },
    "Пішли сюди": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_come_here_soft", 8, 49);
    },
    "Бувай": () => {
        mp.events.callRemote(`animation.set`, "gestures@m@standing@fat", "gesture_bye_soft", 8, 1);
    },
    "Ми впораємось": () => {
        mp.events.callRemote(`animation.set`, "special_ped@jerome@monologue_6@monologue_6g", "youthinkyourhappy_6", 8, 49);
    },
    "Порядок": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_bye_soft", 8, 49);
    },
    "Великий лайк": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intincarthumbs_upbodhi@ds@", "enter_fp", 8, 49);
    },
    "Розчаруватися": () => {
        mp.events.callRemote(`animation.set`, "mini@dartsoutro", "darts_outro_03_guy1", 8, 1);
    },
    "Фейспалм 2": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intcelebrationfemale@face_palm", "face_palm", 8, 49);
    },
    "Зовсім куку": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intcelebrationfemale@you_loco", "you_loco", 8, 1);
    },
    "Винний": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_parachute_outro@female@lose", "lose_loop", 8, 1);
    },
    "Генгста спілкування": () => {
        mp.events.callRemote(`animation.set`, "missarmenian2", "lamar_impatient_a", 8, 49);
    },
    "Хей! Привіт!": () => {
        mp.events.callRemote(`animation.set`, "random@hitch_lift", "come_here_idle_c", 8, 49);
    },
    "Свиснути махнув рукою": () => {
        mp.events.callRemote(`animation.set`, "taxi_hail", "fp_hail_taxi", 8, 1);
    },
    "Давай, допобочення!": () => {
        mp.events.callRemote(`animation.set`, "anim@arena@celeb@podium@no_prop@", "regal_a_1st", 8, 1);
    },
    "Дати п’ять стоячи": () => {
        mp.events.callRemote(`animation.set`, "switch@franklin@cleaning_apt", "001918_01_fras_v2_1_cleaning_apt_idle", 8, 1);
    },
    "Погодитись": () => {
        mp.events.callRemote(`animation.set`, "gestures@m@standing@casual", "gesture_i_will", 8, 1);
    },
    "Стояти!": () => {
        mp.events.callRemote(`animation.set`, "anim@heists@ornate_bank@chat_manager", "charm", 8, 49);
    },
    "Гуд": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_hello", 8, 49);
    },
    "Супер": () => {
        mp.events.callRemote(`animation.set`, "random@arrests", "thanks_male_05", 8, 49);
    },
    "Заспокойся": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_easy_now", 8, 49);
    },
    "Гарна ідея": () => {
        mp.events.callRemote(`animation.set`, "gestures@f@standing@casual", "gesture_i_will", 8, 49);
    },
    "Дивитись час": () => {
        mp.events.callRemote(`animation.set`, "amb@code_human_wander_idles@male@idle_a", "idle_a_wristwatch", 8, 49);
    },
    "Печатати": () => {
        mp.events.callRemote(`animation.set`, "missheist_jewel@hacking", "hack_loop", 8, 1);
    },
    "Стукати у двері": () => {
        mp.events.callRemote(`animation.set`, "timetable@jimmy@doorknock@", "knockdoor_idle", 8, 1);
    },
    "Чухати зад": () => {
        mp.events.callRemote(`animation.set`, "anim@heists@team_respawn@respawn_02", "heist_spawn_02_ped_d", 8, 1);
    },
    "Потерти долоні": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_cop_idles@female@idle_b", "idle_d", 8, 49);
    },
    "Шукати закладку": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_bum_wash@male@high@idle_a", "idle_a", 8, 1);
    },
    "Поклонитись": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intcelebrationpaired@m_m_sarcastic", "sarcastic_left", 8, 49);
    },
    "Мити капот": () => {
        mp.events.callRemote(`animation.set`, "timetable@floyd@clean_kitchen@idle_a", "idle_b", 8, 49);
    },
    "Press F": () => {
        mp.events.callRemote(`animation.set`, "mp_player_int_uppersalute", "mp_player_int_salute", 8, 49);
    },
    "Спілкуватись по телефону": () => {
        mp.events.callRemote(`animation.set`, "amb@code_human_wander_mobile@female@base", "base", 8, 49);
    },
    "Полагодити щось": () => {
        mp.events.callRemote(`animation.set`, "mp_intro_seq@", "mp_mech_fix", 8, 1);
    },
    "Оглядати на землі": () => {
        mp.events.callRemote(`animation.set`, "amb@medic@standing@kneel@enter", "enter", 8, 1);
    },
    "Плескати у долоні": () => {
        mp.events.callRemote(`animation.set`, "anim@mp_player_intincarslow_clapbodhi@ds@", "idle_a", 8, 49);
    },
    "Уважно думати": () => {
        mp.events.callRemote(`animation.set`, "amb@code_human_police_investigate@idle_a", "idle_a", 8, 1);
    },
    "Знизати плечима": () => {
        mp.events.callRemote(`animation.set`, "gestures@m@standing@casual", "gesture_what_soft", 8, 1);
    },
    "Танець 1": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_partying@female@partying_beer@base", "base", 8, 1);
    },
    "Танець 2": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_strip_watch_stand@male_a@idle_a", "idle_c", 8, 1);
    },
    "Танець 3": () => {
        mp.events.callRemote(`animation.set`, "mini@strip_club@idles@dj@idle_04", "idle_04", 8, 1);
    },
    "Танець 4": () => {
        mp.events.callRemote(`animation.set`, "mini@strip_club@lap_dance@ld_girl_a_song_a_p1", "ld_girl_a_song_a_p1_f", 8, 1);
    },
    "Танець 5": () => {
        mp.events.callRemote(`animation.set`, "special_ped@mountain_dancer@monologue_3@monologue_3a", "mnt_dnc_buttwag", 8, 1);
    },
    "Танець 6": () => {
        mp.events.callRemote(`animation.set`, "mini@strip_club@private_dance@part1", "priv_dance_p1", 8, 1);
    },
    "Танець 7": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj@", "hi_dance_facedj_09_v2_female^1", 8, 1);
    },
    "Танець 8": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj@", "hi_dance_facedj_09_v2_female^3", 8, 1);
    },
    "Танець 9": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj@", "hi_dance_facedj_09_v2_male^2", 8, 1);
    },
    "Танець 10": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj@", "hi_dance_facedj_09_v2_male^4", 8, 1);
    },
    "Танець 11": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_09_v1_female^1", 8, 1);
    },
    "Танець 12": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_09_v2_female^1", 8, 1);
    },
    "Танець 13": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_09_v2_female^3", 8, 1);
    },
    "Танець 14": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_11_v1_female^1", 8, 1);
    },
    "Танець 15": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_13_v2_female^1", 8, 1);
    },
    "Танець 16": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@lazlow@hi_podium@", "danceidle_mi_17_crotchgrab_laz", 8, 1);
    },
    "Танець 17": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@lazlow@hi_podium@", "danceidle_mi_17_teapotthrust_laz", 8, 1);
    },
    "Танець 18": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@lazlow@hi_railing@", "ambclub_09_mi_hi_bellydancer_laz", 8, 1);
    },
    "Танець 19": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@lazlow@hi_railing@", "ambclub_10_mi_hi_crotchhold_laz", 8, 1);
    },
    "Танець 20": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@lazlow@hi_railing@", "ambclub_12_mi_hi_bootyshake_laz", 8, 1);
    },
    "Танець 21": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@lazlow@hi_railing@", "ambclub_13_mi_hi_sexualgriding_laz", 8, 1);
    },
    "Танець 22": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@mini@dance@dance_solo@female@var_a@", "med_center", 8, 1);
    },
    "Танець 23": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@mini@dance@dance_solo@male@var_b@", "med_center", 8, 1);
    },
    "Танець 24": () => {
        mp.events.callRemote(`animation.set`, "timetable@tracy@ig_5@idle_a", "idle_a", 8, 1);
    },
    "Танець 25": () => {
        mp.events.callRemote(`animation.set`, "timetable@tracy@ig_5@idle_b", "idle_e", 8, 1);
    },
    "Танець 26": () => {
        mp.events.callRemote(`animation.set`, "missfbi3_sniping", "dance_m_default", 8, 1);
    },
    "Танець 27": () => {
        mp.events.callRemote(`animation.set`, "special_ped@mountain_dancer@monologue_2@monologue_2a", "mnt_dnc_angel", 8, 1);
    },
    "Чечітка": () => {
        mp.events.callRemote(`animation.set`, "special_ped@mountain_dancer@monologue_1@monologue_1a", "mtn_dnc_if_you_want_to_get_to_heaven", 8, 1);
    },
    "Відірватись по повній": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@mini@dance@dance_solo@male@var_a@", "high_center_up", 8, 1);
    },
    "Відірватись по повній 2": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@mini@dance@dance_solo@female@var_a@", "high_center_down", 8, 1);
    },
    "Нічний клуб": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@mini@dance@dance_solo@female@var_a@", "low_center_up", 8, 1);
    },
    "Нічний клуб 2": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity", "li_dance_facedj_09_v1_male^2", 8, 1);
    },
    "Нічний клуб 3": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj@low_intesnsity", "li_dance_facedj_09_v1_male^1", 8, 1);
    },
    "Нічний клуб 4": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@solomun_entourage@", "mi_dance_facedj_17_v1_female^1", 8, 1);
    },
    "Нічний клуб 5": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity", "hi_dance_facedj_09_v2_female^3", 8, 1);
    },
    "Нічний клуб 6": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@mini@dance@dance_solo@female@var_b@", "high_center", 8, 1);
    },
    "Нічний клуб 7": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj@", "hi_dance_facedj_09_v1_female^6", 8, 1);
    },
    "Пластика": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_prostitute@cokehead@idle_a", "idle_a", 8, 1);
    },
    "Пластика 2": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_prostitute@cokehead@idle_a", "idle_c", 8, 1);
    },
    "Еротичний": () => {
        mp.events.callRemote(`animation.set`, "mini@strip_club@lap_dance_2g@ld_2g_p2", "ld_2g_p2_s1", 8, 1);
    },
    "Енергія руками": () => {
        mp.events.callRemote(`animation.set`, "misschinese2_crystalmazemcs1_ig", "dance_loop_tao", 8, 1);
    },
    "Невмілий": () => {
        mp.events.callRemote(`animation.set`, "amb@world_human_partying@female@partying_beer@idle_a", "idle_b", 8, 1);
    },
    "Плавний": () => {
        mp.events.callRemote(`animation.set`, "rcmnigel1bnmt_1b", "dance_intro_tyler", 8, 1);
    },
    "Плавний 2": () => {
        mp.events.callRemote(`animation.set`, "mini@strip_club@lap_dance_2g@ld_2g_p3", "ld_2g_p3_s2", 8, 1);
    },
    "Плавний 3": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj@", "hi_dance_facedj_09_v2_female^1", 8, 1);
    },
    "Шафл 1": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "high_center_down", 8, 1);
    },
    "Шафл 2": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "high_center_up", 8, 1);
    },
    "Шафл 3": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "high_left", 8, 1);
    },
    "Шафл 4": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "high_left_down", 8, 1);
    },
    "Шафл 5": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "high_left_up", 8, 1);
    },
    "Шафл 6": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "high_right", 8, 1);
    },
    "Шафл 7": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "high_right_down", 8, 1);
    },
    "Шафл 8": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "high_right_up", 8, 1);
    },
    "Шафл 9": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "low_center", 8, 1);
    },
    "Шафл 10": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "low_center_down", 8, 1);
    },
    "Шафл 11": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "low_center_up", 8, 1);
    },
    "Шафл 12": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "low_left", 8, 1);
    },
    "Шафл 13": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "low_left_down", 8, 1);
    },
    "Шафл 14": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "low_left_up", 8, 1);
    },
    "Шафл 15": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "low_right", 8, 1);
    },
    "Шафл 16": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "low_right_down", 8, 1);
    },
    "Шафл 17": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "low_right_up", 8, 1);
    },
    "Шафл 18": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "med_center", 8, 1);
    },
    "Шафл 19": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "med_center_down", 8, 1);
    },
    "Шафл 20": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "med_center_up", 8, 1);
    },
    "Шафл 21": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "med_left", 8, 1);
    },
    "Шафл 22": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "med_left_down", 8, 1);
    },
    "Шафл 23": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "med_left_up", 8, 1);
    },
    "Шафл 24": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "med_right", 8, 1);
    },
    "Шафл 25": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "med_right_down", 8, 1);
    },
    "Шафл 26": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@mini@dance@dance_solo@female@var_b@", "med_right_up", 8, 1);
    },
    "Шафл 27": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@djs@black_madonna@", "dance_b_idle_a_blamadon", 8, 1);
    },
    "Танець 28": () => {
        mp.events.callRemote(`animation.set`, "amb@code_human_in_car_mp_actions@dance@bodhi@rds@base", "idle_a", 8, 1);
    },
    "Танець 29": () => {
        mp.events.callRemote(`animation.set`, "amb@code_human_in_car_mp_actions@dance@bodhi@rds@base", "idle_b", 8, 1);
    },
    "Танець 30": () => {
        mp.events.callRemote(`animation.set`, "amb@code_human_in_car_music@generic@ps@idle_a", "idle_a", 8, 1);
    },
    "Танець 31": () => {
        mp.events.callRemote(`animation.set`, "amb@code_human_in_car_music@low@ps@idle_a", "idle_b", 8, 1);
    },
    "Змійка": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj@hi_intensity", "hi_dance_facedj_09_v2_female^1", 8, 1);
    },
    "За барною стійкою": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@club_ambientpeds@", "mi-hi_amb_club_13_v1_female^1", 8, 1);
    },
    "За барною стійкою 2": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@club_ambientpeds@", "mi-hi_amb_club_11_v1_female^1", 8, 1);
    },
    "За барною стійкою 3": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@club_ambientpeds@med-hi_intensity", "mi-hi_amb_club_11_v1_female^6", 8, 1);
    },
    "За барною стійкою 4": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@club_ambientpeds@med-hi_intensity", "mi-hi_amb_club_09_v1_male^3", 8, 1);
    },
    "У відриві": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@lazlow@hi_podium@", "danceidle_hi_11_turnaround_laz", 8, 1);
    },
    "У відриві 2": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@lazlow@hi_podium@", "danceidle_hi_15_crazyrobot_laz", 8, 1);
    },
    "Танець 32": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj@", "hi_dance_facedj_13_v2_female^6", 8, 1);
    },
    "Діджей": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@djs@dixon@", "dixn_dance_a_dixon", 8, 1);
    },
    "Розв’язний": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj_transitions@", "trans_dance_facedj_hi_to_li_09_v1_female^1", 8, 1);
    },
    "Трясти руками": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj_transitions@", "trans_dance_facedj_hi_to_li_09_v1_female^6", 8, 1);
    },
    "Танець зайчика": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj_transitions@from_med_intensity", "trans_dance_facedj_mi_to_hi_08_v1_female^3", 8, 1);
    },
    "Флекс правою рукою": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj_transitions@from_med_intensity", "trans_dance_facedj_mi_to_hi_08_v1_male^1", 8, 1);
    },
    "Флекс двома руками": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_facedj_transitions@from_med_intensity", "trans_dance_facedj_mi_to_hi_08_v1_male^3", 8, 1);
    },
    "Вертихвістка": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_09_v2_female^5", 8, 1);
    },
    "Вертихвістка 2": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_09_v2_female^6", 8, 1);
    },
    "Клубна": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_09_v1_female^3", 8, 1);
    },
    "Клубна 2": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_09_v2_male^2", 8, 1);
    },
    "Рухати кулаками": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_09_v1_male^3", 8, 1);
    },
    "Хаслити": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_09_v1_male^6", 8, 1);
    },
    "Клубна 3": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_17_v2_female^1", 8, 1);
    },
    "Клубна 4": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_17_v1_female^2", 8, 1);
    },
    "Клубна 5": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_17_v1_female^3", 8, 1);
    },
    "Клубна 6": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_17_v1_female^6", 8, 1);
    },
    "Клубна 7": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_15_v1_female^1", 8, 1);
    },
    "Клубна 8": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_15_v1_female^2", 8, 1);
    },
    "Клубна 9": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_groups@", "hi_dance_crowd_15_v1_female^3", 8, 1);
    },
    "Танцювати з напоєм": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@dancers@crowddance_single_props@", "hi_dance_prop_09_v1_female^2", 8, 1);
    },
    "Тосі Слайд": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_3", "toosie_slide", 8, 1);
    },
    "Снупдогідог": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_3", "tidy", 8, 1);
    },
    "Стиль журавля": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_3", "the_crane_kick", 8, 1);
    },
    "Танець лузера": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_3", "take_the_l", 8, 1);
    },
    "Танець курчати": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_3", "like_to_move", 8, 1);
    },
    "Лейт Еломр": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_3", "leilt_elomr", 8, 1);
    },
    "Я не боюсь": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_3", "i_aint_afraid", 8, 1);
    },
    "Бі Ті Сі": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_3", "get_gone", 8, 1);
    },
    "Флекс": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_3", "electro_shuffle", 8, 1);
    },
    "Біллі Баунс": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_3", "billy_bounce", 8, 1);
    },
    "Гопака з стрибком": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "blinding_lights", 8, 1);
    },
    "Бугі-вугі": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "boogie_down", 8, 1);
    },
    "Ковбой": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "cowboy_dance", 8, 1);
    },
    "Баунс": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "crossbounce", 8, 1);
    },
    "Діско": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "disco_dance", 8, 1);
    },
    "Впевнений в собі": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "dont_start_now", 8, 1);
    },
    "Махати руками": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "floss_dance", 8, 1);
    },
    "Фрешмен": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "fresh", 8, 1);
    },
    "Опа гангмен стайл!": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "gangnam_style", 8, 1);
    },
    "Хіп-хоп": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "hip_hop", 8, 1);
    },
    "Справжній флоу": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "the_flow", 8, 1);
    },
    "Танець жабки": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "jabba_switchway", 8, 1);
    },
    "Танцювати ногами": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "step_it_up", 8, 1);
    },
    "З перегортанням": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "last_forever", 8, 1);
    },
    "Низький флєкс": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "squat_kick", 8, 1);
    },
    "Макарена": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "macarena", 8, 1);
    },
    "Шафл": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "shuffle2", 8, 1);
    },
    "Осідлати когось": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "ridethepony_v2", 8, 1);
    },
    "Дуже модний": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "rollie", 8, 1);
    },
    "Протест": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_1", "say_so", 8, 1);
    },
    "Курячі крильця": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "chicken_wing", 8, 1);
    },
    "Танець 33": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "zany", 8, 1);
    },
    "Електро": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "electro_swing", 8, 1);
    },
    "Танець 34": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "stuck", 8, 1);
    },
    "Танець 35": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "gridy", 8, 1);
    },
    "Танець 36": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "hit_it", 8, 1);
    },
    "Танець 37": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "sprinkler", 8, 1);
    },
    "Танець 38": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "leave_door_open", 8, 1);
    },
    "Дивись на мої шкарпетки": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "socks", 8, 1);
    },
    "Танець 39": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "my_world", 8, 1);
    },
    "Танець 40": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "savage", 8, 1);
    },
    "Танець 41": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "onda", 8, 1);
    },
    "Танець 42": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "renegade", 8, 1);
    },
    "Танець 43": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_2", "pump_up", 8, 1);
    },
    "Сидіти (Упевнено)": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@business@cfid@cfid_desk_no_work_bgen_chair_no_work@", "leg_smacking_lazyworker", 8, 1);
    },
    "Сидіти (Упевнено) 2": () => {
        mp.events.callRemote(`animation.set`, "mp_am_stripper", "lap_dance_player", 8, 1);
    },
    "Сидіти на бордюрі": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@business@cfm@cfm_machine_no_work@", "transition_sleep_v1_operator", 8, 1);
    },
    "Сидіти (Психолог)": () => {
        mp.events.callRemote(`animation.set`, "missdrfriedlanderdrf_idles", "drf_idle_drf", 8, 1);
    },
    "Сидіти (Чілл)": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@business@cfid@cfid_desk_no_work_bgen_chair_no_work@", "look_around_v1_lazyworkerfemale", 8, 1);
    },
    "Сидіти нормально": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@business@bgen@bgen_no_work@", "sit_phone_phoneputdown_idle-noworkfemale", 8, 1);
    },
    "Сидіти схрестив руки": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@business@bgen@bgen_no_work@", "sit_phone_phoneputdown_idle_nowork", 8, 1);
    },
    "Сидіти": () => {
        mp.events.callRemote(`animation.set`, "amb@code_human_in_bus_passenger_idles@male@sit@idle_a", "idle_c", 8, 1);
    },
    "Сидіти 2": () => {
        mp.events.callRemote(`animation.set`, "rcm_barry3", "barry_3_sit_loop", 8, 1);
    },
    "Сидіти на пляжі": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@business@bgen@bgen_no_work@", "sit_phone_phoneputdown_fallasleep_nowork", 8, 1);
    },
    "Сидіти на туалеті": () => {
        mp.events.callRemote(`animation.set`, "switch@trevor@on_toilet", "trev_on_toilet_loop", 8, 1);
    },
    "Сидіти на пляжі 2": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@business@bgen@bgen_no_work@", "sit_phone_phoneputdown_wakeup_nowork", 8, 1);
    },
    "Сидіти на пляжі 3": () => {
        mp.events.callRemote(`animation.set`, "anim@heists@fleeca_bank@ig_7_jetski_owner", "owner_idle", 8, 1);
    },
    "Сидіти на пляжі 4": () => {
        mp.events.callRemote(`animation.set`, "amb@lo_res_idles@", "world_human_picnic_female_lo_res_base", 8, 1);
    },
    "Сидіти на пляжі 5": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@business@bgen@bgen_no_work@", "sit_phone_idle_01_nowork", 8, 1);
    },
    "Сидіти на пляжі 6": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@business@bgen@bgen_no_work@", "sit_phone_idle_01-noworkfemale", 8, 1);
    },
    "Сидіти на пляжі 7": () => {
        mp.events.callRemote(`animation.set`, "missheist_jewel", "jh_2b_endloop_male2", 8, 1);
    },
    "Загорати на праву ногу": () => {
        mp.events.callRemote(`animation.set`, "switch@trevor@annoys_sunbathers", "trev_annoys_sunbathers_loop_girl", 8, 1);
    },
    "Загорати на ліву ногу": () => {
        mp.events.callRemote(`animation.set`, "switch@trevor@annoys_sunbathers", "trev_annoys_sunbathers_loop_guy", 8, 1);
    },
    "Гопнік": () => {
        mp.events.callRemote(`animation.set`, "missheistdockssetup1ig_10@base", "talk_pipe_base_worker1", 8, 1);
    },
    "Сидіти зі зброєю": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@range@assemble_guns@", "expel_cartridge_01_amy_skater_01", 8, 1);
    },
    "Сидіти за стойкою": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@office@boardroom@boss@male@", "idle_c", 8, 1);
    },
    "Сидіти на барному стулі": () => {
        mp.events.callRemote(`animation.set`, "amb@prop_human_seat_bar@male@hands_on_bar@base", "base", 8, 1);
    },
    "Сидіти на кортах": () => {
        mp.events.callRemote(`animation.set`, "anim@special_peds@casino@vince@steps@cas_vince_ig2", "cas_vince_ig2_id_go_home", 8, 1);
    },
    "Сидіти 3": () => {
        mp.events.callRemote(`animation.set`, "switch@michael@sitting", "idle", 8, 1);
    },
    "Сидіти 4": () => {
        mp.events.callRemote(`animation.set`, "timetable@michael@on_chairbase", "on_chair_base", 8, 1);
    },
    "Сидіти 5": () => {
        mp.events.callRemote(`animation.set`, "random@robbery", "sit_down_idle_01", 8, 1);
    },
    "Присісти": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@out_of_money@ped_male@02b@idles", "idle_a", 8, 1);
    },
    "Тільки не бийте": () => {
        mp.events.callRemote(`animation.set`, "anim@heists@prison_heistunfinished_biz@popov_react", "popov_cower", 8, 1);
    },
    "Просити пощади": () => {
        mp.events.callRemote(`animation.set`, "amb@code_human_cower@male@react_cowering", "base_front", 8, 1);
    },
    "Розвалитися": () => {
        mp.events.callRemote(`animation.set`, "timetable@trevor@smoking_meth@base", "base", 8, 1);
    },
    "Лежати на шезлонгу": () => {
        mp.events.callRemote(`animation.set`, "switch@michael@sunlounger", "sunlounger_idle", 8, 1);
    },
    "Лежати в ліжку": () => {
        mp.events.callRemote(`animation.set`, "saveveniceb@", "t_sleep_r_loop_veniceb", 8, 1);
    },
    "Лежати на шезлонгу 2": () => {
        mp.events.callRemote(`animation.set`, "timetable@michael@on_clubchairidle_a", "on_clubchair_b", 8, 1);
    },
    "Лежати на шезлонгу 3": () => {
        mp.events.callRemote(`animation.set`, "switch@michael@lounge_chairs", "001523_01_mics3_9_lounge_chairs_idle_ama", 8, 1);
    },
    "Лежати на шезлонгу 4": () => {
        mp.events.callRemote(`animation.set`, "amb@prop_human_seat_sunlounger@male@idle_a", "idle_a", 8, 1);
    },
    "Лежати на шезлонгу 5": () => {
        mp.events.callRemote(`animation.set`, "amb@prop_human_seat_sunlounger@female@idle_a", "idle_a", 8, 1);
    },
    "Лежати на шезлонгу 6": () => {
        mp.events.callRemote(`animation.set`, "amb@prop_human_seat_sunlounger@female@base", "base", 8, 1);
    },
    "Сидіти на землі 2": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@business@bgen@bgen_no_work@", "sit_phone_idle_02_nowork", 8, 1);
    },
    "Стояти на колінах": () => {
        mp.events.callRemote(`animation.set`, "misstrevor1", "ortega_outro_loop_ort", 8, 1);
    },
    "Присісти 2": () => {
        mp.events.callRemote(`animation.set`, "rcmjosh3", "sit_stairs_idle", 8, 1);
    },
    "Присісти 3": () => {
        mp.events.callRemote(`animation.set`, "anim@heists@fleeca_bank@ig_7_jetski_owner", "owner_idle", 8, 1);
    },
    "Сидіти за баром": () => {
        mp.events.callRemote(`animation.set`, "amb@prop_human_seat_bar@female@left_elbow_on_bar@idle_a", "idle_a", 8, 1);
    },
    "Джакузі": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@yacht@jacuzzi@seated@female@variation_01@", "base", 8, 1);
    },
    "Джакузі 2": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@yacht@jacuzzi@seated@female@variation_02@", "base", 8, 1);
    },
    "Джакузі 3": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@yacht@jacuzzi@seated@female@variation_05@", "base", 8, 1);
    },
    "Джакузі 4": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@yacht@jacuzzi@seated@male@variation_03@", "base", 8, 1);
    },
    "Сидіти з головою на руках": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@casino@out_of_money@ped_female@01a@idles", "idle_d", 8, 1);
    },
    "Сидіти розслаблено": () => {
        mp.events.callRemote(`animation.set`, "rcmnigel1a_band_groupies", "base_m1", 8, 1);
    },
    "Сидіти оглядаючись": () => {
        mp.events.callRemote(`animation.set`, "rcmtmom_1leadinout", "tmom_1_rcm_p3_leadout_loop", 8, 1);
    },
    "Сидіти впевнено": () => {
        mp.events.callRemote(`animation.set`, "timetable@reunited@ig_10", "base_jimmy", 8, 1);
    },
    "Сидіти нога на ногу": () => {
        mp.events.callRemote(`animation.set`, "timetable@reunited@ig_10", "isthisthebest_amanda", 8, 1);
    },
    "Сидіти перемикаючи ТВ": () => {
        mp.events.callRemote(`animation.set`, "timetable@reunited@ig_10", "watching_this_amanda", 8, 1);
    },
    "Сидіти перемикаючи ТВ 2": () => {
        mp.events.callRemote(`animation.set`, "safe@franklin@ig_13", "tv_idle_a", 8, 1);
    },
    "Плакати сидячі": () => {
        mp.events.callRemote(`animation.set`, "switch@trevor@floyd_crying", "console_end_loop_floyd", 8, 1);
    },
    "Сидіти у креслі": () => {
        mp.events.callRemote(`animation.set`, "switch@trevor@mocks_lapdance", "001443_01_trvs_28_exit_man", 8, 1);
    },
    "Сидіти сумно": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@nightclub@lazlow@lo_alone@", "lowalone_base_laz", 8, 1);
    },
    "Сидіти розмовляючи": () => {
        mp.events.callRemote(`animation.set`, "timetable@tracy@ig_14@", "ig_14_idle_b_reallyloveudad_tracy", 8, 1);
    },
    "Сидіти у клубі": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@clubhouse@boss@female@", "idle_a", 8, 1);
    },
    "Сидіти у клубі 2": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@clubhouse@boss@female@", "idle_b", 8, 1);
    },
    "Сидіти у клубі 3": () => {
        mp.events.callRemote(`animation.set`, "anim@amb@clubhouse@boss@female@", "idle_c", 8, 1);
    },
    "Бім бам бум": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_4", "bim_bam_boom", 8, 1);
    },
    "Хола": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_4", "hula", 8, 1);
    },
    "На вечірці": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_4", "in_da_party", 8, 1);
    },
    "Інфікований": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_4", "infectious", 8, 1);
    },
    "Джиттербаг": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_4", "jitterbug", 8, 1);
    },
    "Невер Гонна": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_4", "never_gonna", 8, 1);
    },
    "Реанімований": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_4", "reanimated", 8, 1);
    },
    "Живий": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_4", "vivacious", 8, 1);
    },
    "Де Метт?": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_4", "where_is_matt", 8, 1);
    },
    "Повне відпрацювання": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_4", "work_it_out", 8, 1);
    },
    "Просунута Математика": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_5", "advanced_math", 8, 1);
    },
    "Смілива позиція": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_5", "bold_stance", 8, 1);
    },
    "Бомбастік": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_5", "bombastic", 8, 1);
    },
    "Танець краба": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_5", "crabby", 8, 1);
    },
    "Танцювальна терапія": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_5", "dance_therapy", 8, 1);
    },
    "Мрія": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_5", "daydream", 8, 1);
    },
    "Позаземний": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_5", "extraterrestrial", 8, 1);
    },
    "Інтенсивний": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_5", "intensity", 8, 1);
    },
    "Вайб": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_5", "its_a_vibe", 8, 1);
    },
    "Щедрий": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_5", "lavish", 8, 1);
    },
    "Без кісток": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_6", "boneless", 8, 1);
    },
    "Танець Офіцера": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_6", "buckle_up", 8, 1);
    },
    "Конга": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_6", "conga", 8, 1);
    },
    "Шалені ніжки": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_6", "crazy_feet", 8, 1);
    },
    "Глибина танцю": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_6", "deep_end", 8, 1);
    },
    "Мрійливі ніжки": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_6", "dream_feet", 8, 1);
    },
    "Всі люблять мене": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_6", "everybody_loves_me", 8, 1);
    },
    "Флюкс": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_6", "flux", 8, 1);
    },
    "Вільний флоу": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_6", "free_flow", 8, 1);
    },
    "Вільні рухи": () => {
        mp.events.callRemote(`animation.set`, "quant_anim_6", "freedom_wheels", 8, 1);
    }
};

var vehicleItemHandlers = {
    "Викинути з транспорту": () => {
        if (!mp.players.local.vehicle) return rpc.callBrowser(browserMenu, "nError", `Ти не у транспорті!`)
        let players = getOccupants(mp.interactionEntity.remoteId);
        if (players.length <= 1) return rpc.callBrowser(browserMenu, "nError", `Нема пасажирів!`)
        if (players.length == 2) {
            players.forEach((pl) => {
                if (pl.remoteId != mp.players.local.remoteId) mp.events.callRemote("playerRemoveFromVehicle", JSON.stringify({ value: pl.remoteId }))
            }) 
        }
        else {
            mp.events.call("modal.show", "default_action", JSON.stringify({ text: `Введи ID гравця:`, freeValue: true, title: "Викинути гравця з транспорту", method: "playerRemoveFromVehicle" }))
        }
    }, 
    "Обшукати": () => {
        mp.events.callRemote(`startFrisk`, mp.interactionEntity.remoteId, mp.interactionEntity.type);
    },
    "Витягти закованого": () => {
        let players = getOccupants(mp.interactionEntity.remoteId)
        if (players.length < 1) return rpc.callBrowser(browserMenu, "nError", `Нема пасажирів!`)
        mp.events.call("modal.show", "default_action", JSON.stringify({ freeValue: true, text: `Вкажіть ID гравця якого необхідно витягти`, title: "Витягування", method: "removeFromVehicleUsingLockPick", vehId: mp.interactionEntity.remoteId })); 
    },
    "Евакуювати": () => {
        mp.events.callRemote(`startEvacuateCar`, mp.interactionEntity.remoteId);
    },
    "Виписати штраф": () => {
        mp.events.callRemote(`showVehicleFinesModal`, mp.interactionEntity.remoteId);
    },
    "Полагодити ремкомплектом": () => {
        mp.events.callRemote("item.useRepairKit", mp.interactionEntity.remoteId)
    },
    "Двері": () => {
        mp.events.callRemote("VehicleLockHandler", JSON.stringify({ value: mp.interactionEntity.remoteId, flag: 2 }));
    },
    "Замінити мастило": () => { 
        mp.events.callRemote("repairVehicleSystemOil", mp.interactionEntity.remoteId);
    },
    "Замінити акумулятор": () => { 
        mp.events.callRemote("repairVehicleSystemBattery", mp.interactionEntity.remoteId);
    },
    "Капот": () => { 
        mp.events.callRemote("vehicle.hood", mp.interactionEntity.remoteId);
    },
    "Багажник": () => { 
        mp.events.callRemote("vehicle.boot.inventory", mp.interactionEntity.remoteId);
    },
    "Багажник ": () => { 
        mp.events.callRemote("vehicle.boot", mp.interactionEntity.remoteId);
    },
    "Залізти в багажник": () => { 
        let veh = mp.interactionEntity
        if (!mp.vehicles.exists(veh)) return  rpc.callBrowser(browserMenu, "nError", `Авто не знайдено!`);
        let pos = veh.position;
        let localPos = mp.players.local.position;
        let dist = mp.game.system.vdist(pos.x, pos.y, pos.z, localPos.x, localPos.y, localPos.z);
        if (dist > 5) return  rpc.callBrowser(browserMenu, "nError", `Транспорт занадто далеко!`);
        mp.events.callRemote(`putIntoTrunk`, "self", mp.interactionEntity.remoteId);
    },
    "Покласти ящик": () => { 
        mp.events.callRemote("familiesQuestsLoadVehicle", mp.interactionEntity.remoteId);
    },
    "Взяти ящик": () => { 
        mp.events.callRemote("familiesQuestsUnloadVehicle", mp.interactionEntity.remoteId);
    },
    "Зламати барак": () => { 
        mp.events.callRemote("criminalUnlockBarracks", mp.interactionEntity.remoteId);
    },
    "Ціна проїзду": () => {
        mp.events.callRemote("showModalTaxiFare", mp.interactionEntity.remoteId);
    },
    "Ціна їжі": () => {
        mp.events.callRemote("setPriceAtFoodSeller", mp.interactionEntity.remoteId)
    },
    "Полагодити": () => { 
        mp.events.callRemote("mechanicActionInteractionMenu", "Полагодити", mp.interactionEntity.remoteId); 
    },
    "Заправити транспорт": () => {
        mp.events.callRemote("mechanicActionInteractionMenu", "Заправити транспорт", mp.interactionEntity.remoteId);  
    },
    "Продати ремкомплект": () => { 
        mp.events.callRemote("mechanicActionInteractionMenu", "Продати ремкомплект", mp.interactionEntity.remoteId);   
    },
    "Продати каністру": () => { 
        mp.events.callRemote("mechanicActionInteractionMenu", "Продати каністру", mp.interactionEntity.remoteId); 
    }, 
    "Заміна акумулятору": () => { 
        mp.events.callRemote("mechanicActionInteractionMenu", "Замінити акумулятор", mp.interactionEntity.remoteId); 
    }, 
    "Заміна оливи": () => { 
        mp.events.callRemote("mechanicActionInteractionMenu", "Замінити оливу", mp.interactionEntity.remoteId); 
    }, 
    "Встановити номери": () => {
        mp.events.callRemote("setNumberplate", mp.interactionEntity.remoteId)
    },
    "Зняти номери": () => {
        mp.events.callRemote("removeNumberplate", mp.interactionEntity.remoteId)
    },
    "Штовхати": () => {
        mp.events.call("startPushVehicle", mp.interactionEntity.remoteId)
    },
    "Викинути з багажнику": () => { 
        mp.events.callRemote(`removeFromTrunk`, mp.interactionEntity.remoteId);
    },
    "Заправити каністрою": () => {
        mp.events.callRemote("item.fuelCar", mp.interactionEntity.remoteId);
    },
    "Використати повербанк": () => {
        mp.events.callRemote("item.fuelCarElectro", mp.interactionEntity.remoteId);
    },
    "Інфо": () => {
        mp.events.callRemote("showVehicleInfo", mp.interactionEntity.remoteId);
    },
    "Змінити бронежилет": () => {
        mp.events.callRemote("vehicle.armorForLaw", mp.interactionEntity.remoteId);
    },
    "Мегафон: Зупинка": () => { 
        //return rpc.callBrowser(browserMenu, "nError", `Тимчасово недоступно, вибачаємось за незручності!`)
        mp.events.callRemote("megaphoneInteractionMenu", "Зупинка"); 
    }, 
    "Мегафон: Дорогу": () => { 
        //return rpc.callBrowser(browserMenu, "nError", `Тимчасово недоступно, вибачаємось за незручності!`)
        mp.events.callRemote("megaphoneInteractionMenu", "Дорогу"); 
    }, 
    "Мегафон: Колона": () => { 
        //return rpc.callBrowser(browserMenu, "nError", `Тимчасово недоступно, вибачаємось за незручності!`)
        mp.events.callRemote("megaphoneInteractionMenu", "Колона"); 
    }, 
    "Мегафон: Кидайте зброю": () => { 
        //return rpc.callBrowser(browserMenu, "nError", `Тимчасово недоступно, вибачаємось за незручності!`)
        mp.events.callRemote("megaphoneInteractionMenu", "Зброя"); 
    }, 
    "Передати сім’ї": () => {
        mp.events.callRemote(`giveVehicleToFamily`, mp.interactionEntity.remoteId);
    },
    "Вилучити з сім’ї": () => {
        mp.events.callRemote(`sellFamilyCarToGov`, mp.interactionEntity.remoteId);
    },
    "Увімкнути сабвуфер": () => {
        mp.events.callRemote(`item.useCarSound`)
    },
    "Вимкнути сабвуфер": () => {
        mp.events.callRemote(`disableLocalVehicleSound`)
    },
    "Налаштувати сабвуфер": () => {
        mp.events.callRemote(`item.updateCarSound`)
    },
};

mp.events.add("interactionMenu.onClickAnimation", (itemName) => {
    if (playerItemHandlers[itemName]) playerItemHandlers[itemName]();
})

mp.events.add("interactionMenu.onClickPlayerItem", (itemName, notclose) => {
    if (!mp.interactionEntity) return rpc.callBrowser(browserMenu, "nError", `Гравець далеко!`)
    if (playerItemHandlers[itemName]) {
        let callback = playerItemHandlers[itemName]();
        if (callback == 'notclose') return
    }
        
    if (!notclose) mp.events.call("interactionMenu.hide");
    
});

mp.events.add("interactionMenu.onClickVehicleItem", (itemName) => {
    if (!mp.interactionEntity) return rpc.callBrowser(browserMenu, "nError", `Транспорт далеко!`)
    if (vehicleItemHandlers[itemName])
        vehicleItemHandlers[itemName]();
    if (itemName != "Встановити номери") mp.events.call("interactionMenu.hide");
}); 

mp.events.add("showAnimations", (data) => {
    if (data) mp.interfaceActive = "animations"
    else mp.interfaceActive = false
    browserMenu.call(`animations`, `show`, data)
})

let animationsParams = null

mp.events.add("updateAnimationsParams", async () => {
    animationsParams = await rpc.callServer("getAnimationsParams")
    browserMenu.call(`animations`, `setAnimationsParams`, animationsParams)
})

mp.events.add("addBattlePassUniqueItems", (type, items) =>{ 
    if (type == "animation") browserMenu.call("animations", "addUniqueItems", items)
});

mp.altPressed = false

mp.keys.bindEx(0x11, true, () => { //ctrl
    if (mp.bindBlocker()) return
    mp.altPressed = true
})

mp.keys.bindEx(0x11, false, () => { //ctrl
    // if (mp.bindBlocker()) return
    mp.altPressed = false
})

mp.keys.bindEx(0x31, true, () => { //1
    if (mp.bindBlocker()) return
    if (mp.altPressed) browserMenu.call(`animations`, `bindPressed`, 0)
}, "Швидка анімація 1")

mp.keys.bindEx(0x32, true, () => { //2
    if (mp.bindBlocker()) return
    if (mp.altPressed) browserMenu.call(`animations`, `bindPressed`, 1)
}, "Швидка анімація 2")

mp.keys.bindEx(0x33, true, () => { //3
    if (mp.bindBlocker()) return
    if (mp.altPressed) browserMenu.call(`animations`, `bindPressed`, 2)
}, "Швидка анімація 3")

mp.keys.bindEx(0x34, true, () => { //4
    if (mp.bindBlocker()) return
    if (mp.altPressed) browserMenu.call(`animations`, `bindPressed`, 3)
}, "Швидка анімація 4")

mp.keys.bindEx(0x35, true, () => { //5
    if (mp.bindBlocker()) return
    if (mp.altPressed) browserMenu.call(`animations`, `bindPressed`, 4)
}, "Швидка анімація 5")

mp.keys.bindEx(0x36, true, () => { //6
    if (mp.bindBlocker()) return
    if (mp.altPressed) browserMenu.call(`animations`, `bindPressed`, 5)
}, "Швидка анімація 6")

mp.keys.bindEx(0x37, true, () => { //7
    if (mp.bindBlocker()) return
    if (mp.altPressed) browserMenu.call(`animations`, `bindPressed`, 6)
}, "Швидка анімація 7")

mp.keys.bindEx(0x38, true, () => { //8
    if (mp.bindBlocker()) return
    if (mp.altPressed) browserMenu.call(`animations`, `bindPressed`, 7)
}, "Швидка анімація 8")

mp.keys.bindEx(0x39, true, () => { //9
    if (mp.bindBlocker()) return
    if (mp.altPressed) browserMenu.call(`animations`, `bindPressed`, 8)
}, "Швидка анімація 9")


}; a; }
{let a = function scriptEntryPoint(mp) {
let RoutedBlip;

mp.events.add("setInventoryLock", (bool) => {
    mp.setInventoryLock = bool
})

mp.events.add("client::getHashKey", (key) => {
    mp.game.graphics.notify(`Key is: ${key}, hash is ${mp.game.gameplay.getHashKey(key)}`)
    let data = {
        key: key,
        hash: mp.game.gameplay.getHashKey(key)
    }
    mp.events.callRemote("server::saveHashToFile", JSON.stringify(data))
})  
mp.events.add("client::getVehicleModel", (key) => {
    key = parseInt(key)
    //mp.game.graphics.notify(`Key is: ${key}, hash is ${mp.game.ui.getLabelText(key)}`)
}) 
mp.events.add("door", (doorIndex) => {
    var player = mp.players.local;
    player.vehicle.setDoorOpen(doorIndex, false, false);
});

mp.events.add("enableInteriorProps", (data) => {
    data = JSON.parse(data)
    let refresh_interiors = []
    for (let key in data) {
        if (!refresh_interiors.includes(data[key].interior_id)) refresh_interiors.push(data[key].interior_id)
        mp.game.interior.enableInteriorProp(data[key].interior_id, data[key].hash_name);
    } 
    for (let key in refresh_interiors) {
        mp.game.interior.refreshInterior(refresh_interiors[key]);
    }
})

mp.events.add("getInteriorAtCoords", () => {
    chatDebug(`Current interior: ${mp.game.interior.getInteriorAtCoords(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z)}`)
})

let createDynamicEntitiesByParams = {
    blips: [], 
    colshapes: [],
    markers: [],
    objects: [],
    radiusBlips: [],
    peds: [],
    labels: [],
    particles: []
}

let bizBlips = []

function getBizBlip (sqlId) {
    let result = undefined 
    bizBlips.forEach((entity) => {
        if (entity.bizId == sqlId) {
            result = entity
        }
    })
    return result
}

function getBlipByUniqName (uniqName) {
    let result = undefined 
    mp.blips.forEach((entity) => {
        if (entity.uniqName == uniqName) {
            result = entity
        }
    })
    return result
}

function getColshapeByUniqName (uniqName) {
    let result = undefined 
    mp.colshapes.forEach((entity) => {
        if (entity.uniqName == uniqName) {
            result = entity
        }
    })
    return result
}

function getMarkerByUniqName (uniqName) {
    let result = undefined 
    mp.markers.forEach((entity) => {
        if (entity.uniqName == uniqName) {
            result = entity
        }
    })
    return result
}

function getLabelByUniqName (uniqName) {
    let result = undefined 
    mp.labels.forEach((entity) => {
        if (entity.uniqName == uniqName) {
            result = entity
        }
    })
    return result
}

function getObjectByUniqName (uniqName) {
    let result = undefined 
    mp.objects.forEach((entity) => {
        if (entity.uniqName == uniqName) {
            result = entity
        }
    })
    return result
}

function getPedByUniqName (uniqName) {
    let result = undefined 
    mp.peds.forEach((entity) => {
        if (entity.uniqName == uniqName) {
            result = entity
        }
    })
    return result
}

function getParticleByUniqName(uniqName) {
    let result = undefined
    for (let key in createDynamicEntitiesByParams.particles) {
        if (createDynamicEntitiesByParams.particles[key].uniqName == uniqName) {
            result = createDynamicEntitiesByParams.particles[key]
        }
    }
    return result
}

function removeDynamicParticleByUniqName(uniqName) {
    const particle = getParticleByUniqName(uniqName)
    if (particle) {
        chatDebug(`removeDynamicParticleByUniqName: ${JSON.stringify(particle)}`)
        mp.game.graphics.stopParticleFxLooped(particle.particle, false);
        createDynamicEntitiesByParams.particles.splice(createDynamicEntitiesByParams.particles.indexOf(particle), 1)
    }
}

mp.events.add("removeDynamicParticleByUniqName", (uniqName) => {
    if (Array.isArray(uniqName)) uniqName.forEach((param) => removeDynamicParticleByUniqName(param))
    else removeDynamicParticleByUniqName(uniqName)
})

mp.events.add("clearDynamicParticles", () => {
    for (let key in createDynamicEntitiesByParams.particles) {
        const particle = getParticleByUniqName(createDynamicEntitiesByParams.particles[key].uniqName)
        if (particle) {
            mp.game.graphics.stopParticleFxLooped(particle.particle, false);
        }
    }
    createDynamicEntitiesByParams.particles = []
})

function createDynamicParticleByParams(params) {
    try {
        if (getParticleByUniqName(params.uniqName)) mp.events.call("removeDynamicParticleByUniqName", params.uniqName)
        const particle = {}
        if (params.type === "contrabandist" || params.type === "pilot") {
            mp.game.graphics.setPtfxAssetNextCall("core");
            particle.particle = mp.game.graphics.startParticleFxLoopedAtCoord("exp_grd_flare", params.position.x, params.position.y, params.position.z, 0, 0, 0, 3, true, true, true, false);
        }
        particle.uniqName = params.uniqName
        createDynamicEntitiesByParams.particles.push(particle)
    } catch (err) {
        chatDebug(`Error: ${err}`)
    }
}

mp.events.add("createDynamicParticleByParams", (params) => {
    if (Array.isArray(params)) params.forEach((param) => createDynamicParticleByParams(param))
    else createDynamicParticleByParams(params)
})

function getRadiusBlipByUniqName (uniqName) {
    let result = undefined 
    for (let key in createDynamicEntitiesByParams.radiusBlips) {
        if (createDynamicEntitiesByParams.radiusBlips[key].uniqName == uniqName) {
            result = createDynamicEntitiesByParams.radiusBlips[key]
        }
    }
    return result
}

function removeDynamicRadiusBlipByUniqName(uniqName) {
    const radiusBlip = getRadiusBlipByUniqName(uniqName)
    if (radiusBlip) {
        chatDebug(`removeDynamicRadiusBlipByUniqName: ${JSON.stringify(radiusBlip)}`)
        mp.game.invoke("0x45FF974EEE1C8734", radiusBlip.blip, 0); // SET_BLIP_ALPHA
        createDynamicEntitiesByParams.radiusBlips.splice(createDynamicEntitiesByParams.radiusBlips.indexOf(radiusBlip), 1) 
    } 
}

mp.events.add("removeDynamicRadiusBlipByUniqName", (uniqName) => {
    if (Array.isArray(uniqName)) uniqName.forEach((param) => removeDynamicRadiusBlipByUniqName(param)) 
    else removeDynamicRadiusBlipByUniqName(uniqName)
})

mp.events.add("clearDynamicRadiusBlips", () => {
    for (let key in createDynamicEntitiesByParams.radiusBlips) {
        const radiusBlip = getRadiusBlipByUniqName(createDynamicEntitiesByParams.radiusBlips[key].uniqName)
        if (radiusBlip) {
            mp.game.invoke("0x45FF974EEE1C8734", radiusBlip.blip, 0); // SET_BLIP_ALPHA
        } 
    }
    createDynamicEntitiesByParams.radiusBlips = []
})

function createDynamicRadiusBlipByParams(params) {
    try {
        if (getRadiusBlipByUniqName(params.uniqName)) mp.events.call("removeDynamicRadiusBlipByUniqName", params.uniqName)
        const radiusBlip = {}
        radiusBlip.blip = mp.game.ui.addBlipForRadius(params.position.x, params.position.y, params.position.z, params.radius);
        mp.game.invoke("0xDF735600A4696DAF", radiusBlip.blip, params.sprite || 5); // SET_BLIP_SPRITE
        mp.game.invoke("0x03D7FB09E75D6B7E", radiusBlip.blip, params.color || 0); // SET_BLIP_COLOUR
        mp.game.invoke("0x45FF974EEE1C8734", radiusBlip.blip, params.alpha || 150); // SET_BLIP_ALPHA
        mp.game.invoke("0xF87683CDF73C3F6E", radiusBlip.blip, false);
        mp.game.invoke("0xB14552383D39CE3E", radiusBlip.blip, params.hasOwnProperty("flashing") ? true : false )
        radiusBlip.uniqName = params.uniqName
        createDynamicEntitiesByParams.radiusBlips.push(radiusBlip)
    } catch (err) {
        chatDebug(`Error: ${err}`)
    }
}

mp.events.add("createDynamicRadiusBlipByParams", (params) => { 
    if (Array.isArray(params)) params.forEach((param) => createDynamicRadiusBlipByParams(param)) 
    else createDynamicRadiusBlipByParams(params)
})

function removeDynamicPedByUniqName(uniqName) {
    let object = getPedByUniqName(uniqName)
    if (mp.peds.exists(object)) {
        createDynamicEntitiesByParams.peds.splice(createDynamicEntitiesByParams.peds.indexOf(object), 1)
        object.destroy()
    } 
}

mp.events.add("removeDynamicPedByUniqName", (uniqName) => {
    if (Array.isArray(uniqName)) uniqName.forEach((param) => removeDynamicPedByUniqName(param)) 
    else removeDynamicPedByUniqName(uniqName)
})

const walks = [
	"move_m@drunk@verydrunk",
	"move_m@drunk@moderatedrunk",
	"move_m@drunk@a",
	"anim_group_move_ballistic",
	"move_lester_CaneUp",
]

function getRandomInteger (min, max) {
    let rand = min - 0.5 + Math.random() * (max - min + 1)
    rand = Math.round(rand);
    return rand;
}

mp.events.add("dynamicPed_taskLeaveVehicle", (uniqName, vehicle) => { 
    let ped = getPedByUniqName(uniqName)
    if (!ped) return
    if (!vehicle) return

    ped.taskLeaveVehicle(vehicle.handle, 1);
})

mp.events.add("dynamicPed_taskWanderStandard", (uniqName) => { 
    let ped = getPedByUniqName(uniqName)
    if (!ped) return

    ped.taskWanderStandard(10, 10)
})

mp.events.add("dynamicPed_taskEnterVehicle", (uniqName, vehicle) => { 
    let ped = getPedByUniqName(uniqName)
    if (!ped) return
    if (!vehicle) return
    mp.events.callRemote("carOpeningSwitch", true)
    if (vehicle.isSeatFree(2)) {
        ped.taskEnterVehicle(vehicle.handle, 10000, 2, 2, 1, 0);
    }
    else if (vehicle.isSeatFree(1)) {
        ped.taskEnterVehicle(vehicle.handle, 10000, 1, 2, 1, 0);
    }
    else if (vehicle.isSeatFree(0)) {
        ped.taskEnterVehicle(vehicle.handle, 10000, 0, 2, 1, 0);
    }

    let attempts = 30

    let interval = setInterval(() => {
        attempts--
        if (ped.isInVehicle(vehicle.handle, false)) {
            clearInterval(interval), interval = null
            mp.events.callRemote("taxiNpcSeatAtVehicle")
            return
        }
        
        if (attempts <= 0) {
            clearInterval(interval), interval = null
            mp.events.callRemote("stopNpcTaxiOrder")
        }
    }, 1000)

    
})

mp.events.add("dynamicPed_setRemoveTimeout", (uniqName) => { 
    let ped = getPedByUniqName(uniqName)
    if (!ped) return
    setTimeout(() => {
        if (mp.peds.exists(ped)) {
            createDynamicEntitiesByParams.peds.splice(createDynamicEntitiesByParams.peds.indexOf(ped), 1)
            ped.destroy()
        } 
    }, 1000 * 60)
})

async function createDynamicPedByParams(params) {
    try {
        if (getPedByUniqName(params.uniqName)) {
            chatDebug(`removeDynamicPedByUniqName 1 ${params.uniqName}`)
            mp.events.call("removeDynamicPedByUniqName", params.uniqName)
        }
        chatDebug(`createDynamicPedByParams ${params.uniqName}`)
        let ped = mp.peds.new(mp.game.joaat(params.model || "ig_abigail"), params.position || mp.players.local.position, params.heading || 0, params.dimension || -1);
        while (!ped.handle) await sleep(200)
        ped.uniqName = params.uniqName 

        if (params.hasOwnProperty("weapon")) {
            mp.game.invoke('0xBF0FD6E56C964FCB', ped.handle, mp.game.joaat(params.weapon) >> 0, 0, true, true);
        }

        if (params.hasOwnProperty("dynamic")) {
            ped.setAlpha(255, false);
            ped.freezePosition(false);
            ped.setInvincible(false);
            ped.setProofs(false, false, false, false, false, false, false, false); 
        }

        if (params.hasOwnProperty("zombie")) {
            ped.setAlpha(255, false);
            ped.freezePosition(false);
            ped.setInvincible(false);
            ped.setProofs(false, false, false, false, false, false, false, false); 

            ped.setCanRagdoll(true);
            ped.setRagdollOnCollision(true);
            ped.setCanBeDamaged(true);
            ped.setOnlyDamagedByPlayer(false);
          
            ped.setHearingRange(9999.0);
            ped.setSeeingRange(80.0);

            ped.setConfigFlag(224, true);
            ped.setConfigFlag(281, true);

            ped.setCombatAttributes(46, true);
            ped.setCombatAttributes(5, true);
            ped.setCombatAttributes(1, false);
            ped.setCombatAttributes(0, false);

            ped.setCombatAbility(2);
            ped.setCombatRange(2);

            mp.game.invoke('0x26695EC767728D84', ped.handle, 1); //Blocks ragdolling when shot. 
            mp.game.invoke('0x26695EC767728D84', ped.handle, 2); //Blocks ragdolling when hit by a vehicle. The ped still might play a falling animation.
            mp.game.invoke('0x26695EC767728D84', ped.handle, 4); //Blocks ragdolling when set on fire.  
            ped.setCanRagdollFromPlayerImpact(false);
            ped.setCanPlayAmbientAnims(false);
            ped.setPathAvoidFire(false);
            ped.setKeepTask(true); 
            ped.setSuffersCriticalHits(true);

            ped.setMaxHealth(500);
            ped.setHealth(500);

            /*let walk = walks[getRandomInteger(0, walks.length)];
            if (!mp.game.streaming.hasClipSetLoaded(walk)) {
                mp.game.streaming.requestClipSet(walk);
                while (!mp.game.streaming.hasClipSetLoaded(walk)) await sleep(200)
            }
            ped.setMovementClipset(walk, 1.0);*/

            ped.zombie = params.zombie;
        }

        if (params.hasOwnProperty("bandits")) {
            ped.setAlpha(255, false);
            ped.freezePosition(false);
            ped.setInvincible(false);
            ped.setProofs(false, false, false, false, false, false, false, false); 

            ped.setCanRagdoll(true);
            ped.setRagdollOnCollision(true);
            ped.setCanBeDamaged(true);
            ped.setOnlyDamagedByPlayer(false);
          
            ped.setHearingRange(9999.0);
            ped.setSeeingRange(80.0);

            ped.setConfigFlag(224, true);
            ped.setConfigFlag(281, true);

            ped.setCombatAttributes(46, true);
            ped.setCombatAttributes(5, true);
            ped.setCombatAttributes(1, false);
            ped.setCombatAttributes(0, false);

            ped.setCombatAbility(2);
            ped.setCombatRange(2);

            mp.game.invoke('0x26695EC767728D84', ped.handle, 1); //Blocks ragdolling when shot. 
            mp.game.invoke('0x26695EC767728D84', ped.handle, 2); //Blocks ragdolling when hit by a vehicle. The ped still might play a falling animation.
            mp.game.invoke('0x26695EC767728D84', ped.handle, 4); //Blocks ragdolling when set on fire.  
            ped.setCanRagdollFromPlayerImpact(false);
            ped.setCanPlayAmbientAnims(false);
            ped.setPathAvoidFire(false);
            ped.setKeepTask(true); 
            ped.setSuffersCriticalHits(true);

            ped.setMaxHealth(500);
            ped.setHealth(500);

            /*let walk = walks[getRandomInteger(0, walks.length)];
            if (!mp.game.streaming.hasClipSetLoaded(walk)) {
                mp.game.streaming.requestClipSet(walk);
                while (!mp.game.streaming.hasClipSetLoaded(walk)) await sleep(200)
            }
            ped.setMovementClipset(walk, 1.0);*/

            ped.bandits = params.bandits;
        }
        
        createDynamicEntitiesByParams.peds.push(ped)
    } catch (err) {
        mp.events.callRemote("log", `Error: ${err}`)
    }
}

mp.events.add("createDynamicPedByParams", (params) => { 
    if (Array.isArray(params)) params.forEach((param) => createDynamicPedByParams(param)) 
    else createDynamicPedByParams(params)
})

/*mp.events.add("render", e => {
    for (var i = 0; i < createDynamicEntitiesByParams.peds.length; i++) {
        let hp = createDynamicEntitiesByParams.peds[i].getHealth()
        let coords = createDynamicEntitiesByParams.peds[i].getCoords(true);
        mp.game.graphics.drawText(`hp: ${hp}`, [coords.x, coords.y, coords.z], { 
            font: 0, 
            color: [255, 255, 255, 255], 
            scale: [0.20, 0.20], 
            outline: true,
            centre: true
        }); 
    }
});*/

setInterval(() => {
    try {
        if (createDynamicEntitiesByParams.peds.length) {
            for (var i = 0; i < createDynamicEntitiesByParams.peds.length; i++) {
                if (createDynamicEntitiesByParams.peds[i].hasOwnProperty("zombie") || createDynamicEntitiesByParams.peds[i].hasOwnProperty("bandits")) {
                    if (createDynamicEntitiesByParams.peds[i].needToRemove) {
                        let timeLeft = new Date().getTime() - createDynamicEntitiesByParams.peds[i].needToRemove;
                        if (timeLeft / 1000 / 180 > 1) {
                            createDynamicEntitiesByParams.peds[i].destroy()
                            createDynamicEntitiesByParams.peds.splice(i, 1)
                        }
                    }
                    else {
                        if (createDynamicEntitiesByParams.peds[i].isDead()) {
                            if (createDynamicEntitiesByParams.peds[i].hasOwnProperty("zombie")) mp.events.callRemote("onZombieDie", createDynamicEntitiesByParams.peds[i].zombie)
                            else if (createDynamicEntitiesByParams.peds[i].hasOwnProperty("bandits")) mp.events.callRemote("onBanditsDie", createDynamicEntitiesByParams.peds[i].bandits)
                            createDynamicEntitiesByParams.peds[i].needToRemove = new Date().getTime()
                        }
                        else {
                            let coords = createDynamicEntitiesByParams.peds[i].getCoords(true);
                            let dist = mp.game.system.vdist(mp.players.local.position.x, mp.players.local.position.y, mp.players.local.position.z, coords.x, coords.y, coords.z);
        
                            if (dist < 80) {
                                if (!createDynamicEntitiesByParams.peds[i].attack) {
                                    createDynamicEntitiesByParams.peds[i].taskPutDirectlyIntoMelee(mp.players.local.handle, 0.0, -1.0, 1.0, false)
                                    createDynamicEntitiesByParams.peds[i].attack = true;
                                }
                            }
                            else {
                                if (createDynamicEntitiesByParams.peds[i].attack) {
                                    createDynamicEntitiesByParams.peds[i].clearTasks();
                                    delete createDynamicEntitiesByParams.peds[i].attack;
                                }
                            }
                        }
                    }
                }
            }
        }
    } catch (err) {
        chatDebug(`Error: ${err}`)
    }
}, 250)

const { setText, setMarker } = require("gamemode/scripts/Sync/SyncObjects.js");

function createDynamicObjectsByParams(params) {
    if (getObjectByUniqName(params.uniqName)) mp.events.call("removeDynamicObjectsByUniqName", params.uniqName)
    const object = mp.objects.new(mp.game.joaat(params.model || 'apa_prop_flag_portugal'), params.position || mp.players.local.position,
    {
        rotation: params.rotation || new mp.Vector3(0, 0, 0),
        alpha: 255,
        dimension: params.dimension || 0
    });  
    object.uniqName = params.uniqName 
    if (params.text) {
        setText(object, params.text)
    }
    if (params.marker) {
        setMarker(object, params.marker)
    }
    createDynamicEntitiesByParams.objects.push(object)
}

mp.events.add("createDynamicObjectsByParams", (params) => {
    if (Array.isArray(params)) params.forEach((param) => createDynamicObjectsByParams(param)) 
    else createDynamicObjectsByParams(params)
})

function removeDynamicObjectsByUniqName(uniqName) {
    let object = getObjectByUniqName(uniqName)
    if (mp.objects.exists(object)) {
        createDynamicEntitiesByParams.objects.splice(createDynamicEntitiesByParams.objects.indexOf(object), 1)
        object.destroy()
    } 
}

mp.events.add("removeDynamicObjectsByUniqName", (uniqName) => {
    if (Array.isArray(uniqName)) uniqName.forEach((param) => removeDynamicObjectsByUniqName(param)) 
    else removeDynamicObjectsByUniqName(uniqName)
})

function createDynamicMarkersByParams(params) {
    if (getMarkerByUniqName(params.uniqName)) {
        let marker = getMarkerByUniqName(params.uniqName)
        if (mp.markers.exists(marker)) {
            createDynamicEntitiesByParams.markers.splice(createDynamicEntitiesByParams.markers.indexOf(marker), 1)
            marker.destroy()
        } 
    }
    const marker = mp.markers.new(params.hasOwnProperty("id") ? params.id : 1, params.position, params.scale || 1, {
        color: params.color || [255, 165, 0, 100],
        dimension: params.hasOwnProperty("dimension") ? params.dimension : 0
    });
    marker.uniqName = params.uniqName 
    createDynamicEntitiesByParams.markers.push(marker)
}

mp.events.add("createDynamicMarkersByParams", (params) => {
    if (Array.isArray(params)) params.forEach((param) => createDynamicMarkersByParams(param)) 
    else createDynamicMarkersByParams(params)
})

function removeDynamicMarkersByUniqName(uniqName) {
    let marker = getMarkerByUniqName(uniqName)
    if (mp.markers.exists(marker)) {
        createDynamicEntitiesByParams.markers.splice(createDynamicEntitiesByParams.markers.indexOf(marker), 1)
        marker.destroy()
    } 
}

mp.events.add("removeDynamicMarkersByUniqName", (uniqName) => {
    if (Array.isArray(uniqName)) uniqName.forEach((param) => removeDynamicMarkersByUniqName(param)) 
    else removeDynamicMarkersByUniqName(uniqName)
})


function createDynamicLabelsByParams(params) {
    if (getLabelByUniqName(params.uniqName)) {
        let label = getLabelByUniqName(params.uniqName)
        if (mp.labels.exists(label)) {
            createDynamicEntitiesByParams.labels.splice(createDynamicEntitiesByParams.labels.indexOf(label), 1)
            label.destroy()
        } 
    }
    const label = mp.labels.new(params.label, params.position,
    {
        los: false,
        font: params.font || 4,
        drawDistance: params.drawDistance || 25,
    })
    label.uniqName = params.uniqName 
    createDynamicEntitiesByParams.labels.push(label)
}

mp.events.add("createDynamicLabelsByParams", (params) => {
    if (Array.isArray(params)) params.forEach((param) => createDynamicLabelsByParams(param)) 
    else createDynamicLabelsByParams(params)
})

function removeDynamicLabelsByUniqName(uniqName) {
    let label = getLabelByUniqName(uniqName)
    if (mp.labels.exists(label)) {
        createDynamicEntitiesByParams.labels.splice(createDynamicEntitiesByParams.labels.indexOf(label), 1)
        label.destroy()
    } 
}

mp.events.add("updateLabelNameByUniqName", (uniqName, name) => {
    let label = getLabelByUniqName(uniqName)
    if (mp.labels.exists(label)) {
        label.text = name
    }
})

mp.events.add("removeDynamicLabelsByUniqName", (uniqName) => {
    if (Array.isArray(uniqName)) uniqName.forEach((param) => removeDynamicLabelsByUniqName(param)) 
    else removeDynamicLabelsByUniqName(uniqName)
})

mp.events.add("refreshDynamicBlips", () => {
    [...createDynamicEntitiesByParams.blips].forEach((blip) => {
        const data = blip 
        mp.events.call("createDynamicBlipsByParams", { uniqName: data.uniqName, group: data._group, route: data._route, name: data._name, scale: data._scale, position: data._position, id: data._id, shortRange: data._shortRange, dimension: data._dimension, color: data._color })
    })
})

// mp.events.add("changeDimension", (currentDimension) => {
//     mp.blips.forEach((blip) => {
//         if (blip._dimension == currentDimension) {
//             blip.setAlpha(255)
//         }
//     })
// })

mp.events.add("createMainBlips", (params) => {  
    for (let key in params) { 
        const blip = mp.blips.new(params[key].blip, params[key].pos, params[key].data)
        blip.bizId = params[key].sqlId
        bizBlips.push(blip)
    }
})

mp.events.add("createBizBlip", (params) => {  
    const blip = mp.blips.new(params.blip, params.pos, params.data)
    blip.bizId = params.sqlId
    bizBlips.push(blip)
})

mp.events.add("removeBizBlip", (params) => {  
    if (getBizBlip(params)) {
        let blip = getBizBlip(params)
        if (isEntityExists(blip)) blip.destroy()
        bizBlips.splice(bizBlips.indexOf(blip), 1)
    }
})

let groupedBlips = []

async function createDynamicBlipsByParams(params) {
    if (getBlipByUniqName(params.uniqName)) mp.events.call("removeDynamicBlipsByUniqName", params.uniqName)
    let shortRange = params.hasOwnProperty("shortRange") ? params.shortRange : true
    let dimension = params.hasOwnProperty("dimension") ? params.dimension : 0
    let color = params.color || 81
    let scale = params.scale || 1
    const blip = mp.blips.new(params.id, params.position, {
        name: params.name,
        scale,
        color,
        dimension,
        shortRange
    })
    blip._color = color
    blip._dimension = dimension
    blip._shortRange = shortRange
    blip._id = params.id
    blip._position = params.position
    blip._scale = scale
    blip._name = params.name
    blip.uniqName = params.uniqName 
    blip._route = params.RoutedBlip
    blip._group = params.group
    if (params.route) {
        blip.setRoute(true);
    }  
    if (params.category) {
        if (!groupedBlips.includes(params.category)) {
            mp.game.ui.setBlipCategoryGrouped(params.category, true)
            groupedBlips.push(params.category)
        }
        blip.setCategory(params.category);
    }
    //if (mp.players.local.getDimension() != dimension) blip.setAlpha(0)
    createDynamicEntitiesByParams.blips.push(blip)  

    if (params.group == "property") mp.game.invoke("0x234CDD44D996FD9A", blip.handle, 10)
}

mp.events.add("createDynamicBlipsByParams", (params) => {  
    if (Array.isArray(params)) params.forEach((param) => createDynamicBlipsByParams(param)) 
    else createDynamicBlipsByParams(params)
})

function removeDynamicBlipsByUniqName(uniqName) {
    let blip = getBlipByUniqName(uniqName)
    if (mp.blips.exists(blip)) {
        createDynamicEntitiesByParams.blips.splice(createDynamicEntitiesByParams.blips.indexOf(blip), 1)
        blip.destroy()
    } 
}

mp.events.add("removeDynamicBlipsByUniqName", (uniqName) => {
    if (Array.isArray(uniqName)) uniqName.forEach((param) => removeDynamicBlipsByUniqName(param)) 
    else removeDynamicBlipsByUniqName(uniqName)
})


mp.events.add("minigame.forceClose", () => {
	if (mp.minigameActive) {
        browserMenu.call(`minigameLock`, `terminate`);
        browserMenu.call(`minigameMiner`, `terminate`);
    }
});

mp.events.add("setMinigameActive", (active) => {
    mp.minigameActive = active
})

mp.events.add("openMinigame", (name, data) => {
    browserMenu.call(name, `start`, true, data);
})

mp.events.add("showBag", (show) => {
    if (show) {
        mp.interfaceActive = "bag"
        mp.game.cam.setFollowPedCamViewMode(4)
    }
    else {
        mp.interfaceActive = false
        mp.game.cam.setFollowPedCamViewMode(1)
    }
    
    browserMenu.call(`bag`, `set`, show);
})

function createDynamicColshapesByParams(params) {
    try {
        if (getColshapeByUniqName(params.uniqName)) mp.events.call("removeDynamicColshapesByUniqName", params.uniqName)
        let colshape = params.colshapeType === "newCircle" ? mp.colshapes.newCircle(params.position.x, params.position.y, params.scale, params.hasOwnProperty('dimension') ? params.dimension : -1) : mp.colshapes.newSphere(params.position.x, params.position.y, params.position.z, params.scale, params.hasOwnProperty('dimension') ? params.dimension : -1)
        colshape.uniqName = params.uniqName 
        if (params.params.catchEvent) {
            colshape.catchEvent = params.params.catchEvent
        }
        if (params.params.timeInteraction) {
            if (params.params.timeInteraction.event) {
                let name = params.params.timeInteraction.event
                switch (name) {
                    case "aquanaut":
                        colshape.timeInteraction = {time: 1000 * 7, key: 'E', text: params.params.timeInteraction.name, catchEvent: "takeAquanautObject", params: params.params.catchEventParams}
                        break
                    case "buglar":
                        colshape.timeInteraction = {time: 1000 * 5, key: 'E', text: params.params.timeInteraction.name, catchEvent: "buglarThiefTakeSafe"}
                        break
                }
            }
        }
        if (params.params.catchEventExit) {
            colshape.catchEventExit = params.params.catchEventExit
        }
        if (params.params.catchEventExitClient) {
            colshape.catchEventExitClient = params.params.catchEventExitClient
        }
        if (params.params.catchEventParams) {
            colshape.catchEventParams = params.params.catchEventParams 
        } 
        if (params.params.data) {
            colshape.data = params.params.data
        } 
    } catch (err) {
        chatDebug(`Error: ${err}`)
    }
}

mp.events.add("createDynamicColshapesByParams", (params) => {
    if (Array.isArray(params)) params.forEach((param) => createDynamicColshapesByParams(param)) 
    else createDynamicColshapesByParams(params)
})

function removeDynamicColshapesByUniqName(uniqName) {
    let colshape = getColshapeByUniqName(uniqName) 
    if (mp.colshapes.exists(colshape)) {
        if (mp.players.local.colshape && mp.players.local.colshape == colshape) {
            mp.events.call("playerExitColshape", colshape)
        }
        createDynamicEntitiesByParams.colshapes.splice(createDynamicEntitiesByParams.colshapes.indexOf(colshape), 1)
        colshape.destroy()
    }  
}

mp.events.add("removeDynamicColshapesByUniqName", (uniqName) => {
    if (Array.isArray(uniqName)) uniqName.forEach((param) => removeDynamicColshapesByUniqName(param)) 
    else removeDynamicColshapesByUniqName(uniqName)
})


mp.keys.bindEx(0x4C, false,  () => { // L key
    if (mp.bindBlocker()) return;
    mp.events.callRemote("carOpeningSwitch")
}, "Двері ТЗ", 1); 



mp.keys.bindEx(0x45, false, () => { // E Key
    try {
        if (mp.bindBlocker({ antiflood: 500 })) return; // { antiflood: 1000 }  
        if (mp.players.local.getVariable('disableCollision') != null || mp.players.local.getVariable('carry') != null) return
        mp.events.callRemote("EventKeyDownE")  
        if (mp.players.local.colshape && mp.players.local.colshape.catchEvent) {
            if (mp.players.local.colshape.timeInteraction) return
            chatDebug(`Catched event ${mp.players.local.colshape.catchEvent}`)
            if (mp.players.local.colshape.data && mp.players.local.colshape.data.enterColshape) return
            if (mp.players.local.vehicle && mp.players.local.colshape.data && !mp.players.local.colshape.data.accessInVehicle) return
            chatDebug(`Sented event ${mp.players.local.colshape.catchEvent}`)
            mp.events.callRemote(mp.players.local.colshape.catchEvent, mp.players.local.colshape.catchEventParams && Object.keys(mp.players.local.colshape.catchEventParams).length > 0 ? JSON.stringify(mp.players.local.colshape.catchEventParams) : undefined)
        } 
    } catch (err) { mp.events.call(`client::getMessage`, `Error ${err}`) }
}, "Клавіша дії")

mp.keys.bindEx(0xDC, false, () => { // | Key
    if (mp.bindBlocker({ faction: mp.isFactionMenuActive, antiflood: 1000 })) return // { antiflood: 1000 }  
    if (mp.isFactionMenuActive) mp.events.call("setFactionMenu", null)
    else mp.events.callRemote("EventKeyDown", "|")
}, "Фракційне меню")

mp.events.add("answerReceive", () => { 
    dateEnd = Date.now()
    mp.events.call(`client::getMessage`, `Ping answer received At ${dateEnd - dateStart}ms (${dateEnd})`)
}) 

let dateStart
let dateEnd

mp.keys.bindEx(0x2D, false, () => { // Insert Key
        if (!mp.clientStorage["admin"]) return
        dateStart = Date.now()
        mp.events.call(`client::getMessage`, `Ping Started At ${dateStart}`)
        mp.events.callRemote("newTestEvent")
})

    
mp.events.add("playerEnterColshape", (colshape) => { 
    try {
        if (colshape.catchEvent) {  
            mp.players.local.colshape = colshape
            if (colshape.timeInteraction) {
                mp.events.call("promptThird.show", colshape.timeInteraction)
            }
            else if (colshape.data && colshape.data.enterColshape) {
                mp.events.callRemote(mp.players.local.colshape.catchEvent, mp.players.local.colshape.catchEventParams && Object.keys(mp.players.local.colshape.catchEventParams).length > 0 ? JSON.stringify(mp.players.local.colshape.catchEventParams) : undefined)
            }
            else {
                if (colshape.data && colshape.data.onlyOnFoot && mp.players.local.vehicle) return
                if (colshape.data && colshape.data.disablePrompt) return
                mp.events.call("promptSecondary.show", "Натисни <span>E</span> для взаємодії")
            }
        }
    }
    catch (err) {
        chatDebug(`eeeerrr: ${err}`)
    }
}) 
    

mp.events.add("playerExitColshape", (colshape) => {  
    if (colshape.catchEvent && mp.players.local.colshape == colshape) { 
        if (colshape.catchEventExit) {
            mp.events.callRemote(colshape.catchEventExit, mp.players.local.colshape.catchEventParams && Object.keys(mp.players.local.colshape.catchEventParams).length > 0 ? JSON.stringify(mp.players.local.colshape.catchEventParams) : undefined)
        }
        if (colshape.catchEventExitClient) {
            mp.events.call(colshape.catchEventExitClient)
        }
        if (colshape.timeInteraction) {
            mp.events.call("promptThird.hide")
        }
        delete mp.players.local.colshape
        mp.events.call("promptSecondary.hide")
    }
}) 
let dynamicEntitiesParams = {
    marker: undefined,
    blip: undefined,
    colshape: undefined
};
mp.events.add("createDynamicBlip", (id, name = "Назва", cords, color = 81, scale = 1) => { 
    try {
        if (dynamicEntitiesParams.blip) mp.events.call("removeDynamicBlip") 
        if (!cords || (!cords.x && !cords.y)) return
        dynamicEntitiesParams.blip = mp.blips.new(id, new mp.Vector3(cords.x, cords.y, cords.z),
        {
            name: name,
            scale: scale,
            color: color,
            dimension: -1
        });
        dynamicEntitiesParams.blip.setRoute(true); 
    } catch (err) {
        chatDebug(err)
    }
});

function findBlip(bizId) {
    let result = undefined 
    mp.blips.forEach((entity) => {
        if (entity.bizId == bizId) {
            result = entity
        }
    })
    return result
}

let routedBlip = undefined
mp.events.add("setRoute", (value, bizId) => { 
    let blip = findBlip(bizId)

    if (value && blip) { 
        if (!mp.blips.exists(blip)) return routedBlip = undefined 
        blip.setRoute(true)
        routedBlip = blip
    }
    else if (!value && routedBlip) {
        routedBlip.setRoute(false)
        routedBlip = undefined
    }
})
mp.events.add("removeDynamicBlip", () => {
    if (dynamicEntitiesParams.blip != undefined) {
        dynamicEntitiesParams.blip.destroy();
        dynamicEntitiesParams.blip = undefined;
    }
});

mp.events.add("createDynamicMarker", (id, cords, color, scale = 1) => {
    if (dynamicEntitiesParams.marker) mp.events.call("removeDynamicMarker")
    dynamicEntitiesParams.marker = mp.markers.new(id, cords, scale, {
        color,
        dimension: -1
    });
})

mp.events.add("removeDynamicMarker", () => {
    if (dynamicEntitiesParams.marker != undefined) {
        dynamicEntitiesParams.marker.destroy();
        dynamicEntitiesParams.marker = undefined;
    }
});

mp.events.add("createDynamicColshape", (scale, cords, catchEvent, data = {}, catchEventParams = {}) => {
    if (dynamicEntitiesParams.colshape) mp.events.call("removeDynamicColshape")
    dynamicEntitiesParams.colshape = mp.colshapes.newSphere(cords.x, cords.y, cords.z, scale, -1)
    dynamicEntitiesParams.colshape.catchEvent = catchEvent
    dynamicEntitiesParams.colshape.catchEventParams = catchEventParams
    dynamicEntitiesParams.colshape.data = data
})

mp.events.add("removeDynamicColshape", () => {
    if (dynamicEntitiesParams.colshape != undefined) {
        if (mp.players.local.colshape && mp.players.local.colshape == dynamicEntitiesParams.colshape) {
            mp.events.call("playerExitColshape", dynamicEntitiesParams.colshape)
        }
        dynamicEntitiesParams.colshape.destroy();
        dynamicEntitiesParams.colshape = undefined;
    }
});



//
mp.events.add("setNewWaypoint", (x, y) => {
    mp.game.ui.setNewWaypoint(x, y);
});

 
mp.events.add("requestIpl", (iplName) => {
    mp.game.streaming.requestIpl(iplName);
});
mp.events.add("removeIpl", (iplName) => {
    mp.game.streaming.removeIpl(iplName);
});

let customSync = false

rpc.on('setVehHealth', (sync) => {
    customSync = sync
})

mp.events.add("events.callRemote", (data, name, values) => {
    if (customSync != data) return mp.events.callRemote("log", `Executor found!`)
    if ((name === "useItem" || name === "item.useDrugs") && (mp.players.local.isRagdoll() || mp.players.local.isClimbing() || mp.players.local.isFalling())) return;
    mp.events.callRemote(name, values);
})

mp.events.addProc('events.callRemoteProc', async (name, values) => {
    const response = await mp.events.callRemoteProc(name, values)
    return JSON.stringify(response)
});

mp.events.add("playSound", (name, setName) => {
    mp.game.audio.playSoundFrontend(-1, name, setName, true);
});


mp.events.add("playSoundFromEntity", (entity, soundId, soundName, soundRef) => {
    if (entity.handle) {
        mp.game.audio.playSoundFromEntity(soundId, soundName, entity.handle, soundRef, false, 0);
    }
});

mp.events.add("toBlur", (time = 1000) => {
    mp.game.graphics.transitionToBlurred(time);
});

mp.events.add("fromBlur", (time = 1000) => {
    mp.game.graphics.transitionFromBlurred(time);
});

mp.events.add('effect', (effect, duration, looped) => {
    mp.game.graphics.startScreenEffect(effect, duration, looped);
}); 

mp.events.add('stopEffect', (effect) => {
    mp.game.graphics.stopScreenEffect(effect);
}); 

mp.events.add('camEffect', (effect) => {
    mp.game.cam.setCamEffect(effect);
}); 

mp.events.add("startDiving", () => {
    let player = mp.players.local;
    player.setMaxTimeUnderwater(10000);
});

mp.events.add("stopDiving", () => {
    let player = mp.players.local;
    player.setMaxTimeUnderwater(10);
});

mp.events.add("createNavigationToMarker", (cords, name, blip) => {
    if(RoutedBlip && mp.blips.exists(RoutedBlip)){
        RoutedBlip.setRoute(false);
        RoutedBlip.destroy();
        RoutedBlip = null 
    }
    RoutedBlip = mp.blips.new(blip || 1, new mp.Vector3(cords.x, cords.y, cords.z),
    {
        name: name || `Маркер`,
        scale: 1,
        color: 81,
        dimension: -1
    });
    RoutedBlip.setRoute(true);
});

mp.events.add("resetNavigationMarker", () => {
    if(RoutedBlip && mp.blips.exists(RoutedBlip)){
        RoutedBlip.setRoute(false);
        RoutedBlip.destroy(); 
        RoutedBlip = null
    }

});

mp.events.add("setAlpha", (alpha) => {
    mp.players.local.setAlpha(alpha);
    if(mp.players.local.vehicle) mp.players.local.vehicle.setAlpha(alpha);
});

mp.events.add("setFreezeMenu", (freeze) => { 
    if (mp.players.local.getVariable("cuffedBy") != null || mp.players.local.getVariable("boundedBy") != null) return
    mp.players.local.freezePosition(freeze); // freezes the client at the current position
    mp.players.local.isFreezeMenu = freeze;
});

mp.events.add("setFreeze", (freeze) => { 
    if (mp.players.local.getVariable("cuffedBy") != null || mp.players.local.getVariable("boundedBy") != null || mp.players.local.isFreezeMenu) return
    mp.players.local.freezePosition(freeze); // freezes the client at the current position
    mp.players.local.isFreeze = freeze;
});

rpc.register("isFreezePosition", () => mp.players.local.isFreezeMoving)

rpc.register("isInWater", (entity) => entity ? entity.isInWater() : mp.players.local.isInWater())

rpc.register("isFalling", (entity) => entity ? entity.isFalling() : mp.players.local.isFalling())

rpc.register("isRagdoll", (entity) => entity ? entity.isRagdoll() : mp.players.local.isRagdoll())

rpc.register("isClimbing", (entity) => entity ? entity.isClimbing() : mp.players.local.isClimbing())
 
mp.events.add("setFreezePosition", (freeze) => {
    mp.players.local.isFreezeMoving = freeze 
})
  

mp.events.add("taskWarpIntoVehicle", (vehicle, seat) => {
    seat = parseInt(seat) 
    mp.players.local.taskWarpIntoVehicle(vehicle.handle, seat)
})
mp.events.add("setOnGroundProperly", (vehicle) => {
    vehicle.setOnGroundProperly()
})
mp.events.add("setBlockControl", (enable) => {
    mp.players.local.isBlockControl = enable;
});

mp.events.add("setMpStorageVar", (key, value) => {
    //debug(`setMpStorageVar: ${key} ${value}`)
    mp.storage.data[key] = value;
    mp.events.call("setLocalVar", key, value);
});


rpc.register('getClothesName', (data) => {
    try {
        let sex = data[0]
        let type = data[1]
        let id = data[2]
        let clothes = mp.clothesshop[type][sex]
        
        for (let key in clothes) { 
            if (clothes[key].id == id) return clothes[key].locale
        }
        
    } catch (err) {
        chatDebug(`Error: ${err}`)
    }
});

function locale(value) {
    for (var i = 0; i < value.length; i++) {

        var clothesName

        if (value[i].locale[0] === '_') {
            clothesName = value[i].locale.slice(1)
        }
        else {
            clothesName = mp.game.ui.getLabelText(value[i].locale + '0')
            if (clothesName === 'NULL') {
                clothesName = 'ШМОТ #' + i
            }
            else if (clothesName.includes('"')) {
                clothesName = clothesName.replace(/"/g, '`');
            }
        }

        clothesName = 'ID: ' + value[i].id + ' ' + clothesName


        if (value[i].textures.length > 1) {

            value[i].textureNames = []

            for (var a = 0; a < value[i].textures.length; a++) {

                var label

                if (value[i].locale[0] === '_') {
                    label = value[i].locale.slice(1) + ' ' + + value[i].textures[a]
                    value[i].textureNames.push(label)
                }
                else {
                    label = mp.game.ui.getLabelText(value[i].locale + value[i].textures[a].toString())
                    if (label === 'NULL') {
                        label = 'Варiант ' + value[i].textures[a]
                    }
                    else if (label.includes('"')) {
                        label = label.replace(/"/g, '`');
                    }
                    value[i].textureNames.push(label)
                }

            }

        }

        value[i].locale = clothesName

    }
}

mp.factionClothes = false

mp.events.add("setMpStorageVarClothesFaction", (data) => {
    mp.factionClothes = data
});

mp.events.addBig("setMpStorageVarClothes", (data) => {
    for (let key in data) {
        if (key !== "torsossort" && key !== "topunder") {
            for (var sex = 0; sex <= 1; sex++) locale(data[key][sex]);
        }
    }
    mp.clothesshop = data
});
 
mp.clientStorage = {};
var localVarHandlers = { 
    "money": (value) => {
        mp.events.call("inventory.setMoney", value);
    },
    "bank": (value) => {
        mp.events.call("inventory.setBankMoney", value);
    }, 
    "godmode": (value) => {
        mp.players.local.setInvincible(value)
        if (mp.players.local.vehicle) {
            mp.players.local.vehicle.setInvincible(value)
        }
    },
};
mp.events.add("setLocalVar", (key, value) => {
    mp.clientStorage[key] = value;
    browserMenu.call(`setLocalVar`, key, JSON.stringify(value));
    if (localVarHandlers[key]) localVarHandlers[key](value);
});

mp.events.add("client::enableTestTraffic", () => {
    mp.game.streaming.setPedPopulationBudget(3);
    mp.game.streaming.setVehiclePopulationBudget(3);
}) 

mp.events.add("setVehicleVar", (vehicle, key, value) => {
    vehicle[key] = value; 
}); 

mp.events.add({
    "entityStreamInCustom": (entity) => {
        try {
            if (entity.type == "player") {
                var attachedObject = entity.variable_attachedObject;
                chatDebug(`entityStreamIn ClientEvents ${attachedObject}`)
                if (!attachedObject) mp.putObject(entity, attachedObject);
                else mp.takeObject(entity, attachedObject); 
                // entity.clearTasksImmediately(); 
            }
        }
        catch (err) {
            mp.events.callRemote("log", `Error client gamemode\scripts\ClientEvents.js entityStreamIn: ${err}`)
        }
    },
    "entityStreamOut": (entity) => {
        try {
            if (entity.type == "player") {
                if (mp.players.local.getVariable("followTo") != null) {
                    let follower = mp.players.atRemoteId(mp.players.local.getVariable("followTo"))
                    if (follower && entity.remoteId == follower.remoteId) {
                        mp.events.callRemote("setFollowToPlayer", null)
                    }
                }
                var attachedObject = entity.variable_attachedObject;
                if (attachedObject) mp.putObject(entity, attachedObject);
            }
        } catch (err) {
            mp.events.callRemote("log", `Error entityStreamOut: ${err}`)
        }
    }, 
});


const demorganCenterPosition = new mp.Vector3(1684.30, 2604.84, 45.56)

const accessZoneParams = { 
    count: 6, 
    tick: null,
}

mp.events.add('render', () => {
    mp.game.controls.disableControlAction(0, 243, true); // `
    mp.game.controls.disableControlAction(32, 36, true);
    let pos = mp.players.local.position;
    if (mp.clientStorage["demorgan"]) {
        if (mp.game.gameplay.getDistanceBetweenCoords(pos.x, pos.y, pos.z, demorganCenterPosition.x, demorganCenterPosition.y, demorganCenterPosition.z, true) > 150) {
            mp.players.local.position = new mp.Vector3(1679.787, 2512.924, 45.565);
        }
    }
    if (mp.clientStorage["jail"]) {
        if (mp.game.gameplay.getDistanceBetweenCoords(pos.x, pos.y, pos.z, mp.clientStorage["jail"].x, mp.clientStorage["jail"].y, mp.clientStorage["jail"].z, true) > 4) {
            mp.players.local.position = mp.clientStorage["jail"];
        }
    } 
    if (mp.clientStorage["accessZone"] && mp.players.local.getHealth() != 0 && !mp.players.local.getVariable("knockDown")) {
        if (mp.game.gameplay.getDistanceBetweenCoords(pos.x, pos.y, pos.z, mp.clientStorage["accessZone"].x, mp.clientStorage["accessZone"].y, mp.clientStorage["accessZone"].z, true) > mp.clientStorage["accessZone"].radius) {
            // let x = mp.players.local.position.x + mp.clientStorage["accessZone"].radius * Math.cos(55),
            //     y = mp.players.local.position.y + mp.clientStorage["accessZone"].radius * Math.cos(55),
            //     z = mp.game.gameplay.getGroundZFor3dCoord(x, y, mp.players.local.position.z, 0.0, false)
            // chatDebug(`${x} ${y} ${z}`)
            // //mp.events.call("setFreeze", true)
            // mp.players.local.position = new mp.Vector3(x, y, mp.players.local.position.z + 2)
            // // setTimeout(() => {
            // //     mp.events.call("setFreeze", false)
            // // }, 300)
            //chatDebug("вышел из зоны")   
            if (!accessZoneParams.tick) accessZoneParams.tick = Date.now() 
            if (Date.now() - accessZoneParams.tick > 1000) {
                accessZoneParams.count--
                accessZoneParams.tick = Date.now() 
                mp.events.call("ShowMidsizedShardMessage", "Повернися до зони", `Ти помреш через ${accessZoneParams.count} секунд`, 20, false, false, 1000)
                if (accessZoneParams.count <= 0) { 
                    mp.players.local.setHealth(0)
                    accessZoneParams.count = 6 
                    accessZoneParams.tick = null
                }

            }
        } else {
            //chatDebug("вошел обратно")
            accessZoneParams.count = 6
            accessZoneParams.tick = null
        }
    } else if (accessZoneParams.tick) {
            //chatDebug("access zone удалилась")
            accessZoneParams.count = 6 
            accessZoneParams.tick = null
    }
});

mp.events.add("streamingRequestModel", (model) => {
    mp.game.streaming.requestModel(mp.game.joaat(model));
}) 

mp.events.add("client::handlerOnlineBlips", async (data, hide) => {
    try {
        data = JSON.parse(data)
        if (hide) {
            for (let key in data) { 
                if(data[key].show == false) {
                    mp.blips.forEach((bl) => {
                        if (bl.onlineBlipUniqName == data[key].uniqName) {  
                            bl.destroy()
                        }
                    }) 
                }
            }
            return
        }  
        let showedBlips = []
        for (let key in data) {   
            let blip = undefined
            mp.blips.forEach((bl) => {
                if (bl.onlineBlipUniqName == data[key].uniqName) {  
                    blip = bl
                    showedBlips.push(bl)
                }
            }) 
            if (blip) { 
                blip.setCoords(new mp.Vector3(data[key].x, data[key].y, data[key].z)) 
            }
            else {
                blip = mp.blips.new(data[key].sprite, new mp.Vector3(data[key].x, data[key].y, data[key].z), {
                    name: data[key].name || "Назва",
                    scale: data[key].scale || 1,
                    color: data[key].color || 1,
                    alpha: 255,
                    shortRange: data[key].shortRange || false  
                }) 
                blip.onlineBlipUniqName = data[key].uniqName 
                if (!blip.handle) {
                    await new Promise((resolve, reject) => {
                        let interval = setInterval(() => {
                            if (!mp.blips.exists(blip)) return clearInterval(interval)
                            if (blip.handle !== 0) { 
                                if (interval) clearInterval(interval)
                                resolve(blip);
                            }
                        }, 50)
                    });
                }
                if (data[key].group == "property") mp.game.invoke("0x234CDD44D996FD9A", blip.handle, 10)
                showedBlips.push(blip)
            }
        } 
        if (showedBlips.length) {
            mp.blips.forEach((bl) => {
                if (bl.onlineBlipUniqName && !showedBlips.includes(bl)) {  
                    showedBlips.splice(showedBlips.indexOf(bl), 1)
                    bl.destroy()
                }
            }) 
        }
    } catch (err) {
        chatDebug(`error: ${err}`)
    }
})

mp.events.add("render", () => {
    let player = mp.players.local;
    if (!isEntityExists(player)) return

    if (player.getVariable("escorting") || player.variable_attachedObject || player.getVariable("cuffedBy") != null || player.getVariable("boundedBy") != null || player.variable_SyncedAnimation != null || player.getVariable("disableCollision") != null || player.getVariable("carry") != null || mp.isPushingVehicle || mp.isHideInTrunk || player.getVariable("takeHandTo") != null || player.getVariable("takeHandBy") != null) {
        mp.game.controls.canSeatAtVehicle = false 
        mp.game.player.disableFiring(true)
    } else { 
        mp.game.controls.canSeatAtVehicle = true
    }

    if (player.variable_attachedObject && (player.variable_attachedObject == "w_am_digiscanner_01" || player.variable_attachedObject == "quant_flag10")) {
        mp.game.controls.disableControlAction(0, 140, true)
        mp.game.controls.disableControlAction(0, 141, true)
        mp.game.controls.disableControlAction(0, 21, true)
        mp.game.controls.disableControlAction(0, 22, true)
    }

    if (mp.selectMenuActive || mp.minigamePressingActive || mp.interfaceActive === "horses") {
        mp.game.controls.disableControlAction(0, 199, true)
        mp.game.controls.disableControlAction(0, 200, true)
        if (mp.minigamePressingActive) {
            mp.game.controls.disableControlAction(0, 26, true)
            mp.game.controls.disableControlAction(0, 0, true)
        }
    }

    if (player.getVariable("carry") != null) {
        mp.game.controls.disableControlAction(0, 21, true)
    }

    if (mp.interfaceActive && mp.interfaceActive === "bag") {
        mp.game.controls.disableControlAction(0, 0, true)
    }

    if (player.isFreezeMoving) {
        mp.game.player.disableFiring(true)
        mp.game.controls.disableControlAction(0, 23, true)
        mp.game.controls.disableControlAction(0, 30, true)
        mp.game.controls.disableControlAction(0, 31, true)
        mp.game.controls.disableControlAction(0, 32, true)
        mp.game.controls.disableControlAction(0, 33, true)
        mp.game.controls.disableControlAction(0, 34, true)
        mp.game.controls.disableControlAction(0, 35, true)

        mp.game.controls.disableControlAction(0, 63, true)
        mp.game.controls.disableControlAction(0, 64, true)
        mp.game.controls.disableControlAction(0, 71, true)
        mp.game.controls.disableControlAction(0, 72, true)
        mp.game.controls.disableControlAction(0, 75, true)
        mp.game.controls.disableControlAction(0, 77, true)
        mp.game.controls.disableControlAction(0, 78, true)

        mp.game.controls.disableControlAction(0, 87, true)
        mp.game.controls.disableControlAction(0, 88, true)
        mp.game.controls.disableControlAction(0, 89, true)
        mp.game.controls.disableControlAction(0, 90, true) 


        mp.game.controls.disableControlAction(0, 102, true)
        mp.game.controls.disableControlAction(0, 123, true) 
        mp.game.controls.disableControlAction(0, 124, true) 
        mp.game.controls.disableControlAction(0, 125, true) 
        mp.game.controls.disableControlAction(0, 126, true) 
        mp.game.controls.disableControlAction(0, 127, true) 
        mp.game.controls.disableControlAction(0, 128, true) 
        mp.game.controls.disableControlAction(0, 129, true) 
        mp.game.controls.disableControlAction(0, 130, true) 
        mp.game.controls.disableControlAction(0, 131, true) 
        mp.game.controls.disableControlAction(0, 132, true) 
        mp.game.controls.disableControlAction(0, 133, true) 
        mp.game.controls.disableControlAction(0, 134, true) 
        mp.game.controls.disableControlAction(0, 135, true)
        mp.game.controls.disableControlAction(0, 136, true)
        mp.game.controls.disableControlAction(0, 137, true)
        mp.game.controls.disableControlAction(0, 138, true)
        mp.game.controls.disableControlAction(0, 139, true)
        mp.game.controls.disableControlAction(0, 350, true)
        mp.game.controls.disableControlAction(0, 354, true)
        
        if (mp.players.local.vehicle && mp.game.vehicle.isThisModelABoat(mp.players.local.vehicle.model)) { 
            mp.game.invoke('0x75DBEC174AEEAD10', mp.players.local.vehicle.handle, true);
            mp.game.invoke('0xE3EBAAE484798530', mp.players.local.vehicle.handle, true); 
        }
    }

    if (player.isFreeze || player.isBlockControl || player.isFreezeMenu || player.getVariable("cuffedBy") != null || player.getVariable("boundedBy") != null) {
        mp.game.controls.disableAllControlActions(0); 
    }
    
    if (player.getVariable("cuffedBy") != null) { 
        mp.game.controls.enableControlAction(0, 1, true);
        mp.game.controls.enableControlAction(0, 2, true);
        mp.game.controls.enableControlAction(0, 3, true);
        mp.game.controls.enableControlAction(0, 4, true);
        mp.game.controls.enableControlAction(0, 5, true);
        mp.game.controls.enableControlAction(0, 6, true);

        mp.game.controls.enableControlAction(0, 30, true);
        mp.game.controls.enableControlAction(0, 31, true);
        mp.game.controls.enableControlAction(0, 32, true);
        mp.game.controls.enableControlAction(0, 33, true);
        mp.game.controls.enableControlAction(0, 34, true);
        mp.game.controls.enableControlAction(0, 35, true);
    }
    else if (player.getVariable("boundedBy") != null) {
        mp.game.controls.enableControlAction(0, 1, true);
        mp.game.controls.enableControlAction(0, 2, true);
        mp.game.controls.enableControlAction(0, 3, true);
        mp.game.controls.enableControlAction(0, 4, true);
        mp.game.controls.enableControlAction(0, 5, true);
        mp.game.controls.enableControlAction(0, 6, true);
        
        mp.game.controls.enableControlAction(0, 30, true);
        mp.game.controls.enableControlAction(0, 31, true);
        mp.game.controls.enableControlAction(0, 32, true);
        mp.game.controls.enableControlAction(0, 33, true);
        mp.game.controls.enableControlAction(0, 34, true);
        mp.game.controls.enableControlAction(0, 35, true);
    }
});



mp.events.add("setCursorVisibleInRender", (bool) => {
    mp.players.local.cursorVisible = bool
    if (bool == false) delete mp.players.local.cursorVisible
    mp.gui.cursor.show(bool, bool);
})

mp.events.add("setCursor", (bool) => {
    mp.gui.cursor.show(bool, bool);
})

mp.banCameraRotate = false
mp.events.add("banCameraRotate", (bool) => {
    mp.banCameraRotate = bool
})


rpc.register('getBonePosition', async (data) => {
    try {   
        let iterations = 0
        let bonePosition = null
        let vehicle = undefined
        let boneName = undefined
        chatDebug(`getBonePosition отловлен!`)
        if (Array.isArray(data)) {
            vehicle = data[0]
            boneName = data[1]
        } else {
            vehicle = data
        }

        while (!bonePosition && iterations < 1000) {
            let position = new mp.Vector3(0, 0, 0)
            if (vehicle.handle) { 
                let bone = vehicle.getBoneIndexByName('platelight')
                if (bone == -1) {
                    bone = vehicle.getBoneIndexByName('handle_pside_r')
                } 
                if (boneName) bone = vehicle.getBoneIndexByName(boneName) 
                position = vehicle.getWorldPositionOfBone(bone)
            }
            if (position && position.x != 0 && position.y != 0) bonePosition = position 
            iterations++
            chatDebug(`ИЩЕТСЧ ПОЗИЦИЯ `)
            await sleep(50)
        } 
        chatDebug(`bonePosition: ${JSON.stringify(bonePosition)}`)
        let result = { ...bonePosition } 
        return result
    } catch (err) {
        chatDebug(`Error: ${err}`)
    }
}); 

    
mp.events.add("playerMenu.cars", (entity) => {  
    mp.events.callRemote("setBlipSelfVehicle", JSON.stringify(entity || {}))
})

// rpc.register("prepareScreenshot", () => { // TODO: доступно с 0.4 версии рейджа
//     return new Promise((resolve, reject) => {
//         try {
//             let pedHeadShot = mp.players.local.registerheadshot();
//             let screenResolution = mp.game.graphics.getScreenActiveResolution(100, 100);
//             setTimeout(async () => {
//                 if (mp.game.ped.isPedheadshotValid(pedHeadShot) && mp.game.ped.isPedheadshotReady(pedHeadShot)) {
//                     let headshotTexture = mp.game.ped.getPedheadshotTxdString(pedHeadShot);
//                     mp.game.graphics.drawSprite(headshotTexture, headshotTexture, 0.045, 0.085, 0.10, 0.18, 0.0, 255, 255, 255, 1000);
//                     mp.gui.takeScreenshot(`player_headshot.jpg`, 0, 100, 0); 
//                     chatDebug("скриншот валидный")
//                     let result = await rpc.callBrowser(menu, "convertImgToBase", JSON.stringify({ imgURL: "http://screenshots/player_headshot.jpg", screenResolution }))
//                     chatDebug(`RESULT ${JSON.stringify(result)}`)
//                     resolve(result)
//                 } else {
//                     chatDebug("скриншот не валидный")
//                 }
//             }, 2000);
//         } catch (err) {
//             chatDebug(err)
//         }
//     }) 
        
// }) 
    




mp.events.add("setUninterruptedAnimation", (bool) => {
    mp.uninterruptedAnimation = bool
})


let bones = [
"chassis",
"chassis_lowlod",
"chassis_dummy",
"seat_dside_f",
"seat_dside_r",
"seat_dside_r1",
"seat_dside_r2",
"seat_dside_r3",
"seat_dside_r4",
"seat_dside_r5",
"seat_dside_r6",
"seat_dside_r7",
"seat_pside_f",
"seat_pside_r",
"seat_pside_r1",
"seat_pside_r2",
"seat_pside_r3",
"seat_pside_r4",
"seat_pside_r5",
"seat_pside_r6",
"seat_pside_r7",
"window_lf1",
"window_lf2",
"window_lf3",
"window_rf1",
"window_rf2",
"window_rf3",
"window_lr1",
"window_lr2",
"window_lr3",
"window_rr1",
"window_rr2",
"window_rr3",
"door_dside_f",
"door_dside_r",
"door_pside_f",
"door_pside_r",
"handle_dside_f",
"handle_dside_r",
"handle_pside_f",
"handle_pside_r",
"wheel_lf",
"wheel_rf",
"wheel_lm1",
"wheel_rm1",
"wheel_lm2",
"wheel_rm2",
"wheel_lm3",
"wheel_rm3",
"wheel_lr",
"wheel_rr",
"suspension_lf",
"suspension_rf",
"suspension_lm",
"suspension_rm",
"suspension_lr",
"suspension_rr",
"spring_rf",
"spring_lf",
"spring_rr",
"spring_lr",
"transmission_f",
"transmission_m",
"transmission_r",
"hub_lf",
"hub_rf",
"hub_lm1",
"hub_rm1",
"hub_lm2",
"hub_rm2",
"hub_lm3",
"hub_rm3",
"hub_lr",
"hub_rr",
"windscreen",
"windscreen_r",
"window_lf",
"window_rf",
"window_lr",
"window_rr",
"window_lm",
"window_rm",
"bodyshell",
"bumper_f",
"bumper_r",
"wing_rf",
"wing_lf",
"bonnet",
"boot",
"exhaust",
"exhaust_2",
"exhaust_3",
"exhaust_4",
"exhaust_5",
"exhaust_6",
"exhaust_7",
"exhaust_8",
"exhaust_9",
"exhaust_10",
"exhaust_11",
"exhaust_12",
"exhaust_13",
"exhaust_14",
"exhaust_15",
"exhaust_16",
"engine",
"overheat",
"overheat_2",
"petrolcap",
"petroltank",
"petroltank_l",
"petroltank_r",
"steering",
"hbgrip_l",
"hbgrip_r",
"headlight_l",
"headlight_r",
"taillight_l",
"taillight_r",
"indicator_lf",
"indicator_rf",
"indicator_lr",
"indicator_rr",
"brakelight_l",
"brakelight_r",
"brakelight_m",
"reversinglight_l",
"reversinglight_r",
"extralight_1",
"extralight_2",
"extralight_3",
"extralight_4",
"numberplate",
"interiorlight",
"siren1",
"siren2",
"siren3",
"siren4",
"siren5",
"siren6",
"siren7",
"siren8",
"siren9",
"siren10",
"siren11",
"siren12",
"siren13",
"siren14",
"siren15",
"siren16",
"siren17",
"siren18",
"siren19",
"siren20",
"siren_glass1",
"siren_glass2",
"siren_glass3",
"siren_glass4",
"siren_glass5",
"siren_glass6",
"siren_glass7",
"siren_glass8",
"siren_glass9",
"siren_glass10",
"siren_glass11",
"siren_glass12",
"siren_glass13",
"siren_glass14",
"siren_glass15",
"siren_glass16",
"siren_glass17",
"siren_glass18",
"siren_glass19",
"siren_glass20",
"spoiler",
"struts",
"misc_a",
"misc_b",
"misc_c",
"misc_d",
"misc_e",
"misc_f",
"misc_g",
"misc_h",
"misc_i",
"misc_j",
"misc_k",
"misc_l",
"misc_m",
"misc_n",
"misc_o",
"misc_p",
"misc_q",
"misc_r",
"misc_s",
"misc_t",
"misc_u",
"misc_v",
"misc_w",
"misc_x",
"misc_y",
"misc_z",
"misc_1",
"misc_2",
"weapon_1a",
"weapon_1b",
"weapon_1c",
"weapon_1d",
"weapon_1a_rot",
"weapon_1b_rot",
"weapon_1c_rot",
"weapon_1d_rot",
"weapon_2a",
"weapon_2b",
"weapon_2c",
"weapon_2d",
"weapon_2a_rot",
"weapon_2b_rot",
"weapon_2c_rot",
"weapon_2d_rot",
"weapon_3a",
"weapon_3b",
"weapon_3c",
"weapon_3d",
"weapon_3a_rot",
"weapon_3b_rot",
"weapon_3c_rot",
"weapon_3d_rot",
"weapon_4a",
"weapon_4b",
"weapon_4c",
"weapon_4d",
"weapon_4a_rot",
"weapon_4b_rot",
"weapon_4c_rot",
"weapon_4d_rot",
"turret_1base",
"turret_1barrel",
"turret_2base",
"turret_2barrel",
"turret_3base",
"turret_3barrel",
"ammobelt",
"searchlight_base",
"searchlight_light",
"attach_female",
"roof",
"roof2",
"soft_1",
"soft_2",
"soft_3",
"soft_4",
"soft_5",
"soft_6",
"soft_7",
"soft_8",
"soft_9",
"soft_10",
"soft_11",
"soft_12",
"soft_13",
"forks",
"mast",
"carriage",
"fork_l",
"fork_r",
"forks_attach",
"frame_1",
"frame_2",
"frame_3",
"frame_pickup_1",
"frame_pickup_2",
"frame_pickup_3",
"frame_pickup_4",
"freight_cont",
"freight_bogey",
"freightgrain_slidedoor",
"door_hatch_r",
"door_hatch_l",
"tow_arm",
"tow_mount_a",
"tow_mount_b",
"tipper",
"combine_reel",
"combine_auger",
"slipstream_l",
"slipstream_r",
"arm_1",
"arm_2",
"arm_3",
"arm_4",
"scoop",
"boom",
"stick",
"bucket",
"shovel_2",
"shovel_3",
"Lookat_UpprPiston_head",
"Lookat_LowrPiston_boom",
"Boom_Driver",
"cutter_driver",
"vehicle_blocker",
"extra_1",
"extra_2",
"extra_3",
"extra_4",
"extra_5",
"extra_6",
"extra_7",
"extra_8",
"extra_9",
"extra_ten",
"extra_11",
"extra_12",
"break_extra_1",
"break_extra_2",
"break_extra_3",
"break_extra_4",
"break_extra_5",
"break_extra_6",
"break_extra_7",
"break_extra_8",
"break_extra_9",
"break_extra_10",
"mod_col_1",
"mod_col_2",
"mod_col_3",
"mod_col_4",
"mod_col_5",
"handlebars",
"forks_u",
"forks_l",
"wheel_f",
"swingarm",
"wheel_r",
"crank",
"pedal_r",
"pedal_l",
"static_prop",
"moving_prop",
"static_prop2",
"moving_prop2",
"rudder",
"rudder2",
"wheel_rf1_dummy",
"wheel_rf2_dummy",
"wheel_rf3_dummy",
"wheel_rb1_dummy",
"wheel_rb2_dummy",
"wheel_rb3_dummy",
"wheel_lf1_dummy",
"wheel_lf2_dummy",
"wheel_lf3_dummy",
"wheel_lb1_dummy",
"wheel_lb2_dummy",
"wheel_lb3_dummy",
"bogie_front",
"bogie_rear",
"rotor_main",
"rotor_rear",
"rotor_main_2",
"rotor_rear_2",
"elevators",
"tail",
"outriggers_l",
"outriggers_r",
"rope_attach_a",
"rope_attach_b",
"prop_1",
"prop_2",
"elevator_l",
"elevator_r",
"rudder_l",
"rudder_r",
"prop_3",
"prop_4",
"prop_5",
"prop_6",
"prop_7",
"prop_8",
"rudder_2",
"aileron_l",
"aileron_r",
"airbrake_l",
"airbrake_r",
"wing_l",
"wing_r",
"wing_lr",
"wing_rr",
"engine_l",
"engine_r",
"nozzles_f",
"nozzles_r",
"afterburner",
"wingtip_1",
"wingtip_2",
"gear_door_fl",
"gear_door_fr",
"gear_door_rl1",
"gear_door_rr1",
"gear_door_rl2",
"gear_door_rr2",
"gear_door_rml",
"gear_door_rmr",
"gear_f",
"gear_rl",
"gear_lm1",
"gear_rr",
"gear_rm1",
"gear_rm",
"prop_left",
"prop_right",
"legs",
"attach_male",
"draft_animal_attach_lr",
"draft_animal_attach_rr",
"draft_animal_attach_lm",
"draft_animal_attach_rm",
"draft_animal_attach_lf",
"draft_animal_attach_rf",
"wheelcover_l",
"wheelcover_r",
"barracks",
"pontoon_l",
"pontoon_r",
"no_ped_col_step_l",
"no_ped_col_strut_1_l",
"no_ped_col_strut_2_l",
"no_ped_col_step_r",
"no_ped_col_strut_1_r",
"no_ped_col_strut_2_r",
"light_cover",
"emissives",
"neon_l",
"neon_r",
"neon_f",
"neon_b",
"dashglow",
"doorlight_lf",
"doorlight_rf",
"doorlight_lr",
"doorlight_rr",
"unknown_id",
"dials",
"engineblock",
"bobble_head",
"bobble_base",
"bobble_hand",
"chassis_Control",
]
mp.events.add("getWorldPositionOfBone", () => {
    let i = 0 
    setInterval(() => { 
        vehicle = mp.players.local.vehicle
        let bone = vehicle.getBoneIndexByName(bones[i])
        if (bone != -1) {
            chatDebug(bones[i])
            mp.markers.new(1, new mp.Vector3(vehicle.getWorldPositionOfBone(bone).x, vehicle.getWorldPositionOfBone(bone).y, vehicle.getWorldPositionOfBone(bone).z  - 1), 1, {
                color: [255, 0, 255, 255],
                dimension: -1
            })
        }  
        i++
    }, 1000)
})
}; a; }
{let a = function scriptEntryPoint(mp) {
let tattoos = {
    "mpairraces_overlays":[
    {
    "Name":"TAT_AR_000",
    "LocalizedName":"Turbulence",
    "HashNameMale":"MP_Airraces_Tattoo_000_M",
    "HashNameFemale":"MP_Airraces_Tattoo_000_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":23000
    },
    {
    "Name":"TAT_AR_001",
    "LocalizedName":"Pilot Skull",
    "HashNameMale":"MP_Airraces_Tattoo_001_M",
    "HashNameFemale":"MP_Airraces_Tattoo_001_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":38105
    },
    {
    "Name":"TAT_AR_002",
    "LocalizedName":"Winged Bombshell",
    "HashNameMale":"MP_Airraces_Tattoo_002_M",
    "HashNameFemale":"MP_Airraces_Tattoo_002_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":46485,
    },
    {
    "Name":"TAT_AR_003",
    "LocalizedName":"Toxic Trails",
    "HashNameMale":"MP_Airraces_Tattoo_003_M",
    "HashNameFemale":"MP_Airraces_Tattoo_003_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":51985
    },
    {
    "Name":"TAT_AR_004",
    "LocalizedName":"Balloon Pioneer",
    "HashNameMale":"MP_Airraces_Tattoo_004_M",
    "HashNameFemale":"MP_Airraces_Tattoo_004_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":100390
    },
    {
    "Name":"TAT_AR_005",
    "LocalizedName":"Parachute Belle",
    "HashNameMale":"MP_Airraces_Tattoo_005_M",
    "HashNameFemale":"MP_Airraces_Tattoo_005_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":45270
    },
    {
    "Name":"TAT_AR_006",
    "LocalizedName":"Bombs Away",
    "HashNameMale":"MP_Airraces_Tattoo_006_M",
    "HashNameFemale":"MP_Airraces_Tattoo_006_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":32520
    },
    {
    "Name":"TAT_AR_007",
    "LocalizedName":"Eagle Eyes",
    "HashNameMale":"MP_Airraces_Tattoo_007_M",
    "HashNameFemale":"MP_Airraces_Tattoo_007_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":43925
    }],
    "mpbeach_overlays":[
    {
    "Name":"TAT_BB_018",
    "LocalizedName":"Ship Arms",
    "HashNameMale":"MP_Bea_M_Back_000",
    "HashNameFemale":"",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":47250
    },
    {
    "Name":"TAT_BB_019",
    "LocalizedName":"Tribal Hammerhead",
    "HashNameMale":"MP_Bea_M_Chest_000",
    "HashNameFemale":"",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":5800
    },
    {
    "Name":"TAT_BB_020",
    "LocalizedName":"Tribal Shark",
    "HashNameMale":"MP_Bea_M_Chest_001",
    "HashNameFemale":"",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":5900
    },
    {
    "Name":"TAT_BB_021",
    "LocalizedName":"Pirate Skull",
    "HashNameMale":"MP_Bea_M_Head_000",
    "HashNameFemale":"",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":22000
    },
    {
    "Name":"TAT_BB_022",
    "LocalizedName":"Surf LS",
    "HashNameMale":"MP_Bea_M_Head_001",
    "HashNameFemale":"",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":14500
    },
    {
    "Name":"TAT_BB_031",
    "LocalizedName":"Shark",
    "HashNameMale":"MP_Bea_M_Head_002",
    "HashNameFemale":"",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":18500
    },
    {
    "Name":"TAT_BB_027",
    "LocalizedName":"Tribal Star",
    "HashNameMale":"MP_Bea_M_Lleg_000",
    "HashNameFemale":"",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":14450
    },
    {
    "Name":"TAT_BB_025",
    "LocalizedName":"Tribal Tiki Tower",
    "HashNameMale":"MP_Bea_M_Rleg_000",
    "HashNameFemale":"",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":16500
    },
    {
    "Name":"TAT_BB_026",
    "LocalizedName":"Tribal Sun",
    "HashNameMale":"MP_Bea_M_RArm_000",
    "HashNameFemale":"",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":16200
    },
    {
    "Name":"TAT_BB_024",
    "LocalizedName":"Tiki Tower",
    "HashNameMale":"MP_Bea_M_LArm_000",
    "HashNameFemale":"",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":14800
    },
    {
    "Name":"TAT_BB_017",
    "LocalizedName":"Mermaid L.S.",
    "HashNameMale":"MP_Bea_M_LArm_001",
    "HashNameFemale":"",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":16600
    },
    {
    "Name":"TAT_BB_028",
    "LocalizedName":"Little Fish",
    "HashNameMale":"MP_Bea_M_Neck_000",
    "HashNameFemale":"",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":5650
    },
    {
    "Name":"TAT_BB_029",
    "LocalizedName":"Surfs Up",
    "HashNameMale":"MP_Bea_M_Neck_001",
    "HashNameFemale":"",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":12250
    },
    {
    "Name":"TAT_BB_030",
    "LocalizedName":"Vespucci Beauty",
    "HashNameMale":"MP_Bea_M_RArm_001",
    "HashNameFemale":"",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":17000
    },
    {
    "Name":"TAT_BB_023",
    "LocalizedName":"Swordfish",
    "HashNameMale":"MP_Bea_M_Stom_000",
    "HashNameFemale":"",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":3100
    },
    {
    "Name":"TAT_BB_032",
    "LocalizedName":"Wheel",
    "HashNameMale":"MP_Bea_M_Stom_001",
    "HashNameFemale":"",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":25500
    },
    {
    "Name":"TAT_BB_003",
    "LocalizedName":"Rock Solid",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_Back_000",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":5500
    },
    {
    "Name":"TAT_BB_001",
    "LocalizedName":"Hibiscus Flower Duo",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_Back_001",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6900
    },
    {
    "Name":"TAT_BB_005",
    "LocalizedName":"Shrimp",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_Back_002",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":2500
    },
    {
    "Name":"TAT_BB_012",
    "LocalizedName":"Anchor",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_Chest_000",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":2500
    },
    {
    "Name":"TAT_BB_013",
    "LocalizedName":"Anchor",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_Chest_001",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":2500
    },
    {
    "Name":"TAT_BB_000",
    "LocalizedName":"Los Santos Wreath",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_Chest_002",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":8500
    },
    {
    "Name":"TAT_BB_006",
    "LocalizedName":"Love Dagger",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_RSide_000",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6850
    },
    {
    "Name":"TAT_BB_007",
    "LocalizedName":"School of Fish",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_RLeg_000",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":2950
    },
    {
    "Name":"TAT_BB_015",
    "LocalizedName":"Tribal Fish",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_RArm_001",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":3700
    },
    {
    "Name":"TAT_BB_008",
    "LocalizedName":"Tribal Butterfly",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_Neck_000",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":1700
    },
    {
    "Name":"TAT_BB_011",
    "LocalizedName":"Sea Horses",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_Should_000",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":5100
    },
    {
    "Name":"TAT_BB_004",
    "LocalizedName":"Catfish",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_Should_001",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":5250
    },
    {
    "Name":"TAT_BB_014",
    "LocalizedName":"Swallow",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_Stom_000",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":2100
    },
    {
    "Name":"TAT_BB_009",
    "LocalizedName":"Hibiscus Flower",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_Stom_001",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":2650
    },
    {
    "Name":"TAT_BB_010",
    "LocalizedName":"Dolphin",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_Stom_002",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":1900
    },
    {
    "Name":"TAT_BB_002",
    "LocalizedName":"Tribal Flower",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_LArm_000",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":3500
    },
    {
    "Name":"TAT_BB_016",
    "LocalizedName":"Parrot",
    "HashNameMale":"",
    "HashNameFemale":"MP_Bea_F_LArm_001",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":5250
    }],
    "mpbiker_overlays":[
    {
    "Name":"TAT_BI_000",
    "LocalizedName":"Demon Rider",
    "HashNameMale":"MP_MP_Biker_Tat_000_M",
    "HashNameFemale":"MP_MP_Biker_Tat_000_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6720
    },
    {
    "Name":"TAT_BI_001",
    "LocalizedName":"Both Barrels",
    "HashNameMale":"MP_MP_Biker_Tat_001_M",
    "HashNameFemale":"MP_MP_Biker_Tat_001_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":15800
    },
    {
    "Name":"TAT_BI_002",
    "LocalizedName":"Rose Tribute",
    "HashNameMale":"MP_MP_Biker_Tat_002_M",
    "HashNameFemale":"MP_MP_Biker_Tat_002_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":26820
    },
    {
    "Name":"TAT_BI_003",
    "LocalizedName":"Web Rider",
    "HashNameMale":"MP_MP_Biker_Tat_003_M",
    "HashNameFemale":"MP_MP_Biker_Tat_003_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":10850
    },
    {
    "Name":"TAT_BI_004",
    "LocalizedName":"Dragon's Fury",
    "HashNameMale":"MP_MP_Biker_Tat_004_M",
    "HashNameFemale":"MP_MP_Biker_Tat_004_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":47950
    },
    {
    "Name":"TAT_BI_005",
    "LocalizedName":"Made In America",
    "HashNameMale":"MP_MP_Biker_Tat_005_M",
    "HashNameFemale":"MP_MP_Biker_Tat_005_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":9230
    },
    {
    "Name":"TAT_BI_006",
    "LocalizedName":"Chopper Freedom",
    "HashNameMale":"MP_MP_Biker_Tat_006_M",
    "HashNameFemale":"MP_MP_Biker_Tat_006_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":10400
    },
    {
    "Name":"TAT_BI_007",
    "LocalizedName":"Swooping Eagle",
    "HashNameMale":"MP_MP_Biker_Tat_007_M",
    "HashNameFemale":"MP_MP_Biker_Tat_007_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":15100
    },
    {
    "Name":"TAT_BI_008",
    "LocalizedName":"Freedom Wheels",
    "HashNameMale":"MP_MP_Biker_Tat_008_M",
    "HashNameFemale":"MP_MP_Biker_Tat_008_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":18785
    },
    {
    "Name":"TAT_BI_009",
    "LocalizedName":"Morbid Arachnid",
    "HashNameMale":"MP_MP_Biker_Tat_009_M",
    "HashNameFemale":"MP_MP_Biker_Tat_009_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":16350
    },
    {
    "Name":"TAT_BI_010",
    "LocalizedName":"Skull Of Taurus",
    "HashNameMale":"MP_MP_Biker_Tat_010_M",
    "HashNameFemale":"MP_MP_Biker_Tat_010_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":11350
    },
    {
    "Name":"TAT_BI_011",
    "LocalizedName":"R.I.P. My Brothers",
    "HashNameMale":"MP_MP_Biker_Tat_011_M",
    "HashNameFemale":"MP_MP_Biker_Tat_011_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":32350
    },
    {
    "Name":"TAT_BI_012",
    "LocalizedName":"Urban Stunter",
    "HashNameMale":"MP_MP_Biker_Tat_012_M",
    "HashNameFemale":"MP_MP_Biker_Tat_012_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":14985
    },
    {
    "Name":"TAT_BI_013",
    "LocalizedName":"Demon Crossbones",
    "HashNameMale":"MP_MP_Biker_Tat_013_M",
    "HashNameFemale":"MP_MP_Biker_Tat_013_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":11140
    },
    {
    "Name":"TAT_BI_014",
    "LocalizedName":"Lady Mortality",
    "HashNameMale":"MP_MP_Biker_Tat_014_M",
    "HashNameFemale":"MP_MP_Biker_Tat_014_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":18300
    },
    {
    "Name":"TAT_BI_015",
    "LocalizedName":"Ride or Die",
    "HashNameMale":"MP_MP_Biker_Tat_015_M",
    "HashNameFemale":"MP_MP_Biker_Tat_015_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":18975
    },
    {
    "Name":"TAT_BI_016",
    "LocalizedName":"Macabre Tree",
    "HashNameMale":"MP_MP_Biker_Tat_016_M",
    "HashNameFemale":"MP_MP_Biker_Tat_016_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":19000
    },
    {
    "Name":"TAT_BI_017",
    "LocalizedName":"Clawed Beast",
    "HashNameMale":"MP_MP_Biker_Tat_017_M",
    "HashNameFemale":"MP_MP_Biker_Tat_017_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":45650
    },
    {
    "Name":"TAT_BI_018",
    "LocalizedName":"Skeletal Chopper",
    "HashNameMale":"MP_MP_Biker_Tat_018_M",
    "HashNameFemale":"MP_MP_Biker_Tat_018_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":7650
    },
    {
    "Name":"TAT_BI_019",
    "LocalizedName":"Gruesome Talons",
    "HashNameMale":"MP_MP_Biker_Tat_019_M",
    "HashNameFemale":"MP_MP_Biker_Tat_019_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":9900
    },
    {
    "Name":"TAT_BI_020",
    "LocalizedName":"Cranial Rose",
    "HashNameMale":"MP_MP_Biker_Tat_020_M",
    "HashNameFemale":"MP_MP_Biker_Tat_020_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":19745
    },
    {
    "Name":"TAT_BI_021",
    "LocalizedName":"Flaming Reaper",
    "HashNameMale":"MP_MP_Biker_Tat_021_M",
    "HashNameFemale":"MP_MP_Biker_Tat_021_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":53700
    },
    {
    "Name":"TAT_BI_022",
    "LocalizedName":"Western Insignia",
    "HashNameMale":"MP_MP_Biker_Tat_022_M",
    "HashNameFemale":"MP_MP_Biker_Tat_022_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":11385
    },
    {
    "Name":"TAT_BI_023",
    "LocalizedName":"Western MC",
    "HashNameMale":"MP_MP_Biker_Tat_023_M",
    "HashNameFemale":"MP_MP_Biker_Tat_023_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":10000
    },
    {
    "Name":"TAT_BI_024",
    "LocalizedName":"Live to Ride",
    "HashNameMale":"MP_MP_Biker_Tat_024_M",
    "HashNameFemale":"MP_MP_Biker_Tat_024_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":35320
    },
    {
    "Name":"TAT_BI_025",
    "LocalizedName":"Good Luck",
    "HashNameMale":"MP_MP_Biker_Tat_025_M",
    "HashNameFemale":"MP_MP_Biker_Tat_025_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":22950
    },
    {
    "Name":"TAT_BI_026",
    "LocalizedName":"American Dream",
    "HashNameMale":"MP_MP_Biker_Tat_026_M",
    "HashNameFemale":"MP_MP_Biker_Tat_026_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":11000
    },
    {
    "Name":"TAT_BI_027",
    "LocalizedName":"Bad Luck",
    "HashNameMale":"MP_MP_Biker_Tat_027_M",
    "HashNameFemale":"MP_MP_Biker_Tat_027_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":16960
    },
    {
    "Name":"TAT_BI_028",
    "LocalizedName":"Dusk Rider",
    "HashNameMale":"MP_MP_Biker_Tat_028_M",
    "HashNameFemale":"MP_MP_Biker_Tat_028_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":14520
    },
    {
    "Name":"TAT_BI_029",
    "LocalizedName":"Bone Wrench",
    "HashNameMale":"MP_MP_Biker_Tat_029_M",
    "HashNameFemale":"MP_MP_Biker_Tat_029_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":9630
    },
    {
    "Name":"TAT_BI_030",
    "LocalizedName":"Brothers For Life",
    "HashNameMale":"MP_MP_Biker_Tat_030_M",
    "HashNameFemale":"MP_MP_Biker_Tat_030_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":19810
    },
    {
    "Name":"TAT_BI_031",
    "LocalizedName":"Gear Head",
    "HashNameMale":"MP_MP_Biker_Tat_031_M",
    "HashNameFemale":"MP_MP_Biker_Tat_031_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":18600
    },
    {
    "Name":"TAT_BI_032",
    "LocalizedName":"Western Eagle",
    "HashNameMale":"MP_MP_Biker_Tat_032_M",
    "HashNameFemale":"MP_MP_Biker_Tat_032_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":7655
    },
    {
    "Name":"TAT_BI_033",
    "LocalizedName":"Eagle Emblem",
    "HashNameMale":"MP_MP_Biker_Tat_033_M",
    "HashNameFemale":"MP_MP_Biker_Tat_033_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":4385
    },
    {
    "Name":"TAT_BI_034",
    "LocalizedName":"Brotherhood of Bikes",
    "HashNameMale":"MP_MP_Biker_Tat_034_M",
    "HashNameFemale":"MP_MP_Biker_Tat_034_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":9975
    },
    {
    "Name":"TAT_BI_035",
    "LocalizedName":"Chain Fist",
    "HashNameMale":"MP_MP_Biker_Tat_035_M",
    "HashNameFemale":"MP_MP_Biker_Tat_035_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":15780
    },
    {
    "Name":"TAT_BI_036",
    "LocalizedName":"Engulfed Skull",
    "HashNameMale":"MP_MP_Biker_Tat_036_M",
    "HashNameFemale":"MP_MP_Biker_Tat_036_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":29300
    },
    {
    "Name":"TAT_BI_037",
    "LocalizedName":"Scorched Soul",
    "HashNameMale":"MP_MP_Biker_Tat_037_M",
    "HashNameFemale":"MP_MP_Biker_Tat_037_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":42495
    },
    {
    "Name":"TAT_BI_038",
    "LocalizedName":"FTW",
    "HashNameMale":"MP_MP_Biker_Tat_038_M",
    "HashNameFemale":"MP_MP_Biker_Tat_038_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":6900
    },
    {
    "Name":"TAT_BI_039",
    "LocalizedName":"Gas Guzzler",
    "HashNameMale":"MP_MP_Biker_Tat_039_M",
    "HashNameFemale":"MP_MP_Biker_Tat_039_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":20950
    },
    {
    "Name":"TAT_BI_040",
    "LocalizedName":"American Made",
    "HashNameMale":"MP_MP_Biker_Tat_040_M",
    "HashNameFemale":"MP_MP_Biker_Tat_040_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":13620
    },
    {
    "Name":"TAT_BI_041",
    "LocalizedName":"No Regrets",
    "HashNameMale":"MP_MP_Biker_Tat_041_M",
    "HashNameFemale":"MP_MP_Biker_Tat_041_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":8320
    },
    {
    "Name":"TAT_BI_042",
    "LocalizedName":"Grim Rider",
    "HashNameMale":"MP_MP_Biker_Tat_042_M",
    "HashNameFemale":"MP_MP_Biker_Tat_042_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":17865
    },
    {
    "Name":"TAT_BI_043",
    "LocalizedName":"Ride Forever",
    "HashNameMale":"MP_MP_Biker_Tat_043_M",
    "HashNameFemale":"MP_MP_Biker_Tat_043_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6850
    },
    {
    "Name":"TAT_BI_044",
    "LocalizedName":"Ride Free",
    "HashNameMale":"MP_MP_Biker_Tat_044_M",
    "HashNameFemale":"MP_MP_Biker_Tat_044_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":31900
    },
    {
    "Name":"TAT_BI_045",
    "LocalizedName":"Ride Hard Die Fast",
    "HashNameMale":"MP_MP_Biker_Tat_045_M",
    "HashNameFemale":"MP_MP_Biker_Tat_045_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":16320
    },
    {
    "Name":"TAT_BI_046",
    "LocalizedName":"Skull Chain",
    "HashNameMale":"MP_MP_Biker_Tat_046_M",
    "HashNameFemale":"MP_MP_Biker_Tat_046_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":14985
    },
    {
    "Name":"TAT_BI_047",
    "LocalizedName":"Snake Bike",
    "HashNameMale":"MP_MP_Biker_Tat_047_M",
    "HashNameFemale":"MP_MP_Biker_Tat_047_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":43500
    },
    {
    "Name":"TAT_BI_048",
    "LocalizedName":"STFU",
    "HashNameMale":"MP_MP_Biker_Tat_048_M",
    "HashNameFemale":"MP_MP_Biker_Tat_048_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":18930
    },
    {
    "Name":"TAT_BI_049",
    "LocalizedName":"These Colors Don't Run",
    "HashNameMale":"MP_MP_Biker_Tat_049_M",
    "HashNameFemale":"MP_MP_Biker_Tat_049_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":18790
    },
    {
    "Name":"TAT_BI_050",
    "LocalizedName":"Unforgiven",
    "HashNameMale":"MP_MP_Biker_Tat_050_M",
    "HashNameFemale":"MP_MP_Biker_Tat_050_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":28720
    },
    {
    "Name":"TAT_BI_051",
    "LocalizedName":"Western Stylized",
    "HashNameMale":"MP_MP_Biker_Tat_051_M",
    "HashNameFemale":"MP_MP_Biker_Tat_051_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":6125
    },
    {
    "Name":"TAT_BI_052",
    "LocalizedName":"Biker Mount",
    "HashNameMale":"MP_MP_Biker_Tat_052_M",
    "HashNameFemale":"MP_MP_Biker_Tat_052_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":19135
    },
    {
    "Name":"TAT_BI_053",
    "LocalizedName":"Muffler Helmet",
    "HashNameMale":"MP_MP_Biker_Tat_053_M",
    "HashNameFemale":"MP_MP_Biker_Tat_053_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":28400
    },
    {
    "Name":"TAT_BI_054",
    "LocalizedName":"Mum",
    "HashNameMale":"MP_MP_Biker_Tat_054_M",
    "HashNameFemale":"MP_MP_Biker_Tat_054_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":19450
    },
    {
    "Name":"TAT_BI_055",
    "LocalizedName":"Poison Scorpion",
    "HashNameMale":"MP_MP_Biker_Tat_055_M",
    "HashNameFemale":"MP_MP_Biker_Tat_055_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":40995
    },
    {
    "Name":"TAT_BI_056",
    "LocalizedName":"Bone Cruiser",
    "HashNameMale":"MP_MP_Biker_Tat_056_M",
    "HashNameFemale":"MP_MP_Biker_Tat_056_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":34960
    },
    {
    "Name":"TAT_BI_057",
    "LocalizedName":"Laughing Skull",
    "HashNameMale":"MP_MP_Biker_Tat_057_M",
    "HashNameFemale":"MP_MP_Biker_Tat_057_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":53865
    },
    {
    "Name":"TAT_BI_058",
    "LocalizedName":"Reaper Vulture",
    "HashNameMale":"MP_MP_Biker_Tat_058_M",
    "HashNameFemale":"MP_MP_Biker_Tat_058_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":7985
    },
    {
    "Name":"TAT_BI_059",
    "LocalizedName":"Faggio",
    "HashNameMale":"MP_MP_Biker_Tat_059_M",
    "HashNameFemale":"MP_MP_Biker_Tat_059_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6395
    },
    {
    "Name":"TAT_BI_060",
    "LocalizedName":"We Are The Mods!",
    "HashNameMale":"MP_MP_Biker_Tat_060_M",
    "HashNameFemale":"MP_MP_Biker_Tat_060_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":7105
    }
    ],
    "mpbusiness_overlays":[
    {
    "Name":"TAT_BUS_005",
    "LocalizedName":"Cash is King",
    "HashNameMale":"MP_Buis_M_Neck_000",
    "HashNameFemale":"",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":25000
    },
    {
    "Name":"TAT_BUS_006",
    "LocalizedName":"Bold Dollar Sign",
    "HashNameMale":"MP_Buis_M_Neck_001",
    "HashNameFemale":"",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":16000
    },
    {
    "Name":"TAT_BUS_007",
    "LocalizedName":"Script Dollar Sign",
    "HashNameMale":"MP_Buis_M_Neck_002",
    "HashNameFemale":"",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":17500
    },
    {
    "Name":"TAT_BUS_008",
    "LocalizedName":"$100",
    "HashNameMale":"MP_Buis_M_Neck_003",
    "HashNameFemale":"",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":26900
    },
    {
    "Name":"TAT_BUS_003",
    "LocalizedName":"$100 Bill",
    "HashNameMale":"MP_Buis_M_LeftArm_000",
    "HashNameFemale":"",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":35000
    },
    {
    "Name":"TAT_BUS_004",
    "LocalizedName":"All-Seeing Eye",
    "HashNameMale":"MP_Buis_M_LeftArm_001",
    "HashNameFemale":"",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":37300
    },
    {
    "Name":"TAT_BUS_009",
    "LocalizedName":"Dollar Skull",
    "HashNameMale":"MP_Buis_M_RightArm_000",
    "HashNameFemale":"",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":14800
    },
    {
    "Name":"TAT_BUS_010",
    "LocalizedName":"Green",
    "HashNameMale":"MP_Buis_M_RightArm_001",
    "HashNameFemale":"",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":6500
    },
    {
    "Name":"TAT_BUS_011",
    "LocalizedName":"Refined Hustler",
    "HashNameMale":"MP_Buis_M_Stomach_000",
    "HashNameFemale":"",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":16400
    },
    {
    "Name":"TAT_BUS_001",
    "LocalizedName":"Rich",
    "HashNameMale":"MP_Buis_M_Chest_000",
    "HashNameFemale":"",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6250
    },
    {
    "Name":"TAT_BUS_002",
    "LocalizedName":"$$$",
    "HashNameMale":"MP_Buis_M_Chest_001",
    "HashNameFemale":"",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6500
    },
    {
    "Name":"TAT_BUS_000",
    "LocalizedName":"Makin' Paper",
    "HashNameMale":"MP_Buis_M_Back_000",
    "HashNameFemale":"",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":5500
    },
    {
    "Name":"TAT_BUS_F_002",
    "LocalizedName":"High Roller",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_Chest_000",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":7000
    },
    {
    "Name":"TAT_BUS_F_003",
    "LocalizedName":"Makin' Money",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_Chest_001",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":7200
    },
    {
    "Name":"TAT_BUS_F_004",
    "LocalizedName":"Love Money",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_Chest_002",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":1600
    },
    {
    "Name":"TAT_BUS_F_011",
    "LocalizedName":"Diamond Back",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_Stom_000",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6800
    },
    {
    "Name":"TAT_BUS_F_012",
    "LocalizedName":"Santo Capra Logo",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_Stom_001",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":1800
    },
    {
    "Name":"TAT_BUS_F_013",
    "LocalizedName":"Money Bag",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_Stom_002",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":1500
    },
    {
    "Name":"TAT_BUS_F_000",
    "LocalizedName":"Respect",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_Back_000",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":4200
    },
    {
    "Name":"TAT_BUS_F_001",
    "LocalizedName":"Gold Digger",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_Back_001",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":4000
    },
    {
    "Name":"TAT_BUS_F_007",
    "LocalizedName":"Val-de-Grace Logo",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_Neck_000",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":1900
    },
    {
    "Name":"TAT_BUS_F_008",
    "LocalizedName":"Money Rose",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_Neck_001",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":2500
    },
    {
    "Name":"TAT_BUS_F_009",
    "LocalizedName":"Dollar Sign",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_RArm_000",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":4900
    },
    {
    "Name":"TAT_BUS_F_005",
    "LocalizedName":"Greed is Good",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_LArm_000",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":5500
    },
    {
    "Name":"TAT_BUS_F_006",
    "LocalizedName":"Single",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_LLeg_000",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":4850
    },
    {
    "Name":"TAT_BUS_F_010",
    "LocalizedName":"Diamond Crown",
    "HashNameMale":"",
    "HashNameFemale":"MP_Buis_F_RLeg_000",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":4500
    }
    ],
    "mpchristmas2017_overlays":[
    {
    "Name":"TAT_H27_000",
    "LocalizedName":"Thor & Goblin",
    "HashNameMale":"MP_Christmas2017_Tattoo_000_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_000_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":13500
    },
    {
    "Name":"TAT_H27_001",
    "LocalizedName":"Viking Warrior",
    "HashNameMale":"MP_Christmas2017_Tattoo_001_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_001_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":47260
    },
    {
    "Name":"TAT_H27_002",
    "LocalizedName":"Kabuto",
    "HashNameMale":"MP_Christmas2017_Tattoo_002_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_002_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":18360
    },
    {
    "Name":"TAT_H27_003",
    "LocalizedName":"Native Warrior",
    "HashNameMale":"MP_Christmas2017_Tattoo_003_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_003_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":17780
    },
    {
    "Name":"TAT_H27_004",
    "LocalizedName":"Tiger & Mask",
    "HashNameMale":"MP_Christmas2017_Tattoo_004_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_004_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":60400
    },
    {
    "Name":"TAT_H27_005",
    "LocalizedName":"Ghost Dragon",
    "HashNameMale":"MP_Christmas2017_Tattoo_005_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_005_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":152660
    },
    {
    "Name":"TAT_H27_006",
    "LocalizedName":"Medusa",
    "HashNameMale":"MP_Christmas2017_Tattoo_006_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_006_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":52030
    },
    {
    "Name":"TAT_H27_007",
    "LocalizedName":"Spartan Combat",
    "HashNameMale":"MP_Christmas2017_Tattoo_007_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_007_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":69670
    },
    {
    "Name":"TAT_H27_008",
    "LocalizedName":"Spartan Warrior",
    "HashNameMale":"MP_Christmas2017_Tattoo_008_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_008_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":136800
    },
    {
    "Name":"TAT_H27_009",
    "LocalizedName":"Norse Rune",
    "HashNameMale":"MP_Christmas2017_Tattoo_009_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_009_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":53870
    },
    {
    "Name":"TAT_H27_010",
    "LocalizedName":"Spartan Shield",
    "HashNameMale":"MP_Christmas2017_Tattoo_010_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_010_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":69540
    },
    {
    "Name":"TAT_H27_011",
    "LocalizedName":"Weathered Skull",
    "HashNameMale":"MP_Christmas2017_Tattoo_011_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_011_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":153950
    },
    {
    "Name":"TAT_H27_012",
    "LocalizedName":"Tiger Headdress",
    "HashNameMale":"MP_Christmas2017_Tattoo_012_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_012_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":21190
    },
    {
    "Name":"TAT_H27_013",
    "LocalizedName":"Katana",
    "HashNameMale":"MP_Christmas2017_Tattoo_013_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_013_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":52930
    },
    {
    "Name":"TAT_H27_014",
    "LocalizedName":"Celtic Band",
    "HashNameMale":"MP_Christmas2017_Tattoo_014_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_014_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":11860
    },
    {
    "Name":"TAT_H27_015",
    "LocalizedName":"Samurai Combat",
    "HashNameMale":"MP_Christmas2017_Tattoo_015_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_015_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":70460
    },
    {
    "Name":"TAT_H27_016",
    "LocalizedName":"Odin & Raven",
    "HashNameMale":"MP_Christmas2017_Tattoo_016_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_016_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":91500
    },
    {
    "Name":"TAT_H27_017",
    "LocalizedName":"Feather Sleeve",
    "HashNameMale":"MP_Christmas2017_Tattoo_017_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_017_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":42080
    },
    {
    "Name":"TAT_H27_018",
    "LocalizedName":"Muscle Tear",
    "HashNameMale":"MP_Christmas2017_Tattoo_018_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_018_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":54410
    },
    {
    "Name":"TAT_H27_019",
    "LocalizedName":"Strike Force",
    "HashNameMale":"MP_Christmas2017_Tattoo_019_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_019_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":16780
    },
    {
    "Name":"TAT_H27_020",
    "LocalizedName":"Medusa's Gaze",
    "HashNameMale":"MP_Christmas2017_Tattoo_020_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_020_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":66890
    },
    {
    "Name":"TAT_H27_021",
    "LocalizedName":"Spartan & Lion",
    "HashNameMale":"MP_Christmas2017_Tattoo_021_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_021_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":44870
    },
    {
    "Name":"TAT_H27_022",
    "LocalizedName":"Spartan & Horse",
    "HashNameMale":"MP_Christmas2017_Tattoo_022_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_022_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":49970
    },
    {
    "Name":"TAT_H27_023",
    "LocalizedName":"Samurai Tallship",
    "HashNameMale":"MP_Christmas2017_Tattoo_023_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_023_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":69240
    },
    {
    "Name":"TAT_H27_024",
    "LocalizedName":"Dragon Slayer",
    "HashNameMale":"MP_Christmas2017_Tattoo_024_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_024_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":61740
    },
    {
    "Name":"TAT_H27_025",
    "LocalizedName":"Winged Serpent",
    "HashNameMale":"MP_Christmas2017_Tattoo_025_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_025_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":57560
    },
    {
    "Name":"TAT_H27_026",
    "LocalizedName":"Spartan Skull",
    "HashNameMale":"MP_Christmas2017_Tattoo_026_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_026_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":18980
    },
    {
    "Name":"TAT_H27_027",
    "LocalizedName":"Molon Labe",
    "HashNameMale":"MP_Christmas2017_Tattoo_027_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_027_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":64280
    },
    {
    "Name":"TAT_H27_028",
    "LocalizedName":"Spartan Mural",
    "HashNameMale":"MP_Christmas2017_Tattoo_028_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_028_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":15150
    },
    {
    "Name":"TAT_H27_029",
    "LocalizedName":"Cerberus",
    "HashNameMale":"MP_Christmas2017_Tattoo_029_M",
    "HashNameFemale":"MP_Christmas2017_Tattoo_029_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":65920
    }
    ],
    "mpchristmas2018_overlays":[
    {
    "Name":"TAT_AW_000",
    "LocalizedName":"???",
    "HashNameMale":"MP_Christmas2018_Tat_000_M",
    "HashNameFemale":"MP_Christmas2018_Tat_000_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":10000
    }
    ],
    "mpchristmas2_overlays":[
    {
    "Name":"TAT_X2_000",
    "LocalizedName":"Skull Rider",
    "HashNameMale":"MP_Xmas2_M_Tat_000",
    "HashNameFemale":"MP_Xmas2_F_Tat_000",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":15950
    },
    {
    "Name":"TAT_X2_001",
    "LocalizedName":"Spider Outline",
    "HashNameMale":"MP_Xmas2_M_Tat_001",
    "HashNameFemale":"MP_Xmas2_F_Tat_001",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":14650
    },
    {
    "Name":"TAT_X2_002",
    "LocalizedName":"Spider Color",
    "HashNameMale":"MP_Xmas2_M_Tat_002",
    "HashNameFemale":"MP_Xmas2_F_Tat_002",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":26350
    },
    {
    "Name":"TAT_X2_003",
    "LocalizedName":"Snake Outline",
    "HashNameMale":"MP_Xmas2_M_Tat_003",
    "HashNameFemale":"MP_Xmas2_F_Tat_003",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":18450
    },
    {
    "Name":"TAT_X2_004",
    "LocalizedName":"Snake Shaded",
    "HashNameMale":"MP_Xmas2_M_Tat_004",
    "HashNameFemale":"MP_Xmas2_F_Tat_004",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":23250
    },
    {
    "Name":"TAT_X2_005",
    "LocalizedName":"Carp Outline",
    "HashNameMale":"MP_Xmas2_M_Tat_005",
    "HashNameFemale":"MP_Xmas2_F_Tat_005",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":18750
    },
    {
    "Name":"TAT_X2_006",
    "LocalizedName":"Carp Shaded",
    "HashNameMale":"MP_Xmas2_M_Tat_006",
    "HashNameFemale":"MP_Xmas2_F_Tat_006",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":24500
    },
    {
    "Name":"TAT_X2_007",
    "LocalizedName":"Los Muertos",
    "HashNameMale":"MP_Xmas2_M_Tat_007",
    "HashNameFemale":"MP_Xmas2_F_Tat_007",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":13950
    },
    {
    "Name":"TAT_X2_008",
    "LocalizedName":"Death Before Dishonor",
    "HashNameMale":"MP_Xmas2_M_Tat_008",
    "HashNameFemale":"MP_Xmas2_F_Tat_008",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":14300
    },
    {
    "Name":"TAT_X2_009",
    "LocalizedName":"Time To Die",
    "HashNameMale":"MP_Xmas2_M_Tat_009",
    "HashNameFemale":"MP_Xmas2_F_Tat_009",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":17800
    },
    {
    "Name":"TAT_X2_010",
    "LocalizedName":"Electric Snake",
    "HashNameMale":"MP_Xmas2_M_Tat_010",
    "HashNameFemale":"MP_Xmas2_F_Tat_010",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":16200
    },
    {
    "Name":"TAT_X2_011",
    "LocalizedName":"Roaring Tiger",
    "HashNameMale":"MP_Xmas2_M_Tat_011",
    "HashNameFemale":"MP_Xmas2_F_Tat_011",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":16850
    },
    {
    "Name":"TAT_X2_012",
    "LocalizedName":"8 Ball Skull",
    "HashNameMale":"MP_Xmas2_M_Tat_012",
    "HashNameFemale":"MP_Xmas2_F_Tat_012",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":8250
    },
    {
    "Name":"TAT_X2_013",
    "LocalizedName":"Lizard",
    "HashNameMale":"MP_Xmas2_M_Tat_013",
    "HashNameFemale":"MP_Xmas2_F_Tat_013",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":17900
    },
    {
    "Name":"TAT_X2_014",
    "LocalizedName":"Floral Dagger",
    "HashNameMale":"MP_Xmas2_M_Tat_014",
    "HashNameFemale":"MP_Xmas2_F_Tat_014",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":20500
    },
    {
    "Name":"TAT_X2_015",
    "LocalizedName":"Japanese Warrior",
    "HashNameMale":"MP_Xmas2_M_Tat_015",
    "HashNameFemale":"MP_Xmas2_F_Tat_015",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":41000
    },
    {
    "Name":"TAT_X2_016",
    "LocalizedName":"Loose Lips Outline",
    "HashNameMale":"MP_Xmas2_M_Tat_016",
    "HashNameFemale":"MP_Xmas2_F_Tat_016",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6150
    },
    {
    "Name":"TAT_X2_017",
    "LocalizedName":"Loose Lips Color",
    "HashNameMale":"MP_Xmas2_M_Tat_017",
    "HashNameFemale":"MP_Xmas2_F_Tat_017",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":16350
    },
    {
    "Name":"TAT_X2_018",
    "LocalizedName":"Royal Dagger Outline",
    "HashNameMale":"MP_Xmas2_M_Tat_018",
    "HashNameFemale":"MP_Xmas2_F_Tat_018",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":14300
    },
    {
    "Name":"TAT_X2_019",
    "LocalizedName":"Royal Dagger Color",
    "HashNameMale":"MP_Xmas2_M_Tat_019",
    "HashNameFemale":"MP_Xmas2_F_Tat_019",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":17500
    },
    {
    "Name":"TAT_X2_020",
    "LocalizedName":"Time's Up Outline",
    "HashNameMale":"MP_Xmas2_M_Tat_020",
    "HashNameFemale":"MP_Xmas2_F_Tat_020",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":5500
    },
    {
    "Name":"TAT_X2_021",
    "LocalizedName":"Time's Up Color",
    "HashNameMale":"MP_Xmas2_M_Tat_021",
    "HashNameFemale":"MP_Xmas2_F_Tat_021",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":8750
    },
    {
    "Name":"TAT_X2_022",
    "LocalizedName":"You're Next Outline",
    "HashNameMale":"MP_Xmas2_M_Tat_022",
    "HashNameFemale":"MP_Xmas2_F_Tat_022",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":6800
    },
    {
    "Name":"TAT_X2_023",
    "LocalizedName":"You're Next Color",
    "HashNameMale":"MP_Xmas2_M_Tat_023",
    "HashNameFemale":"MP_Xmas2_F_Tat_023",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":15100
    },
    {
    "Name":"TAT_X2_024",
    "LocalizedName":"Snake Head Outline",
    "HashNameMale":"MP_Xmas2_M_Tat_024",
    "HashNameFemale":"MP_Xmas2_F_Tat_024",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":5100
    },
    {
    "Name":"TAT_X2_025",
    "LocalizedName":"Snake Head Color",
    "HashNameMale":"MP_Xmas2_M_Tat_025",
    "HashNameFemale":"MP_Xmas2_F_Tat_025",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":18600
    },
    {
    "Name":"TAT_X2_026",
    "LocalizedName":"Fuck Luck Outline",
    "HashNameMale":"MP_Xmas2_M_Tat_026",
    "HashNameFemale":"MP_Xmas2_F_Tat_026",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":3300
    },
    {
    "Name":"TAT_X2_027",
    "LocalizedName":"Fuck Luck Color",
    "HashNameMale":"MP_Xmas2_M_Tat_027",
    "HashNameFemale":"MP_Xmas2_F_Tat_027",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":8200
    },
    {
    "Name":"TAT_X2_028",
    "LocalizedName":"Executioner",
    "HashNameMale":"MP_Xmas2_M_Tat_028",
    "HashNameFemale":"MP_Xmas2_F_Tat_028",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":15700
    },
    {
    "Name":"TAT_X2_029",
    "LocalizedName":"Beautiful Death",
    "HashNameMale":"MP_Xmas2_M_Tat_029",
    "HashNameFemale":"MP_Xmas2_F_Tat_029",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":13150
    }
    ],
    "mpgunrunning_overlays":[
    {
    "Name":"TAT_GR_000",
    "LocalizedName":"Bullet Proof",
    "HashNameMale":"MP_Gunrunning_Tattoo_000_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_000_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":36985
    },
    {
    "Name":"TAT_GR_001",
    "LocalizedName":"Crossed Weapons",
    "HashNameMale":"MP_Gunrunning_Tattoo_001_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_001_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":19355
    },
    {
    "Name":"TAT_GR_002",
    "LocalizedName":"Grenade",
    "HashNameMale":"MP_Gunrunning_Tattoo_002_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_002_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":14650
    },
    {
    "Name":"TAT_GR_003",
    "LocalizedName":"Lock & Load",
    "HashNameMale":"MP_Gunrunning_Tattoo_003_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_003_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":8750
    },
    {
    "Name":"TAT_GR_004",
    "LocalizedName":"Sidearm",
    "HashNameMale":"MP_Gunrunning_Tattoo_004_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_004_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":11285
    },
    {
    "Name":"TAT_GR_005",
    "LocalizedName":"Patriot Skull",
    "HashNameMale":"MP_Gunrunning_Tattoo_005_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_005_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":19120
    },
    {
    "Name":"TAT_GR_006",
    "LocalizedName":"Combat Skull",
    "HashNameMale":"MP_Gunrunning_Tattoo_006_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_006_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":10670
    },
    {
    "Name":"TAT_GR_007",
    "LocalizedName":"Stylized Tiger",
    "HashNameMale":"MP_Gunrunning_Tattoo_007_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_007_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":9660
    },
    {
    "Name":"TAT_GR_008",
    "LocalizedName":"Bandolier",
    "HashNameMale":"MP_Gunrunning_Tattoo_008_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_008_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":13445
    },
    {
    "Name":"TAT_GR_009",
    "LocalizedName":"Butterfly Knife",
    "HashNameMale":"MP_Gunrunning_Tattoo_009_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_009_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":34650
    },
    {
    "Name":"TAT_GR_010",
    "LocalizedName":"Cash Money",
    "HashNameMale":"MP_Gunrunning_Tattoo_010_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_010_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":49050
    },
    {
    "Name":"TAT_GR_011",
    "LocalizedName":"Death Skull",
    "HashNameMale":"MP_Gunrunning_Tattoo_011_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_011_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":59785
    },
    {
    "Name":"TAT_GR_012",
    "LocalizedName":"Dollar Daggers",
    "HashNameMale":"MP_Gunrunning_Tattoo_012_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_012_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":15060
    },
    {
    "Name":"TAT_GR_013",
    "LocalizedName":"Wolf Insignia",
    "HashNameMale":"MP_Gunrunning_Tattoo_013_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_013_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":56115
    },
    {
    "Name":"TAT_GR_014",
    "LocalizedName":"Backstabber",
    "HashNameMale":"MP_Gunrunning_Tattoo_014_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_014_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":47200
    },
    {
    "Name":"TAT_GR_015",
    "LocalizedName":"Spiked Skull",
    "HashNameMale":"MP_Gunrunning_Tattoo_015_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_015_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":40425
    },
    {
    "Name":"TAT_GR_016",
    "LocalizedName":"Blood Money",
    "HashNameMale":"MP_Gunrunning_Tattoo_016_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_016_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":20360
    },
    {
    "Name":"TAT_GR_017",
    "LocalizedName":"Dog Tags",
    "HashNameMale":"MP_Gunrunning_Tattoo_017_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_017_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":8980
    },
    {
    "Name":"TAT_GR_018",
    "LocalizedName":"Dual Wield Skull",
    "HashNameMale":"MP_Gunrunning_Tattoo_018_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_018_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":27755
    },
    {
    "Name":"TAT_GR_019",
    "LocalizedName":"Pistol Wings",
    "HashNameMale":"MP_Gunrunning_Tattoo_019_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_019_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":28025
    },
    {
    "Name":"TAT_GR_020",
    "LocalizedName":"Crowned Weapons",
    "HashNameMale":"MP_Gunrunning_Tattoo_020_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_020_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":29875
    },
    {
    "Name":"TAT_GR_021",
    "LocalizedName":"Have a Nice Day",
    "HashNameMale":"MP_Gunrunning_Tattoo_021_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_021_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":19460
    },
    {
    "Name":"TAT_GR_022",
    "LocalizedName":"Explosive Heart",
    "HashNameMale":"MP_Gunrunning_Tattoo_022_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_022_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":20825
    },
    {
    "Name":"TAT_GR_023",
    "LocalizedName":"Rose Revolver",
    "HashNameMale":"MP_Gunrunning_Tattoo_023_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_023_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":28880
    },
    {
    "Name":"TAT_GR_024",
    "LocalizedName":"Combat Reaper",
    "HashNameMale":"MP_Gunrunning_Tattoo_024_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_024_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":30340
    },
    {
    "Name":"TAT_GR_025",
    "LocalizedName":"Praying Skull",
    "HashNameMale":"MP_Gunrunning_Tattoo_025_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_025_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":22150
    },
    {
    "Name":"TAT_GR_026",
    "LocalizedName":"Restless Skull",
    "HashNameMale":"MP_Gunrunning_Tattoo_026_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_026_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":21510
    },
    {
    "Name":"TAT_GR_027",
    "LocalizedName":"Serpent Revolver",
    "HashNameMale":"MP_Gunrunning_Tattoo_027_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_027_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":18420
    },
    {
    "Name":"TAT_GR_028",
    "LocalizedName":"Micro SMG Chain",
    "HashNameMale":"MP_Gunrunning_Tattoo_028_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_028_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":9960
    },
    {
    "Name":"TAT_GR_029",
    "LocalizedName":"Win Some Lose Some",
    "HashNameMale":"MP_Gunrunning_Tattoo_029_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_029_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":24090
    },
    {
    "Name":"TAT_GR_030",
    "LocalizedName":"Pistol Ace",
    "HashNameMale":"MP_Gunrunning_Tattoo_030_M",
    "HashNameFemale":"MP_Gunrunning_Tattoo_030_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":21050
    }
    ],
    "mpheist3_overlays":[
    {
    "Name":"TAT_H3_000",
    "LocalizedName":"Five Stars",
    "HashNameMale":"mpHeist3_Tat_000_M",
    "HashNameFemale":"mpHeist3_Tat_000_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":20750
    },
    {
    "Name":"TAT_H3_001",
    "LocalizedName":"Ace of Spades",
    "HashNameMale":"mpHeist3_Tat_001_M",
    "HashNameFemale":"mpHeist3_Tat_001_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":15725
    },
    {
    "Name":"TAT_H3_002",
    "LocalizedName":"Animal",
    "HashNameMale":"mpHeist3_Tat_002_M",
    "HashNameFemale":"mpHeist3_Tat_002_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":27200
    },
    {
    "Name":"TAT_H3_003",
    "LocalizedName":"Assault Rifle",
    "HashNameMale":"mpHeist3_Tat_003_M",
    "HashNameFemale":"mpHeist3_Tat_003_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":16650
    },
    {
    "Name":"TAT_H3_004",
    "LocalizedName":"Bandage",
    "HashNameMale":"mpHeist3_Tat_004_M",
    "HashNameFemale":"mpHeist3_Tat_004_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":18100
    },
    {
    "Name":"TAT_H3_005",
    "LocalizedName":"Spades",
    "HashNameMale":"mpHeist3_Tat_005_M",
    "HashNameFemale":"mpHeist3_Tat_005_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":14500
    },
    {
    "Name":"TAT_H3_006",
    "LocalizedName":"Crowned",
    "HashNameMale":"mpHeist3_Tat_006_M",
    "HashNameFemale":"mpHeist3_Tat_006_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":16950
    },
    {
    "Name":"TAT_H3_007",
    "LocalizedName":"Two Horns",
    "HashNameMale":"mpHeist3_Tat_007_M",
    "HashNameFemale":"mpHeist3_Tat_007_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":24800
    },
    {
    "Name":"TAT_H3_008",
    "LocalizedName":"Ice Cream",
    "HashNameMale":"mpHeist3_Tat_008_M",
    "HashNameFemale":"mpHeist3_Tat_008_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":21350
    },
    {
    "Name":"TAT_H3_009",
    "LocalizedName":"Knifed",
    "HashNameMale":"mpHeist3_Tat_009_M",
    "HashNameFemale":"mpHeist3_Tat_009_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":28850
    },
    {
    "Name":"TAT_H3_010",
    "LocalizedName":"Green Leaf",
    "HashNameMale":"mpHeist3_Tat_010_M",
    "HashNameFemale":"mpHeist3_Tat_010_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":14950
    },
    {
    "Name":"TAT_H3_011",
    "LocalizedName":"Lipstick Kiss",
    "HashNameMale":"mpHeist3_Tat_011_M",
    "HashNameFemale":"mpHeist3_Tat_011_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":23900
    },
    {
    "Name":"TAT_H3_012",
    "LocalizedName":"Razor Pop",
    "HashNameMale":"mpHeist3_Tat_012_M",
    "HashNameFemale":"mpHeist3_Tat_012_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":32850
    },
    {
    "Name":"TAT_H3_013",
    "LocalizedName":"LS Star",
    "HashNameMale":"mpHeist3_Tat_013_M",
    "HashNameFemale":"mpHeist3_Tat_013_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":15200
    },
    {
    "Name":"TAT_H3_014",
    "LocalizedName":"LS Wings",
    "HashNameMale":"mpHeist3_Tat_014_M",
    "HashNameFemale":"mpHeist3_Tat_014_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":31500
    },
    {
    "Name":"TAT_H3_015",
    "LocalizedName":"On/Off",
    "HashNameMale":"mpHeist3_Tat_015_M",
    "HashNameFemale":"mpHeist3_Tat_015_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":15850
    },
    {
    "Name":"TAT_H3_016",
    "LocalizedName":"Sleepy",
    "HashNameMale":"mpHeist3_Tat_016_M",
    "HashNameFemale":"mpHeist3_Tat_016_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":13900
    },
    {
    "Name":"TAT_H3_017",
    "LocalizedName":"Space Monkey",
    "HashNameMale":"mpHeist3_Tat_017_M",
    "HashNameFemale":"mpHeist3_Tat_017_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":16050
    },
    {
    "Name":"TAT_H3_018",
    "LocalizedName":"Stitches",
    "HashNameMale":"mpHeist3_Tat_018_M",
    "HashNameFemale":"mpHeist3_Tat_018_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":24600
    },
    {
    "Name":"TAT_H3_019",
    "LocalizedName":"Teddy Bear",
    "HashNameMale":"mpHeist3_Tat_019_M",
    "HashNameFemale":"mpHeist3_Tat_019_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":20050
    },
    {
    "Name":"TAT_H3_020",
    "LocalizedName":"UFO",
    "HashNameMale":"mpHeist3_Tat_020_M",
    "HashNameFemale":"mpHeist3_Tat_020_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":41200
    },
    {
    "Name":"TAT_H3_021",
    "LocalizedName":"Wanted",
    "HashNameMale":"mpHeist3_Tat_021_M",
    "HashNameFemale":"mpHeist3_Tat_021_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":23700
    },
    {
    "Name":"TAT_H3_022",
    "LocalizedName":"Thog's Sword",
    "HashNameMale":"mpHeist3_Tat_022_M",
    "HashNameFemale":"mpHeist3_Tat_022_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":20900
    },
    {
    "Name":"TAT_H3_023",
    "LocalizedName":"Bigfoot",
    "HashNameMale":"mpHeist3_Tat_023_M",
    "HashNameFemale":"mpHeist3_Tat_023_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":140500
    },
    {
    "Name":"TAT_H3_024",
    "LocalizedName":"Mount Chiliad",
    "HashNameMale":"mpHeist3_Tat_024_M",
    "HashNameFemale":"mpHeist3_Tat_024_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":175000
    },
    {
    "Name":"TAT_H3_025",
    "LocalizedName":"Davis",
    "HashNameMale":"mpHeist3_Tat_025_M",
    "HashNameFemale":"mpHeist3_Tat_025_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":42500
    },
    {
    "Name":"TAT_H3_026",
    "LocalizedName":"Dignity",
    "HashNameMale":"mpHeist3_Tat_026_M",
    "HashNameFemale":"mpHeist3_Tat_026_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":30300
    },
    {
    "Name":"TAT_H3_027",
    "LocalizedName":"Epsilon",
    "HashNameMale":"mpHeist3_Tat_027_M",
    "HashNameFemale":"mpHeist3_Tat_027_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":84800
    },
    {
    "Name":"TAT_H3_028",
    "LocalizedName":"Bananas Gone Bad",
    "HashNameMale":"mpHeist3_Tat_028_M",
    "HashNameFemale":"mpHeist3_Tat_028_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":72000
    },
    {
    "Name":"TAT_H3_029",
    "LocalizedName":"Fatal Incursion",
    "HashNameMale":"mpHeist3_Tat_029_M",
    "HashNameFemale":"mpHeist3_Tat_029_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":33900
    },
    {
    "Name":"TAT_H3_030",
    "LocalizedName":"Howitzer",
    "HashNameMale":"mpHeist3_Tat_030_M",
    "HashNameFemale":"mpHeist3_Tat_030_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":66000
    },
    {
    "Name":"TAT_H3_031",
    "LocalizedName":"Kifflom",
    "HashNameMale":"mpHeist3_Tat_031_M",
    "HashNameFemale":"mpHeist3_Tat_031_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":39250
    },
    {
    "Name":"TAT_H3_032",
    "LocalizedName":"Love Fist",
    "HashNameMale":"mpHeist3_Tat_032_M",
    "HashNameFemale":"mpHeist3_Tat_032_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":62600
    },
    {
    "Name":"TAT_H3_033",
    "LocalizedName":"LS City",
    "HashNameMale":"mpHeist3_Tat_033_M",
    "HashNameFemale":"mpHeist3_Tat_033_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":28200
    },
    {
    "Name":"TAT_H3_034",
    "LocalizedName":"LS Monogram",
    "HashNameMale":"mpHeist3_Tat_034_M",
    "HashNameFemale":"mpHeist3_Tat_034_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":15150
    },
    {
    "Name":"TAT_H3_035",
    "LocalizedName":"LS Panic",
    "HashNameMale":"mpHeist3_Tat_035_M",
    "HashNameFemale":"mpHeist3_Tat_035_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":23900
    },
    {
    "Name":"TAT_H3_036",
    "LocalizedName":"LS Shield",
    "HashNameMale":"mpHeist3_Tat_036_M",
    "HashNameFemale":"mpHeist3_Tat_036_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":60400
    },
    {
    "Name":"TAT_H3_037",
    "LocalizedName":"Ladybug",
    "HashNameMale":"mpHeist3_Tat_037_M",
    "HashNameFemale":"mpHeist3_Tat_037_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":34100
    },
    {
    "Name":"TAT_H3_038",
    "LocalizedName":"Robot Bubblegum",
    "HashNameMale":"mpHeist3_Tat_038_M",
    "HashNameFemale":"mpHeist3_Tat_038_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":152400
    },
    {
    "Name":"TAT_H3_039",
    "LocalizedName":"Space Rangers",
    "HashNameMale":"mpHeist3_Tat_039_M",
    "HashNameFemale":"mpHeist3_Tat_039_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":149700
    },
    {
    "Name":"TAT_H3_040",
    "LocalizedName":"Tiger Heart",
    "HashNameMale":"mpHeist3_Tat_040_M",
    "HashNameFemale":"mpHeist3_Tat_040_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":22600
    },
    {
    "Name":"TAT_H3_041",
    "LocalizedName":"Mighty Thog",
    "HashNameMale":"mpHeist3_Tat_041_M",
    "HashNameFemale":"mpHeist3_Tat_041_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":87600
    },
    {
    "Name":"TAT_H3_042",
    "LocalizedName":"Hearts",
    "HashNameMale":"mpHeist3_Tat_042_M",
    "HashNameFemale":"mpHeist3_Tat_042_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":14400
    },
    {
    "Name":"TAT_H3_043",
    "LocalizedName":"Diamonds",
    "HashNameMale":"mpHeist3_Tat_043_M",
    "HashNameFemale":"mpHeist3_Tat_043_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":14300
    },
    {
    "Name":"TAT_H3_044",
    "LocalizedName":"Clubs",
    "HashNameMale":"mpHeist3_Tat_044_M",
    "HashNameFemale":"mpHeist3_Tat_044_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":14200
    }
    ],
    "mphipster_overlays":[
    {
    "Name":"TAT_HP_000",
    "LocalizedName":"Crossed Arrows",
    "HashNameMale":"FM_Hip_M_Tat_000",
    "HashNameFemale":"FM_Hip_F_Tat_000",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6750
    },
    {
    "Name":"TAT_HP_001",
    "LocalizedName":"Single Arrow",
    "HashNameMale":"FM_Hip_M_Tat_001",
    "HashNameFemale":"FM_Hip_F_Tat_001",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":2000
    },
    {
    "Name":"TAT_HP_002",
    "LocalizedName":"Chemistry",
    "HashNameMale":"FM_Hip_M_Tat_002",
    "HashNameFemale":"FM_Hip_F_Tat_002",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":2900
    },
    {
    "Name":"TAT_HP_003",
    "LocalizedName":"Diamond Sparkle",
    "HashNameMale":"FM_Hip_M_Tat_003",
    "HashNameFemale":"FM_Hip_F_Tat_003",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":4100
    },
    {
    "Name":"TAT_HP_004",
    "LocalizedName":"Bone",
    "HashNameMale":"FM_Hip_M_Tat_004",
    "HashNameFemale":"FM_Hip_F_Tat_004",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":2900
    },
    {
    "Name":"TAT_HP_005",
    "LocalizedName":"Beautiful Eye",
    "HashNameMale":"FM_Hip_M_Tat_005",
    "HashNameFemale":"FM_Hip_F_Tat_005",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":17450
    },
    {
    "Name":"TAT_HP_006",
    "LocalizedName":"Feather Birds",
    "HashNameMale":"FM_Hip_M_Tat_006",
    "HashNameFemale":"FM_Hip_F_Tat_006",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":4550
    },
    {
    "Name":"TAT_HP_007",
    "LocalizedName":"Bricks",
    "HashNameMale":"FM_Hip_M_Tat_007",
    "HashNameFemale":"FM_Hip_F_Tat_007",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":6000
    },
    {
    "Name":"TAT_HP_008",
    "LocalizedName":"Cube",
    "HashNameMale":"FM_Hip_M_Tat_008",
    "HashNameFemale":"FM_Hip_F_Tat_008",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":4850
    },
    {
    "Name":"TAT_HP_009",
    "LocalizedName":"Squares",
    "HashNameMale":"FM_Hip_M_Tat_009",
    "HashNameFemale":"FM_Hip_F_Tat_009",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":4000
    },
    {
    "Name":"TAT_HP_010",
    "LocalizedName":"Horseshoe",
    "HashNameMale":"FM_Hip_M_Tat_010",
    "HashNameFemale":"FM_Hip_F_Tat_010",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":3150
    },
    {
    "Name":"TAT_HP_011",
    "LocalizedName":"Infinity",
    "HashNameMale":"FM_Hip_M_Tat_011",
    "HashNameFemale":"FM_Hip_F_Tat_011",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":3000
    },
    {
    "Name":"TAT_HP_012",
    "LocalizedName":"Antlers",
    "HashNameMale":"FM_Hip_M_Tat_012",
    "HashNameFemale":"FM_Hip_F_Tat_012",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6500
    },
    {
    "Name":"TAT_HP_013",
    "LocalizedName":"Boombox",
    "HashNameMale":"FM_Hip_M_Tat_013",
    "HashNameFemale":"FM_Hip_F_Tat_013",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6950
    },
    {
    "Name":"TAT_HP_014",
    "LocalizedName":"Spray Can",
    "HashNameMale":"FM_Hip_M_Tat_014",
    "HashNameFemale":"FM_Hip_F_Tat_014",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":4300
    },
    {
    "Name":"TAT_HP_016",
    "LocalizedName":"Lightning Bolt",
    "HashNameMale":"FM_Hip_M_Tat_016",
    "HashNameFemale":"FM_Hip_F_Tat_016",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":5700
    },
    {
    "Name":"TAT_HP_017",
    "LocalizedName":"Eye Triangle",
    "HashNameMale":"FM_Hip_M_Tat_017",
    "HashNameFemale":"FM_Hip_F_Tat_017",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":12650
    },
    {
    "Name":"TAT_HP_018",
    "LocalizedName":"Origami",
    "HashNameMale":"FM_Hip_M_Tat_018",
    "HashNameFemale":"FM_Hip_F_Tat_018",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":1800
    },
    {
    "Name":"TAT_HP_019",
    "LocalizedName":"Charm",
    "HashNameMale":"FM_Hip_M_Tat_019",
    "HashNameFemale":"FM_Hip_F_Tat_019",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":3400
    },
    {
    "Name":"TAT_HP_020",
    "LocalizedName":"Geo Pattern",
    "HashNameMale":"FM_Hip_M_Tat_020",
    "HashNameFemale":"FM_Hip_F_Tat_020",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":17350
    },
    {
    "Name":"TAT_HP_021",
    "LocalizedName":"Geo Fox",
    "HashNameMale":"FM_Hip_M_Tat_021",
    "HashNameFemale":"FM_Hip_F_Tat_021",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":17850
    },
    {
    "Name":"TAT_HP_022",
    "LocalizedName":"Pencil",
    "HashNameMale":"FM_Hip_M_Tat_022",
    "HashNameFemale":"FM_Hip_F_Tat_022",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":2250
    },
    {
    "Name":"TAT_HP_023",
    "LocalizedName":"Smiley",
    "HashNameMale":"FM_Hip_M_Tat_023",
    "HashNameFemale":"FM_Hip_F_Tat_023",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":7000
    },
    {
    "Name":"TAT_HP_024",
    "LocalizedName":"Pyramid",
    "HashNameMale":"FM_Hip_M_Tat_024",
    "HashNameFemale":"FM_Hip_F_Tat_024",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":5950
    },
    {
    "Name":"TAT_HP_025",
    "LocalizedName":"Watch Your Step",
    "HashNameMale":"FM_Hip_M_Tat_025",
    "HashNameFemale":"FM_Hip_F_Tat_025",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":5500
    },
    {
    "Name":"TAT_HP_026",
    "LocalizedName":"Pizza",
    "HashNameMale":"FM_Hip_M_Tat_026",
    "HashNameFemale":"FM_Hip_F_Tat_026",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":5400
    },
    {
    "Name":"TAT_HP_027",
    "LocalizedName":"Padlock",
    "HashNameMale":"FM_Hip_M_Tat_027",
    "HashNameFemale":"FM_Hip_F_Tat_027",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":5750
    },
    {
    "Name":"TAT_HP_028",
    "LocalizedName":"Thorny Rose",
    "HashNameMale":"FM_Hip_M_Tat_028",
    "HashNameFemale":"FM_Hip_F_Tat_028",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":4800
    },
    {
    "Name":"TAT_HP_029",
    "LocalizedName":"Sad",
    "HashNameMale":"FM_Hip_M_Tat_029",
    "HashNameFemale":"FM_Hip_F_Tat_029",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":2850
    },
    {
    "Name":"TAT_HP_030",
    "LocalizedName":"Shark Fin",
    "HashNameMale":"FM_Hip_M_Tat_030",
    "HashNameFemale":"FM_Hip_F_Tat_030",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":2250
    },
    {
    "Name":"TAT_HP_031",
    "LocalizedName":"Skateboard",
    "HashNameMale":"FM_Hip_M_Tat_031",
    "HashNameFemale":"FM_Hip_F_Tat_031",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":8950
    },
    {
    "Name":"TAT_HP_032",
    "LocalizedName":"Paper Plane",
    "HashNameMale":"FM_Hip_M_Tat_032",
    "HashNameFemale":"FM_Hip_F_Tat_032",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":5350
    },
    {
    "Name":"TAT_HP_033",
    "LocalizedName":"Stag",
    "HashNameMale":"FM_Hip_M_Tat_033",
    "HashNameFemale":"FM_Hip_F_Tat_033",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":10950
    },
    {
    "Name":"TAT_HP_034",
    "LocalizedName":"Stop",
    "HashNameMale":"FM_Hip_M_Tat_034",
    "HashNameFemale":"FM_Hip_F_Tat_034",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":9500
    },
    {
    "Name":"TAT_HP_035",
    "LocalizedName":"Sewn Heart",
    "HashNameMale":"FM_Hip_M_Tat_035",
    "HashNameFemale":"FM_Hip_F_Tat_035",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":7500
    },
    {
    "Name":"TAT_HP_036",
    "LocalizedName":"Shapes",
    "HashNameMale":"FM_Hip_M_Tat_036",
    "HashNameFemale":"FM_Hip_F_Tat_036",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":15150
    },
    {
    "Name":"TAT_HP_037",
    "LocalizedName":"Sunrise",
    "HashNameMale":"FM_Hip_M_Tat_037",
    "HashNameFemale":"FM_Hip_F_Tat_037",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":5750
    },
    {
    "Name":"TAT_HP_038",
    "LocalizedName":"Grub",
    "HashNameMale":"FM_Hip_M_Tat_038",
    "HashNameFemale":"FM_Hip_F_Tat_038",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":7500
    },
    {
    "Name":"TAT_HP_039",
    "LocalizedName":"Sleeve",
    "HashNameMale":"FM_Hip_M_Tat_039",
    "HashNameFemale":"FM_Hip_F_Tat_039",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":30000
    },
    {
    "Name":"TAT_HP_040",
    "LocalizedName":"Black Anchor",
    "HashNameMale":"FM_Hip_M_Tat_040",
    "HashNameFemale":"FM_Hip_F_Tat_040",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":2950
    },
    {
    "Name":"TAT_HP_041",
    "LocalizedName":"Tooth",
    "HashNameMale":"FM_Hip_M_Tat_041",
    "HashNameFemale":"FM_Hip_F_Tat_041",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":4575
    },
    {
    "Name":"TAT_HP_042",
    "LocalizedName":"Sparkplug",
    "HashNameMale":"FM_Hip_M_Tat_042",
    "HashNameFemale":"FM_Hip_F_Tat_042",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":4300
    },
    {
    "Name":"TAT_HP_043",
    "LocalizedName":"Triangle White",
    "HashNameMale":"FM_Hip_M_Tat_043",
    "HashNameFemale":"FM_Hip_F_Tat_043",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":5500
    },
    {
    "Name":"TAT_HP_044",
    "LocalizedName":"Triangle Black",
    "HashNameMale":"FM_Hip_M_Tat_044",
    "HashNameFemale":"FM_Hip_F_Tat_044",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":10500
    },
    {
    "Name":"TAT_HP_045",
    "LocalizedName":"Mesh Band",
    "HashNameMale":"FM_Hip_M_Tat_045",
    "HashNameFemale":"FM_Hip_F_Tat_045",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":8000
    },
    {
    "Name":"TAT_HP_046",
    "LocalizedName":"Triangles",
    "HashNameMale":"FM_Hip_M_Tat_046",
    "HashNameFemale":"FM_Hip_F_Tat_046",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":7750
    },
    {
    "Name":"TAT_HP_047",
    "LocalizedName":"Cassette",
    "HashNameMale":"FM_Hip_M_Tat_047",
    "HashNameFemale":"FM_Hip_F_Tat_047",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":5900
    },
    {
    "Name":"TAT_HP_048",
    "LocalizedName":"Peace",
    "HashNameMale":"FM_Hip_M_Tat_048",
    "HashNameFemale":"FM_Hip_F_Tat_048",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":7850
    }
    ],
    "mpimportexport_overlays":[
    {
    "Name":"TAT_IE_000",
    "LocalizedName":"Block Back",
    "HashNameMale":"MP_MP_ImportExport_Tat_000_M",
    "HashNameFemale":"MP_MP_ImportExport_Tat_000_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":43780
    },
    {
    "Name":"TAT_IE_001",
    "LocalizedName":"Power Plant",
    "HashNameMale":"MP_MP_ImportExport_Tat_001_M",
    "HashNameFemale":"MP_MP_ImportExport_Tat_001_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":42900
    },
    {
    "Name":"TAT_IE_002",
    "LocalizedName":"Tuned to Death",
    "HashNameMale":"MP_MP_ImportExport_Tat_002_M",
    "HashNameFemale":"MP_MP_ImportExport_Tat_002_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":52120
    },
    {
    "Name":"TAT_IE_003",
    "LocalizedName":"Mechanical Sleeve",
    "HashNameMale":"MP_MP_ImportExport_Tat_003_M",
    "HashNameFemale":"MP_MP_ImportExport_Tat_003_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":37200
    },
    {
    "Name":"TAT_IE_004",
    "LocalizedName":"Piston Sleeve",
    "HashNameMale":"MP_MP_ImportExport_Tat_004_M",
    "HashNameFemale":"MP_MP_ImportExport_Tat_004_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":46350
    },
    {
    "Name":"TAT_IE_005",
    "LocalizedName":"Dialed In",
    "HashNameMale":"MP_MP_ImportExport_Tat_005_M",
    "HashNameFemale":"MP_MP_ImportExport_Tat_005_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":48615
    },
    {
    "Name":"TAT_IE_006",
    "LocalizedName":"Engulfed Block",
    "HashNameMale":"MP_MP_ImportExport_Tat_006_M",
    "HashNameFemale":"MP_MP_ImportExport_Tat_006_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":45720
    },
    {
    "Name":"TAT_IE_007",
    "LocalizedName":"Drive Forever",
    "HashNameMale":"MP_MP_ImportExport_Tat_007_M",
    "HashNameFemale":"MP_MP_ImportExport_Tat_007_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":46685
    },
    {
    "Name":"TAT_IE_008",
    "LocalizedName":"Scarlett",
    "HashNameMale":"MP_MP_ImportExport_Tat_008_M",
    "HashNameFemale":"MP_MP_ImportExport_Tat_008_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":49900
    },
    {
    "Name":"TAT_IE_009",
    "LocalizedName":"Serpents of Destruction",
    "HashNameMale":"MP_MP_ImportExport_Tat_009_M",
    "HashNameFemale":"MP_MP_ImportExport_Tat_009_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":56500
    },
    {
    "Name":"TAT_IE_010",
    "LocalizedName":"Take the Wheel",
    "HashNameMale":"MP_MP_ImportExport_Tat_010_M",
    "HashNameFemale":"MP_MP_ImportExport_Tat_010_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":64235
    },
    {
    "Name":"TAT_IE_011",
    "LocalizedName":"Talk Shit Get Hit",
    "HashNameMale":"MP_MP_ImportExport_Tat_011_M",
    "HashNameFemale":"MP_MP_ImportExport_Tat_011_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":65985
    }
    ],
    "mplowrider2_overlays":[
    {
    "Name":"TAT_S2_000",
    "LocalizedName":"SA Assault",
    "HashNameMale":"MP_LR_Tat_000_M",
    "HashNameFemale":"MP_LR_Tat_000_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":159000
    },
    {
    "Name":"TAT_S2_003",
    "LocalizedName":"Lady Vamp",
    "HashNameMale":"MP_LR_Tat_003_M",
    "HashNameFemale":"MP_LR_Tat_003_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":25950
    },
    {
    "Name":"TAT_S2_006",
    "LocalizedName":"Love Hustle",
    "HashNameMale":"MP_LR_Tat_006_M",
    "HashNameFemale":"MP_LR_Tat_006_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":27450
    },
    {
    "Name":"TAT_S2_008",
    "LocalizedName":"Love the Game",
    "HashNameMale":"MP_LR_Tat_008_M",
    "HashNameFemale":"MP_LR_Tat_008_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":178750
    },
    {
    "Name":"TAT_S2_011",
    "LocalizedName":"Lady Liberty",
    "HashNameMale":"MP_LR_Tat_011_M",
    "HashNameFemale":"MP_LR_Tat_011_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":8000
    },
    {
    "Name":"TAT_S2_012",
    "LocalizedName":"Royal Kiss",
    "HashNameMale":"MP_LR_Tat_012_M",
    "HashNameFemale":"MP_LR_Tat_012_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":17650
    },
    {
    "Name":"TAT_S2_016",
    "LocalizedName":"Two Face",
    "HashNameMale":"MP_LR_Tat_016_M",
    "HashNameFemale":"MP_LR_Tat_016_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":26400
    },
    {
    "Name":"TAT_S2_018",
    "LocalizedName":"Skeleton Party",
    "HashNameMale":"MP_LR_Tat_018_M",
    "HashNameFemale":"MP_LR_Tat_018_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":41000
    },
    {
    "Name":"TAT_S2_019",
    "LocalizedName":"Death Behind",
    "HashNameMale":"MP_LR_Tat_019_M",
    "HashNameFemale":"MP_LR_Tat_019_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":19750
    },
    {
    "Name":"TAT_S2_022",
    "LocalizedName":"My Crazy Life",
    "HashNameMale":"MP_LR_Tat_022_M",
    "HashNameFemale":"MP_LR_Tat_022_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":27350
    },
    {
    "Name":"TAT_S2_028",
    "LocalizedName":"Loving Los Muertos",
    "HashNameMale":"MP_LR_Tat_028_M",
    "HashNameFemale":"MP_LR_Tat_028_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":28800
    },
    {
    "Name":"TAT_S2_029",
    "LocalizedName":"Death Us Do Part",
    "HashNameMale":"MP_LR_Tat_029_M",
    "HashNameFemale":"MP_LR_Tat_029_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":26250
    },
    {
    "Name":"TAT_S2_030",
    "LocalizedName":"San Andreas Prayer",
    "HashNameMale":"MP_LR_Tat_030_M",
    "HashNameFemale":"MP_LR_Tat_030_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":18150
    },
    {
    "Name":"TAT_S2_031",
    "LocalizedName":"Dead Pretty",
    "HashNameMale":"MP_LR_Tat_031_M",
    "HashNameFemale":"MP_LR_Tat_031_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":116500
    },
    {
    "Name":"TAT_S2_032",
    "LocalizedName":"Reign Over",
    "HashNameMale":"MP_LR_Tat_032_M",
    "HashNameFemale":"MP_LR_Tat_032_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":185000
    },
    {
    "Name":"TAT_S2_035",
    "LocalizedName":"Black Tears",
    "HashNameMale":"MP_LR_Tat_035_M",
    "HashNameFemale":"MP_LR_Tat_035_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":28250
    }
    ],
    "mplowrider_overlays":[
    {
    "Name":"TAT_S1_001",
    "LocalizedName":"King Fight",
    "HashNameMale":"MP_LR_Tat_001_M",
    "HashNameFemale":"MP_LR_Tat_001_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":16100
    },
    {
    "Name":"TAT_S1_002",
    "LocalizedName":"Holy Mary",
    "HashNameMale":"MP_LR_Tat_002_M",
    "HashNameFemale":"MP_LR_Tat_002_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":30250
    },
    {
    "Name":"TAT_S1_004",
    "LocalizedName":"Gun Mic",
    "HashNameMale":"MP_LR_Tat_004_M",
    "HashNameFemale":"MP_LR_Tat_004_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":8500
    },
    {
    "Name":"TAT_S1_005",
    "LocalizedName":"No Evil",
    "HashNameMale":"MP_LR_Tat_005_M",
    "HashNameFemale":"MP_LR_Tat_005_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":25900
    },
    {
    "Name":"TAT_S1_007",
    "LocalizedName":"LS Serpent",
    "HashNameMale":"MP_LR_Tat_007_M",
    "HashNameFemale":"MP_LR_Tat_007_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":25500
    },
    {
    "Name":"TAT_S1_009",
    "LocalizedName":"Amazon",
    "HashNameMale":"MP_LR_Tat_009_M",
    "HashNameFemale":"MP_LR_Tat_009_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":29500
    },
    {
    "Name":"TAT_S1_010",
    "LocalizedName":"Bad Angel",
    "HashNameMale":"MP_LR_Tat_010_M",
    "HashNameFemale":"MP_LR_Tat_010_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":126500
    },
    {
    "Name":"TAT_S1_013",
    "LocalizedName":"Love Gamble",
    "HashNameMale":"MP_LR_Tat_013_M",
    "HashNameFemale":"MP_LR_Tat_013_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":28300
    },
    {
    "Name":"TAT_S1_014",
    "LocalizedName":"Love is Blind",
    "HashNameMale":"MP_LR_Tat_014_M",
    "HashNameFemale":"MP_LR_Tat_014_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":77750
    },
    {
    "Name":"TAT_S1_015",
    "LocalizedName":"Seductress",
    "HashNameMale":"MP_LR_Tat_015_M",
    "HashNameFemale":"MP_LR_Tat_015_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":26150
    },
    {
    "Name":"TAT_S1_017",
    "LocalizedName":"Ink Me",
    "HashNameMale":"MP_LR_Tat_017_M",
    "HashNameFemale":"MP_LR_Tat_017_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":17700
    },
    {
    "Name":"TAT_S1_020",
    "LocalizedName":"Presidents",
    "HashNameMale":"MP_LR_Tat_020_M",
    "HashNameFemale":"MP_LR_Tat_020_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":26850
    },
    {
    "Name":"TAT_S1_021",
    "LocalizedName":"Sad Angel",
    "HashNameMale":"MP_LR_Tat_021_M",
    "HashNameFemale":"MP_LR_Tat_021_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":85000
    },
    {
    "Name":"TAT_S1_023",
    "LocalizedName":"Dance of Hearts",
    "HashNameMale":"MP_LR_Tat_023_M",
    "HashNameFemale":"MP_LR_Tat_023_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":26500
    },
    {
    "Name":"TAT_S1_026",
    "LocalizedName":"Royal Takeover",
    "HashNameMale":"MP_LR_Tat_026_M",
    "HashNameFemale":"MP_LR_Tat_026_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":27400
    },
    {
    "Name":"TAT_S1_027",
    "LocalizedName":"Los Santos Life",
    "HashNameMale":"MP_LR_Tat_027_M",
    "HashNameFemale":"MP_LR_Tat_027_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":27800
    },
    {
    "Name":"TAT_S1_033",
    "LocalizedName":"City Sorrow",
    "HashNameMale":"MP_LR_Tat_033_M",
    "HashNameFemale":"MP_LR_Tat_033_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":40000
    }
    ],
    "mpluxe2_overlays":[
    {
    "Name":"TAT_L2_002",
    "LocalizedName":"The Howler",
    "HashNameMale":"MP_LUXE_TAT_002_M",
    "HashNameFemale":"MP_LUXE_TAT_002_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":11000
    },
    {
    "Name":"TAT_L2_005",
    "LocalizedName":"Fatal Dagger",
    "HashNameMale":"MP_LUXE_TAT_005_M",
    "HashNameFemale":"MP_LUXE_TAT_005_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":10250
    },
    {
    "Name":"TAT_L2_010",
    "LocalizedName":"Intrometric",
    "HashNameMale":"MP_LUXE_TAT_010_M",
    "HashNameFemale":"MP_LUXE_TAT_010_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":14650
    },
    {
    "Name":"TAT_L2_011",
    "LocalizedName":"Cross of Roses",
    "HashNameMale":"MP_LUXE_TAT_011_M",
    "HashNameFemale":"MP_LUXE_TAT_011_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":23250
    },
    {
    "Name":"TAT_L2_012",
    "LocalizedName":"Geometric Galaxy",
    "HashNameMale":"MP_LUXE_TAT_012_M",
    "HashNameFemale":"MP_LUXE_TAT_012_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":56500
    },
    {
    "Name":"TAT_L2_016",
    "LocalizedName":"Egyptian Mural",
    "HashNameMale":"MP_LUXE_TAT_016_M",
    "HashNameFemale":"MP_LUXE_TAT_016_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":18600
    },
    {
    "Name":"TAT_L2_017",
    "LocalizedName":"Heavenly Deity",
    "HashNameMale":"MP_LUXE_TAT_017_M",
    "HashNameFemale":"MP_LUXE_TAT_017_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":21550
    },
    {
    "Name":"TAT_L2_018",
    "LocalizedName":"Divine Goddess",
    "HashNameMale":"MP_LUXE_TAT_018_M",
    "HashNameFemale":"MP_LUXE_TAT_018_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":23400
    },
    {
    "Name":"TAT_L2_022",
    "LocalizedName":"Cloaked Angel",
    "HashNameMale":"MP_LUXE_TAT_022_M",
    "HashNameFemale":"MP_LUXE_TAT_022_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":38500
    },
    {
    "Name":"TAT_L2_023",
    "LocalizedName":"Starmetric",
    "HashNameMale":"MP_LUXE_TAT_023_M",
    "HashNameFemale":"MP_LUXE_TAT_023_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":25600
    },
    {
    "Name":"TAT_L2_025",
    "LocalizedName":"Reaper Sway",
    "HashNameMale":"MP_LUXE_TAT_025_M",
    "HashNameFemale":"MP_LUXE_TAT_025_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":11500
    },
    {
    "Name":"TAT_L2_026",
    "LocalizedName":"Floral Print",
    "HashNameMale":"MP_LUXE_TAT_026_M",
    "HashNameFemale":"MP_LUXE_TAT_026_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":14700
    },
    {
    "Name":"TAT_L2_027",
    "LocalizedName":"Cobra Dawn",
    "HashNameMale":"MP_LUXE_TAT_027_M",
    "HashNameFemale":"MP_LUXE_TAT_027_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":12750
    },
    {
    "Name":"TAT_L2_028",
    "LocalizedName":"Python Skull",
    "HashNameMale":"MP_LUXE_TAT_028_M",
    "HashNameFemale":"MP_LUXE_TAT_028_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":11300
    },
    {
    "Name":"TAT_L2_029",
    "LocalizedName":"Geometric Design",
    "HashNameMale":"MP_LUXE_TAT_029_M",
    "HashNameFemale":"MP_LUXE_TAT_029_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":60000
    },
    {
    "Name":"TAT_L2_030",
    "LocalizedName":"Geometric Design",
    "HashNameMale":"MP_LUXE_TAT_030_M",
    "HashNameFemale":"MP_LUXE_TAT_030_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":50000
    },
    {
    "Name":"TAT_L2_031",
    "LocalizedName":"Geometric Design",
    "HashNameMale":"MP_LUXE_TAT_031_M",
    "HashNameFemale":"MP_LUXE_TAT_031_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":50000
    }
    ],
    "mpluxe_overlays":[
    {
    "Name":"TAT_LX_000",
    "LocalizedName":"Serpent of Death",
    "HashNameMale":"MP_LUXE_TAT_000_M",
    "HashNameFemale":"MP_LUXE_TAT_000_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":11900
    },
    {
    "Name":"TAT_LX_001",
    "LocalizedName":"Elaborate Los Muertos",
    "HashNameMale":"MP_LUXE_TAT_001_M",
    "HashNameFemale":"MP_LUXE_TAT_001_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":14350
    },
    {
    "Name":"TAT_LX_003",
    "LocalizedName":"Abstract Skull",
    "HashNameMale":"MP_LUXE_TAT_003_M",
    "HashNameFemale":"MP_LUXE_TAT_003_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":28350
    },
    {
    "Name":"TAT_LX_004",
    "LocalizedName":"Floral Raven",
    "HashNameMale":"MP_LUXE_TAT_004_M",
    "HashNameFemale":"MP_LUXE_TAT_004_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":12200
    },
    {
    "Name":"TAT_LX_006",
    "LocalizedName":"Adorned Wolf",
    "HashNameMale":"MP_LUXE_TAT_006_M",
    "HashNameFemale":"MP_LUXE_TAT_006_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":55000
    },
    {
    "Name":"TAT_LX_007",
    "LocalizedName":"Eye of the Griffin",
    "HashNameMale":"MP_LUXE_TAT_007_M",
    "HashNameFemale":"MP_LUXE_TAT_007_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":12450
    },
    {
    "Name":"TAT_LX_008",
    "LocalizedName":"Flying Eye",
    "HashNameMale":"MP_LUXE_TAT_008_M",
    "HashNameFemale":"MP_LUXE_TAT_008_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":18000
    },
    {
    "Name":"TAT_LX_009",
    "LocalizedName":"Floral Symmetry",
    "HashNameMale":"MP_LUXE_TAT_009_M",
    "HashNameFemale":"MP_LUXE_TAT_009_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":39150
    },
    {
    "Name":"TAT_LX_013",
    "LocalizedName":"Mermaid Harpist",
    "HashNameMale":"MP_LUXE_TAT_013_M",
    "HashNameFemale":"MP_LUXE_TAT_013_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":26900
    },
    {
    "Name":"TAT_LX_014",
    "LocalizedName":"Ancient Queen",
    "HashNameMale":"MP_LUXE_TAT_014_M",
    "HashNameFemale":"MP_LUXE_TAT_014_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":18200
    },
    {
    "Name":"TAT_LX_015",
    "LocalizedName":"Smoking Sisters",
    "HashNameMale":"MP_LUXE_TAT_015_M",
    "HashNameFemale":"MP_LUXE_TAT_015_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":16250
    },
    {
    "Name":"TAT_LX_019",
    "LocalizedName":"Geisha Bloom",
    "HashNameMale":"MP_LUXE_TAT_019_M",
    "HashNameFemale":"MP_LUXE_TAT_019_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":16850
    },
    {
    "Name":"TAT_LX_020",
    "LocalizedName":"Archangel & Mary",
    "HashNameMale":"MP_LUXE_TAT_020_M",
    "HashNameFemale":"MP_LUXE_TAT_020_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":22500
    },
    {
    "Name":"TAT_LX_021",
    "LocalizedName":"Gabriel",
    "HashNameMale":"MP_LUXE_TAT_021_M",
    "HashNameFemale":"MP_LUXE_TAT_021_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":12850
    },
    {
    "Name":"TAT_LX_024",
    "LocalizedName":"Feather Mural",
    "HashNameMale":"MP_LUXE_TAT_024_M",
    "HashNameFemale":"MP_LUXE_TAT_024_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":57250
    }
    ],
    "mpsmuggler_overlays":[
    {
    "Name":"TAT_SM_000",
    "LocalizedName":"Bless The Dead",
    "HashNameMale":"MP_Smuggler_Tattoo_000_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_000_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":21270
    },
    {
    "Name":"TAT_SM_001",
    "LocalizedName":"Crackshot",
    "HashNameMale":"MP_Smuggler_Tattoo_001_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_001_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":10825
    },
    {
    "Name":"TAT_SM_002",
    "LocalizedName":"Dead Lies",
    "HashNameMale":"MP_Smuggler_Tattoo_002_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_002_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":22430
    },
    {
    "Name":"TAT_SM_003",
    "LocalizedName":"Give Nothing Back",
    "HashNameMale":"MP_Smuggler_Tattoo_003_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_003_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":13090
    },
    {
    "Name":"TAT_SM_004",
    "LocalizedName":"Honor",
    "HashNameMale":"MP_Smuggler_Tattoo_004_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_004_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":8150
    },
    {
    "Name":"TAT_SM_005",
    "LocalizedName":"Mutiny",
    "HashNameMale":"MP_Smuggler_Tattoo_005_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_005_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":7920
    },
    {
    "Name":"TAT_SM_006",
    "LocalizedName":"Never Surrender",
    "HashNameMale":"MP_Smuggler_Tattoo_006_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_006_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":14475
    },
    {
    "Name":"TAT_SM_007",
    "LocalizedName":"No Honor",
    "HashNameMale":"MP_Smuggler_Tattoo_007_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_007_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":18525
    },
    {
    "Name":"TAT_SM_008",
    "LocalizedName":"Horrors Of The Deep",
    "HashNameMale":"MP_Smuggler_Tattoo_008_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_008_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":21045
    },
    {
    "Name":"TAT_SM_009",
    "LocalizedName":"Tall Ship Conflict",
    "HashNameMale":"MP_Smuggler_Tattoo_009_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_009_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":56625
    },
    {
    "Name":"TAT_SM_010",
    "LocalizedName":"See You In Hell",
    "HashNameMale":"MP_Smuggler_Tattoo_010_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_010_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":32815
    },
    {
    "Name":"TAT_SM_011",
    "LocalizedName":"Sinner",
    "HashNameMale":"MP_Smuggler_Tattoo_011_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_011_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":8110
    },
    {
    "Name":"TAT_SM_012",
    "LocalizedName":"Thief",
    "HashNameMale":"MP_Smuggler_Tattoo_012_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_012_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":10720
    },
    {
    "Name":"TAT_SM_013",
    "LocalizedName":"Torn Wings",
    "HashNameMale":"MP_Smuggler_Tattoo_013_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_013_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":20540
    },
    {
    "Name":"TAT_SM_014",
    "LocalizedName":"Mermaid's Curse",
    "HashNameMale":"MP_Smuggler_Tattoo_014_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_014_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":38825
    },
    {
    "Name":"TAT_SM_015",
    "LocalizedName":"Jolly Roger",
    "HashNameMale":"MP_Smuggler_Tattoo_015_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_015_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":29765
    },
    {
    "Name":"TAT_SM_016",
    "LocalizedName":"Skull Compass",
    "HashNameMale":"MP_Smuggler_Tattoo_016_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_016_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":43790
    },
    {
    "Name":"TAT_SM_017",
    "LocalizedName":"Framed Tall Ship",
    "HashNameMale":"MP_Smuggler_Tattoo_017_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_017_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":118850
    },
    {
    "Name":"TAT_SM_018",
    "LocalizedName":"Finders Keepers",
    "HashNameMale":"MP_Smuggler_Tattoo_018_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_018_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":165990
    },
    {
    "Name":"TAT_SM_019",
    "LocalizedName":"Lost At Sea",
    "HashNameMale":"MP_Smuggler_Tattoo_019_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_019_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":11105
    },
    {
    "Name":"TAT_SM_020",
    "LocalizedName":"Homeward Bound",
    "HashNameMale":"MP_Smuggler_Tattoo_020_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_020_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":39155
    },
    {
    "Name":"TAT_SM_021",
    "LocalizedName":"Dead Tales",
    "HashNameMale":"MP_Smuggler_Tattoo_021_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_021_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":14860
    },
    {
    "Name":"TAT_SM_022",
    "LocalizedName":"X Marks The Spot",
    "HashNameMale":"MP_Smuggler_Tattoo_022_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_022_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":16710
    },
    {
    "Name":"TAT_SM_023",
    "LocalizedName":"Stylized Kraken",
    "HashNameMale":"MP_Smuggler_Tattoo_023_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_023_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":54400
    },
    {
    "Name":"TAT_SM_024",
    "LocalizedName":"Pirate Captain",
    "HashNameMale":"MP_Smuggler_Tattoo_024_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_024_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":158210
    },
    {
    "Name":"TAT_SM_025",
    "LocalizedName":"Claimed By The Beast",
    "HashNameMale":"MP_Smuggler_Tattoo_025_M",
    "HashNameFemale":"MP_Smuggler_Tattoo_025_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":174500
    }
    ],
    "mpstunt_overlays":[
    {
    "Name":"TAT_ST_000",
    "LocalizedName":"Stunt Skull",
    "HashNameMale":"MP_MP_Stunt_Tat_000_M",
    "HashNameFemale":"MP_MP_Stunt_Tat_000_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":24850
    },
    {
    "Name":"TAT_ST_001",
    "LocalizedName":"8 Eyed Skull",
    "HashNameMale":"MP_MP_Stunt_tat_001_M",
    "HashNameFemale":"MP_MP_Stunt_tat_001_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":21600
    },
    {
    "Name":"TAT_ST_002",
    "LocalizedName":"Big Cat",
    "HashNameMale":"MP_MP_Stunt_tat_002_M",
    "HashNameFemale":"MP_MP_Stunt_tat_002_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":18850
    },
    {
    "Name":"TAT_ST_003",
    "LocalizedName":"Poison Wrench",
    "HashNameMale":"MP_MP_Stunt_tat_003_M",
    "HashNameFemale":"MP_MP_Stunt_tat_003_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":14300
    },
    {
    "Name":"TAT_ST_004",
    "LocalizedName":"Scorpion",
    "HashNameMale":"MP_MP_Stunt_tat_004_M",
    "HashNameFemale":"MP_MP_Stunt_tat_004_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":26350
    },
    {
    "Name":"TAT_ST_005",
    "LocalizedName":"Demon Spark Plug",
    "HashNameMale":"MP_MP_Stunt_tat_005_M",
    "HashNameFemale":"MP_MP_Stunt_tat_005_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":28850
    },
    {
    "Name":"TAT_ST_006",
    "LocalizedName":"Toxic Spider",
    "HashNameMale":"MP_MP_Stunt_tat_006_M",
    "HashNameFemale":"MP_MP_Stunt_tat_006_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":25900
    },
    {
    "Name":"TAT_ST_007",
    "LocalizedName":"Dagger Devil",
    "HashNameMale":"MP_MP_Stunt_tat_007_M",
    "HashNameFemale":"MP_MP_Stunt_tat_007_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":18150
    },
    {
    "Name":"TAT_ST_008",
    "LocalizedName":"Moonlight Ride",
    "HashNameMale":"MP_MP_Stunt_tat_008_M",
    "HashNameFemale":"MP_MP_Stunt_tat_008_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":24750
    },
    {
    "Name":"TAT_ST_009",
    "LocalizedName":"Arachnid of Death",
    "HashNameMale":"MP_MP_Stunt_tat_009_M",
    "HashNameFemale":"MP_MP_Stunt_tat_009_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":20800
    },
    {
    "Name":"TAT_ST_010",
    "LocalizedName":"Grave Vulture",
    "HashNameMale":"MP_MP_Stunt_tat_010_M",
    "HashNameFemale":"MP_MP_Stunt_tat_010_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":11000
    },
    {
    "Name":"TAT_ST_011",
    "LocalizedName":"Wheels of Death",
    "HashNameMale":"MP_MP_Stunt_tat_011_M",
    "HashNameFemale":"MP_MP_Stunt_tat_011_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":20750
    },
    {
    "Name":"TAT_ST_012",
    "LocalizedName":"Punk Biker",
    "HashNameMale":"MP_MP_Stunt_tat_012_M",
    "HashNameFemale":"MP_MP_Stunt_tat_012_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":21950
    },
    {
    "Name":"TAT_ST_013",
    "LocalizedName":"Dirt Track Hero",
    "HashNameMale":"MP_MP_Stunt_tat_013_M",
    "HashNameFemale":"MP_MP_Stunt_tat_013_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":25500
    },
    {
    "Name":"TAT_ST_014",
    "LocalizedName":"Bat Cat of Spades",
    "HashNameMale":"MP_MP_Stunt_tat_014_M",
    "HashNameFemale":"MP_MP_Stunt_tat_014_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":28300
    },
    {
    "Name":"TAT_ST_015",
    "LocalizedName":"Praying Gloves",
    "HashNameMale":"MP_MP_Stunt_tat_015_M",
    "HashNameFemale":"MP_MP_Stunt_tat_015_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":23400
    },
    {
    "Name":"TAT_ST_016",
    "LocalizedName":"Coffin Racer",
    "HashNameMale":"MP_MP_Stunt_tat_016_M",
    "HashNameFemale":"MP_MP_Stunt_tat_016_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":32950
    },
    {
    "Name":"TAT_ST_017",
    "LocalizedName":"Bat Wheel",
    "HashNameMale":"MP_MP_Stunt_tat_017_M",
    "HashNameFemale":"MP_MP_Stunt_tat_017_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":23800
    },
    {
    "Name":"TAT_ST_018",
    "LocalizedName":"Vintage Bully",
    "HashNameMale":"MP_MP_Stunt_tat_018_M",
    "HashNameFemale":"MP_MP_Stunt_tat_018_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":15400
    },
    {
    "Name":"TAT_ST_019",
    "LocalizedName":"Engine Heart",
    "HashNameMale":"MP_MP_Stunt_tat_019_M",
    "HashNameFemale":"MP_MP_Stunt_tat_019_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":18900
    },
    {
    "Name":"TAT_ST_020",
    "LocalizedName":"Piston Angel",
    "HashNameMale":"MP_MP_Stunt_tat_020_M",
    "HashNameFemale":"MP_MP_Stunt_tat_020_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":26950
    },
    {
    "Name":"TAT_ST_021",
    "LocalizedName":"Golden Cobra",
    "HashNameMale":"MP_MP_Stunt_tat_021_M",
    "HashNameFemale":"MP_MP_Stunt_tat_021_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":71200
    },
    {
    "Name":"TAT_ST_022",
    "LocalizedName":"Piston Head",
    "HashNameMale":"MP_MP_Stunt_tat_022_M",
    "HashNameFemale":"MP_MP_Stunt_tat_022_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":36850
    },
    {
    "Name":"TAT_ST_023",
    "LocalizedName":"Tanked",
    "HashNameMale":"MP_MP_Stunt_tat_023_M",
    "HashNameFemale":"MP_MP_Stunt_tat_023_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":58500
    },
    {
    "Name":"TAT_ST_024",
    "LocalizedName":"Road Kill",
    "HashNameMale":"MP_MP_Stunt_tat_024_M",
    "HashNameFemale":"MP_MP_Stunt_tat_024_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":86500
    },
    {
    "Name":"TAT_ST_025",
    "LocalizedName":"Speed Freak",
    "HashNameMale":"MP_MP_Stunt_tat_025_M",
    "HashNameFemale":"MP_MP_Stunt_tat_025_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":17200
    },
    {
    "Name":"TAT_ST_026",
    "LocalizedName":"Winged Wheel",
    "HashNameMale":"MP_MP_Stunt_tat_026_M",
    "HashNameFemale":"MP_MP_Stunt_tat_026_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":42300
    },
    {
    "Name":"TAT_ST_027",
    "LocalizedName":"Punk Road Hog",
    "HashNameMale":"MP_MP_Stunt_tat_027_M",
    "HashNameFemale":"MP_MP_Stunt_tat_027_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":18950
    },
    {
    "Name":"TAT_ST_028",
    "LocalizedName":"Quad Goblin",
    "HashNameMale":"MP_MP_Stunt_tat_028_M",
    "HashNameFemale":"MP_MP_Stunt_tat_028_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":29850
    },
    {
    "Name":"TAT_ST_029",
    "LocalizedName":"Majestic Finish",
    "HashNameMale":"MP_MP_Stunt_tat_029_M",
    "HashNameFemale":"MP_MP_Stunt_tat_029_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":37350
    },
    {
    "Name":"TAT_ST_030",
    "LocalizedName":"Man's Ruin",
    "HashNameMale":"MP_MP_Stunt_tat_030_M",
    "HashNameFemale":"MP_MP_Stunt_tat_030_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":28150
    },
    {
    "Name":"TAT_ST_031",
    "LocalizedName":"Stunt Jesus",
    "HashNameMale":"MP_MP_Stunt_tat_031_M",
    "HashNameFemale":"MP_MP_Stunt_tat_031_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":21000
    },
    {
    "Name":"TAT_ST_032",
    "LocalizedName":"Wheelie Mouse",
    "HashNameMale":"MP_MP_Stunt_tat_032_M",
    "HashNameFemale":"MP_MP_Stunt_tat_032_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":30350
    },
    {
    "Name":"TAT_ST_033",
    "LocalizedName":"Sugar Skull Trucker",
    "HashNameMale":"MP_MP_Stunt_tat_033_M",
    "HashNameFemale":"MP_MP_Stunt_tat_033_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":20400
    },
    {
    "Name":"TAT_ST_034",
    "LocalizedName":"Feather Road Kill",
    "HashNameMale":"MP_MP_Stunt_tat_034_M",
    "HashNameFemale":"MP_MP_Stunt_tat_034_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":69900
    },
    {
    "Name":"TAT_ST_035",
    "LocalizedName":"Stuntman's End",
    "HashNameMale":"MP_MP_Stunt_tat_035_M",
    "HashNameFemale":"MP_MP_Stunt_tat_035_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":12700
    },
    {
    "Name":"TAT_ST_036",
    "LocalizedName":"Biker Stallion",
    "HashNameMale":"MP_MP_Stunt_tat_036_M",
    "HashNameFemale":"MP_MP_Stunt_tat_036_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":3350
    },
    {
    "Name":"TAT_ST_037",
    "LocalizedName":"Big Grills",
    "HashNameMale":"MP_MP_Stunt_tat_037_M",
    "HashNameFemale":"MP_MP_Stunt_tat_037_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":26850
    },
    {
    "Name":"TAT_ST_038",
    "LocalizedName":"One Down Five Up",
    "HashNameMale":"MP_MP_Stunt_tat_038_M",
    "HashNameFemale":"MP_MP_Stunt_tat_038_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":15750
    },
    {
    "Name":"TAT_ST_039",
    "LocalizedName":"Kaboom",
    "HashNameMale":"MP_MP_Stunt_tat_039_M",
    "HashNameFemale":"MP_MP_Stunt_tat_039_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":9350
    },
    {
    "Name":"TAT_ST_040",
    "LocalizedName":"Monkey Chopper",
    "HashNameMale":"MP_MP_Stunt_tat_040_M",
    "HashNameFemale":"MP_MP_Stunt_tat_040_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":55950
    },
    {
    "Name":"TAT_ST_041",
    "LocalizedName":"Brapp",
    "HashNameMale":"MP_MP_Stunt_tat_041_M",
    "HashNameFemale":"MP_MP_Stunt_tat_041_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":50100
    },
    {
    "Name":"TAT_ST_042",
    "LocalizedName":"Flaming Quad",
    "HashNameMale":"MP_MP_Stunt_tat_042_M",
    "HashNameFemale":"MP_MP_Stunt_tat_042_F",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":14150
    },
    {
    "Name":"TAT_ST_043",
    "LocalizedName":"Engine Arm",
    "HashNameMale":"MP_MP_Stunt_tat_043_M",
    "HashNameFemale":"MP_MP_Stunt_tat_043_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":20300
    },
    {
    "Name":"TAT_ST_044",
    "LocalizedName":"Ram Skull",
    "HashNameMale":"MP_MP_Stunt_tat_044_M",
    "HashNameFemale":"MP_MP_Stunt_tat_044_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":53900
    },
    {
    "Name":"TAT_ST_045",
    "LocalizedName":"Severed Hand",
    "HashNameMale":"MP_MP_Stunt_tat_045_M",
    "HashNameFemale":"MP_MP_Stunt_tat_045_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":39650
    },
    {
    "Name":"TAT_ST_046",
    "LocalizedName":"Full Throttle",
    "HashNameMale":"MP_MP_Stunt_tat_046_M",
    "HashNameFemale":"MP_MP_Stunt_tat_046_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":72750
    },
    {
    "Name":"TAT_ST_047",
    "LocalizedName":"Brake Knife",
    "HashNameMale":"MP_MP_Stunt_tat_047_M",
    "HashNameFemale":"MP_MP_Stunt_tat_047_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":19200
    },
    {
    "Name":"TAT_ST_048",
    "LocalizedName":"Racing Doll",
    "HashNameMale":"MP_MP_Stunt_tat_048_M",
    "HashNameFemale":"MP_MP_Stunt_tat_048_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":61300
    },
    {
    "Name":"TAT_ST_049",
    "LocalizedName":"Seductive Mechanic",
    "HashNameMale":"MP_MP_Stunt_tat_049_M",
    "HashNameFemale":"MP_MP_Stunt_tat_049_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":63000
    }
    ],
    "mpvinewood_overlays":[
    {
    "Name":"TAT_VW_000",
    "LocalizedName":"In the Pocket",
    "HashNameMale":"MP_Vinewood_Tat_000_M",
    "HashNameFemale":"MP_Vinewood_Tat_000_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":41115
    },
    {
    "Name":"TAT_VW_001",
    "LocalizedName":"Jackpot",
    "HashNameMale":"MP_Vinewood_Tat_001_M",
    "HashNameFemale":"MP_Vinewood_Tat_001_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":60475
    },
    {
    "Name":"TAT_VW_002",
    "LocalizedName":"Suits",
    "HashNameMale":"MP_Vinewood_Tat_002_M",
    "HashNameFemale":"MP_Vinewood_Tat_002_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":49745
    },
    {
    "Name":"TAT_VW_003",
    "LocalizedName":"Royal Flush",
    "HashNameMale":"MP_Vinewood_Tat_003_M",
    "HashNameFemale":"MP_Vinewood_Tat_003_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":38865
    },
    {
    "Name":"TAT_VW_004",
    "LocalizedName":"Lady Luck",
    "HashNameMale":"MP_Vinewood_Tat_004_M",
    "HashNameFemale":"MP_Vinewood_Tat_004_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":59505
    },
    {
    "Name":"TAT_VW_005",
    "LocalizedName":"Get Lucky",
    "HashNameMale":"MP_Vinewood_Tat_005_M",
    "HashNameFemale":"MP_Vinewood_Tat_005_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":66680
    },
    {
    "Name":"TAT_VW_006",
    "LocalizedName":"Wheel of Suits",
    "HashNameMale":"MP_Vinewood_Tat_006_M",
    "HashNameFemale":"MP_Vinewood_Tat_006_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":51100
    },
    {
    "Name":"TAT_VW_007",
    "LocalizedName":"777",
    "HashNameMale":"MP_Vinewood_Tat_007_M",
    "HashNameFemale":"MP_Vinewood_Tat_007_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":83460
    },
    {
    "Name":"TAT_VW_008",
    "LocalizedName":"Snake Eyes",
    "HashNameMale":"MP_Vinewood_Tat_008_M",
    "HashNameFemale":"MP_Vinewood_Tat_008_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":71520
    },
    {
    "Name":"TAT_VW_009",
    "LocalizedName":"Till Death Do Us Part",
    "HashNameMale":"MP_Vinewood_Tat_009_M",
    "HashNameFemale":"MP_Vinewood_Tat_009_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":108970
    },
    {
    "Name":"TAT_VW_010",
    "LocalizedName":"Photo Finish",
    "HashNameMale":"MP_Vinewood_Tat_010_M",
    "HashNameFemale":"MP_Vinewood_Tat_010_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":127860
    },
    {
    "Name":"TAT_VW_011",
    "LocalizedName":"Life's a Gamble",
    "HashNameMale":"MP_Vinewood_Tat_011_M",
    "HashNameFemale":"MP_Vinewood_Tat_011_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":129825
    },
    {
    "Name":"TAT_VW_012",
    "LocalizedName":"Skull of Suits",
    "HashNameMale":"MP_Vinewood_Tat_012_M",
    "HashNameFemale":"MP_Vinewood_Tat_012_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":52115
    },
    {
    "Name":"TAT_VW_013",
    "LocalizedName":"One-armed Bandit",
    "HashNameMale":"MP_Vinewood_Tat_013_M",
    "HashNameFemale":"MP_Vinewood_Tat_013_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":21505
    },
    {
    "Name":"TAT_VW_014",
    "LocalizedName":"Vice",
    "HashNameMale":"MP_Vinewood_Tat_014_M",
    "HashNameFemale":"MP_Vinewood_Tat_014_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":39215
    },
    {
    "Name":"TAT_VW_015",
    "LocalizedName":"The Jolly Joker",
    "HashNameMale":"MP_Vinewood_Tat_015_M",
    "HashNameFemale":"MP_Vinewood_Tat_015_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":80840
    },
    {
    "Name":"TAT_VW_016",
    "LocalizedName":"Rose & Aces",
    "HashNameMale":"MP_Vinewood_Tat_016_M",
    "HashNameFemale":"MP_Vinewood_Tat_016_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":54425
    },
    {
    "Name":"TAT_VW_017",
    "LocalizedName":"Roll the Dice",
    "HashNameMale":"MP_Vinewood_Tat_017_M",
    "HashNameFemale":"MP_Vinewood_Tat_017_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":83765
    },
    {
    "Name":"TAT_VW_018",
    "LocalizedName":"The Gambler's Life",
    "HashNameMale":"MP_Vinewood_Tat_018_M",
    "HashNameFemale":"MP_Vinewood_Tat_018_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":61095
    },
    {
    "Name":"TAT_VW_019",
    "LocalizedName":"Can't Win Them All",
    "HashNameMale":"MP_Vinewood_Tat_019_M",
    "HashNameFemale":"MP_Vinewood_Tat_019_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":45665
    },
    {
    "Name":"TAT_VW_020",
    "LocalizedName":"Cash is King",
    "HashNameMale":"MP_Vinewood_Tat_020_M",
    "HashNameFemale":"MP_Vinewood_Tat_020_F",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":14805
    },
    {
    "Name":"TAT_VW_021",
    "LocalizedName":"Show Your Hand",
    "HashNameMale":"MP_Vinewood_Tat_021_M",
    "HashNameFemale":"MP_Vinewood_Tat_021_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":80250
    },
    {
    "Name":"TAT_VW_022",
    "LocalizedName":"Blood Money",
    "HashNameMale":"MP_Vinewood_Tat_022_M",
    "HashNameFemale":"MP_Vinewood_Tat_022_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":22100
    },
    {
    "Name":"TAT_VW_023",
    "LocalizedName":"Lucky 7s",
    "HashNameMale":"MP_Vinewood_Tat_023_M",
    "HashNameFemale":"MP_Vinewood_Tat_023_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":51000
    },
    {
    "Name":"TAT_VW_024",
    "LocalizedName":"Cash Mouth",
    "HashNameMale":"MP_Vinewood_Tat_024_M",
    "HashNameFemale":"MP_Vinewood_Tat_024_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":69990
    },
    {
    "Name":"TAT_VW_025",
    "LocalizedName":"Queen of Roses",
    "HashNameMale":"MP_Vinewood_Tat_025_M",
    "HashNameFemale":"MP_Vinewood_Tat_025_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":30110
    },
    {
    "Name":"TAT_VW_026",
    "LocalizedName":"Banknote Rose",
    "HashNameMale":"MP_Vinewood_Tat_026_M",
    "HashNameFemale":"MP_Vinewood_Tat_026_F",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":55305
    },
    {
    "Name":"TAT_VW_027",
    "LocalizedName":"8-Ball Rose",
    "HashNameMale":"MP_Vinewood_Tat_027_M",
    "HashNameFemale":"MP_Vinewood_Tat_027_F",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":44550
    },
    {
    "Name":"TAT_VW_028",
    "LocalizedName":"Skull & Aces",
    "HashNameMale":"MP_Vinewood_Tat_028_M",
    "HashNameFemale":"MP_Vinewood_Tat_028_F",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":23850
    },
    {
    "Name":"TAT_VW_029",
    "LocalizedName":"The Table",
    "HashNameMale":"MP_Vinewood_Tat_029_M",
    "HashNameFemale":"MP_Vinewood_Tat_029_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":136650
    },
    {
    "Name":"TAT_VW_030",
    "LocalizedName":"The Royals",
    "HashNameMale":"MP_Vinewood_Tat_030_M",
    "HashNameFemale":"MP_Vinewood_Tat_030_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":109000
    },
    {
    "Name":"TAT_VW_031",
    "LocalizedName":"Gambling Royalty",
    "HashNameMale":"MP_Vinewood_Tat_031_M",
    "HashNameFemale":"MP_Vinewood_Tat_031_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":70220
    },
    {
    "Name":"TAT_VW_032",
    "LocalizedName":"Play Your Ace",
    "HashNameMale":"MP_Vinewood_Tat_032_M",
    "HashNameFemale":"MP_Vinewood_Tat_032_F",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":142885
    }
    ],
    "multiplayer_overlays":[
    {
    "Name":"TAT_FM_008",
    "LocalizedName":"Skull",
    "HashNameMale":"FM_Tat_Award_M_000",
    "HashNameFemale":"FM_Tat_Award_F_000",
    "Zone":"ZONE_HEAD",
    "ZoneID":1,
    "Price":30000
    },
    {
    "Name":"TAT_FM_009",
    "LocalizedName":"Burning Heart",
    "HashNameMale":"FM_Tat_Award_M_001",
    "HashNameFemale":"FM_Tat_Award_F_001",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":14000
    },
    {
    "Name":"TAT_FM_010",
    "LocalizedName":"Grim Reaper Smoking Gun",
    "HashNameMale":"FM_Tat_Award_M_002",
    "HashNameFemale":"FM_Tat_Award_F_002",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":19750
    },
    {
    "Name":"TAT_FM_011",
    "LocalizedName":"Blackjack",
    "HashNameMale":"FM_Tat_Award_M_003",
    "HashNameFemale":"FM_Tat_Award_F_003",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":12150
    },
    {
    "Name":"TAT_FM_012",
    "LocalizedName":"Hustler",
    "HashNameMale":"FM_Tat_Award_M_004",
    "HashNameFemale":"FM_Tat_Award_F_004",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":50000
    },
    {
    "Name":"TAT_FM_013",
    "LocalizedName":"Angel",
    "HashNameMale":"FM_Tat_Award_M_005",
    "HashNameFemale":"FM_Tat_Award_F_005",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":52400
    },
    {
    "Name":"TAT_FM_014",
    "LocalizedName":"Skull and Sword",
    "HashNameMale":"FM_Tat_Award_M_006",
    "HashNameFemale":"FM_Tat_Award_F_006",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":13500
    },
    {
    "Name":"TAT_FM_015",
    "LocalizedName":"Racing Blonde",
    "HashNameMale":"FM_Tat_Award_M_007",
    "HashNameFemale":"FM_Tat_Award_F_007",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":14950
    },
    {
    "Name":"TAT_FM_016",
    "LocalizedName":"Los Santos Customs",
    "HashNameMale":"FM_Tat_Award_M_008",
    "HashNameFemale":"FM_Tat_Award_F_008",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":11350
    },
    {
    "Name":"TAT_FM_017",
    "LocalizedName":"Dragon and Dagger",
    "HashNameMale":"FM_Tat_Award_M_009",
    "HashNameFemale":"FM_Tat_Award_F_009",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":14500
    },
    {
    "Name":"TAT_FM_018",
    "LocalizedName":"Ride or Die",
    "HashNameMale":"FM_Tat_Award_M_010",
    "HashNameFemale":"FM_Tat_Award_F_010",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":5700
    },
    {
    "Name":"TAT_FM_019",
    "LocalizedName":"Blank Scroll",
    "HashNameMale":"FM_Tat_Award_M_011",
    "HashNameFemale":"FM_Tat_Award_F_011",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":2200
    },
    {
    "Name":"TAT_FM_020",
    "LocalizedName":"Embellished Scroll",
    "HashNameMale":"FM_Tat_Award_M_012",
    "HashNameFemale":"FM_Tat_Award_F_012",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":15500
    },
    {
    "Name":"TAT_FM_021",
    "LocalizedName":"Seven Deadly Sins",
    "HashNameMale":"FM_Tat_Award_M_013",
    "HashNameFemale":"FM_Tat_Award_F_013",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":18650
    },
    {
    "Name":"TAT_FM_022",
    "LocalizedName":"Trust No One",
    "HashNameMale":"FM_Tat_Award_M_014",
    "HashNameFemale":"FM_Tat_Award_F_014",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":19000
    },
    {
    "Name":"TAT_FM_023",
    "LocalizedName":"Racing Brunette",
    "HashNameMale":"FM_Tat_Award_M_015",
    "HashNameFemale":"FM_Tat_Award_F_015",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":14950
    },
    {
    "Name":"TAT_FM_024",
    "LocalizedName":"Clown",
    "HashNameMale":"FM_Tat_Award_M_016",
    "HashNameFemale":"FM_Tat_Award_F_016",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":24000
    },
    {
    "Name":"TAT_FM_025",
    "LocalizedName":"Clown and Gun",
    "HashNameMale":"FM_Tat_Award_M_017",
    "HashNameFemale":"FM_Tat_Award_F_017",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":35100
    },
    {
    "Name":"TAT_FM_026",
    "LocalizedName":"Clown Dual Wield",
    "HashNameMale":"FM_Tat_Award_M_018",
    "HashNameFemale":"FM_Tat_Award_F_018",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":37400
    },
    {
    "Name":"TAT_FM_027",
    "LocalizedName":"Clown Dual Wield Dollars",
    "HashNameMale":"FM_Tat_Award_M_019",
    "HashNameFemale":"FM_Tat_Award_F_019",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":45000
    },
    {
    "Name":"TAT_FM_204",
    "LocalizedName":"Brotherhood",
    "HashNameMale":"FM_Tat_M_000",
    "HashNameFemale":"FM_Tat_F_000",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":30000
    },
    {
    "Name":"TAT_FM_205",
    "LocalizedName":"Dragons",
    "HashNameMale":"FM_Tat_M_001",
    "HashNameFemale":"FM_Tat_F_001",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":42500
    },
    {
    "Name":"TAT_FM_209",
    "LocalizedName":"Melting Skull",
    "HashNameMale":"FM_Tat_M_002",
    "HashNameFemale":"FM_Tat_F_002",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":13750
    },
    {
    "Name":"TAT_FM_206",
    "LocalizedName":"Dragons and Skull",
    "HashNameMale":"FM_Tat_M_003",
    "HashNameFemale":"FM_Tat_F_003",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":20000
    },
    {
    "Name":"TAT_FM_219",
    "LocalizedName":"Faith",
    "HashNameMale":"FM_Tat_M_004",
    "HashNameFemale":"FM_Tat_F_004",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":40000
    },
    {
    "Name":"TAT_FM_201",
    "LocalizedName":"Serpents",
    "HashNameMale":"FM_Tat_M_005",
    "HashNameFemale":"FM_Tat_F_005",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":15400
    },
    {
    "Name":"TAT_FM_202",
    "LocalizedName":"Oriental Mural",
    "HashNameMale":"FM_Tat_M_006",
    "HashNameFemale":"FM_Tat_F_006",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":18100
    },
    {
    "Name":"TAT_FM_210",
    "LocalizedName":"The Warrior",
    "HashNameMale":"FM_Tat_M_007",
    "HashNameFemale":"FM_Tat_F_007",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":23750
    },
    {
    "Name":"TAT_FM_211",
    "LocalizedName":"Dragon Mural",
    "HashNameMale":"FM_Tat_M_008",
    "HashNameFemale":"FM_Tat_F_008",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":14800
    },
    {
    "Name":"TAT_FM_213",
    "LocalizedName":"Skull on the Cross",
    "HashNameMale":"FM_Tat_M_009",
    "HashNameFemale":"FM_Tat_F_009",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":62350
    },
    {
    "Name":"TAT_FM_218",
    "LocalizedName":"LS Flames",
    "HashNameMale":"FM_Tat_M_010",
    "HashNameFemale":"FM_Tat_F_010",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6500
    },
    {
    "Name":"TAT_FM_214",
    "LocalizedName":"LS Script",
    "HashNameMale":"FM_Tat_M_011",
    "HashNameFemale":"FM_Tat_F_011",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":5900
    },
    {
    "Name":"TAT_FM_220",
    "LocalizedName":"Los Santos Bills",
    "HashNameMale":"FM_Tat_M_012",
    "HashNameFemale":"FM_Tat_F_012",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":50000
    },
    {
    "Name":"TAT_FM_215",
    "LocalizedName":"Eagle and Serpent",
    "HashNameMale":"FM_Tat_M_013",
    "HashNameFemale":"FM_Tat_F_013",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":14500
    },
    {
    "Name":"TAT_FM_207",
    "LocalizedName":"Flower Mural",
    "HashNameMale":"FM_Tat_M_014",
    "HashNameFemale":"FM_Tat_F_014",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":25000
    },
    {
    "Name":"TAT_FM_203",
    "LocalizedName":"Zodiac Skull",
    "HashNameMale":"FM_Tat_M_015",
    "HashNameFemale":"FM_Tat_F_015",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":6600
    },
    {
    "Name":"TAT_FM_216",
    "LocalizedName":"Evil Clown",
    "HashNameMale":"FM_Tat_M_016",
    "HashNameFemale":"FM_Tat_F_016",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":82250
    },
    {
    "Name":"TAT_FM_212",
    "LocalizedName":"Tribal",
    "HashNameMale":"FM_Tat_M_017",
    "HashNameFemale":"FM_Tat_F_017",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":23500
    },
    {
    "Name":"TAT_FM_208",
    "LocalizedName":"Serpent Skull",
    "HashNameMale":"FM_Tat_M_018",
    "HashNameFemale":"FM_Tat_F_018",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":27500
    },
    {
    "Name":"TAT_FM_217",
    "LocalizedName":"The Wages of Sin",
    "HashNameMale":"FM_Tat_M_019",
    "HashNameFemale":"FM_Tat_F_019",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":82300
    },
    {
    "Name":"TAT_FM_221",
    "LocalizedName":"Dragon",
    "HashNameMale":"FM_Tat_M_020",
    "HashNameFemale":"FM_Tat_F_020",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":47500
    },
    {
    "Name":"TAT_FM_222",
    "LocalizedName":"Serpent Skull",
    "HashNameMale":"FM_Tat_M_021",
    "HashNameFemale":"FM_Tat_F_021",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":15000
    },
    {
    "Name":"TAT_FM_223",
    "LocalizedName":"Fiery Dragon",
    "HashNameMale":"FM_Tat_M_022",
    "HashNameFemale":"FM_Tat_F_022",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":17300
    },
    {
    "Name":"TAT_FM_224",
    "LocalizedName":"Hottie",
    "HashNameMale":"FM_Tat_M_023",
    "HashNameFemale":"FM_Tat_F_023",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":20250
    },
    {
    "Name":"TAT_FM_225",
    "LocalizedName":"Flaming Cross",
    "HashNameMale":"FM_Tat_M_024",
    "HashNameFemale":"FM_Tat_F_024",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":41900
    },
    {
    "Name":"TAT_FM_226",
    "LocalizedName":"LS Bold",
    "HashNameMale":"FM_Tat_M_025",
    "HashNameFemale":"FM_Tat_F_025",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6750
    },
    {
    "Name":"TAT_FM_227",
    "LocalizedName":"Smoking Dagger",
    "HashNameMale":"FM_Tat_M_026",
    "HashNameFemale":"FM_Tat_F_026",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":11750
    },
    {
    "Name":"TAT_FM_228",
    "LocalizedName":"Virgin Mary",
    "HashNameMale":"FM_Tat_M_027",
    "HashNameFemale":"FM_Tat_F_027",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":17300
    },
    {
    "Name":"TAT_FM_229",
    "LocalizedName":"Mermaid",
    "HashNameMale":"FM_Tat_M_028",
    "HashNameFemale":"FM_Tat_F_028",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":13250
    },
    {
    "Name":"TAT_FM_230",
    "LocalizedName":"Trinity Knot",
    "HashNameMale":"FM_Tat_M_029",
    "HashNameFemale":"FM_Tat_F_029",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":6000
    },
    {
    "Name":"TAT_FM_231",
    "LocalizedName":"Lucky Celtic Dogs",
    "HashNameMale":"FM_Tat_M_030",
    "HashNameFemale":"FM_Tat_F_030",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":15000
    },
    {
    "Name":"TAT_FM_232",
    "LocalizedName":"Lady M",
    "HashNameMale":"FM_Tat_M_031",
    "HashNameFemale":"FM_Tat_F_031",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":17500
    },
    {
    "Name":"TAT_FM_233",
    "LocalizedName":"Faith",
    "HashNameMale":"FM_Tat_M_032",
    "HashNameFemale":"FM_Tat_F_032",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":15100
    },
    {
    "Name":"TAT_FM_234",
    "LocalizedName":"Chinese Dragon",
    "HashNameMale":"FM_Tat_M_033",
    "HashNameFemale":"FM_Tat_F_033",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":20050
    },
    {
    "Name":"TAT_FM_235",
    "LocalizedName":"Flaming Shamrock",
    "HashNameMale":"FM_Tat_M_034",
    "HashNameFemale":"FM_Tat_F_034",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":12450
    },
    {
    "Name":"TAT_FM_236",
    "LocalizedName":"Dragon",
    "HashNameMale":"FM_Tat_M_035",
    "HashNameFemale":"FM_Tat_F_035",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":14950
    },
    {
    "Name":"TAT_FM_237",
    "LocalizedName":"Way of the Gun",
    "HashNameMale":"FM_Tat_M_036",
    "HashNameFemale":"FM_Tat_F_036",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":25100
    },
    {
    "Name":"TAT_FM_238",
    "LocalizedName":"Grim Reaper",
    "HashNameMale":"FM_Tat_M_037",
    "HashNameFemale":"FM_Tat_F_037",
    "Zone":"ZONE_LEFT_LEG",
    "ZoneID":4,
    "Price":12250
    },
    {
    "Name":"TAT_FM_239",
    "LocalizedName":"Dagger",
    "HashNameMale":"FM_Tat_M_038",
    "HashNameFemale":"FM_Tat_F_038",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":11150
    },
    {
    "Name":"TAT_FM_240",
    "LocalizedName":"Broken Skull",
    "HashNameMale":"FM_Tat_M_039",
    "HashNameFemale":"FM_Tat_F_039",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":17500
    },
    {
    "Name":"TAT_FM_241",
    "LocalizedName":"Flaming Skull",
    "HashNameMale":"FM_Tat_M_040",
    "HashNameFemale":"FM_Tat_F_040",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":27600
    },
    {
    "Name":"TAT_FM_242",
    "LocalizedName":"Dope Skull",
    "HashNameMale":"FM_Tat_M_041",
    "HashNameFemale":"FM_Tat_F_041",
    "Zone":"ZONE_LEFT_ARM",
    "ZoneID":2,
    "Price":5600
    },
    {
    "Name":"TAT_FM_243",
    "LocalizedName":"Flaming Scorpion",
    "HashNameMale":"FM_Tat_M_042",
    "HashNameFemale":"FM_Tat_F_042",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":12500
    },
    {
    "Name":"TAT_FM_244",
    "LocalizedName":"Indian Ram",
    "HashNameMale":"FM_Tat_M_043",
    "HashNameFemale":"FM_Tat_F_043",
    "Zone":"ZONE_RIGHT_LEG",
    "ZoneID":5,
    "Price":17450
    },
    {
    "Name":"TAT_FM_245",
    "LocalizedName":"Stone Cross",
    "HashNameMale":"FM_Tat_M_044",
    "HashNameFemale":"FM_Tat_F_044",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":27500
    },
    {
    "Name":"TAT_FM_246",
    "LocalizedName":"Skulls and Rose",
    "HashNameMale":"FM_Tat_M_045",
    "HashNameFemale":"FM_Tat_F_045",
    "Zone":"ZONE_TORSO",
    "ZoneID":0,
    "Price":60000
    },
    {
    "Name":"TAT_FM_247",
    "LocalizedName":"Lion",
    "HashNameMale":"FM_Tat_M_047",
    "HashNameFemale":"FM_Tat_F_047",
    "Zone":"ZONE_RIGHT_ARM",
    "ZoneID":3,
    "Price":12500
    }],
    "mpheist4_overlays":[
  {
    "Name": "TAT_H4_000",
    "LocalizedName": "Headphone Splat",
    "HashNameMale": "MP_Heist4_Tat_000_M",
    "HashNameFemale": "MP_Heist4_Tat_000_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 46400
  },
  {
    "Name": "TAT_H4_001",
    "LocalizedName": "Tropical Dude",
    "HashNameMale": "MP_Heist4_Tat_001_M",
    "HashNameFemale": "MP_Heist4_Tat_001_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 48550
  },
  {
    "Name": "TAT_H4_002",
    "LocalizedName": "Jellyfish Shades",
    "HashNameMale": "MP_Heist4_Tat_002_M",
    "HashNameFemale": "MP_Heist4_Tat_002_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 48500
  },
  {
    "Name": "TAT_H4_003",
    "LocalizedName": "Lighthouse",
    "HashNameMale": "MP_Heist4_Tat_003_M",
    "HashNameFemale": "MP_Heist4_Tat_003_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 34650
  },
  {
    "Name": "TAT_H4_004",
    "LocalizedName": "Skeleton Breeze",
    "HashNameMale": "MP_Heist4_Tat_004_M",
    "HashNameFemale": "MP_Heist4_Tat_004_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 39150
  },
  {
    "Name": "TAT_H4_005",
    "LocalizedName": "LSUR",
    "HashNameMale": "MP_Heist4_Tat_005_M",
    "HashNameFemale": "MP_Heist4_Tat_005_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 27000
  },
  {
    "Name": "TAT_H4_006",
    "LocalizedName": "Music Locker",
    "HashNameMale": "MP_Heist4_Tat_006_M",
    "HashNameFemale": "MP_Heist4_Tat_006_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 27000
  },
  {
    "Name": "TAT_H4_007",
    "LocalizedName": "Skeleton DJ",
    "HashNameMale": "MP_Heist4_Tat_007_M",
    "HashNameFemale": "MP_Heist4_Tat_007_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 22450
  },
  {
    "Name": "TAT_H4_008",
    "LocalizedName": "Smiley Glitch",
    "HashNameMale": "MP_Heist4_Tat_008_M",
    "HashNameFemale": "MP_Heist4_Tat_008_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 18550
  },
  {
    "Name": "TAT_H4_009",
    "LocalizedName": "Scratch Panther",
    "HashNameMale": "MP_Heist4_Tat_009_M",
    "HashNameFemale": "MP_Heist4_Tat_009_F",
    "Zone": "ZONE_LEFT_ARM",
    "ZoneID": 2,
    "Price": 25650
  },
  {
    "Name": "TAT_H4_010",
    "LocalizedName": "Tropical Serpent",
    "HashNameMale": "MP_Heist4_Tat_010_M",
    "HashNameFemale": "MP_Heist4_Tat_010_F",
    "Zone": "ZONE_LEFT_LEG",
    "ZoneID": 4,
    "Price": 26550
  },
  {
    "Name": "TAT_H4_011",
    "LocalizedName": "Soulwax",
    "HashNameMale": "MP_Heist4_Tat_011_M",
    "HashNameFemale": "MP_Heist4_Tat_011_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 27000
  },
  {
    "Name": "TAT_H4_012",
    "LocalizedName": "Still Slipping",
    "HashNameMale": "MP_Heist4_Tat_012_M",
    "HashNameFemale": "MP_Heist4_Tat_012_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 27000
  },
  {
    "Name": "TAT_H4_013",
    "LocalizedName": "Wild Dancers",
    "HashNameMale": "MP_Heist4_Tat_013_M",
    "HashNameFemale": "MP_Heist4_Tat_013_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 40100
  },
  {
    "Name": "TAT_H4_014",
    "LocalizedName": "Paradise Nap",
    "HashNameMale": "MP_Heist4_Tat_014_M",
    "HashNameFemale": "MP_Heist4_Tat_014_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 52300
  },
  {
    "Name": "TAT_H4_015",
    "LocalizedName": "Paradise Ukulele",
    "HashNameMale": "MP_Heist4_Tat_015_M",
    "HashNameFemale": "MP_Heist4_Tat_015_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 161100
  },
  {
    "Name": "TAT_H4_016",
    "LocalizedName": "Rose Panther",
    "HashNameMale": "MP_Heist4_Tat_016_M",
    "HashNameFemale": "MP_Heist4_Tat_016_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 148850
  },
  {
    "Name": "TAT_H4_017",
    "LocalizedName": "Tropical Sorcerer",
    "HashNameMale": "MP_Heist4_Tat_017_M",
    "HashNameFemale": "MP_Heist4_Tat_017_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 157750
  },
  {
    "Name": "TAT_H4_018",
    "LocalizedName": "Record Head",
    "HashNameMale": "MP_Heist4_Tat_018_M",
    "HashNameFemale": "MP_Heist4_Tat_018_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 59900
  },
  {
    "Name": "TAT_H4_019",
    "LocalizedName": "Record Shot",
    "HashNameMale": "MP_Heist4_Tat_019_M",
    "HashNameFemale": "MP_Heist4_Tat_019_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 31500
  },
  {
    "Name": "TAT_H4_020",
    "LocalizedName": "Speaker Tower",
    "HashNameMale": "MP_Heist4_Tat_020_M",
    "HashNameFemale": "MP_Heist4_Tat_020_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 40500
  },
  {
    "Name": "TAT_H4_021",
    "LocalizedName": "Skull Surfer",
    "HashNameMale": "MP_Heist4_Tat_021_M",
    "HashNameFemale": "MP_Heist4_Tat_021_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 164350
  },
  {
    "Name": "TAT_H4_022",
    "LocalizedName": "Paradise Sirens",
    "HashNameMale": "MP_Heist4_Tat_022_M",
    "HashNameFemale": "MP_Heist4_Tat_022_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 46770
  },
  {
    "Name": "TAT_H4_023",
    "LocalizedName": "Techno Glitch",
    "HashNameMale": "MP_Heist4_Tat_023_M",
    "HashNameFemale": "MP_Heist4_Tat_023_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 30450
  },
  {
    "Name": "TAT_H4_024",
    "LocalizedName": "Pineapple Skull",
    "HashNameMale": "MP_Heist4_Tat_024_M",
    "HashNameFemale": "MP_Heist4_Tat_024_F",
    "Zone": "ZONE_LEFT_LEG",
    "ZoneID": 4,
    "Price": 27800
  },
  {
    "Name": "TAT_H4_025",
    "LocalizedName": "Glow Princess",
    "HashNameMale": "MP_Heist4_Tat_025_M",
    "HashNameFemale": "MP_Heist4_Tat_025_F",
    "Zone": "ZONE_LEFT_LEG",
    "ZoneID": 4,
    "Price": 36700
  },
  {
    "Name": "TAT_H4_026",
    "LocalizedName": "Shark Water",
    "HashNameMale": "MP_Heist4_Tat_026_M",
    "HashNameFemale": "MP_Heist4_Tat_026_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 47000
  },
  {
    "Name": "TAT_H4_027",
    "LocalizedName": "Skullphones",
    "HashNameMale": "MP_Heist4_Tat_027_M",
    "HashNameFemale": "MP_Heist4_Tat_027_F",
    "Zone": "ZONE_RIGHT_LEG",
    "ZoneID": 5,
    "Price": 34350
  },
  {
    "Name": "TAT_H4_028",
    "LocalizedName": "Skull Waters",
    "HashNameMale": "MP_Heist4_Tat_028_M",
    "HashNameFemale": "MP_Heist4_Tat_028_F",
    "Zone": "ZONE_LEFT_LEG",
    "ZoneID": 4,
    "Price": 28950
  },
  {
    "Name": "TAT_H4_029",
    "LocalizedName": "Soundwaves",
    "HashNameMale": "MP_Heist4_Tat_029_M",
    "HashNameFemale": "MP_Heist4_Tat_029_F",
    "Zone": "ZONE_LEFT_LEG",
    "ZoneID": 4,
    "Price": 17850
  },
  {
    "Name": "TAT_H4_030",
    "LocalizedName": "Radio Tape",
    "HashNameMale": "MP_Heist4_Tat_030_M",
    "HashNameFemale": "MP_Heist4_Tat_030_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 37950
  },
  {
    "Name": "TAT_H4_031",
    "LocalizedName": "Octopus Shades",
    "HashNameMale": "MP_Heist4_Tat_031_M",
    "HashNameFemale": "MP_Heist4_Tat_031_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 41600
  },
  {
    "Name": "TAT_H4_032",
    "LocalizedName": "K.U.L.T. 99.1 FM",
    "HashNameMale": "MP_Heist4_Tat_032_M",
    "HashNameFemale": "MP_Heist4_Tat_032_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 27000
  }],
    "mpsecurity_overlays":[
  {
    "Name": "TAT_FX_000",
    "LocalizedName": "Hood Skeleton",
    "HashNameMale": "MP_Security_Tat_000_M",
    "HashNameFemale": "MP_Security_Tat_000_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 23050
  },
  {
    "Name": "TAT_FX_001",
    "LocalizedName": "Bright Diamond",
    "HashNameMale": "MP_Security_Tat_001_M",
    "HashNameFemale": "MP_Security_Tat_001_F",
    "Zone": "ZONE_HEAD",
    "ZoneID": 1,
    "Price": 21250
  },
  {
    "Name": "TAT_FX_002",
    "LocalizedName": "Hustle",
    "HashNameMale": "MP_Security_Tat_002_M",
    "HashNameFemale": "MP_Security_Tat_002_F",
    "Zone": "ZONE_HEAD",
    "ZoneID": 1,
    "Price": 23500
  },
  {
    "Name": "TAT_FX_003",
    "LocalizedName": "Bandana Knife",
    "HashNameMale": "MP_Security_Tat_003_M",
    "HashNameFemale": "MP_Security_Tat_003_F",
    "Zone": "ZONE_RIGHT_LEG",
    "ZoneID": 5,
    "Price": 16400
  },
  {
    "Name": "TAT_FX_004",
    "LocalizedName": "Hood Heart",
    "HashNameMale": "MP_Security_Tat_004_M",
    "HashNameFemale": "MP_Security_Tat_004_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 57700
  },
  {
    "Name": "TAT_FX_005",
    "LocalizedName": "Peacock",
    "HashNameMale": "MP_Security_Tat_005_M",
    "HashNameFemale": "MP_Security_Tat_005_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 35000
  },
  {
    "Name": "TAT_FX_006",
    "LocalizedName": "Skeleton Shot",
    "HashNameMale": "MP_Security_Tat_006_M",
    "HashNameFemale": "MP_Security_Tat_006_F",
    "Zone": "ZONE_LEFT_ARM",
    "ZoneID": 2,
    "Price": 16600
  },
  {
    "Name": "TAT_FX_007",
    "LocalizedName": "Ballas 4 Life",
    "HashNameMale": "MP_Security_Tat_007_M",
    "HashNameFemale": "MP_Security_Tat_007_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 21100
  },
  {
    "Name": "TAT_FX_008",
    "LocalizedName": "Los Santos Tag",
    "HashNameMale": "MP_Security_Tat_008_M",
    "HashNameFemale": "MP_Security_Tat_008_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 13700
  },
  {
    "Name": "TAT_FX_009",
    "LocalizedName": "Ascension",
    "HashNameMale": "MP_Security_Tat_009_M",
    "HashNameFemale": "MP_Security_Tat_009_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 28800
  },
  {
    "Name": "TAT_FX_010",
    "LocalizedName": "Music Is The Remedy",
    "HashNameMale": "MP_Security_Tat_010_M",
    "HashNameFemale": "MP_Security_Tat_010_F",
    "Zone": "ZONE_LEFT_ARM",
    "ZoneID": 2,
    "Price": 17000
  },
  {
    "Name": "TAT_FX_011",
    "LocalizedName": "Serpent Mic",
    "HashNameMale": "MP_Security_Tat_011_M",
    "HashNameFemale": "MP_Security_Tat_011_F",
    "Zone": "ZONE_LEFT_ARM",
    "ZoneID": 2,
    "Price": 16700
  },
  {
    "Name": "TAT_FX_012",
    "LocalizedName": "Zombie Rhymes",
    "HashNameMale": "MP_Security_Tat_012_M",
    "HashNameFemale": "MP_Security_Tat_012_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 19500
  },
  {
    "Name": "TAT_FX_013",
    "LocalizedName": "Blessed Boombox",
    "HashNameMale": "MP_Security_Tat_013_M",
    "HashNameFemale": "MP_Security_Tat_013_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 51200
  },
  {
    "Name": "TAT_FX_014",
    "LocalizedName": "Chamberlain Hills",
    "HashNameMale": "MP_Security_Tat_014_M",
    "HashNameFemale": "MP_Security_Tat_014_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 54400
  },
  {
    "Name": "TAT_FX_015",
    "LocalizedName": "Smoking Barrels",
    "HashNameMale": "MP_Security_Tat_015_M",
    "HashNameFemale": "MP_Security_Tat_015_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 43200
  },
  {
    "Name": "TAT_FX_016",
    "LocalizedName": "All From The Same Tree",
    "HashNameMale": "MP_Security_Tat_016_M",
    "HashNameFemale": "MP_Security_Tat_016_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 41800
  },
  {
    "Name": "TAT_FX_017",
    "LocalizedName": "King of the Jungle",
    "HashNameMale": "MP_Security_Tat_017_M",
    "HashNameFemale": "MP_Security_Tat_017_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 32300
  },
  {
    "Name": "TAT_FX_018",
    "LocalizedName": "Night Owl",
    "HashNameMale": "MP_Security_Tat_018_M",
    "HashNameFemale": "MP_Security_Tat_018_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 39800
  },
  {
    "Name": "TAT_FX_019",
    "LocalizedName": "Weed Knuckles",
    "HashNameMale": "MP_Security_Tat_019_M",
    "HashNameFemale": "MP_Security_Tat_019_F",
    "Zone": "ZONE_LEFT_ARM",
    "ZoneID": 2,
    "Price": 17800
  },
  {
    "Name": "TAT_FX_020",
    "LocalizedName": "Dog Fist",
    "HashNameMale": "MP_Security_Tat_020_M",
    "HashNameFemale": "MP_Security_Tat_020_F",
    "Zone": "ZONE_RIGHT_ARM",
    "ZoneID": 3,
    "Price": 10200
  },
  {
    "Name": "TAT_FX_021",
    "LocalizedName": "Graffiti Skull",
    "HashNameMale": "MP_Security_Tat_021_M",
    "HashNameFemale": "MP_Security_Tat_021_F",
    "Zone": "ZONE_RIGHT_LEG",
    "ZoneID": 5,
    "Price": 29600
  },
  {
    "Name": "TAT_FX_022",
    "LocalizedName": "LS Smoking Cartridges",
    "HashNameMale": "MP_Security_Tat_022_M",
    "HashNameFemale": "MP_Security_Tat_022_F",
    "Zone": "ZONE_LEFT_LEG",
    "ZoneID": 4,
    "Price": 16100
  },
  {
    "Name": "TAT_FX_023",
    "LocalizedName": "Trust",
    "HashNameMale": "MP_Security_Tat_023_M",
    "HashNameFemale": "MP_Security_Tat_023_F",
    "Zone": "ZONE_LEFT_LEG",
    "ZoneID": 4,
    "Price": 24300
  },
  {
    "Name": "TAT_FX_024",
    "LocalizedName": "Beatbox Silhouette",
    "HashNameMale": "MP_Security_Tat_024_M",
    "HashNameFemale": "MP_Security_Tat_024_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 31600
  },
  {
    "Name": "TAT_FX_025",
    "LocalizedName": "Davis Flames",
    "HashNameMale": "MP_Security_Tat_025_M",
    "HashNameFemale": "MP_Security_Tat_025_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 20400
  },
  {
    "Name": "TAT_FX_026",
    "LocalizedName": "Dollar Guns Crossed",
    "HashNameMale": "MP_Security_Tat_026_M",
    "HashNameFemale": "MP_Security_Tat_026_F",
    "Zone": "ZONE_TORSO",
    "ZoneID": 0,
    "Price": 27400
  },
  {
    "Name": "TAT_FX_027",
    "LocalizedName": "Black Widow",
    "HashNameMale": "MP_Security_Tat_027_M",
    "HashNameFemale": "MP_Security_Tat_027_F",
    "Zone": "ZONE_HEAD",
    "ZoneID": 1,
    "Price": 24800
  }],
    "mpsum2_overlays":[
    {
      "Name": "TAT_SB_000",
      "LocalizedName": "Live Fast Mono",
      "HashNameMale": "MP_Sum2_Tat_000_M",
      "HashNameFemale": "MP_Sum2_Tat_000_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 41400
    },
    {
      "Name": "TAT_SB_001",
      "LocalizedName": "Live Fast Color",
      "HashNameMale": "MP_Sum2_Tat_001_M",
      "HashNameFemale": "MP_Sum2_Tat_001_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 55200
    },
    {
      "Name": "TAT_SB_002",
      "LocalizedName": "Cobra Biker",
      "HashNameMale": "MP_Sum2_Tat_002_M",
      "HashNameFemale": "MP_Sum2_Tat_002_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 21500
    },
    {
      "Name": "TAT_SB_003",
      "LocalizedName": "Bullet Mouth",
      "HashNameMale": "MP_Sum2_Tat_003_M",
      "HashNameFemale": "MP_Sum2_Tat_003_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 30800
    },
    {
      "Name": "TAT_SB_004",
      "LocalizedName": "Smoking Barrel",
      "HashNameMale": "MP_Sum2_Tat_004_M",
      "HashNameFemale": "MP_Sum2_Tat_004_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 18600
    },
    {
      "Name": "TAT_SB_005",
      "LocalizedName": "Concealed",
      "HashNameMale": "MP_Sum2_Tat_005_M",
      "HashNameFemale": "MP_Sum2_Tat_005_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 19250
    },
    {
      "Name": "TAT_SB_006",
      "LocalizedName": "Painted Micro SMG",
      "HashNameMale": "MP_Sum2_Tat_006_M",
      "HashNameFemale": "MP_Sum2_Tat_006_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 35500
    },
    {
      "Name": "TAT_SB_007",
      "LocalizedName": "Weapon King",
      "HashNameMale": "MP_Sum2_Tat_007_M",
      "HashNameFemale": "MP_Sum2_Tat_007_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 52500
    },
    {
      "Name": "TAT_SB_008",
      "LocalizedName": "Bigness Chimp",
      "HashNameMale": "MP_Sum2_Tat_008_M",
      "HashNameFemale": "MP_Sum2_Tat_008_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 30200
    },
    {
      "Name": "TAT_SB_009",
      "LocalizedName": "Up-n-Atomizer Design",
      "HashNameMale": "MP_Sum2_Tat_009_M",
      "HashNameFemale": "MP_Sum2_Tat_009_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 23800
    },
    {
      "Name": "TAT_SB_010",
      "LocalizedName": "Rocket Launcher Girl",
      "HashNameMale": "MP_Sum2_Tat_010_M",
      "HashNameFemale": "MP_Sum2_Tat_010_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 28950
    },
    {
      "Name": "TAT_SB_011",
      "LocalizedName": "Nothing Mini About It",
      "HashNameMale": "MP_Sum2_Tat_011_M",
      "HashNameFemale": "MP_Sum2_Tat_011_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 28950
    },
    {
      "Name": "TAT_SB_012",
      "LocalizedName": "Snake Revolver",
      "HashNameMale": "MP_Sum2_Tat_012_M",
      "HashNameFemale": "MP_Sum2_Tat_012_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 22050
    },
    {
      "Name": "TAT_SB_013",
      "LocalizedName": "Weapon Sleeve",
      "HashNameMale": "MP_Sum2_Tat_013_M",
      "HashNameFemale": "MP_Sum2_Tat_013_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 33250
    },
    {
      "Name": "TAT_SB_014",
      "LocalizedName": "Minimal SMG",
      "HashNameMale": "MP_Sum2_Tat_014_M",
      "HashNameFemale": "MP_Sum2_Tat_014_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 15550
    },
    {
      "Name": "TAT_SB_015",
      "LocalizedName": "Minimal Advanced Rifle",
      "HashNameMale": "MP_Sum2_Tat_015_M",
      "HashNameFemale": "MP_Sum2_Tat_015_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 18200
    },
    {
      "Name": "TAT_SB_016",
      "LocalizedName": "Minimal Sniper Rifle",
      "HashNameMale": "MP_Sum2_Tat_016_M",
      "HashNameFemale": "MP_Sum2_Tat_016_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 20150
    },
    {
      "Name": "TAT_SB_017",
      "LocalizedName": "Skull Grenade",
      "HashNameMale": "MP_Sum2_Tat_017_M",
      "HashNameFemale": "MP_Sum2_Tat_017_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 27850
    },
    {
      "Name": "TAT_SB_018",
      "LocalizedName": "Branched Skull",
      "HashNameMale": "MP_Sum2_Tat_018_M",
      "HashNameFemale": "MP_Sum2_Tat_018_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 61500
    },
    {
      "Name": "TAT_SB_019",
      "LocalizedName": "Scythed Corpse",
      "HashNameMale": "MP_Sum2_Tat_019_M",
      "HashNameFemale": "MP_Sum2_Tat_019_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 58000
    },
    {
      "Name": "TAT_SB_020",
      "LocalizedName": "Scythed Corpse & Reaper",
      "HashNameMale": "MP_Sum2_Tat_020_M",
      "HashNameFemale": "MP_Sum2_Tat_020_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 68500
    },
    {
      "Name": "TAT_SB_021",
      "LocalizedName": "Third Eye",
      "HashNameMale": "MP_Sum2_Tat_021_M",
      "HashNameFemale": "MP_Sum2_Tat_021_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 42250
    },
    {
      "Name": "TAT_SB_022",
      "LocalizedName": "Pierced Third Eye",
      "HashNameMale": "MP_Sum2_Tat_022_M",
      "HashNameFemale": "MP_Sum2_Tat_022_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 48750
    },
    {
      "Name": "TAT_SB_023",
      "LocalizedName": "Lip Drip",
      "HashNameMale": "MP_Sum2_Tat_023_M",
      "HashNameFemale": "MP_Sum2_Tat_023_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 18950
    },
    {
      "Name": "TAT_SB_024",
      "LocalizedName": "Skin Mask",
      "HashNameMale": "MP_Sum2_Tat_024_M",
      "HashNameFemale": "MP_Sum2_Tat_024_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 61500
    },
    {
      "Name": "TAT_SB_025",
      "LocalizedName": "Webbed Scythe",
      "HashNameMale": "MP_Sum2_Tat_025_M",
      "HashNameFemale": "MP_Sum2_Tat_025_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 20500
    },
    {
      "Name": "TAT_SB_026",
      "LocalizedName": "Oni Demon",
      "HashNameMale": "MP_Sum2_Tat_026_M",
      "HashNameFemale": "MP_Sum2_Tat_026_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 28250
    },
    {
      "Name": "TAT_SB_027",
      "LocalizedName": "Bat Wings",
      "HashNameMale": "MP_Sum2_Tat_027_M",
      "HashNameFemale": "MP_Sum2_Tat_027_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 25650
    },
    {
      "Name": "TAT_SB_028",
      "LocalizedName": "Laser Eyes Skull",
      "HashNameMale": "MP_Sum2_Tat_028_M",
      "HashNameFemale": "MP_Sum2_Tat_028_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 17500
    },
    {
      "Name": "TAT_SB_029",
      "LocalizedName": "Classic Vampire",
      "HashNameMale": "MP_Sum2_Tat_029_M",
      "HashNameFemale": "MP_Sum2_Tat_029_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 19950
    },
    {
      "Name": "TAT_SB_030",
      "LocalizedName": "Centipede",
      "HashNameMale": "MP_Sum2_Tat_030_M",
      "HashNameFemale": "MP_Sum2_Tat_030_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 18650
    },
    {
      "Name": "TAT_SB_031",
      "LocalizedName": "Fleshy Eye",
      "HashNameMale": "MP_Sum2_Tat_031_M",
      "HashNameFemale": "MP_Sum2_Tat_031_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 21000
    },
    {
      "Name": "TAT_SB_032",
      "LocalizedName": "Many-eyed Goat",
      "HashNameMale": "MP_Sum2_Tat_032_M",
      "HashNameFemale": "MP_Sum2_Tat_032_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 24600
    },
    {
      "Name": "TAT_SB_033",
      "LocalizedName": "Three-eyed Demon",
      "HashNameMale": "MP_Sum2_Tat_033_M",
      "HashNameFemale": "MP_Sum2_Tat_033_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 34000
    },
    {
      "Name": "TAT_SB_034",
      "LocalizedName": "Smoldering Reaper",
      "HashNameMale": "MP_Sum2_Tat_034_M",
      "HashNameFemale": "MP_Sum2_Tat_034_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 42250
    },
    {
      "Name": "TAT_SB_035",
      "LocalizedName": "Sniff Sniff",
      "HashNameMale": "MP_Sum2_Tat_035_M",
      "HashNameFemale": "MP_Sum2_Tat_035_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 68500
    },
    {
      "Name": "TAT_SB_036",
      "LocalizedName": "Charm Pattern",
      "HashNameMale": "MP_Sum2_Tat_036_M",
      "HashNameFemale": "MP_Sum2_Tat_036_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 48600
    },
    {
      "Name": "TAT_SB_037",
      "LocalizedName": "Witch & Skull",
      "HashNameMale": "MP_Sum2_Tat_037_M",
      "HashNameFemale": "MP_Sum2_Tat_037_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 72250
    },
    {
      "Name": "TAT_SB_038",
      "LocalizedName": "Pumpkin Bug",
      "HashNameMale": "MP_Sum2_Tat_038_M",
      "HashNameFemale": "MP_Sum2_Tat_038_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 52150
    },
    {
      "Name": "TAT_SB_039",
      "LocalizedName": "Sinner",
      "HashNameMale": "MP_Sum2_Tat_039_M",
      "HashNameFemale": "MP_Sum2_Tat_039_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 42750
    },
    {
      "Name": "TAT_SB_040",
      "LocalizedName": "Carved Pumpkin",
      "HashNameMale": "MP_Sum2_Tat_040_M",
      "HashNameFemale": "MP_Sum2_Tat_040_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 27800
    },
    {
      "Name": "TAT_SB_041",
      "LocalizedName": "Branched Werewolf",
      "HashNameMale": "MP_Sum2_Tat_041_M",
      "HashNameFemale": "MP_Sum2_Tat_041_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 44200
    },
    {
      "Name": "TAT_SB_042",
      "LocalizedName": "Winged Skull",
      "HashNameMale": "MP_Sum2_Tat_042_M",
      "HashNameFemale": "MP_Sum2_Tat_042_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 46450
    },
    {
      "Name": "TAT_SB_043",
      "LocalizedName": "Cursed Saki",
      "HashNameMale": "MP_Sum2_Tat_043_M",
      "HashNameFemale": "MP_Sum2_Tat_043_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 27400
    },
    {
      "Name": "TAT_SB_044",
      "LocalizedName": "Smouldering Bat & Skull",
      "HashNameMale": "MP_Sum2_Tat_044_M",
      "HashNameFemale": "MP_Sum2_Tat_044_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 56500
    },
    {
      "Name": "TAT_SB_045",
      "LocalizedName": "Armored Arm",
      "HashNameMale": "MP_Sum2_Tat_045_M",
      "HashNameFemale": "MP_Sum2_Tat_045_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 30600
    },
    {
      "Name": "TAT_SB_046",
      "LocalizedName": "Demon Smile",
      "HashNameMale": "MP_Sum2_Tat_046_M",
      "HashNameFemale": "MP_Sum2_Tat_046_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 29950
    },
    {
      "Name": "TAT_SB_047",
      "LocalizedName": "Angel & Devil",
      "HashNameMale": "MP_Sum2_Tat_047_M",
      "HashNameFemale": "MP_Sum2_Tat_047_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 17750
    },
    {
      "Name": "TAT_SB_048",
      "LocalizedName": "Death Is Certain",
      "HashNameMale": "MP_Sum2_Tat_048_M",
      "HashNameFemale": "MP_Sum2_Tat_048_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 19950
    },
    {
      "Name": "TAT_SB_049",
      "LocalizedName": "Demon Drummer",
      "HashNameMale": "MP_Sum2_Tat_049_M",
      "HashNameFemale": "MP_Sum2_Tat_049_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 42700
    },
    {
      "Name": "TAT_SB_050",
      "LocalizedName": "Gold Gun",
      "HashNameMale": "MP_Sum2_Tat_050_M",
      "HashNameFemale": "MP_Sum2_Tat_050_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 21900
    },
    {
      "Name": "TAT_SB_051",
      "LocalizedName": "Blue Serpent",
      "HashNameMale": "MP_Sum2_Tat_051_M",
      "HashNameFemale": "MP_Sum2_Tat_051_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 41850
    },
    {
      "Name": "TAT_SB_052",
      "LocalizedName": "Night Demon",
      "HashNameMale": "MP_Sum2_Tat_052_M",
      "HashNameFemale": "MP_Sum2_Tat_052_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 30100
    },
    {
      "Name": "TAT_SB_053",
      "LocalizedName": "Mobster Skull",
      "HashNameMale": "MP_Sum2_Tat_053_M",
      "HashNameFemale": "MP_Sum2_Tat_053_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 19350
    },
    {
      "Name": "TAT_SB_054",
      "LocalizedName": "Wounded Head",
      "HashNameMale": "MP_Sum2_Tat_054_M",
      "HashNameFemale": "MP_Sum2_Tat_054_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 20200
    },
    {
      "Name": "TAT_SB_055",
      "LocalizedName": "Stabbed Skull",
      "HashNameMale": "MP_Sum2_Tat_055_M",
      "HashNameFemale": "MP_Sum2_Tat_055_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 16650
    },
    {
      "Name": "TAT_SB_056",
      "LocalizedName": "Tiger Blade",
      "HashNameMale": "MP_Sum2_Tat_056_M",
      "HashNameFemale": "MP_Sum2_Tat_056_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 16900
    },
    {
      "Name": "TAT_SB_057",
      "LocalizedName": "Gray Demon",
      "HashNameMale": "MP_Sum2_Tat_057_M",
      "HashNameFemale": "MP_Sum2_Tat_057_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 54450
    },
    {
      "Name": "TAT_SB_058",
      "LocalizedName": "Shrieking Dragon",
      "HashNameMale": "MP_Sum2_Tat_058_M",
      "HashNameFemale": "MP_Sum2_Tat_058_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 41750
    },
    {
      "Name": "TAT_SB_059",
      "LocalizedName": "Swords & City",
      "HashNameMale": "MP_Sum2_Tat_059_M",
      "HashNameFemale": "MP_Sum2_Tat_059_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 21400
    },
    {
      "Name": "TAT_SB_060",
      "LocalizedName": "Blaine County",
      "HashNameMale": "MP_Sum2_Tat_060_M",
      "HashNameFemale": "MP_Sum2_Tat_060_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 35200
    },
    {
      "Name": "TAT_SB_061",
      "LocalizedName": "Angry Possum",
      "HashNameMale": "MP_Sum2_Tat_061_M",
      "HashNameFemale": "MP_Sum2_Tat_061_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 32150
    },
    {
      "Name": "TAT_SB_062",
      "LocalizedName": "Floral Demon",
      "HashNameMale": "MP_Sum2_Tat_062_M",
      "HashNameFemale": "MP_Sum2_Tat_062_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 37200
    }],
  "quant_tattoo_overlays":[
    {
      "Name": "mp_quant_tattoo_000",
      "LocalizedName": "Blackwork with stripes",
      "HashNameMale": "mp_quant_tattoo_000_M",
      "HashNameFemale": "mp_quant_tattoo_000_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 500000,
      "toOwnerPrecent": 5
    },
  {
      "Name": "mp_quant_tattoo_018",
      "LocalizedName": "Blackwork with stripes",
      "HashNameMale": "mp_quant_tattoo_018_M",
      "HashNameFemale": "mp_quant_tattoo_018_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 500000,
      "toOwnerPrecent": 5
    },
  {
      "Name": "mp_quant_tattoo_001",
      "LocalizedName": "Blackwork full fade",
      "HashNameMale": "mp_quant_tattoo_001_M",
      "HashNameFemale": "mp_quant_tattoo_001_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 1000000,
      "toOwnerPrecent": 5
    },
  {
      "Name": "mp_quant_tattoo_010",
      "LocalizedName": "Blackwork full fade",
      "HashNameMale": "mp_quant_tattoo_010_M",
      "HashNameFemale": "mp_quant_tattoo_010_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 1000000,
      "toOwnerPrecent": 5
    },
  {
      "Name": "mp_quant_tattoo_019",
      "LocalizedName": "Blackwork fade",
      "HashNameMale": "mp_quant_tattoo_019_M",
      "HashNameFemale": "mp_quant_tattoo_019_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 1000000,
      "toOwnerPrecent": 5
    },
  {
      "Name": "mp_quant_tattoo_002",
      "LocalizedName": "Blackwork fade",
      "HashNameMale": "mp_quant_tattoo_002_M",
      "HashNameFemale": "mp_quant_tattoo_002_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 1000000,
      "toOwnerPrecent": 5
    },
  {
      "Name": "mp_quant_tattoo_005",
      "LocalizedName": "Rose rood",
      "HashNameMale": "mp_quant_tattoo_005_M",
      "HashNameFemale": "mp_quant_tattoo_005_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 200000
    },
  {
      "Name": "mp_quant_tattoo_006",
      "LocalizedName": "Katana cat",
      "HashNameMale": "mp_quant_tattoo_006_M",
      "HashNameFemale": "mp_quant_tattoo_006_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 400000
    },
  {
      "Name": "mp_quant_tattoo_007",
      "LocalizedName": "Waves",
      "HashNameMale": "mp_quant_tattoo_007_M",
      "HashNameFemale": "mp_quant_tattoo_007_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 500000
    },
  {
      "Name": "mp_quant_tattoo_008",
      "LocalizedName": "Bones and scull",
      "HashNameMale": "mp_quant_tattoo_008_M",
      "HashNameFemale": "mp_quant_tattoo_008_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 150000
    },
  {
      "Name": "mp_quant_tattoo_011",
      "LocalizedName": "Harnessed lion",
      "HashNameMale": "mp_quant_tattoo_011_M",
      "HashNameFemale": "mp_quant_tattoo_011_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 150000
    },
  {
      "Name": "mp_quant_tattoo_012",
      "LocalizedName": "Dead rood",
      "HashNameMale": "mp_quant_tattoo_012_M",
      "HashNameFemale": "mp_quant_tattoo_012_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 150000
    },
  {
      "Name": "mp_quant_tattoo_013",
      "LocalizedName": "Oni katana",
      "HashNameMale": "mp_quant_tattoo_013_M",
      "HashNameFemale": "mp_quant_tattoo_013_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 200000
    },
  {
      "Name": "mp_quant_tattoo_014",
      "LocalizedName": "Floral lady",
      "HashNameMale": "mp_quant_tattoo_014_M",
      "HashNameFemale": "mp_quant_tattoo_014_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 250000
    },
  {
      "Name": "mp_quant_tattoo_015",
      "LocalizedName": "Time to die",
      "HashNameMale": "mp_quant_tattoo_015_M",
      "HashNameFemale": "mp_quant_tattoo_015_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 150000
    },
  {
      "Name": "mp_quant_tattoo_016",
      "LocalizedName": "Stripe flowers",
      "HashNameMale": "mp_quant_tattoo_016_M",
      "HashNameFemale": "mp_quant_tattoo_016_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 75000
    },
  {
      "Name": "mp_quant_tattoo_021",
      "LocalizedName": "Yetti demon",
      "HashNameMale": "mp_quant_tattoo_021_M",
      "HashNameFemale": "mp_quant_tattoo_021_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 150000
    },
  {
      "Name": "mp_quant_tattoo_023",
      "LocalizedName": "Dragonsnake",
      "HashNameMale": "mp_quant_tattoo_023_M",
      "HashNameFemale": "mp_quant_tattoo_023_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 200000
    },
  {
      "Name": "mp_quant_tattoo_026",
      "LocalizedName": "Fish ornament bottom",
      "HashNameMale": "mp_quant_tattoo_026_M",
      "HashNameFemale": "mp_quant_tattoo_026_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 150000
    },
  {
      "Name": "mp_quant_tattoo_027",
      "LocalizedName": "Fish ornament top",
      "HashNameMale": "mp_quant_tattoo_027_M",
      "HashNameFemale": "mp_quant_tattoo_027_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 150000
    },
  {
      "Name": "mp_quant_tattoo_091",
      "LocalizedName": "Haunted owl",
      "HashNameMale": "mp_quant_tattoo_091_M",
      "HashNameFemale": "mp_quant_tattoo_091_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 150000
    },
  {
      "Name": "mp_quant_tattoo_092",
      "LocalizedName": "Queen and King",
      "HashNameMale": "mp_quant_tattoo_092_M",
      "HashNameFemale": "mp_quant_tattoo_092_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 75000
    },
  {
      "Name": "mp_quant_tattoo_093",
      "LocalizedName": "Tearing",
      "HashNameMale": "mp_quant_tattoo_093_M",
      "HashNameFemale": "mp_quant_tattoo_093_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 100000
    },
  {
      "Name": "mp_quant_tattoo_098",
      "LocalizedName": "Scull pike center",	
      "HashNameMale": "mp_quant_tattoo_098_M",
      "HashNameFemale": "mp_quant_tattoo_098_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 100000
    },
  {
      "Name": "mp_quant_tattoo_099",
      "LocalizedName": "Scull pike left",
      "HashNameMale": "mp_quant_tattoo_099_M",
      "HashNameFemale": "mp_quant_tattoo_099_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 100000
    },
  {
      "Name": "mp_quant_tattoo_100",
      "LocalizedName": "Scull dollar",
      "HashNameMale": "mp_quant_tattoo_100_M",
      "HashNameFemale": "mp_quant_tattoo_100_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 150000
    },
  {
      "Name": "mp_quant_tattoo_101",
      "LocalizedName": "Los Santos",
      "HashNameMale": "mp_quant_tattoo_101_M",
      "HashNameFemale": "mp_quant_tattoo_101_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 75000
    },
  {
      "Name": "mp_quant_tattoo_102",
      "LocalizedName": "Forever Love You",
      "HashNameMale": "mp_quant_tattoo_102_M",
      "HashNameFemale": "mp_quant_tattoo_102_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 75000
    },
  {
      "Name": "mp_quant_tattoo_103",
      "LocalizedName": "Blackwork fade",
      "HashNameMale": "mp_quant_tattoo_103_M",
      "HashNameFemale": "mp_quant_tattoo_103_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_104",
      "LocalizedName": "Blackwork abstraction",
      "HashNameMale": "mp_quant_tattoo_104_M",
      "HashNameFemale": "mp_quant_tattoo_104_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_105",
      "LocalizedName": "Blackwork dirt",
      "HashNameMale": "mp_quant_tattoo_105_M",
      "HashNameFemale": "mp_quant_tattoo_105_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 750000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_107",
      "LocalizedName": "All-seeing eye",
      "HashNameMale": "mp_quant_tattoo_107_M",
      "HashNameFemale": "mp_quant_tattoo_107_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 50000
  },
  {
      "Name": "mp_quant_tattoo_108",
      "LocalizedName": "Blackwork neck",
      "HashNameMale": "mp_quant_tattoo_108_M",
      "HashNameFemale": "mp_quant_tattoo_108_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 450000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_109",
      "LocalizedName": "Blackwork neck with stripe",
      "HashNameMale": "mp_quant_tattoo_109_M",
      "HashNameFemale": "mp_quant_tattoo_109_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 500000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_110",
      "LocalizedName": "Face stripe",
      "HashNameMale": "mp_quant_tattoo_110_M",
      "HashNameFemale": "mp_quant_tattoo_110_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 100000
  },
  {
      "Name": "mp_quant_tattoo_111",
      "LocalizedName": "Los Santos",
      "HashNameMale": "mp_quant_tattoo_111_M",
      "HashNameFemale": "mp_quant_tattoo_111_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 100000
  },
  {
      "Name": "mp_quant_tattoo_112",
      "LocalizedName": "Cry Baby",
      "HashNameMale": "mp_quant_tattoo_112_M",
      "HashNameFemale": "mp_quant_tattoo_112_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 150000
  },
  {
      "Name": "mp_quant_tattoo_113",
      "LocalizedName": "Lick",
      "HashNameMale": "mp_quant_tattoo_113_M",
      "HashNameFemale": "mp_quant_tattoo_113_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 100000
  },
  {
      "Name": "mp_quant_tattoo_114",
      "LocalizedName": "Daddy",
      "HashNameMale": "mp_quant_tattoo_114_M",
      "HashNameFemale": "mp_quant_tattoo_114_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 150000
  },
  {
      "Name": "mp_quant_tattoo_115",
      "LocalizedName": "Nose stripe",
      "HashNameMale": "mp_quant_tattoo_115_M",
      "HashNameFemale": "mp_quant_tattoo_115_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 100000
  },
  {
      "Name": "mp_quant_tattoo_116",
      "LocalizedName": "Moon",
      "HashNameMale": "mp_quant_tattoo_116_M",
      "HashNameFemale": "mp_quant_tattoo_116_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 100000
  },
  {
      "Name": "mp_quant_tattoo_117",
      "LocalizedName": "Moon with stars",
      "HashNameMale": "mp_quant_tattoo_117_M",
      "HashNameFemale": "mp_quant_tattoo_117_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 150000
  },
  {
      "Name": "mp_quant_tattoo_118",
      "LocalizedName": "Blackwork full neck",
      "HashNameMale": "mp_quant_tattoo_118_M",
      "HashNameFemale": "mp_quant_tattoo_118_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 500000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_119",
      "LocalizedName": "Abstraction",
      "HashNameMale": "mp_quant_tattoo_119_M",
      "HashNameFemale": "mp_quant_tattoo_119_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 50000
  },
  {
      "Name": "mp_quant_tattoo_121",
      "LocalizedName": "Blackwork abstraction full",
      "HashNameMale": "mp_quant_tattoo_121_M",
      "HashNameFemale": "mp_quant_tattoo_121_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_122",
      "LocalizedName": "Blackwork abstraction half",
      "HashNameMale": "mp_quant_tattoo_122_M",
      "HashNameFemale": "mp_quant_tattoo_122_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 500000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_123",
      "LocalizedName": "Carpfish",
      "HashNameMale": "mp_quant_tattoo_123_M",
      "HashNameFemale": "mp_quant_tattoo_123_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 150000
  },
  {
      "Name": "mp_quant_tattoo_126",
      "LocalizedName": "Bonerose",
      "HashNameMale": "mp_quant_tattoo_126_M",
      "HashNameFemale": "mp_quant_tattoo_126_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 200000
  },
  {
      "Name": "mp_quant_tattoo_127",
      "LocalizedName": "Oni and snake",
      "HashNameMale": "mp_quant_tattoo_127_M",
      "HashNameFemale": "mp_quant_tattoo_127_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 200000
  },
  {
      "Name": "mp_quant_tattoo_129",
      "LocalizedName": "Dagger and snake",
      "HashNameMale": "mp_quant_tattoo_129_M",
      "HashNameFemale": "mp_quant_tattoo_129_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 100000
  },
  {
      "Name": "mp_quant_tattoo_130",
      "LocalizedName": "Tiger and snake",
      "HashNameMale": "mp_quant_tattoo_130_M",
      "HashNameFemale": "mp_quant_tattoo_130_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 200000
  },
  {
      "Name": "mp_quant_tattoo_131",
      "LocalizedName": "Fish and snake",
      "HashNameMale": "mp_quant_tattoo_131_M",
      "HashNameFemale": "mp_quant_tattoo_131_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 150000
  },
  {
      "Name": "mp_quant_tattoo_133",
      "LocalizedName": "Monuments",
      "HashNameMale": "mp_quant_tattoo_133_M",
      "HashNameFemale": "mp_quant_tattoo_133_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 150000
  },
  {
      "Name": "mp_quant_tattoo_134",
      "LocalizedName": "Blackwork abstraction full",
      "HashNameMale": "mp_quant_tattoo_134_M",
      "HashNameFemale": "mp_quant_tattoo_134_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_135",
      "LocalizedName": "Blackwork abstraction half",
      "HashNameMale": "mp_quant_tattoo_135_M",
      "HashNameFemale": "mp_quant_tattoo_135_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 500000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_143",
      "LocalizedName": "Card deck",
      "HashNameMale": "mp_quant_tattoo_143_M",
      "HashNameFemale": "mp_quant_tattoo_143_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 100000
  },
  {
      "Name": "mp_quant_tattoo_145",
      "LocalizedName": "Dragon Lady",
      "HashNameMale": "mp_quant_tattoo_145_M",
      "HashNameFemale": "mp_quant_tattoo_145_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 200000
  },
  {
      "Name": "mp_quant_tattoo_146",
      "LocalizedName": "Eyes",
      "HashNameMale": "mp_quant_tattoo_146_M",
      "HashNameFemale": "mp_quant_tattoo_146_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 300000
  },
  {
      "Name": "mp_quant_tattoo_147",
      "LocalizedName": "Ice scull snake",
      "HashNameMale": "mp_quant_tattoo_147_M",
      "HashNameFemale": "mp_quant_tattoo_147_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 100000
  },
  {
      "Name": "mp_quant_tattoo_148",
      "LocalizedName": "Oni Katana",
      "HashNameMale": "mp_quant_tattoo_148_M",
      "HashNameFemale": "mp_quant_tattoo_148_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 150000
  },
  {
      "Name": "mp_quant_tattoo_149",
      "LocalizedName": "Oni Demon",
      "HashNameMale": "mp_quant_tattoo_149_M",
      "HashNameFemale": "mp_quant_tattoo_149_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 150000
  },
  {
      "Name": "mp_quant_tattoo_153",
      "LocalizedName": "Wings",
      "HashNameMale": "mp_quant_tattoo_153_M",
      "HashNameFemale": "mp_quant_tattoo_153_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 100000
  },
  {
      "Name": "mp_quant_tattoo_156",
      "LocalizedName": "Scull Dollar rear",
      "HashNameMale": "mp_quant_tattoo_156_M",
      "HashNameFemale": "mp_quant_tattoo_156_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 150000
  },
  {
      "Name": "mp_quant_tattoo_157",
      "LocalizedName": "Angel",
      "HashNameMale": "mp_quant_tattoo_157_M",
      "HashNameFemale": "mp_quant_tattoo_157_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 200000
  },
  {
      "Name": "mp_quant_tattoo_158",
      "LocalizedName": "Pike scull rear",
      "HashNameMale": "mp_quant_tattoo_158_M",
      "HashNameFemale": "mp_quant_tattoo_158_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 100000
  },
  {
      "Name": "mp_quant_tattoo_161",
      "LocalizedName": "Triangles",
      "HashNameMale": "mp_quant_tattoo_161_M",
      "HashNameFemale": "mp_quant_tattoo_161_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 50000
  },
  {
      "Name": "mp_quant_tattoo_162",
      "LocalizedName": "Blackwork stripe",
      "HashNameMale": "mp_quant_tattoo_162_M",
      "HashNameFemale": "mp_quant_tattoo_162_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 100000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_163",
      "LocalizedName": "Blackwork",
      "HashNameMale": "mp_quant_tattoo_163_M",
      "HashNameFemale": "mp_quant_tattoo_163_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_165",
      "LocalizedName": "Blackwork fat stripe top",
      "HashNameMale": "mp_quant_tattoo_165_M",
      "HashNameFemale": "mp_quant_tattoo_165_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 250000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_166",
      "LocalizedName": "Blackwork fat stripe bottom",
      "HashNameMale": "mp_quant_tattoo_166_M",
      "HashNameFemale": "mp_quant_tattoo_166_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 250000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_167",
      "LocalizedName": "Blackwork stripe top",
      "HashNameMale": "mp_quant_tattoo_167_M",
      "HashNameFemale": "mp_quant_tattoo_167_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 100000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_168",
      "LocalizedName": "Blackwork stripe bottom",
      "HashNameMale": "mp_quant_tattoo_168_M",
      "HashNameFemale": "mp_quant_tattoo_168_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 100000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_169",
      "LocalizedName": "Blackwork abstraction full",
      "HashNameMale": "mp_quant_tattoo_169_M",
      "HashNameFemale": "mp_quant_tattoo_169_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_170",
      "LocalizedName": "Blackwork stripe",
      "HashNameMale": "mp_quant_tattoo_170_M",
      "HashNameFemale": "mp_quant_tattoo_170_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 100000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_171",
      "LocalizedName": "Blackwork",
      "HashNameMale": "mp_quant_tattoo_171_M",
      "HashNameFemale": "mp_quant_tattoo_171_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_173",
      "LocalizedName": "Blackwork fat stripe top",
      "HashNameMale": "mp_quant_tattoo_173_M",
      "HashNameFemale": "mp_quant_tattoo_173_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 250000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_174",
      "LocalizedName": "Blackwork fat stripe bottom",
      "HashNameMale": "mp_quant_tattoo_174_M",
      "HashNameFemale": "mp_quant_tattoo_174_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 250000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_175",
      "LocalizedName": "Blackwork stripe top",
      "HashNameMale": "mp_quant_tattoo_175_M",
      "HashNameFemale": "mp_quant_tattoo_175_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 100000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_176",
      "LocalizedName": "Blackwork stripe bottom",
      "HashNameMale": "mp_quant_tattoo_176_M",
      "HashNameFemale": "mp_quant_tattoo_176_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 100000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_177",
      "LocalizedName": "Blackwork abstraction full",
      "HashNameMale": "mp_quant_tattoo_177_M",
      "HashNameFemale": "mp_quant_tattoo_177_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_178",
      "LocalizedName": "Blackwork full",
      "HashNameMale": "mp_quant_tattoo_178_M",
      "HashNameFemale": "mp_quant_tattoo_178_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_179",
      "LocalizedName": "Blackwork full",
      "HashNameMale": "mp_quant_tattoo_179_M",
      "HashNameFemale": "mp_quant_tattoo_179_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_180",
      "LocalizedName": "Blackwork full",
      "HashNameMale": "mp_quant_tattoo_180_M",
      "HashNameFemale": "mp_quant_tattoo_180_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_181",
      "LocalizedName": "Blackwork full",
      "HashNameMale": "mp_quant_tattoo_181_M",
      "HashNameFemale": "mp_quant_tattoo_181_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_182",
      "LocalizedName": "Blackwork full",
      "HashNameMale": "mp_quant_tattoo_182_M",
      "HashNameFemale": "mp_quant_tattoo_182_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_183",
      "LocalizedName": "Blackwork full",
      "HashNameMale": "mp_quant_tattoo_183_M",
      "HashNameFemale": "mp_quant_tattoo_183_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 1000000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_184",
      "LocalizedName": "Blackwork feet",
      "HashNameMale": "mp_quant_tattoo_184_M",
      "HashNameFemale": "mp_quant_tattoo_184_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 150000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_185",
      "LocalizedName": "Blackwork feet",
      "HashNameMale": "mp_quant_tattoo_185_M",
      "HashNameFemale": "mp_quant_tattoo_185_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 150000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_186",
      "LocalizedName": "Blackwork wrist",
      "HashNameMale": "mp_quant_tattoo_186_M",
      "HashNameFemale": "mp_quant_tattoo_186_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 250000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_187",
      "LocalizedName": "Blackwork wrist",
      "HashNameMale": "mp_quant_tattoo_187_M",
      "HashNameFemale": "mp_quant_tattoo_187_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 250000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_188",
      "LocalizedName": "Blackwork half",
      "HashNameMale": "mp_quant_tattoo_188_M",
      "HashNameFemale": "mp_quant_tattoo_188_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 500000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "mp_quant_tattoo_189",
      "LocalizedName": "Blackwork half",
      "HashNameMale": "mp_quant_tattoo_189_M",
      "HashNameFemale": "mp_quant_tattoo_189_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 500000,
      "toOwnerPrecent": 5
  },
  {
      "Name": "bp_tatto_001",
      "LocalizedName": "24Summer BP Tattoo 001",
      "HashNameMale": "24summerbp_tattoo_001_M",
      "HashNameFemale": "24summerbp_tattoo_001_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "bp_tatto_002",
      "LocalizedName": "24Summer BP Tattoo 002",
      "HashNameMale": "24summerbp_tattoo_002_M",
      "HashNameFemale": "24summerbp_tattoo_002_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "bp_tatto_003",
      "LocalizedName": "24Summer BP Tattoo 003",
      "HashNameMale": "24summerbp_tattoo_003_M",
      "HashNameFemale": "24summerbp_tattoo_003_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "bp_tatto_004",
      "LocalizedName": "24Summer BP Tattoo 004",
      "HashNameMale": "24summerbp_tattoo_004_M",
      "HashNameFemale": "24summerbp_tattoo_004_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "bp_tatto_005",
      "LocalizedName": "24Summer BP Tattoo 005",
      "HashNameMale": "24summerbp_tattoo_005_M",
      "HashNameFemale": "24summerbp_tattoo_005_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "bp_tatto_006",
      "LocalizedName": "24Summer BP Tattoo 006",
      "HashNameMale": "24summerbp_tattoo_006_M",
      "HashNameFemale": "24summerbp_tattoo_006_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "bp_tatto_007",
      "LocalizedName": "24Summer BP Tattoo 007",
      "HashNameMale": "24summerbp_tattoo_007_M",
      "HashNameFemale": "24summerbp_tattoo_007_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "bp_tatto_008",
      "LocalizedName": "24Summer BP Tattoo 008",
      "HashNameMale": "24summerbp_tattoo_008_M",
      "HashNameFemale": "24summerbp_tattoo_008_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "bp_tatto_009",
      "LocalizedName": "24Summer BP Tattoo 009",
      "HashNameMale": "24summerbp_tattoo_009_M",
      "HashNameFemale": "24summerbp_tattoo_009_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "bp_tatto_010",
      "LocalizedName": "24Summer BP Tattoo 010",
      "HashNameMale": "24summerbp_tattoo_010_M",
      "HashNameFemale": "24summerbp_tattoo_010_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "bp_tatto_011",
      "LocalizedName": "24Summer BP Tattoo 011",
      "HashNameMale": "24summerbp_tattoo_011_M",
      "HashNameFemale": "24summerbp_tattoo_011_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "bp_tatto_012",
      "LocalizedName": "24Summer BP Tattoo 012",
      "HashNameMale": "24summerbp_tattoo_012_M",
      "HashNameFemale": "24summerbp_tattoo_012_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25winterbp_tattoo_001",
      "LocalizedName": "25Winter BP Tatto 001",
      "HashNameMale": "25winterbp_tattoo_001_M",
      "HashNameFemale": "25winterbp_tattoo_001_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25winterbp_tattoo_002",
      "LocalizedName": "25Winter BP Tatto 002",
      "HashNameMale": "25winterbp_tattoo_002_M",
      "HashNameFemale": "25winterbp_tattoo_002_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25winterbp_tattoo_003",
      "LocalizedName": "25Winter BP Tatto 003",
      "HashNameMale": "25winterbp_tattoo_003_M",
      "HashNameFemale": "25winterbp_tattoo_003_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25winterbp_tattoo_004",
      "LocalizedName": "25Winter BP Tatto 004",
      "HashNameMale": "25winterbp_tattoo_004_M",
      "HashNameFemale": "25winterbp_tattoo_004_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25winterbp_tattoo_005",
      "LocalizedName": "25Winter BP Tatto 005",
      "HashNameMale": "25winterbp_tattoo_005_M",
      "HashNameFemale": "25winterbp_tattoo_005_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25winterbp_tattoo_006",
      "LocalizedName": "25Winter BP Tatto 006",
      "HashNameMale": "25winterbp_tattoo_006_M",
      "HashNameFemale": "25winterbp_tattoo_006_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25winterbp_tattoo_007",
      "LocalizedName": "25Winter BP Tatto 007",
      "HashNameMale": "25winterbp_tattoo_007_M",
      "HashNameFemale": "25winterbp_tattoo_007_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25winterbp_tattoo_008",
      "LocalizedName": "25Winter BP Tatto 008",
      "HashNameMale": "25winterbp_tattoo_008_M",
      "HashNameFemale": "25winterbp_tattoo_008_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25winterbp_tattoo_009",
      "LocalizedName": "25Winter BP Tatto 009",
      "HashNameMale": "25winterbp_tattoo_009_M",
      "HashNameFemale": "25winterbp_tattoo_009_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25winterbp_tattoo_010",
      "LocalizedName": "25Winter BP Tatto 010",
      "HashNameMale": "25winterbp_tattoo_010_M",
      "HashNameFemale": "25winterbp_tattoo_010_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25winterbp_tattoo_011",
      "LocalizedName": "25Winter BP Tatto 011",
      "HashNameMale": "25winterbp_tattoo_011_M",
      "HashNameFemale": "25winterbp_tattoo_011_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25winterbp_tattoo_012",
      "LocalizedName": "25Winter BP Tatto 012",
      "HashNameMale": "25winterbp_tattoo_012_M",
      "HashNameFemale": "25winterbp_tattoo_012_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25springbp_tattoo_001",
      "LocalizedName": "25Spring BP Tatto 001",
      "HashNameMale": "25springbp_tattoo_001_M",
      "HashNameFemale": "25springbp_tattoo_001_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25springbp_tattoo_002",
      "LocalizedName": "25Spring BP Tatto 002",
      "HashNameMale": "25springbp_tattoo_002_M",
      "HashNameFemale": "25springbp_tattoo_002_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25springbp_tattoo_003",
      "LocalizedName": "25Spring BP Tatto 003",
      "HashNameMale": "25springbp_tattoo_003_M",
      "HashNameFemale": "25springbp_tattoo_003_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25springbp_tattoo_004",
      "LocalizedName": "25Spring BP Tatto 004",
      "HashNameMale": "25springbp_tattoo_004_M",
      "HashNameFemale": "25springbp_tattoo_004_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25springbp_tattoo_005",
      "LocalizedName": "25Spring BP Tatto 005",
      "HashNameMale": "25springbp_tattoo_005_M",
      "HashNameFemale": "25springbp_tattoo_005_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25springbp_tattoo_006",
      "LocalizedName": "25Spring BP Tatto 006",
      "HashNameMale": "25springbp_tattoo_006_M",
      "HashNameFemale": "25springbp_tattoo_006_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25springbp_tattoo_007",
      "LocalizedName": "25Spring BP Tatto 007",
      "HashNameMale": "25springbp_tattoo_007_M",
      "HashNameFemale": "25springbp_tattoo_007_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25springbp_tattoo_008",
      "LocalizedName": "25Spring BP Tatto 008",
      "HashNameMale": "25springbp_tattoo_008_M",
      "HashNameFemale": "25springbp_tattoo_008_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25springbp_tattoo_009",
      "LocalizedName": "25Spring BP Tatto 009",
      "HashNameMale": "25springbp_tattoo_009_M",
      "HashNameFemale": "25springbp_tattoo_009_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25springbp_tattoo_010",
      "LocalizedName": "25Spring BP Tatto 010",
      "HashNameMale": "25springbp_tattoo_010_M",
      "HashNameFemale": "25springbp_tattoo_010_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
    },
    {
      "Name": "25summerbp_tattoo_001",
      "LocalizedName": "25Summer BP Tatto 001",
      "HashNameMale": "25summerbp_tattoo_001_M",
      "HashNameFemale": "25summerbp_tattoo_001_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25summerbp_tattoo_002",
      "LocalizedName": "25Summer BP Tatto 002",
      "HashNameMale": "25summerbp_tattoo_002_M",
      "HashNameFemale": "25summerbp_tattoo_002_F",
      "Zone": "ZONE_LEFT_ARM",
      "ZoneID": 2,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25summerbp_tattoo_003",
      "LocalizedName": "25Summer BP Tatto 003",
      "HashNameMale": "25summerbp_tattoo_003_M",
      "HashNameFemale": "25summerbp_tattoo_003_F",
      "Zone": "ZONE_LEFT_LEG",
      "ZoneID": 4,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25summerbp_tattoo_004",
      "LocalizedName": "25Summer BP Tatto 004",
      "HashNameMale": "25summerbp_tattoo_004_M",
      "HashNameFemale": "25summerbp_tattoo_004_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25summerbp_tattoo_005",
      "LocalizedName": "25Summer BP Tatto 005",
      "HashNameMale": "25summerbp_tattoo_005_M",
      "HashNameFemale": "25summerbp_tattoo_005_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25summerbp_tattoo_006",
      "LocalizedName": "25Summer BP Tatto 006",
      "HashNameMale": "25summerbp_tattoo_006_M",
      "HashNameFemale": "25summerbp_tattoo_006_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25summerbp_tattoo_007",
      "LocalizedName": "25Summer BP Tatto 007",
      "HashNameMale": "25summerbp_tattoo_007_M",
      "HashNameFemale": "25summerbp_tattoo_007_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25summerbp_tattoo_008",
      "LocalizedName": "25Summer BP Tatto 008",
      "HashNameMale": "25summerbp_tattoo_008_M",
      "HashNameFemale": "25summerbp_tattoo_008_F",
      "Zone": "ZONE_RIGHT_LEG",
      "ZoneID": 5,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25summerbp_tattoo_009",
      "LocalizedName": "25Summer BP Tatto 009",
      "HashNameMale": "25summerbp_tattoo_009_M",
      "HashNameFemale": "25summerbp_tattoo_009_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25summerbp_tattoo_010",
      "LocalizedName": "25Summer BP Tatto 010",
      "HashNameMale": "25summerbp_tattoo_010_M",
      "HashNameFemale": "25summerbp_tattoo_010_F",
      "Zone": "ZONE_RIGHT_ARM",
      "ZoneID": 3,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25summerbp_tattoo_011",
      "LocalizedName": "25Summer BP Tatto 011",
      "HashNameMale": "25summerbp_tattoo_011_M",
      "HashNameFemale": "25summerbp_tattoo_011_F",
      "Zone": "ZONE_TORSO",
      "ZoneID": 0,
      "Price": 5000,
      "Unique": true
  },
  {
      "Name": "25summerbp_tattoo_012",
      "LocalizedName": "25Summer BP Tatto 012",
      "HashNameMale": "25summerbp_tattoo_012_M",
      "HashNameFemale": "25summerbp_tattoo_012_F",
      "Zone": "ZONE_HEAD",
      "ZoneID": 1,
      "Price": 5000,
      "Unique": true
  }]
} 
exports = {
    tattoos
} 
}; a; }
{let a = function scriptEntryPoint(mp) {
let seatDisabled = false

mp.events.add('playerEnterColshape', (shape) => {
	if (shape.disableSeatColshape) {
    seatDisabled = true
  }
});	

mp.events.add('playerExitColshape', (shape) => {
  if (shape.disableSeatColshape) {
    seatDisabled = false
  }
});	

class SeatSystem {
  static SEAT_DATA = [
    {
      objectHash: mp.game.joaat("v_corp_sidechair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ind_ss_chair01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.3,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ind_ss_chair2"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ilev_chair02_ped"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ilev_hd_chair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.7,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ilev_leath_chr"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_m_armchair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_mp_stripchair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: -0.1,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_tre_stool"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_CHAIR",
          x: 0,
          y: 0.2,
          z: 0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_serv_bs_barbchair2"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.1,
          z: 0.8,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_serv_bs_barbchair3"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.1,
          z: 0.8,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_serv_bs_barbchair5"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.1,
          z: 0.8,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_serv_ct_chair02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_off_chair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_off_chair_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_off_chair_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_off_chair_04b"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_off_chair_04_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_off_chair_05"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.1,
          z: 0.45,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_corp_bk_chair3"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_corp_cd_chair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_corp_offchair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_cs_office_chair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_rock_chair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_yacht_chair_01_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_yacht_seat_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_yacht_seat_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.7,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_armchair_01_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_clb_officechair_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_CHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_dinechair_01_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_CHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_ilev_p_easychair_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_CHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_soloffchair_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_chair_01a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_chair_01b"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_chair_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_chair_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_chair_04a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_chair_04b"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_chair_05"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_chair_06"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_chair_07"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_chair_08"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_chair_09"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_chair_10"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_chateau_chair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_clown_chair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0.25,
          y: 0.3,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_old_deck_chair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: -0.05,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_old_wood_chair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_table_01_chr_a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_table_01_chr_b"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_table_02_chr"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_table_03_chr"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_table_03b_chr"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_table_04_chr"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_table_05_chr"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_table_06_chr"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_club_barchair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_club_cc_stool"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_club_ch_armchair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: 0,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_club_ch_briefchair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_club_stagechair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_club_vuarmchair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_hobo_seat_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.3,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_rub_couch03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.2,
          z: 0.45,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_skid_chair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.1,
          z: 0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_skid_chair_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_skid_chair_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bar_stool_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_CHAIR_MP_PLAYER",
          x: 0,
          y: 0.1,
          z: 0.8,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_armchair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_din_chair_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_din_chair_08"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_din_chair_09"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.15,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_din_chair_12"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_din_stool_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.1,
          z: 0.8,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairarm_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairarm_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.5,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairarm_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.3,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairarm_09"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.3,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairarm_11"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.3,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairarm_12"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairarm_13"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.5,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairarm_23"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairarm_24"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: -0.4,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairarm_25"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: 0,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairarm_26"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: -0.5,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_yaught_chair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ba_prop_battle_club_chair_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_sol_chair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ba_prop_battle_club_chair_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_waiting_seat_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ret_chair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ret_chair_white"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_m_l_chair1"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("cls_h4_int_04_desk_chair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: -0.05,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairstool_12"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairstrip_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: 0,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairstrip_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairstrip_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairstrip_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairstrip_05"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairstrip_06"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairstrip_07"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_chairstrip_08"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_yacht_armchair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_yacht_armchair_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_yacht_armchair_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_yacht_barstool_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.8,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_yacht_stool_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.6,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_yacht_strip_chair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: -0.15,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_biker_barstool_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.8,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_biker_barstool_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.8,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_biker_barstool_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.2,
          z: 0.8,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_biker_barstool_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.2,
          z: 0.8,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_biker_boardchair01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_biker_chair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_biker_chairstrip_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: -0.1,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_weed_chair_01a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_biker_chairstrip_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: 0,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_clubhouse_armchair_01a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0.75,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_clubhouse_chair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_clubhouse_offchair_01a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("xm_lab_chairarm_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.5,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("xm_lab_chairarm_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.3,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("xm_lab_chairarm_11"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.3,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("xm_lab_chairarm_12"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("xm_lab_chairarm_24"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.5,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("xm_lab_chairarm_25"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: 0,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("xm_lab_chairarm_26"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: -0.6,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("xm_mp_h_stn_chairarm_13"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.5,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_din_chair_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_din_chair_08"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_din_chair_09"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.2,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_din_chair_12"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_din_stool_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.1,
          z: 0.8,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_yacht_barstool_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.1,
          z: 0.8,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_off_chairstrip_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_off_easychair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_stn_chairarm_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.3,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_stn_chairarm_24"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.45,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_stn_chairstrip_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: -0.1,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_stn_chairstrip_010"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_stn_chairstrip_011"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_stn_chairstrip_05"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_stn_chairstrip_07"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_prop_offchair_exec_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_prop_offchair_exec_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_prop_offchair_exec_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_prop_offchair_exec_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("gr_dlc_gr_yacht_props_seat_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.7,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("gr_dlc_gr_yacht_props_seat_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.6,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("gr_prop_gr_offchair_01a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_prop_hei_skid_chair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_prop_heist_off_chair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_din_chair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_din_chair_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_din_chair_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_din_chair_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_din_chair_05"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_din_chair_06"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_din_chair_08"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_din_chair_09"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_stn_chairarm_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_stn_chairarm_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_stn_chairarm_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_stn_chairarm_06"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_stn_chairstrip_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_prop_yah_seat_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.7,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_prop_yah_seat_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.6,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("imp_prop_impexp_offchair_01a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sm_prop_offchair_smug_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sm_prop_offchair_smug_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sum_mp_h_yacht_strip_chair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0,
          y: -0.15,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("h4_mp_h_yacht_strip_chair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office2b_stripchair1"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: -45,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office2b_stripchair2"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: -135,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_03b_stripchair1"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_03b_stripchair2"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_03c_chairstrip_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_03c_stripchair_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_03c_recepchair_1"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_03c_recepchair_2"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_ld_toilet_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.16,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_toilet_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_toilet_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ap_m_bath_4"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.05,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ap_m_bath_3"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.1,
          z: 0.05,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ap_m_bath_6"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.05,
          y: 0,
          z: 0.05,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_off01_taps02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0.5,
          y: 0.5,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_01b_taps02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0.5,
          y: 0.5,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_01c_taps02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0.5,
          y: 0.5,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office2c_sinks001"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0.85,
          y: 0.6,
          z: -0.65,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_03a_toilet"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_03b_toilet"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("cityhall_sudbench1"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.65,
          y: 0,
          z: -0.05,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: 0,
          z: -0.05,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.3,
          y: 0,
          z: -0.05,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.35,
          y: 0,
          z: -0.05,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.05,
          y: 0,
          z: -0.05,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.7,
          y: 0,
          z: -0.05,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ilev_ph_bench"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.25,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.25,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_tt_sofa"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_CHAIR",
          x: -0.75,
          y: -0.1,
          z: -0.1,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_CHAIR",
          x: 0.75,
          y: -0.1,
          z: -0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_yacht_seat_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_CHAIR",
          x: -0.35,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_CHAIR",
          x: 0.35,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_prop_yah_seat_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.35,
          y: -0.1,
          z: 0.55,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.35,
          y: -0.1,
          z: 0.55,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bench_01a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.75,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.75,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bench_01b"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.75,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.75,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bench_01c"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.75,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.75,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bench_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.75,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.75,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bench_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bench_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.8,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.8,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bench_05"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1,
          y: 0,
          z: 0.4,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.4,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: 0,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bench_06"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1,
          y: 0,
          z: 0.45,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.45,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: 0,
          z: 0.45,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bench_08"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.8,
          y: 0.05,
          z: 0.45,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.8,
          y: 0.05,
          z: 0.45,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bench_09"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.9,
          y: 0,
          z: 0.3,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.3,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.9,
          y: 0,
          z: 0.3,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bench_10"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bench_11"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1,
          y: 0,
          z: 0.4,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.4,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: 0,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_table_08_chr"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.75,
          y: 0.05,
          z: 0.3,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.05,
          z: 0.3,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.75,
          y: 0.05,
          z: 0.3,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_rub_couch01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.6,
          y: 0.05,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.6,
          y: 0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_busstop_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.3,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.75,
          y: 0.3,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.5,
          y: 0.3,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ind_meatbench"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.85,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.85,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ind_rc_bench"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.85,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.85,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_fh_benchlong"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1,
          y: 0.1,
          z: 0.3,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.1,
          z: 0.3,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: 0.1,
          z: 0.3,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_fh_benchshort"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.6,
          y: 0,
          z: 0.3,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.6,
          y: 0,
          z: 0.3,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_wait_bench_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_fib_3b_bench"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_ld_bench01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.8,
          y: 0.2,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.2,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.8,
          y: 0.2,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_snow_bench_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_16_shitbench"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.6,
          y: 0,
          z: 0.3,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.6,
          y: 0,
          z: 0.3,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_air_bench_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.2,
          y: 0.1,
          z: 0.5,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: 0.1,
          z: 0.5,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 0.1,
          z: 0.5,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.2,
          y: 0.1,
          z: 0.5,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_air_bench_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.8,
          y: 0,
          z: 0.5,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.8,
          y: 0,
          z: 0.5,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_stn_benchshort"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.6,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.6,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("dt1_03_benchirefm"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.6,
          y: -0.1,
          z: 0.15,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.6,
          y: -0.1,
          z: 0.15,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bh1_15_bench_posh"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.6,
          y: -0.1,
          z: 0.15,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.6,
          y: -0.1,
          z: 0.15,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ch1_01_bench_for_chris"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.75,
          y: -0.1,
          z: -0.1,
          h: 190,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.75,
          y: 0.2,
          z: -0.1,
          h: 190,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_warel_officebench"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.4,
          z: 0.5,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.4,
          z: 0.5,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_bench01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.9,
          y: -0.1,
          z: 0.2,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.1,
          z: 0.2,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.9,
          y: -0.1,
          z: 0.2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_bench02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.9,
          y: -0.1,
          z: 0.2,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.1,
          z: 0.2,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.9,
          y: -0.1,
          z: 0.2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_bench03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.7,
          y: -0.1,
          z: 0.2,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.1,
          z: 0.2,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.7,
          y: -0.1,
          z: 0.2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("h4_int_05_bench_2"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 0,
          z: 0,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("h4_int_05_bench_3"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 0,
          z: 0,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_yacht_seat_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ilev_m_sofa"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.5,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: -1.6,
          y: 0.5,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_mp_sofa"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.4,
          y: -1.4,
          z: 0.5,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.4,
          y: -0.6,
          z: 0.5,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.4,
          y: 0.2,
          z: 0.5,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.6,
          y: 1.6,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: 1.6,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.5,
          y: 1.6,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_16_low_lng_mesh_sofa1"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.2,
          y: 0.7,
          z: 0,
          h: 100,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.7,
          z: 0,
          h: 100,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_16_study_sofa"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.2,
          y: 0.4,
          z: 0,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.3,
          y: -0.7,
          z: 0,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.8,
          y: -0.7,
          z: 0,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_16_v_sofa"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.4,
          y: -1.5,
          z: -0.4,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.4,
          y: -0.5,
          z: -0.4,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.4,
          y: -0.5,
          z: -0.4,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.4,
          y: 0.5,
          z: -0.4,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.5,
          y: 1.6,
          z: -0.4,
          h: -180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: 1.6,
          z: -0.4,
          h: -180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.5,
          y: 1.6,
          z: -0.4,
          h: -180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_stn_sofa3seat_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.7,
          y: -0.1,
          z: 0.5,
          h: -180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: -180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.7,
          y: -0.1,
          z: 0.5,
          h: -180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_stn_sofacorn_05"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.5,
          y: 1.3,
          z: 0.5,
          h: -180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.5,
          y: 1.3,
          z: 0.5,
          h: -180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: 1.3,
          z: 0.5,
          h: -180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.3,
          y: 0,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.3,
          y: -0.7,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.3,
          y: -1.5,
          z: 0.5,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_sofa2seat_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.5,
          y: -0.6,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: -0.6,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_sofacorn_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -2.5,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -1.7,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -0.9,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.2,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: -2.7,
          y: 0.25,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_sofacorn_06"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: -2.5,
          y: 0.5,
          z: 0.4,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: -1.5,
          y: 0.5,
          z: 0.4,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.5,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -0.4,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0.4,
          y: -1.4,
          z: 0.4,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_DECKCHAIR",
          x: 0.4,
          y: -2.4,
          z: 0.4,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_sofacorn_07"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -2.4,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -1.6,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -0.7,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.4,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -2.4,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_sofacorn_08"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -2.4,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -1.6,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -0.7,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.4,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -2.4,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_sofacorn_09"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -2.4,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -1.6,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -0.7,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.4,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -2.4,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_sofacorn_10"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -2.4,
          z: 0.55,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -1.6,
          z: 0.55,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -0.7,
          z: 0.55,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 0.4,
          z: 0.55,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.4,
          y: 0.4,
          z: 0.55,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -2.4,
          y: 0.4,
          z: 0.55,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_yacht_sofa_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.3,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -0.45,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0.6,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 1.5,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_yacht_sofa_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -0.6,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0.6,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_clubhouse_sofa_01a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -0.6,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0.6,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("gr_dlc_gr_yacht_props_seat_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.6,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_stn_sofa2seat_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -0.6,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0.6,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_stn_sofa2seat_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -0.6,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0.6,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_stn_sofacorn_06"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.4,
          y: -1.2,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.4,
          y: -0.2,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: 1.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 1.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.4,
          y: 1.4,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_lev_sofa_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.5,
          y: 0.4,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: -1.6,
          y: 0.5,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_res_sofa_l_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.6,
          y: -0.2,
          z: 0.65,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.6,
          y: -0.2,
          z: 0.65,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_v_med_p_sofa_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.8,
          y: -0.05,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.05,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.8,
          y: -0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_couch_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_couch_03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.15,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.05,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.95,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_couch_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.85,
          y: -0.15,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.05,
          y: -0.15,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.25,
          y: -0.15,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_couch_lg_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.1,
          y: 0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.9,
          y: 0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_couch_lg_05"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.5,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_couch_lg_06"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.8,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.8,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_couch_lg_07"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.2,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.8,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_couch_lg_08"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.2,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.8,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_couch_sm_06"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_rub_couch01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.5,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_rub_couch04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.5,
          y: 0,
          z: 0.52,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: 0,
          z: 0.52,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_yaught_sofa_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: 0,
          z: 0,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_tre_sofa_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.5,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("xm_lab_sofa_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.8,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.8,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("xm_lab_sofa_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.8,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.8,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_01a_sofa01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.85,
          z: 0.5,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.85,
          z: 0.5,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_01b_sofa02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.85,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.85,
          z: 0.5,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_01c_sofa02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.85,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.85,
          z: 0.5,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office2a_sofa01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.85,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.85,
          z: 0.5,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office2b_sofa01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -0.1,
          y: 0.85,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -0.1,
          y: 0,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -0.1,
          y: -0.85,
          z: 0.5,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office2c_sofa01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -0.1,
          y: 0.85,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -0.1,
          y: 0,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -0.1,
          y: -0.85,
          z: 0.5,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office01b_chairwhite002"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 1.2,
          y: -1.5,
          z: 0.1,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -0.2,
          y: -1.5,
          z: 0.1,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.2,
          y: -0.2,
          z: 0.1,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.2,
          y: 0.7,
          z: 0.1,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.2,
          y: 1.6,
          z: 0.1,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_01c_chairwhite002"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 1.2,
          y: -1.5,
          z: 0.1,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -0.2,
          y: -1.5,
          z: 0.1,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.2,
          y: -0.2,
          z: 0.1,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.2,
          y: 0.7,
          z: 0.1,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.2,
          y: 1.6,
          z: 0.1,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_02a_sofa2"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 1.4,
          y: -1.7,
          z: 0.1,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -1.7,
          z: 0.1,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.3,
          y: -0.2,
          z: 0.1,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.3,
          y: 0.7,
          z: 0.1,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.3,
          y: 1.6,
          z: 0.1,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_02b_sofa2"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 1.4,
          y: -1.7,
          z: 0.1,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -1.7,
          z: 0.1,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.3,
          y: -0.2,
          z: 0.1,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.3,
          y: 0.7,
          z: 0.1,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.3,
          y: 1.6,
          z: 0.1,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office2c_sofa2"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 1.4,
          y: -1.7,
          z: 0.1,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -1.7,
          z: 0.1,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.3,
          y: -0.2,
          z: 0.1,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.3,
          y: 0.7,
          z: 0.1,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: -1.3,
          y: 1.6,
          z: 0.1,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_01c_chairarm_white01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.6,
          z: 0.05,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0.6,
          z: 0.05,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_03a_waitrmchairs"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 1.3,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_03b_waitrmchairs"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 1.3,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_office_03c_waitrmchairs"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 1.3,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_sofa_daybed_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: 0,
          y: 0.25,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_stn_sofa_daybed_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: 0,
          y: 0.25,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_patio_lounger1_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: 0,
          y: -0.2,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_yacht_lounger"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: 0,
          y: 0.3,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_patio_lounger1"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: 0,
          y: -0.2,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_patio_lounger_2"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: 0,
          y: 0.2,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_patio_lounger_3"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: 0,
          y: 0.2,
          z: 0.4,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("gr_dlc_gr_yacht_props_lounger"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: 0,
          y: 0.3,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_prop_yah_lounger"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: 0,
          y: 0.3,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("bkr_prop_biker_campbed_01"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0,
          z: 2,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_msonbed_s"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0,
          z: 2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_v_res_tt_bed_s"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0,
          z: 1.6,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_lestersbed_s"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0,
          z: 1,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("gr_prop_bunker_bed_01"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0,
          z: 2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_yacht_bed_01"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.8,
          y: -1.5,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: -1.5,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.8,
          y: -1.5,
          z: 2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_yacht_bed_02"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.8,
          y: -1.5,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: -1.5,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.8,
          y: -1.5,
          z: 2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_bed_double_08"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.5,
          y: -1.5,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.5,
          y: -1.5,
          z: 2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_bed_double_09"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.5,
          y: -1.5,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.5,
          y: -1.5,
          z: 2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_bed_wide_05"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.8,
          y: -1.5,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: -1.5,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.8,
          y: -1.5,
          z: 2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("apa_mp_h_bed_with_table_02"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.5,
          y: -1.5,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.5,
          y: -1.5,
          z: 2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_msonbed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.5,
          y: 0,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.5,
          y: 0,
          z: 2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_mdbed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.5,
          y: 0,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.5,
          y: 0,
          z: 2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_49_motelmp_bed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0.6,
          z: 1.6,
          h: -90,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: -0.6,
          z: 1.6,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_mbbed_s"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.5,
          y: -0.2,
          z: 1.8,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.5,
          y: -0.2,
          z: 1.8,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_t_sofa"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: -0.5,
          y: 0.25,
          z: 0,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: 0.5,
          y: 0.25,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_t_sofa_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: -0.5,
          y: 0.25,
          z: 0,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_SUNLOUNGER",
          x: 0.5,
          y: 0.25,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_d_bed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.5,
          y: -0.2,
          z: 0.7,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.5,
          y: -0.2,
          z: 0.7,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_lestersbed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: -0.2,
          z: 1.7,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_mbbed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.5,
          y: -0.2,
          z: 1.7,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.5,
          y: -0.2,
          z: 1.7,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_tre_bed1"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.5,
          y: -0.2,
          z: 1.7,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.5,
          y: -0.2,
          z: 1.7,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_tre_bed1_messy"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.5,
          y: -0.2,
          z: 1.7,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.5,
          y: -0.2,
          z: 1.7,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_tre_bed2"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.5,
          y: 0,
          z: 1.7,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.5,
          y: 0,
          z: 1.7,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_tt_bed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0,
          z: 1.7,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_16_bdr_mesh_bed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.3,
          y: 0.5,
          z: 0.8,
          h: -90,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.3,
          y: -0.5,
          z: 0.8,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_16_mid_bed_bed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: -0.4,
          z: 1.05,
          h: 90,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0.4,
          z: 1.05,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_24_bdr_mesh_bed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.2,
          y: -0.5,
          z: 0.85,
          h: 90,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.2,
          y: 0.5,
          z: 0.85,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_61_bd2_mesh_bed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.5,
          y: 0,
          z: 0.7,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.5,
          y: 0,
          z: 0.7,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_8_bedrm4stuff"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.5,
          y: 0,
          z: 0.9,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.5,
          y: 0,
          z: 0.9,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_prop_exec_bed_01"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0,
          z: 1.7,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("gr_prop_gr_campbed_01"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0,
          z: 1.7,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_bed_double_08"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.6,
          y: -1.5,
          z: 1.4,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.6,
          y: -1.5,
          z: 1.4,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("imp_prop_impexp_campbed_01"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0,
          z: 1.7,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("imp_prop_impexp_sofabed_01a"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.2,
          y: 0,
          z: 1.2,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sum_mp_h_yacht_bed_01"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.8,
          y: -1.5,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: -1.5,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.8,
          y: -1.5,
          z: 2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sum_mp_h_yacht_bed_02"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.8,
          y: -1.5,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: -1.5,
          z: 2,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.8,
          y: -1.5,
          z: 2,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_int_heist_bdr_bed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.1,
          y: 0.6,
          z: 0.85,
          h: -90,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.1,
          y: -0.6,
          z: 0.85,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_beds01"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0.1,
          z: 1.5,
          h: 90,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0.1,
          z: 0.75,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_beds02"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0.1,
          z: 1.5,
          h: 90,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0.1,
          z: 0.75,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_beds03"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0.1,
          z: 1.5,
          h: 90,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0.1,
          z: 0.75,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("h4_int_sub_bed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0,
          z: 1.7,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("h4_mp_h_yacht_bed_01"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.8,
          y: -1.5,
          z: 1.7,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: -1.5,
          z: 1.7,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.8,
          y: -1.5,
          z: 1.7,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("h4_mp_h_yacht_bed_02"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: -0.8,
          y: -1.5,
          z: 1.7,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: -1.5,
          z: 1.7,
          h: 0,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.8,
          y: -1.5,
          z: 1.7,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_wheelchair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_wheelchair_01_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_direct_chair_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.05,
          z: 0.2,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_direct_chair_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.1,
          z: 0.2,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_gc_chair02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.05,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_club_officechair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ilev_p_easychair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ret_gc_chair03"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: -0.2,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_ld_farm_chair01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_torture_ch_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ilev_fh_dineeamesa"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ilev_tort_stool"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.2,
          z: 0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_ld_farm_couch01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.1,
          y: 0.8,
          z: 0,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.1,
          y: 0,
          z: 0,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.1,
          y: -0.8,
          z: 0,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_ld_farm_couch02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.1,
          y: -0.6,
          z: -0.02,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.1,
          y: 0.6,
          z: -0.02,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("p_yacht_sofa_01_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_tre_sofa_mess_a_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_tre_sofa_mess_b_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.5,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_tre_sofa_mess_c_s"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.5,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_med_bed1"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0,
          z: 1.3,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_med_bed2"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0,
          z: 1.3,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_med_emptybed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: 0,
          z: 1.1,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_med_p_sofa"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.8,
          y: -0.05,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.05,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.8,
          y: -0.05,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ilev_m_dinechair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_busstop_04"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.6,
          y: 0.6,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.6,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.6,
          y: 0.6,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_busstop_05"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.4,
          z: 0.55,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: 0.4,
          z: 0.55,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_bench_07"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 2,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_off_sofa_01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.8,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.8,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_stn_sofa3seat_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.9,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.9,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_off_sofa_02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.9,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.9,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("ex_mp_h_off_sofa_003"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.9,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.9,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("hei_heist_stn_sofa3seat_06"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.9,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.9,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("cls_sheriff_seat_1a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -0.1,
          z: 0.5,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: -0.1,
          z: 0.5,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("cls_sheriff_seat_1b"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -0.1,
          z: 0.5,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: -0.1,
          z: 0.5,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_fa_chair02"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_fh_sofa"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.2,
          y: -3.4,
          z: 0.5,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.2,
          y: -2.6,
          z: 0.5,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.2,
          y: -1.8,
          z: 0.5,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.2,
          y: -1,
          z: 0.5,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.8,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 2.6,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 3.4,
          y: -0.2,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ret_ps_chair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_ARMCHAIR",
          x: 0,
          y: -0.1,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("dge_nag_marabunta_restroom_window"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -2,
          y: -0.2,
          z: -0.8,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -2,
          y: -1.2,
          z: -0.8,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -3.4,
          y: -1,
          z: -0.8,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -4.2,
          y: -1,
          z: -0.8,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -4.9,
          y: -1,
          z: -0.8,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -5.7,
          y: 0,
          z: -0.8,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -5.7,
          y: 0.8,
          z: -0.8,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 2.1,
          y: -0.2,
          z: -0.8,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 2.1,
          y: -1.2,
          z: -0.8,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 3.4,
          y: -1,
          z: -0.8,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 4.2,
          y: -1,
          z: -0.8,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 4.9,
          y: -1,
          z: -0.8,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 5.8,
          y: 0,
          z: -0.8,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 5.8,
          y: 0.8,
          z: -0.8,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("prop_patio_lounger1b"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0,
          y: -0.3,
          z: 1.4,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("h4_prop_h4_chair_01a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: -0.03,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("h4_prop_h4_chair_02a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.2,
          y: -0.18,
          z: 0.3,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("h4_prop_h4_chair_03a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.2,
          y: -0.18,
          z: 0.15,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("h4_prop_h4_couch_01a"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.35,
          y: -0.1,
          z: 0,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.35,
          y: -0.1,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("fib_ve_chair_prop"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.03,
          z: -0.03,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_seating1"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.1,
          y: -0.7,
          z: 0.05,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.1,
          y: 0,
          z: 0.05,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.1,
          y: 0.7,
          z: 0.05,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_seating003"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.1,
          y: -0.7,
          z: 0.05,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.1,
          y: 0,
          z: 0.05,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.1,
          y: 0.7,
          z: 0.05,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_seating2"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_seating004"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_seating004"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 120,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_seating004"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 30,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_comf_chair_1"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.7,
          y: 0,
          z: 0.05,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.05,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.7,
          y: 0,
          z: 0.05,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_comf_chair_4"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.7,
          z: 0.05,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.05,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.7,
          z: 0.05,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_comf_chair_2"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 120,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_comf_chair_3"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.5,
          h: 30,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_sofa_hangout"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.2,
          y: 0.7,
          z: 0.1,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -0.6,
          z: 0.1,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: -0.6,
          z: 0.1,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.2,
          y: -0.6,
          z: 0.1,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_3_corner_sofa"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.2,
          y: -0.8,
          z: 0.05,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.2,
          y: 0,
          z: 0.05,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.2,
          y: 0.8,
          z: 0.05,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.8,
          y: 0.8,
          z: 0.05,
          h: 180,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.8,
          y: -4.2,
          z: 0.05,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 2,
          y: -4.2,
          z: 0.05,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 2.9,
          y: -3.5,
          z: 0.05,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 2.9,
          y: -2.5,
          z: 0.05,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_lobby_chairs"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -1.2,
          z: 0.05,
          h: 40,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 1.2,
          z: 0.05,
          h: 150,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sf_int1_bdr_bed"),
      seats: [
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.2,
          y: -0.4,
          z: 0.8,
          h: 90,
        },
        {
          animDict: "amb@lo_res_idles@",
          animName: "lying_face_up_lo_res_base",
          x: 0.2,
          y: 0.4,
          z: 0.8,
          h: 90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("fib_ve_chair_prop_big"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.25,
          y: 0,
          z: 0,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.6,
          y: 0,
          z: 0,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.6,
          y: 0,
          z: 0,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.25,
          y: 0,
          z: 0,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sm1_dge_church_chair_L002"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.6,
          y: 0,
          z: -0.05,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: -0.05,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.6,
          y: 0,
          z: -0.05,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sm1_dge_church_chair_CN002"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.8,
          y: 0,
          z: 0,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.8,
          y: 0,
          z: 0,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("sm1_dge_church_chair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0.6,
          z: 0,
          h: 270,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0,
          h: 270,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.6,
          z: 0,
          h: 270,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("dge_nag_post_bel1"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.3,
          z: 0,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("dge_nag_post_kor1"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.05,
          z: 0.05,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("nag_house_auction_chairs_prop"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("dge_nag_bikers_003_base_prop_sofa2"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.9,
          y: 1.5,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.9,
          y: 0.7,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.9,
          y: -0.1,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -1,
          z: 0.5,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.8,
          y: -1,
          z: 0.5,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("dge_nag_bikers_002_prop_sofa_001"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.2,
          y: -0.5,
          z: -0.05,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.1,
          y: 0.5,
          z: -0.05,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("dge_nag_bikers_002_prop_sofa_002"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.2,
          y: 1.2,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.2,
          y: 0.4,
          z: 0.5,
          h: 90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.5,
          y: -0.6,
          z: 0.5,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.3,
          y: -0.6,
          z: 0.5,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.2,
          y: -0.6,
          z: 0.5,
          h: 0,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("dge_nag_bikers_002_prop_sofa_003"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 1.2,
          y: -0.6,
          z: 0.5,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.4,
          y: -0.6,
          z: 0.5,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.4,
          y: -0.6,
          z: 0.5,
          h: 0,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.2,
          y: 0.2,
          z: 0.5,
          h: -90,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -1.2,
          y: 1.1,
          z: 0.5,
          h: -90,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("dge_nag_bikers_001_prop_sofa001"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0.6,
          y: 0.3,
          z: 0.45,
          h: 200,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: -0.6,
          y: 0.05,
          z: 0.45,
          h: 200,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("dge_nag_bikers_001_prop_sofa002"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -1.17,
          z: -0.1,
          h: -80,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.58,
          z: -0.1,
          h: -80,
        },
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 1.15,
          z: -0.1,
          h: -80,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_fa_chair01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: -0.01,
          z: 0.3,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_res_d_armchair"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.1,
          h: 180,
        },
      ],
    },
    {
      objectHash: mp.game.joaat("v_ret_fh_chair01"),
      seats: [
        {
          scenario: "PROP_HUMAN_SEAT_BENCH",
          x: 0,
          y: 0,
          z: 0.3,
          h: 180,
        },
      ],
    },
  ];

  constructor(maxDistanceToSeat = 1.7) {
    this.maxDistanceToSeat = maxDistanceToSeat;

    this.targetSeat = null;
    this.isSeating = false;
    this.date = Date.now();

    mp.events.add("render", this._render.bind(this));
    mp.keys.bind(0x47, false, this._onEkeyPressed.bind(this));
  }

  get player() {
    return mp.players.local;
  }

  isPlayerEligibleToSeat() {
    return !this.player.isInAnyVehicle(true) && !this.player.isInAir() && !this.player.isInWater();
  }

  getClosestSeatObjectDataToPlayer() {
    const objects = mp.game.object.getAllInRange(this.player.position, this.maxDistanceToSeat, true, true);
    if (!objects || !Array.isArray(objects) || objects.length === 0) return null;

    const validSeatObjects = objects.filter((object) => {
      const objectHash = object[0];
      return SeatSystem.SEAT_DATA.some((seat) => seat.objectHash === objectHash);
    });

    if (!validSeatObjects || !Array.isArray(validSeatObjects) || validSeatObjects.length === 0) return null;

    const closestSeatObject = validSeatObjects[0];
    const closestObjectSeatsData = this.getSeatsDataByModel(closestSeatObject[0]);

    return {
      objectModel: closestSeatObject[0],
      objectPosition: closestSeatObject[1],
      objectRotation: closestSeatObject[2],
      seatData: closestObjectSeatsData,
    };
  }

  getClosestSeatToPlayer() {
    const seatObjectData = this.getClosestSeatObjectDataToPlayer();
    if (!seatObjectData) return null;

    let closestSeat = null;
    let closestSeatData = null;
    let closestDistance = Infinity;

    for (const seat of seatObjectData.seatData.seats) {
      const offsetedPosition = mp.game.object.getObjectOffsetFromCoords(
        seatObjectData.objectPosition.x,
        seatObjectData.objectPosition.y,
        seatObjectData.objectPosition.z,
        seatObjectData.objectRotation.z,
        seat.x,
        seat.y,
        seat.z
      );

      const distToPlayer = mp.game.system.vdist(
        offsetedPosition.x,
        offsetedPosition.y,
        offsetedPosition.z,
        this.player.position.x,
        this.player.position.y,
        this.player.position.z
      );

      if (distToPlayer < closestDistance) {
        const closestPlayers = mp.players.getClosest(offsetedPosition, 1).filter((player) => player !== this.player);
        if (closestPlayers.length > 0) {
            if (seat.animDict && seat.animName) {
                if (closestPlayers[0].isPlayingAnim(seat.animDict, seat.animName, 3)) continue;
            } else if (seat.scenario) {
                if (closestPlayers[0].isUsingScenario(seat.scenario)) continue;
            }
        }
        if (seatDisabled) continue

        closestSeat = offsetedPosition;
        closestSeatData = seat;
        closestDistance = distToPlayer;
      }
    }

    if(!closestSeat || !closestSeatData) return null;

    return {
      position: closestSeat,
      heading: seatObjectData.objectRotation.z + closestSeatData.h,
      seatData: closestSeatData,
      seatIndex: seatObjectData.seatData.seats.indexOf(closestSeatData),
    };
  }

  getSeatsDataByModel(objectModel) {
    return SeatSystem.SEAT_DATA.find((seat) => seat.objectHash === objectModel);
  }

  _render() {
    if (!this.isPlayerEligibleToSeat()) return;
    const closestSeat = this.getClosestSeatToPlayer();

    if (
      Math.abs(closestSeat?.position.x - this.targetSeat?.position.x) > 1e-5 ||
      Math.abs(closestSeat?.position.y - this.targetSeat?.position.y) > 1e-5 ||
      Math.abs(closestSeat?.position.z - this.targetSeat?.position.z) > 1e-5 ||
      (!this.targetSeat && closestSeat) || (!closestSeat && this.targetSeat)
    ) {
      this.targetSeat = closestSeat;

      if (this.targetSeat) {
        mp.events.call("promptSecondary.show", "Використовуй <span>G</span> щоб сісти");
      } else {
        mp.events.call("promptSecondary.hide");
      }
    }

    if (this.targetSeat) {
      mp.game.graphics.drawText("x", [this.targetSeat.position.x, this.targetSeat.position.y, this.targetSeat.position.z], {
        font: 4,
        color: [255, 255, 255, 255],
        scale: [0.3, 0.3],
        outline: true,
      });
    }
  }

  async _onEkeyPressed() {
    const closestSeat = this.targetSeat;
    if (!closestSeat) return;
    if (Date.now() - this.date < 3000) return;
    this.date = Date.now();

    if (this.isSeating) {
      this.player.clearTasks();
      this.isSeating = false;
    } else {
      mp.events.call("promptSecondary.hide");
      this.isSeating = true;
      mp.events.callRemote("executeBattlePassDailyTask", JSON.stringify({ progress: 1, task: 149 })) 

      if (closestSeat.seatData.scenario) {
        this.player.taskStartScenarioAtPosition(
          closestSeat.seatData.scenario,
          closestSeat.position.x,
          closestSeat.position.y,
          closestSeat.position.z,
          closestSeat.heading,
          0,
          true,
          true
        );
      } else if (closestSeat.seatData.animDict && closestSeat.seatData.animName) {
        if (!mp.game.streaming.hasAnimDictLoaded(closestSeat.seatData.animDict)) {
          mp.game.streaming.requestAnimDict(closestSeat.seatData.animDict);
          do await mp.game.waitAsync(10);
          while (!mp.game.streaming.hasAnimDictLoaded(closestSeat.seatData.animDict));
        }
        this.player.setCoordsNoOffset(closestSeat.position.x, closestSeat.position.y, closestSeat.position.z, true, true, true);
        this.player.setHeading(closestSeat.heading);
        this.player.taskPlayAnimAdvanced(
          closestSeat.seatData.animDict,
          closestSeat.seatData.animName,
          closestSeat.position.x,
          closestSeat.position.y,
          closestSeat.position.z,
          0,
          0,
          closestSeat.heading,
          8,
          -8,
          -1,
          513,
          0,
          0,
          0
        );
      }
    }
  }
}

new SeatSystem();


}; a; }